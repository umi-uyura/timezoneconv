/**
 * Modules in this bundle
 * @license
 * 
 * timezoneconv:
 *   license: MIT
 *   author: Umi Uyura
 *   version: 0.1.0
 * 
 * inherits:
 *   license: ISC
 *   maintainers: isaacs <i@izs.me>
 *   version: 2.0.1
 * 
 * jstimezonedetect:
 *   license: MIT
 *   author: Jon Nylander
 *   maintainers: benng <me@benng.me>
 *   homepage: https://bitbucket.org/pellepim/jstimezonedetect#readme
 *   version: 1.0.5
 * 
 * material-ui:
 *   license: MIT
 *   author: Call-em-all Engineering Team
 *   maintainers: callemall <engineering@call-em-all.com>, hai-cea <hai@call-em-all.com>, jtollerene <jtollerene@gmail.com>, mmrtnz <muhammad_martinez@yahoo.com>
 *   homepage: http://material-ui.com/
 *   version: 0.11.0
 * 
 * moment:
 *   license: MIT
 *   author: Iskren Ivov Chernev <iskren.chernev@gmail.com>
 *   maintainers: timrwood <washwithcare@gmail.com>, ichernev <iskren.chernev@gmail.com>
 *   contributors: Tim Wood <washwithcare@gmail.com>, Rocky Meza, Matt Johnson <mj1856@hotmail.com>, Isaac Cambron <isaac@isaaccambron.com>, Andre Polykanine <andre@oire.org>
 *   homepage: http://momentjs.com
 *   version: 2.10.6
 * 
 * moment-timezone:
 *   license: MIT
 *   author: Tim Wood <washwithcare@gmail.com>
 *   maintainers: timrwood <washwithcare@gmail.com>, ichernev <iskren.chernev@gmail.com>
 *   homepage: http://momentjs.com/timezone/
 *   version: 0.4.0
 * 
 * process:
 *   license: MIT
 *   author: Roman Shtylman <shtylman@gmail.com>
 *   maintainers: coolaj86 <coolaj86@gmail.com>, defunctzombie <shtylman@gmail.com>
 *   homepage: https://github.com/shtylman/node-process#readme
 *   version: 0.11.2
 * 
 * react:
 *   license: BSD-3-Clause
 *   maintainers: zpao <paul@oshannessy.com>, jeffmo <jeff@anafx.com>, sebmarkbage <sebastian@calyptus.eu>, spicyj <ben@benalpert.com>
 *   homepage: https://github.com/facebook/react/tree/master/npm-react
 *   version: 0.13.3
 * 
 * react-draggable2:
 *   license: MIT
 *   author: Matt Zabriskie
 *   maintainers: mikepb <michael@mikepb.com>
 *   contributors: Michael Phan-Ba <michael@mikepb.com>
 *   homepage: https://github.com/mikepb/react-draggable
 *   version: 0.5.1
 * 
 * react-tap-event-plugin:
 *   licenses: Apache-2.0
 *   maintainers: s0meone <daniel@danielvanhoesel.nl>
 *   homepage: http://facebook.github.io/react
 *   version: 0.1.7
 * 
 * underscore:
 *   license: MIT
 *   author: Jeremy Ashkenas <jeremy@documentcloud.org>
 *   maintainers: jashkenas <jashkenas@gmail.com>
 *   homepage: http://underscorejs.org
 *   version: 1.8.3
 * 
 * util:
 *   license: MIT
 *   author: Joyent
 *   maintainers: shtylman <shtylman@gmail.com>
 *   homepage: https://github.com/defunctzombie/node-util
 *   version: 0.10.3
 * 
 * This header is generated by licensify (https://github.com/twada/licensify)
 */
(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],2:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = setTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    clearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        setTimeout(drainQueue, 0);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],3:[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],4:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./support/isBuffer":3,"_process":2,"inherits":1}],5:[function(require,module,exports){
/**
 * This script gives you the zone info key representing your device's time zone setting.
 *
 * @name jsTimezoneDetect
 * @version 1.0.5
 * @author Jon Nylander
 * @license MIT License - http://www.opensource.org/licenses/mit-license.php
 *
 * For usage and examples, visit:
 * http://pellepim.bitbucket.org/jstz/
 *
 * Copyright (c) Jon Nylander
 */

/*jslint undef: true */
/*global console, exports*/

(function(root) {
  /**
   * Namespace to hold all the code for timezone detection.
   */
  var jstz = (function () {
      'use strict';
      var HEMISPHERE_SOUTH = 's',
          
          /**
           * Gets the offset in minutes from UTC for a certain date.
           * @param {Date} date
           * @returns {Number}
           */
          get_date_offset = function (date) {
              var offset = -date.getTimezoneOffset();
              return (offset !== null ? offset : 0);
          },

          get_date = function (year, month, date) {
              var d = new Date();
              if (year !== undefined) {
                d.setFullYear(year);
              }
              d.setMonth(month);
              d.setDate(date);
              return d;
          },

          get_january_offset = function (year) {
              return get_date_offset(get_date(year, 0 ,2));
          },

          get_june_offset = function (year) {
              return get_date_offset(get_date(year, 5, 2));
          },

          /**
           * Private method.
           * Checks whether a given date is in daylight saving time.
           * If the date supplied is after august, we assume that we're checking
           * for southern hemisphere DST.
           * @param {Date} date
           * @returns {Boolean}
           */
          date_is_dst = function (date) {
              var is_southern = date.getMonth() > 7,
                  base_offset = is_southern ? get_june_offset(date.getFullYear()) : 
                                              get_january_offset(date.getFullYear()),
                  date_offset = get_date_offset(date),
                  is_west = base_offset < 0,
                  dst_offset = base_offset - date_offset;
                  
              if (!is_west && !is_southern) {
                  return dst_offset < 0;
              }

              return dst_offset !== 0;
          },

          /**
           * This function does some basic calculations to create information about
           * the user's timezone. It uses REFERENCE_YEAR as a solid year for which
           * the script has been tested rather than depend on the year set by the
           * client device.
           *
           * Returns a key that can be used to do lookups in jstz.olson.timezones.
           * eg: "720,1,2". 
           *
           * @returns {String}
           */

          lookup_key = function () {
              var january_offset = get_january_offset(),
                  june_offset = get_june_offset(),
                  diff = january_offset - june_offset;

              if (diff < 0) {
                  return january_offset + ",1";
              } else if (diff > 0) {
                  return june_offset + ",1," + HEMISPHERE_SOUTH;
              }

              return january_offset + ",0";
          },

          /**
           * Uses get_timezone_info() to formulate a key to use in the olson.timezones dictionary.
           *
           * Returns a primitive object on the format:
           * {'timezone': TimeZone, 'key' : 'the key used to find the TimeZone object'}
           *
           * @returns Object
           */
          determine = function () {
              var key = lookup_key();
              return new jstz.TimeZone(jstz.olson.timezones[key]);
          },

          /**
           * This object contains information on when daylight savings starts for
           * different timezones.
           *
           * The list is short for a reason. Often we do not have to be very specific
           * to single out the correct timezone. But when we do, this list comes in
           * handy.
           *
           * Each value is a date denoting when daylight savings starts for that timezone.
           */
          dst_start_for = function (tz_name) {

            var ru_pre_dst_change = new Date(2010, 6, 15, 1, 0, 0, 0), // In 2010 Russia had DST, this allows us to detect Russia :)
                dst_starts = {
                    'America/Denver': new Date(2011, 2, 13, 3, 0, 0, 0),
                    'America/Mazatlan': new Date(2011, 3, 3, 3, 0, 0, 0),
                    'America/Chicago': new Date(2011, 2, 13, 3, 0, 0, 0),
                    'America/Mexico_City': new Date(2011, 3, 3, 3, 0, 0, 0),
                    'America/Asuncion': new Date(2012, 9, 7, 3, 0, 0, 0),
                    'America/Santiago': new Date(2012, 9, 3, 3, 0, 0, 0),
                    'America/Campo_Grande': new Date(2012, 9, 21, 5, 0, 0, 0),
                    'America/Montevideo': new Date(2011, 9, 2, 3, 0, 0, 0),
                    'America/Sao_Paulo': new Date(2011, 9, 16, 5, 0, 0, 0),
                    'America/Los_Angeles': new Date(2011, 2, 13, 8, 0, 0, 0),
                    'America/Santa_Isabel': new Date(2011, 3, 5, 8, 0, 0, 0),
                    'America/Havana': new Date(2012, 2, 10, 2, 0, 0, 0),
                    'America/New_York': new Date(2012, 2, 10, 7, 0, 0, 0),
                    'Europe/Helsinki': new Date(2013, 2, 31, 5, 0, 0, 0),
                    'Pacific/Auckland': new Date(2011, 8, 26, 7, 0, 0, 0),
                    'America/Halifax': new Date(2011, 2, 13, 6, 0, 0, 0),
                    'America/Goose_Bay': new Date(2011, 2, 13, 2, 1, 0, 0),
                    'America/Miquelon': new Date(2011, 2, 13, 5, 0, 0, 0),
                    'America/Godthab': new Date(2011, 2, 27, 1, 0, 0, 0),
                    'Europe/Moscow': ru_pre_dst_change,
                    'Asia/Amman': new Date(2013, 2, 29, 1, 0, 0, 0),
                    'Asia/Beirut': new Date(2013, 2, 31, 2, 0, 0, 0),
                    'Asia/Damascus': new Date(2013, 3, 6, 2, 0, 0, 0),
                    'Asia/Jerusalem': new Date(2013, 2, 29, 5, 0, 0, 0),
                    'Asia/Yekaterinburg': ru_pre_dst_change,
                    'Asia/Omsk': ru_pre_dst_change,
                    'Asia/Krasnoyarsk': ru_pre_dst_change,
                    'Asia/Irkutsk': ru_pre_dst_change,
                    'Asia/Yakutsk': ru_pre_dst_change,
                    'Asia/Vladivostok': ru_pre_dst_change,
                    'Asia/Baku': new Date(2013, 2, 31, 4, 0, 0),
                    'Asia/Yerevan': new Date(2013, 2, 31, 3, 0, 0),
                    'Asia/Kamchatka': ru_pre_dst_change,
                    'Asia/Gaza': new Date(2010, 2, 27, 4, 0, 0),
                    'Africa/Cairo': new Date(2010, 4, 1, 3, 0, 0),
                    'Europe/Minsk': ru_pre_dst_change,
                    'Pacific/Apia': new Date(2010, 10, 1, 1, 0, 0, 0),
                    'Pacific/Fiji': new Date(2010, 11, 1, 0, 0, 0),
                    'Australia/Perth': new Date(2008, 10, 1, 1, 0, 0, 0)
                };

              return dst_starts[tz_name];
          };

      return {
          determine: determine,
          date_is_dst: date_is_dst,
          dst_start_for: dst_start_for 
      };
  }());

  /**
   * Simple object to perform ambiguity check and to return name of time zone.
   */
  jstz.TimeZone = function (tz_name) {
      'use strict';
        /**
         * The keys in this object are timezones that we know may be ambiguous after
         * a preliminary scan through the olson_tz object.
         *
         * The array of timezones to compare must be in the order that daylight savings
         * starts for the regions.
         */
      var AMBIGUITIES = {
              'America/Denver':       ['America/Denver', 'America/Mazatlan'],
              'America/Chicago':      ['America/Chicago', 'America/Mexico_City'],
              'America/Santiago':     ['America/Santiago', 'America/Asuncion', 'America/Campo_Grande'],
              'America/Montevideo':   ['America/Montevideo', 'America/Sao_Paulo'],
              'Asia/Beirut':          ['Asia/Amman', 'Asia/Jerusalem', 'Asia/Beirut', 'Europe/Helsinki','Asia/Damascus'],
              'Pacific/Auckland':     ['Pacific/Auckland', 'Pacific/Fiji'],
              'America/Los_Angeles':  ['America/Los_Angeles', 'America/Santa_Isabel'],
              'America/New_York':     ['America/Havana', 'America/New_York'],
              'America/Halifax':      ['America/Goose_Bay', 'America/Halifax'],
              'America/Godthab':      ['America/Miquelon', 'America/Godthab'],
              'Asia/Dubai':           ['Europe/Moscow'],
              'Asia/Dhaka':           ['Asia/Yekaterinburg'],
              'Asia/Jakarta':         ['Asia/Omsk'],
              'Asia/Shanghai':        ['Asia/Krasnoyarsk', 'Australia/Perth'],
              'Asia/Tokyo':           ['Asia/Irkutsk'],
              'Australia/Brisbane':   ['Asia/Yakutsk'],
              'Pacific/Noumea':       ['Asia/Vladivostok'],
              'Pacific/Tarawa':       ['Asia/Kamchatka', 'Pacific/Fiji'],
              'Pacific/Tongatapu':    ['Pacific/Apia'],
              'Asia/Baghdad':         ['Europe/Minsk'],
              'Asia/Baku':            ['Asia/Yerevan','Asia/Baku'],
              'Africa/Johannesburg':  ['Asia/Gaza', 'Africa/Cairo']
          },

          timezone_name = tz_name,
          
          /**
           * Checks if a timezone has possible ambiguities. I.e timezones that are similar.
           *
           * For example, if the preliminary scan determines that we're in America/Denver.
           * We double check here that we're really there and not in America/Mazatlan.
           *
           * This is done by checking known dates for when daylight savings start for different
           * timezones during 2010 and 2011.
           */
          ambiguity_check = function () {
              var ambiguity_list = AMBIGUITIES[timezone_name],
                  length = ambiguity_list.length,
                  i = 0,
                  tz = ambiguity_list[0];

              for (; i < length; i += 1) {
                  tz = ambiguity_list[i];

                  if (jstz.date_is_dst(jstz.dst_start_for(tz))) {
                      timezone_name = tz;
                      return;
                  }
              }
          },

          /**
           * Checks if it is possible that the timezone is ambiguous.
           */
          is_ambiguous = function () {
              return typeof (AMBIGUITIES[timezone_name]) !== 'undefined';
          };

      if (is_ambiguous()) {
          ambiguity_check();
      }

      return {
          name: function () {
              return timezone_name;
          }
      };
  };

  jstz.olson = {};

  /*
   * The keys in this dictionary are comma separated as such:
   *
   * First the offset compared to UTC time in minutes.
   *
   * Then a flag which is 0 if the timezone does not take daylight savings into account and 1 if it
   * does.
   *
   * Thirdly an optional 's' signifies that the timezone is in the southern hemisphere,
   * only interesting for timezones with DST.
   *
   * The mapped arrays is used for constructing the jstz.TimeZone object from within
   * jstz.determine_timezone();
   */
  jstz.olson.timezones = {
      '-720,0'   : 'Pacific/Majuro',
      '-660,0'   : 'Pacific/Pago_Pago',
      '-600,1'   : 'America/Adak',
      '-600,0'   : 'Pacific/Honolulu',
      '-570,0'   : 'Pacific/Marquesas',
      '-540,0'   : 'Pacific/Gambier',
      '-540,1'   : 'America/Anchorage',
      '-480,1'   : 'America/Los_Angeles',
      '-480,0'   : 'Pacific/Pitcairn',
      '-420,0'   : 'America/Phoenix',
      '-420,1'   : 'America/Denver',
      '-360,0'   : 'America/Guatemala',
      '-360,1'   : 'America/Chicago',
      '-360,1,s' : 'Pacific/Easter',
      '-300,0'   : 'America/Bogota',
      '-300,1'   : 'America/New_York',
      '-270,0'   : 'America/Caracas',
      '-240,1'   : 'America/Halifax',
      '-240,0'   : 'America/Santo_Domingo',
      '-240,1,s' : 'America/Santiago',
      '-210,1'   : 'America/St_Johns',
      '-180,1'   : 'America/Godthab',
      '-180,0'   : 'America/Argentina/Buenos_Aires',
      '-180,1,s' : 'America/Montevideo',
      '-120,0'   : 'America/Noronha',
      '-120,1'   : 'America/Noronha',
      '-60,1'    : 'Atlantic/Azores',
      '-60,0'    : 'Atlantic/Cape_Verde',
      '0,0'      : 'UTC',
      '0,1'      : 'Europe/London',
      '60,1'     : 'Europe/Berlin',
      '60,0'     : 'Africa/Lagos',
      '60,1,s'   : 'Africa/Windhoek',
      '120,1'    : 'Asia/Beirut',
      '120,0'    : 'Africa/Johannesburg',
      '180,0'    : 'Asia/Baghdad',
      '180,1'    : 'Europe/Moscow',
      '210,1'    : 'Asia/Tehran',
      '240,0'    : 'Asia/Dubai',
      '240,1'    : 'Asia/Baku',
      '270,0'    : 'Asia/Kabul',
      '300,1'    : 'Asia/Yekaterinburg',
      '300,0'    : 'Asia/Karachi',
      '330,0'    : 'Asia/Kolkata',
      '345,0'    : 'Asia/Kathmandu',
      '360,0'    : 'Asia/Dhaka',
      '360,1'    : 'Asia/Omsk',
      '390,0'    : 'Asia/Rangoon',
      '420,1'    : 'Asia/Krasnoyarsk',
      '420,0'    : 'Asia/Jakarta',
      '480,0'    : 'Asia/Shanghai',
      '480,1'    : 'Asia/Irkutsk',
      '525,0'    : 'Australia/Eucla',
      '525,1,s'  : 'Australia/Eucla',
      '540,1'    : 'Asia/Yakutsk',
      '540,0'    : 'Asia/Tokyo',
      '570,0'    : 'Australia/Darwin',
      '570,1,s'  : 'Australia/Adelaide',
      '600,0'    : 'Australia/Brisbane',
      '600,1'    : 'Asia/Vladivostok',
      '600,1,s'  : 'Australia/Sydney',
      '630,1,s'  : 'Australia/Lord_Howe',
      '660,1'    : 'Asia/Kamchatka',
      '660,0'    : 'Pacific/Noumea',
      '690,0'    : 'Pacific/Norfolk',
      '720,1,s'  : 'Pacific/Auckland',
      '720,0'    : 'Pacific/Tarawa',
      '765,1,s'  : 'Pacific/Chatham',
      '780,0'    : 'Pacific/Tongatapu',
      '780,1,s'  : 'Pacific/Apia',
      '840,0'    : 'Pacific/Kiritimati'
  };

  if (typeof exports !== 'undefined') {
    exports.jstz = jstz;
  } else {
    root.jstz = jstz;
  }
})(this);


},{}],6:[function(require,module,exports){
(function (process){
'use strict';

var React = require('react');
var StylePropable = require('./mixins/style-propable');
var Typography = require('./styles/typography');
var IconButton = require('./icon-button');
var NavigationMenu = require('./svg-icons/navigation/menu');
var Paper = require('./paper');

var AppBar = React.createClass({
  displayName: 'AppBar',

  mixins: [StylePropable],

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  propTypes: {
    onLeftIconButtonTouchTap: React.PropTypes.func,
    onRightIconButtonTouchTap: React.PropTypes.func,
    showMenuIconButton: React.PropTypes.bool,
    style: React.PropTypes.object,
    iconClassNameLeft: React.PropTypes.string,
    iconClassNameRight: React.PropTypes.string,
    iconElementLeft: React.PropTypes.element,
    iconElementRight: React.PropTypes.element,
    iconStyleRight: React.PropTypes.object,
    title: React.PropTypes.node,
    zDepth: React.PropTypes.number
  },

  getDefaultProps: function getDefaultProps() {
    return {
      showMenuIconButton: true,
      title: '',
      zDepth: 1
    };
  },

  componentDidMount: function componentDidMount() {
    if (process.env.NODE_ENV !== 'production') {
      if (this.props.iconElementLeft && this.props.iconClassNameLeft) {
        console.warn('Properties iconClassNameLeft and iconElementLeft cannot be simultaneously ' + 'defined. Please use one or the other.');
      }

      if (this.props.iconElementRight && this.props.iconClassNameRight) {
        console.warn('Properties iconClassNameRight and iconElementRight cannot be simultaneously ' + 'defined. Please use one or the other.');
      }
    }
  },

  getStyles: function getStyles() {
    var spacing = this.context.muiTheme.spacing;
    var themeVariables = this.context.muiTheme.component.appBar;
    var iconButtonSize = this.context.muiTheme.component.button.iconButtonSize;
    var flatButtonSize = 36;
    var styles = {
      root: {
        zIndex: 5,
        width: '100%',
        display: '-webkit-box; display: -webkit-flex; display: flex',
        minHeight: themeVariables.height,
        backgroundColor: themeVariables.color,
        paddingLeft: spacing.desktopGutter,
        paddingRight: spacing.desktopGutter
      },
      title: {
        whiteSpace: 'nowrap',
        overflow: 'hidden',
        textOverflow: 'ellipsis',
        margin: 0,
        paddingTop: 0,
        letterSpacing: 0,
        fontSize: 24,
        fontWeight: Typography.fontWeightNormal,
        color: themeVariables.textColor,
        lineHeight: themeVariables.height + 'px'
      },
      mainElement: {
        boxFlex: 1,
        flex: '1'
      },
      iconButton: {
        style: {
          marginTop: (themeVariables.height - iconButtonSize) / 2,
          marginRight: 8,
          marginLeft: -16
        },
        iconStyle: {
          fill: themeVariables.textColor,
          color: themeVariables.textColor
        }
      },
      flatButton: {
        color: themeVariables.textColor,
        backgroundColor: 'transparent',
        marginTop: (iconButtonSize - flatButtonSize) / 2 + 2
      }
    };

    return styles;
  },

  render: function render() {
    var props = this.props;
    var menuElementLeft = undefined;
    var menuElementRight = undefined;
    var styles = this.getStyles();
    var title = props.title;
    var iconRightStyle = this.mergeAndPrefix(styles.iconButton.style, {
      marginRight: -16,
      marginLeft: 'auto'
    }, props.iconStyleRight);
    var titleElement = undefined;

    if (title) {
      // If the title is a string, wrap in an h1 tag.
      // If not, just use it as a node.
      titleElement = typeof title === 'string' || title instanceof String ? React.createElement(
        'h1',
        { style: this.mergeAndPrefix(styles.title, styles.mainElement) },
        title
      ) : React.createElement(
        'div',
        { style: this.mergeAndPrefix(styles.mainElement) },
        title
      );
    }

    if (props.showMenuIconButton) {
      var iconElementLeft = props.iconElementLeft;

      if (iconElementLeft) {
        switch (iconElementLeft.type.displayName) {
          case 'IconButton':
            iconElementLeft = React.cloneElement(iconElementLeft, {
              iconStyle: this.mergeAndPrefix(styles.iconButton.iconStyle)
            });
            break;
        }

        menuElementLeft = React.createElement(
          'div',
          { style: styles.iconButton.style },
          iconElementLeft
        );
      } else {
        var child = props.iconClassNameLeft ? '' : React.createElement(NavigationMenu, { style: this.mergeAndPrefix(styles.iconButton.iconStyle) });
        menuElementLeft = React.createElement(
          IconButton,
          {
            style: this.mergeAndPrefix(styles.iconButton.style),
            iconStyle: this.mergeAndPrefix(styles.iconButton.iconStyle),
            iconClassName: props.iconClassNameLeft,
            onTouchTap: this._onLeftIconButtonTouchTap },
          child
        );
      }
    }

    if (props.iconElementRight) {
      var iconElementRight = props.iconElementRight;

      switch (iconElementRight.type.displayName) {
        case 'IconButton':
          iconElementRight = React.cloneElement(iconElementRight, {
            iconStyle: this.mergeAndPrefix(styles.iconButton.iconStyle)
          });
          break;

        case 'FlatButton':
          iconElementRight = React.cloneElement(iconElementRight, {
            style: this.mergeStyles(styles.flatButton, iconElementRight.props.style)
          });
          break;
      }

      menuElementRight = React.createElement(
        'div',
        { style: iconRightStyle },
        iconElementRight
      );
    } else if (props.iconClassNameRight) {
      menuElementRight = React.createElement(IconButton, {
        style: iconRightStyle,
        iconStyle: this.mergeAndPrefix(styles.iconButton.iconStyle),
        iconClassName: props.iconClassNameRight,
        onTouchTap: this._onRightIconButtonTouchTap });
    }

    return React.createElement(
      Paper,
      {
        rounded: false,
        className: props.className,
        style: this.mergeAndPrefix(styles.root, props.style),
        zDepth: props.zDepth },
      menuElementLeft,
      titleElement,
      menuElementRight,
      props.children
    );
  },

  _onLeftIconButtonTouchTap: function _onLeftIconButtonTouchTap(event) {
    if (this.props.onLeftIconButtonTouchTap) {
      this.props.onLeftIconButtonTouchTap(event);
    }
  },

  _onRightIconButtonTouchTap: function _onRightIconButtonTouchTap(event) {
    if (this.props.onRightIconButtonTouchTap) {
      this.props.onRightIconButtonTouchTap(event);
    }
  }

});

module.exports = AppBar;
}).call(this,require('_process'))
},{"./icon-button":39,"./mixins/style-propable":57,"./paper":61,"./styles/typography":81,"./svg-icons/navigation/menu":91,"_process":2,"react":326}],7:[function(require,module,exports){
'use strict';

var React = require('react');
var StylePropable = require('./mixins/style-propable');

var AppCanvas = React.createClass({
  displayName: 'AppCanvas',

  mixins: [StylePropable],

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  render: function render() {
    var _this = this;

    var styles = {
      height: '100%',
      backgroundColor: this.context.muiTheme.palette.canvasColor,
      WebkitFontSmoothing: 'antialiased'
    };

    var newChildren = React.Children.map(this.props.children, function (currentChild) {
      if (!currentChild) {
        // If undefined, skip it
        return null;
      }

      switch (currentChild.type.displayName) {
        case 'AppBar':
          return React.cloneElement(currentChild, {
            style: _this.mergeStyles({
              position: 'fixed'
            }, currentChild.props.style)
          });
        default:
          return currentChild;
      }
    }, this);

    return React.createElement(
      'div',
      { style: styles },
      newChildren
    );
  }

});

module.exports = AppCanvas;
},{"./mixins/style-propable":57,"react":326}],8:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react/addons');
var StylePropable = require('./mixins/style-propable');
var Colors = require('./styles/colors');

var Avatar = React.createClass({
  displayName: 'Avatar',

  mixins: [StylePropable],

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  propTypes: {
    backgroundColor: React.PropTypes.string,
    color: React.PropTypes.string,
    icon: React.PropTypes.element,
    size: React.PropTypes.number,
    src: React.PropTypes.string,
    style: React.PropTypes.object
  },

  getDefaultProps: function getDefaultProps() {
    return {
      backgroundColor: Colors.grey400,
      color: Colors.white,
      size: 40
    };
  },

  render: function render() {
    var _props = this.props;
    var backgroundColor = _props.backgroundColor;
    var color = _props.color;
    var icon = _props.icon;
    var size = _props.size;
    var src = _props.src;
    var style = _props.style;

    var other = _objectWithoutProperties(_props, ['backgroundColor', 'color', 'icon', 'size', 'src', 'style']);

    var styles = {
      root: {
        height: size,
        width: size,
        userSelect: 'none',
        borderRadius: '50%',
        display: 'inline-block'
      }
    };

    if (src) {
      var borderColor = this.context.muiTheme.component.avatar.borderColor;

      if (borderColor) {
        styles.root = this.mergeStyles(styles.root, {
          height: size - 2,
          width: size - 2,
          border: 'solid 1px ' + borderColor
        });
      }

      return React.createElement('img', _extends({}, other, { src: src, style: this.mergeAndPrefix(styles.root, style) }));
    } else {
      styles.root = this.mergeStyles(styles.root, {
        backgroundColor: backgroundColor,
        textAlign: 'center',
        lineHeight: size + 'px',
        fontSize: size / 2 + 4,
        color: color
      });

      var styleIcon = {
        margin: 8
      };

      var iconElement = icon ? React.cloneElement(icon, {
        color: color,
        style: this.mergeStyles(styleIcon, icon.props.style)
      }) : null;

      return React.createElement(
        'div',
        _extends({}, other, { style: this.mergeAndPrefix(styles.root, style) }),
        iconElement,
        this.props.children
      );
    }
  }
});

module.exports = Avatar;
},{"./mixins/style-propable":57,"./styles/colors":74,"react/addons":154}],9:[function(require,module,exports){
'use strict';

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react');
var StylePropable = require('./mixins/style-propable');
var AutoPrefix = require('./styles/auto-prefix');

/**
 *  BeforeAfterWrapper
 *    An alternative for the ::before and ::after css pseudo-elements for
 *    components whose styles are defined in javascript instead of css.
 *
 *  Usage: For the element that we want to apply before and after elements to,
 *    wrap its children with BeforeAfterWrapper. For example:
 *
 *                                            <Paper>
 *  <Paper>                                     <div> // See notice
 *    <BeforeAfterWrapper>        renders         <div/> // before element
 *      [children of paper]       ------>         [children of paper]
 *    </BeforeAfterWrapper>                       <div/> // after element
 *  </Paper>                                    </div>
 *                                            </Paper>
 *
 *  Notice: Notice that this div bundles together our elements. If the element
 *    that we want to apply before and after elements is a HTML tag (i.e. a
 *    div, p, or button tag), we can avoid this extra nesting by passing using
 *    the BeforeAfterWrapper in place of said tag like so:
 *
 *  <p>
 *    <BeforeAfterWrapper>   do this instead   <BeforeAfterWrapper elementType='p'>
 *      [children of p]          ------>         [children of p]
 *    </BeforeAfterWrapper>                    </BeforeAfterWrapper>
 *  </p>
 *
 *  BeforeAfterWrapper features spread functionality. This means that we can
 *  pass HTML tag properties directly into the BeforeAfterWrapper tag.
 *
 *  When using BeforeAfterWrapper, ensure that the parent of the beforeElement
 *  and afterElement have a defined style position.
 */

var BeforeAfterWrapper = React.createClass({
  displayName: 'BeforeAfterWrapper',

  mixins: [StylePropable],

  propTypes: {
    beforeStyle: React.PropTypes.object,
    afterStyle: React.PropTypes.object,
    beforeElementType: React.PropTypes.string,
    afterElementType: React.PropTypes.string,
    elementType: React.PropTypes.string
  },

  getDefaultProps: function getDefaultProps() {
    return {
      beforeElementType: 'div',
      afterElementType: 'div',
      elementType: 'div'
    };
  },

  render: function render() {
    var _props = this.props;
    var beforeStyle = _props.beforeStyle;
    var afterStyle = _props.afterStyle;
    var beforeElementType = _props.beforeElementType;
    var afterElementType = _props.afterElementType;
    var elementType = _props.elementType;

    var other = _objectWithoutProperties(_props, ['beforeStyle', 'afterStyle', 'beforeElementType', 'afterElementType', 'elementType']);

    var beforeElement = undefined,
        afterElement = undefined;

    beforeStyle = AutoPrefix.all({ boxSizing: 'border-box' });
    afterStyle = AutoPrefix.all({ boxSizing: 'border-box' });

    if (this.props.beforeStyle) beforeElement = React.createElement(this.props.beforeElementType, {
      style: this.mergeAndPrefix(beforeStyle, this.props.beforeStyle),
      key: "::before"
    });
    if (this.props.afterStyle) afterElement = React.createElement(this.props.afterElementType, {
      style: this.mergeAndPrefix(afterStyle, this.props.afterStyle),
      key: "::after"
    });

    var children = [beforeElement, this.props.children, afterElement];

    var props = other;
    props.style = this.props.style;

    return React.createElement(this.props.elementType, props, children);
  }

});

module.exports = BeforeAfterWrapper;
},{"./mixins/style-propable":57,"./styles/auto-prefix":73,"react":326}],10:[function(require,module,exports){
'use strict';

var React = require('react/addons');
var PureRenderMixin = React.addons.PureRenderMixin;
var Styles = require('../utils/styles');

var FlatButtonLabel = React.createClass({
  displayName: 'FlatButtonLabel',

  mixins: [PureRenderMixin],

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  propTypes: {
    label: React.PropTypes.node,
    style: React.PropTypes.object
  },

  getContextProps: function getContextProps() {
    var theme = this.context.muiTheme;

    return {
      spacingDesktopGutterLess: theme.spacing.desktopGutterLess
    };
  },

  render: function render() {
    var _props = this.props;
    var label = _props.label;
    var style = _props.style;

    var contextProps = this.getContextProps();

    var mergedRootStyles = Styles.mergeAndPrefix({
      position: 'relative',
      padding: '0 ' + contextProps.spacingDesktopGutterLess + 'px'
    }, style);

    return React.createElement(
      'span',
      { style: mergedRootStyles },
      label
    );
  }

});

module.exports = FlatButtonLabel;
},{"../utils/styles":141,"react/addons":154}],11:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');
var StylePropable = require('../mixins/style-propable');

var CardActions = React.createClass({
  displayName: 'CardActions',

  mixins: [StylePropable],

  getStyles: function getStyles() {
    return {
      root: {
        padding: 8,
        position: 'relative'
      }
    };
  },

  propTypes: {
    expandable: React.PropTypes.bool,
    showExpandableButton: React.PropTypes.bool
  },

  render: function render() {
    var styles = this.getStyles();

    var children = React.Children.map(this.props.children, function (child) {
      return React.cloneElement(child, {
        style: { marginRight: 8 }
      });
    });

    var mergedStyles = this.mergeAndPrefix(styles.root, this.props.style);

    return React.createElement(
      'div',
      _extends({}, this.props, { style: mergedStyles }),
      children
    );
  }
});

module.exports = CardActions;
},{"../mixins/style-propable":57,"react":326}],12:[function(require,module,exports){
'use strict';

var React = require('react');
var Extend = require('../utils/extend');
var OpenIcon = require('../svg-icons/hardware/keyboard-arrow-up');
var CloseIcon = require('../svg-icons/hardware/keyboard-arrow-down');
var IconButton = require('../icon-button');
var StylePropable = require('../mixins/style-propable');

var CardExpandable = React.createClass({
  displayName: 'CardExpandable',

  mixins: [StylePropable],

  getStyles: function getStyles() {
    var contextProps = this.getContextProps();

    var directionStyle = contextProps.isRtl ? {
      left: 4
    } : {
      right: 4
    };

    return {
      root: Extend({
        top: 0,
        bottom: 0,
        margin: 'auto',
        position: 'absolute'
      }, directionStyle)
    };
  },

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  propTypes: {
    onExpanding: React.PropTypes.func.isRequired,
    expanded: React.PropTypes.bool
  },

  getContextProps: function getContextProps() {
    var theme = this.context.muiTheme;

    return {
      isRtl: theme.isRtl
    };
  },

  _onExpanding: function _onExpanding() {
    if (this.props.expanded === true) this.props.onExpanding(false);else this.props.onExpanding(true);
  },

  render: function render() {
    var styles = this.getStyles();

    var expandable = undefined;
    if (this.props.expanded === true) expandable = React.createElement(OpenIcon, null);else expandable = React.createElement(CloseIcon, null);

    var mergedStyles = this.mergeAndPrefix(styles.root, this.props.style);

    var expandableBtn = React.createElement(
      IconButton,
      {
        style: mergedStyles,
        onClick: this._onExpanding },
      expandable
    );

    return expandableBtn;
  }
});

module.exports = CardExpandable;
},{"../icon-button":39,"../mixins/style-propable":57,"../svg-icons/hardware/keyboard-arrow-down":83,"../svg-icons/hardware/keyboard-arrow-up":84,"../utils/extend":134,"react":326}],13:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');
var Styles = require('../styles');
var Avatar = require('../avatar');
var StylePropable = require('../mixins/style-propable');

var CardHeader = React.createClass({
  displayName: 'CardHeader',

  mixins: [StylePropable],

  propTypes: {
    title: React.PropTypes.string,
    titleColor: React.PropTypes.string,
    titleStyle: React.PropTypes.object,
    subtitle: React.PropTypes.string,
    subtitleColor: React.PropTypes.string,
    subtitleStyle: React.PropTypes.object,
    textStyle: React.PropTypes.object,
    expandable: React.PropTypes.bool,
    showExpandableButton: React.PropTypes.bool
  },

  getDefaultProps: function getDefaultProps() {
    return {
      titleColor: Styles.Colors.darkBlack,
      subtitleColor: Styles.Colors.lightBlack
    };
  },

  getStyles: function getStyles() {
    return {
      root: {
        height: 72,
        padding: 16,
        fontWeight: Styles.Typography.fontWeightMedium,
        boxSizing: 'border-box',
        position: 'relative'
      },
      text: {
        display: 'inline-block',
        verticalAlign: 'top'
      },
      avatar: {
        marginRight: 16
      },
      title: {
        color: this.props.titleColor,
        display: 'block',
        fontSize: 15
      },
      subtitle: {
        color: this.props.subtitleColor,
        display: 'block',
        fontSize: 14
      }
    };
  },

  render: function render() {
    var styles = this.getStyles();
    var rootStyle = this.mergeAndPrefix(styles.root, this.props.style);
    var textStyle = this.mergeAndPrefix(styles.text, this.props.textStyle);
    var titleStyle = this.mergeAndPrefix(styles.title, this.props.titleStyle);
    var subtitleStyle = this.mergeAndPrefix(styles.subtitle, this.props.subtitleStyle);

    var avatar = this.props.avatar;
    if (React.isValidElement(this.props.avatar)) {
      var avatarMergedStyle = this.mergeStyles(styles.avatar, avatar.props.style);
      avatar = React.cloneElement(avatar, { style: avatarMergedStyle });
    } else avatar = React.createElement(Avatar, { src: this.props.avatar, style: styles.avatar });

    return React.createElement(
      'div',
      _extends({}, this.props, { style: rootStyle }),
      avatar,
      React.createElement(
        'div',
        { style: textStyle },
        React.createElement(
          'span',
          { style: titleStyle },
          this.props.title
        ),
        React.createElement(
          'span',
          { style: subtitleStyle },
          this.props.subtitle
        )
      ),
      this.props.children
    );
  }
});

module.exports = CardHeader;
},{"../avatar":8,"../mixins/style-propable":57,"../styles":75,"react":326}],14:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');
var Styles = require('../styles');
var StylePropable = require('../mixins/style-propable');

var CardMedia = React.createClass({
  displayName: 'CardMedia',

  mixins: [StylePropable],

  propTypes: {
    overlay: React.PropTypes.node,
    style: React.PropTypes.object,
    overlayStyle: React.PropTypes.object,
    overlayContainerStyle: React.PropTypes.object,
    overlayContentStyle: React.PropTypes.object,
    mediaStyle: React.PropTypes.object,
    expandable: React.PropTypes.bool
  },

  getStyles: function getStyles() {
    return {
      root: {
        position: 'relative'
      },
      overlayContainer: {
        position: 'absolute',
        top: 0,
        bottom: 0,
        right: 0,
        left: 0
      },
      overlay: {
        height: '100%',
        position: 'relative'
      },
      overlayContent: {
        position: 'absolute',
        bottom: 0,
        right: 0,
        left: 0,
        paddingTop: 8,
        background: Styles.Colors.lightBlack
      },
      media: {},
      mediaChild: {
        verticalAlign: 'top',
        maxWidth: '100%',
        minWidth: '100%'
      }
    };
  },

  render: function render() {
    var _this = this;

    var styles = this.getStyles();
    var rootStyle = this.mergeAndPrefix(styles.root, this.props.style);
    var mediaStyle = this.mergeAndPrefix(styles.media, this.props.mediaStyle);
    var overlayContainerStyle = this.mergeAndPrefix(styles.overlayContainer, this.props.overlayContainerStyle);
    var overlayContentStyle = this.mergeAndPrefix(styles.overlayContent, this.props.overlayContentStyle);
    var overlayStyle = this.mergeAndPrefix(styles.overlay, this.props.overlayStyle);

    var children = React.Children.map(this.props.children, function (child) {
      return React.cloneElement(child, { style: _this.mergeAndPrefix(styles.mediaChild, child.props.style) });
    });

    var overlayChildren = React.Children.map(this.props.overlay, function (child) {
      if (child.type.displayName === 'CardHeader' || child.type.displayName === 'CardTitle') {
        return React.cloneElement(child, {
          titleColor: Styles.Colors.darkWhite,
          subtitleColor: Styles.Colors.lightWhite
        });
      } else if (child.type.displayName === 'CardText') {
        return React.cloneElement(child, {
          color: Styles.Colors.darkWhite
        });
      } else {
        return child;
      }
    });

    return React.createElement(
      'div',
      _extends({}, this.props, { style: rootStyle }),
      React.createElement(
        'div',
        { style: mediaStyle },
        children
      ),
      this.props.overlay ? React.createElement(
        'div',
        { style: overlayContainerStyle },
        React.createElement(
          'div',
          { style: overlayStyle },
          React.createElement(
            'div',
            { style: overlayContentStyle },
            overlayChildren
          )
        )
      ) : ''
    );
  }
});

module.exports = CardMedia;
},{"../mixins/style-propable":57,"../styles":75,"react":326}],15:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');
var Styles = require('../styles');
var StylePropable = require('../mixins/style-propable');

var CardText = React.createClass({
  displayName: 'CardText',

  mixins: [StylePropable],

  propTypes: {
    color: React.PropTypes.string,
    style: React.PropTypes.object,
    expandable: React.PropTypes.bool
  },

  getDefaultProps: function getDefaultProps() {
    return {
      color: Styles.Colors.ck
    };
  },

  getStyles: function getStyles() {
    return {
      root: {
        padding: 16,
        fontSize: '14px',
        color: this.props.color
      }
    };
  },

  render: function render() {
    var styles = this.getStyles();
    var rootStyle = this.mergeAndPrefix(styles.root, this.props.style);

    return React.createElement(
      'div',
      _extends({}, this.props, { style: rootStyle }),
      this.props.children
    );
  }
});

module.exports = CardText;
},{"../mixins/style-propable":57,"../styles":75,"react":326}],16:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');
var Styles = require('../styles');
var StylePropable = require('../mixins/style-propable');

var CardTitle = React.createClass({
  displayName: 'CardTitle',

  mixins: [StylePropable],

  propTypes: {
    title: React.PropTypes.string,
    titleColor: React.PropTypes.string,
    titleStyle: React.PropTypes.object,
    subtitle: React.PropTypes.string,
    subtitleColor: React.PropTypes.string,
    subtitleStyle: React.PropTypes.object,
    expandable: React.PropTypes.bool,
    showExpandableButton: React.PropTypes.bool
  },

  getDefaultProps: function getDefaultProps() {
    return {
      titleColor: Styles.Colors.darkBlack,
      subtitleColor: Styles.Colors.lightBlack
    };
  },

  getStyles: function getStyles() {
    return {
      root: {
        padding: 16,
        position: 'relative'
      },
      title: {
        fontSize: 24,
        color: this.props.titleColor,
        display: 'block',
        lineHeight: '36px'
      },
      subtitle: {
        fontSize: 14,
        color: this.props.subtitleColor,
        display: 'block'
      }
    };
  },

  render: function render() {
    var styles = this.getStyles();
    var rootStyle = this.mergeAndPrefix(styles.root, this.props.style);
    var titleStyle = this.mergeAndPrefix(styles.title, this.props.titleStyle);
    var subtitleStyle = this.mergeAndPrefix(styles.subtitle, this.props.subtitleStyle);

    return React.createElement(
      'div',
      _extends({}, this.props, { style: rootStyle }),
      React.createElement(
        'span',
        { style: titleStyle },
        this.props.title
      ),
      React.createElement(
        'span',
        { style: subtitleStyle },
        this.props.subtitle
      ),
      this.props.children
    );
  }
});

module.exports = CardTitle;
},{"../mixins/style-propable":57,"../styles":75,"react":326}],17:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react');
var Paper = require('../paper');
var StylePropable = require('../mixins/style-propable');
var CardExpandable = require('./card-expandable');

var Card = React.createClass({
  displayName: 'Card',

  mixins: [StylePropable],

  getInitialState: function getInitialState() {
    return { expanded: this.props.initiallyExpanded ? true : false };
  },

  propTypes: {
    style: React.PropTypes.object,
    expandable: React.PropTypes.bool,
    initiallyExpanded: React.PropTypes.bool,
    onExpandChange: React.PropTypes.func
  },

  _onExpandable: function _onExpandable(value) {
    this.setState({ expanded: value });
    if (this.props.onExpandChange) this.props.onExpandChange(value);
  },

  render: function render() {
    var _this = this;

    var lastElement = undefined;
    var newChildren = React.Children.map(this.props.children, function (currentChild) {
      if (!currentChild) {
        return null;
      }
      if (_this.state.expanded === false && currentChild.props.expandable === true) return;
      if (currentChild.props.showExpandableButton === true) {
        lastElement = React.cloneElement(currentChild, {}, currentChild.props.children, React.createElement(CardExpandable, { expanded: _this.state.expanded, onExpanding: _this._onExpandable }));
      } else {
        lastElement = currentChild;
      }
      return lastElement;
    }, this);

    // If the last element is text or a title we should add
    // 8px padding to the bottom of the card
    var addBottomPadding = lastElement && (lastElement.type.displayName === "CardText" || lastElement.type.displayName === "CardTitle");
    var _props = this.props;
    var style = _props.style;

    var other = _objectWithoutProperties(_props, ['style']);

    var mergedStyles = this.mergeAndPrefix({
      overflow: 'hidden',
      zIndex: 1
    }, style);

    return React.createElement(
      Paper,
      _extends({}, other, { style: mergedStyles }),
      React.createElement(
        'div',
        { style: { paddingBottom: addBottomPadding ? 8 : 0 } },
        newChildren
      )
    );
  }
});

module.exports = Card;
},{"../mixins/style-propable":57,"../paper":61,"./card-expandable":12,"react":326}],18:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react');
var EnhancedSwitch = require('./enhanced-switch');
var StylePropable = require('./mixins/style-propable');
var Transitions = require('./styles/transitions');
var CheckboxOutline = require('./svg-icons/toggle/check-box-outline-blank');
var CheckboxChecked = require('./svg-icons/toggle/check-box');

var Checkbox = React.createClass({
  displayName: 'Checkbox',

  mixins: [StylePropable],

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  propTypes: {
    checked: React.PropTypes.bool,
    checkedIcon: React.PropTypes.element,
    defaultChecked: React.PropTypes.bool,
    iconStyle: React.PropTypes.object,
    labelStyle: React.PropTypes.object,
    onCheck: React.PropTypes.func,
    unCheckedIcon: React.PropTypes.element
  },

  getInitialState: function getInitialState() {
    return {
      switched: this.props.checked || this.props.defaultChecked || this.props.valueLink && this.props.valueLink.value || false
    };
  },

  getTheme: function getTheme() {
    return this.context.muiTheme.component.checkbox;
  },

  getStyles: function getStyles() {
    var checkboxSize = 24;
    var styles = {
      icon: {
        height: checkboxSize,
        width: checkboxSize
      },
      check: {
        position: 'absolute',
        opacity: 0,
        transform: 'scale(0)',
        transitionOrigin: '50% 50%',
        transition: Transitions.easeOut('450ms', 'opacity', '0ms') + ', ' + Transitions.easeOut('0ms', 'transform', '450ms'),
        fill: this.getTheme().checkedColor
      },
      box: {
        position: 'absolute',
        opacity: 1,
        fill: this.getTheme().boxColor,
        transition: Transitions.easeOut('2s', null, '200ms')
      },
      checkWhenSwitched: {
        opacity: 1,
        transform: 'scale(1)',
        transition: Transitions.easeOut('0ms', 'opacity', '0ms') + ', ' + Transitions.easeOut('800ms', 'transform', '0ms')
      },
      boxWhenSwitched: {
        transition: Transitions.easeOut('100ms', null, '0ms'),
        fill: this.getTheme().checkedColor
      },
      checkWhenDisabled: {
        fill: this.getTheme().disabledColor
      },
      boxWhenDisabled: {
        fill: this.getTheme().disabledColor
      },
      label: {
        color: this.props.disabled ? this.getTheme().labelDisabledColor : this.getTheme().labelColor
      }
    };

    return styles;
  },

  render: function render() {
    var _props = this.props;
    var iconStyle = _props.iconStyle;
    var onCheck = _props.onCheck;
    var checkedIcon = _props.checkedIcon;
    var unCheckedIcon = _props.unCheckedIcon;

    var other = _objectWithoutProperties(_props, ['iconStyle', 'onCheck', 'checkedIcon', 'unCheckedIcon']);

    var styles = this.getStyles();
    var boxStyles = this.mergeAndPrefix(styles.box, this.state.switched && styles.boxWhenSwitched, iconStyle, this.props.disabled && styles.boxWhenDisabled);
    var checkStyles = this.mergeAndPrefix(styles.check, this.state.switched && styles.checkWhenSwitched, iconStyle, this.props.disabled && styles.checkWhenDisabled);

    var checkedElement = checkedIcon ? React.cloneElement(checkedIcon, {
      style: this.mergeAndPrefix(checkStyles, checkedIcon.props.style)
    }) : React.createElement(CheckboxChecked, {
      style: checkStyles
    });

    var unCheckedElement = unCheckedIcon ? React.cloneElement(unCheckedIcon, {
      style: this.mergeAndPrefix(boxStyles, unCheckedIcon.props.style)
    }) : React.createElement(CheckboxOutline, {
      style: boxStyles
    });

    var checkboxElement = React.createElement(
      'div',
      null,
      unCheckedElement,
      checkedElement
    );

    var rippleColor = this.state.switched ? checkStyles.fill : boxStyles.fill;
    var mergedIconStyle = this.mergeAndPrefix(styles.icon, iconStyle);

    var labelStyle = this.mergeAndPrefix(styles.label, this.props.labelStyle);

    var enhancedSwitchProps = {
      ref: "enhancedSwitch",
      inputType: "checkbox",
      switched: this.state.switched,
      switchElement: checkboxElement,
      rippleColor: rippleColor,
      iconStyle: mergedIconStyle,
      onSwitch: this._handleCheck,
      labelStyle: labelStyle,
      onParentShouldUpdate: this._handleStateChange,
      defaultSwitched: this.props.defaultChecked,
      labelPosition: this.props.labelPosition ? this.props.labelPosition : "right"
    };

    return React.createElement(EnhancedSwitch, _extends({}, other, enhancedSwitchProps));
  },

  isChecked: function isChecked() {
    return this.refs.enhancedSwitch.isSwitched();
  },

  setChecked: function setChecked(newCheckedValue) {
    this.refs.enhancedSwitch.setSwitched(newCheckedValue);
  },

  _handleCheck: function _handleCheck(e, isInputChecked) {
    if (this.props.onCheck) this.props.onCheck(e, isInputChecked);
  },

  _handleStateChange: function _handleStateChange(newSwitched) {
    this.setState({ switched: newSwitched });
  }

});

module.exports = Checkbox;
},{"./enhanced-switch":34,"./mixins/style-propable":57,"./styles/transitions":80,"./svg-icons/toggle/check-box":93,"./svg-icons/toggle/check-box-outline-blank":92,"react":326}],19:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react');
var StylePropable = require('./mixins/style-propable');
var AutoPrefix = require('./styles/auto-prefix');
var Transitions = require("./styles/transitions");

var CircularProgress = React.createClass({
  displayName: 'CircularProgress',

  mixins: [StylePropable],

  propTypes: {
    mode: React.PropTypes.oneOf(["determinate", "indeterminate"]),
    value: React.PropTypes.number,
    min: React.PropTypes.number,
    max: React.PropTypes.number,
    size: React.PropTypes.number,
    color: React.PropTypes.string,
    innerStyle: React.PropTypes.object
  },

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  _getRelativeValue: function _getRelativeValue() {
    var value = this.props.value;
    var min = this.props.min;
    var max = this.props.max;

    var clampedValue = Math.min(Math.max(min, value), max);
    var rangeValue = max - min;
    var relValue = Math.round(clampedValue / rangeValue * 10000) / 10000;
    return relValue * 100;
  },

  componentDidMount: function componentDidMount() {
    var wrapper = React.findDOMNode(this.refs.wrapper);
    var path = React.findDOMNode(this.refs.path);

    this._scalePath(path);
    this._rotateWrapper(wrapper);
  },

  _scalePath: function _scalePath(path, step) {
    step = step || 0;
    step %= 3;

    setTimeout(this._scalePath.bind(this, path, step + 1), step ? 750 : 250);

    if (!this.isMounted()) return;
    if (this.props.mode !== "indeterminate") return;

    if (step === 0) {
      path.style.strokeDasharray = "1, 200";
      path.style.strokeDashoffset = 0;
      path.style.transitionDuration = "0ms";
    } else if (step === 1) {
      path.style.strokeDasharray = "89, 200";
      path.style.strokeDashoffset = -35;
      path.style.transitionDuration = "750ms";
    } else {
      path.style.strokeDasharray = "89,200";
      path.style.strokeDashoffset = -124;
      path.style.transitionDuration = "850ms";
    }
  },

  _rotateWrapper: function _rotateWrapper(wrapper) {
    setTimeout(this._rotateWrapper.bind(this, wrapper), 10050);

    if (!this.isMounted()) return;
    if (this.props.mode !== "indeterminate") return;

    AutoPrefix.set(wrapper.style, "transform", null);
    AutoPrefix.set(wrapper.style, "transform", "rotate(0deg)");
    wrapper.style.transitionDuration = "0ms";

    setTimeout(function () {
      AutoPrefix.set(wrapper.style, "transform", "rotate(1800deg)");
      wrapper.style.transitionDuration = "10s";
      //wrapper.style.webkitTransitionTimingFunction = "linear";
      AutoPrefix.set(wrapper.style, "transitionTimingFunction", "linear");
    }, 50);
  },

  getDefaultProps: function getDefaultProps() {
    return {
      mode: "indeterminate",
      value: 0,
      min: 0,
      max: 100,
      size: 1
    };
  },

  getTheme: function getTheme() {
    return this.context.muiTheme.palette;
  },

  getStyles: function getStyles(zoom) {
    zoom *= 1.4;
    var size = "50px";

    var margin = Math.round((50 * zoom - 50) / 2);

    if (margin < 0) margin = 0;

    var styles = {
      root: {
        position: "relative",
        margin: margin + "px",
        display: "inline-block",
        width: size,
        height: size
      },
      wrapper: {
        width: size,
        height: size,
        margin: "5px",
        display: "inline-block",
        transition: Transitions.create("transform", "20s", null, "linear")
      },
      svg: {
        height: size,
        position: "relative",
        transform: "scale(" + zoom + ")",
        width: size
      },
      path: {
        strokeDasharray: "89,200",
        strokeDashoffset: 0,
        stroke: this.props.color || this.getTheme().primary1Color,
        strokeLinecap: "round",
        transition: Transitions.create("all", "1.5s", null, "ease-in-out")
      }
    };

    AutoPrefix.set(styles.wrapper, "transitionTimingFunction", "linear");

    if (this.props.mode === "determinate") {
      var relVal = this._getRelativeValue();
      styles.path.transition = Transitions.create("all", "0.3s", null, "linear");
      styles.path.strokeDasharray = Math.round(relVal * 1.25) + ",200";
    }

    return styles;
  },

  render: function render() {
    var _props = this.props;
    var style = _props.style;
    var innerStyle = _props.innerStyle;
    var size = _props.size;

    var other = _objectWithoutProperties(_props, ['style', 'innerStyle', 'size']);

    var styles = this.getStyles(size || 1);

    return React.createElement(
      'div',
      _extends({}, other, { style: this.mergeAndPrefix(styles.root, style) }),
      React.createElement(
        'div',
        { ref: 'wrapper', style: this.mergeAndPrefix(styles.wrapper, innerStyle) },
        React.createElement(
          'svg',
          { style: this.mergeAndPrefix(styles.svg) },
          React.createElement('circle', { ref: 'path', style: this.mergeAndPrefix(styles.path), cx: '25', cy: '25',
            r: '20', fill: 'none', strokeWidth: '2.5', strokeMiterlimit: '10' })
        )
      )
    );
  }
});

module.exports = CircularProgress;
},{"./mixins/style-propable":57,"./styles/auto-prefix":73,"./styles/transitions":80,"react":326}],20:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react');
var BeforeAfterWrapper = require('./before-after-wrapper');

var ClearFix = React.createClass({
  displayName: 'ClearFix',

  render: function render() {
    var _props = this.props;
    var style = _props.style;

    var other = _objectWithoutProperties(_props, ['style']);

    var before = function before() {
      return {
        content: "' '",
        display: 'table'
      };
    };

    var after = before();
    after.clear = 'both';

    return React.createElement(
      BeforeAfterWrapper,
      _extends({}, other, {
        beforeStyle: before(),
        afterStyle: after,
        style: this.props.style }),
      this.props.children
    );
  }
});

module.exports = ClearFix;
},{"./before-after-wrapper":9,"react":326}],21:[function(require,module,exports){
'use strict';

var React = require('react');
var DateTime = require('../utils/date-time');
var DayButton = require('./day-button');
var ClearFix = require('../clearfix');

var CalendarMonth = React.createClass({
  displayName: 'CalendarMonth',

  propTypes: {
    displayDate: React.PropTypes.object.isRequired,
    onDayTouchTap: React.PropTypes.func,
    selectedDate: React.PropTypes.object.isRequired,
    minDate: React.PropTypes.object,
    maxDate: React.PropTypes.object,
    shouldDisableDate: React.PropTypes.func,
    autoOk: React.PropTypes.bool
  },

  render: function render() {
    var styles = {
      lineHeight: '32px',
      textAlign: 'center',
      padding: '8px 14px 0 14px'
    };

    return React.createElement(
      'div',
      { style: styles },
      this._getWeekElements()
    );
  },

  isSelectedDateDisabled: function isSelectedDateDisabled() {
    return this._selectedDateDisabled;
  },

  _getWeekElements: function _getWeekElements() {
    var _this = this;

    var weekArray = DateTime.getWeekArray(this.props.displayDate);

    return weekArray.map(function (week, i) {
      return React.createElement(
        ClearFix,
        { key: i },
        _this._getDayElements(week, i)
      );
    }, this);
  },

  _getDayElements: function _getDayElements(week, i) {
    var _this2 = this;

    return week.map(function (day, j) {
      var isSameDate = DateTime.isEqualDate(_this2.props.selectedDate, day);
      var disabled = _this2._shouldDisableDate(day);
      var selected = !disabled && isSameDate;

      if (isSameDate) {
        if (disabled) {
          _this2._selectedDateDisabled = true;
        } else {
          _this2._selectedDateDisabled = false;
        }
      }

      return React.createElement(DayButton, {
        key: 'db' + i + j,
        date: day,
        onTouchTap: _this2._handleDayTouchTap,
        selected: selected,
        disabled: disabled });
    }, this);
  },

  _handleDayTouchTap: function _handleDayTouchTap(e, date) {
    if (this.props.onDayTouchTap) this.props.onDayTouchTap(e, date);
  },

  _shouldDisableDate: function _shouldDisableDate(day) {
    if (day === null) return false;
    var disabled = !DateTime.isBetweenDates(day, this.props.minDate, this.props.maxDate);
    if (!disabled && this.props.shouldDisableDate) disabled = this.props.shouldDisableDate(day);

    return disabled;
  }

});

module.exports = CalendarMonth;
},{"../clearfix":20,"../utils/date-time":131,"./day-button":28,"react":326}],22:[function(require,module,exports){
'use strict';

var React = require('react');
var DateTime = require('../utils/date-time');
var IconButton = require('../icon-button');
var Toolbar = require('../toolbar/toolbar');
var ToolbarGroup = require('../toolbar/toolbar-group');
var NavigationChevronLeft = require('../svg-icons/navigation/chevron-left');
var NavigationChevronLeftDouble = require('../svg-icons/navigation-chevron-left-double');
var NavigationChevronRight = require('../svg-icons/navigation/chevron-right');
var NavigationChevronRightDouble = require('../svg-icons/navigation-chevron-right-double');
var SlideInTransitionGroup = require('../transition-groups/slide-in');

var CalendarToolbar = React.createClass({
  displayName: 'CalendarToolbar',

  propTypes: {
    displayDate: React.PropTypes.object.isRequired,
    onMonthChange: React.PropTypes.func,
    onYearChange: React.PropTypes.func,
    prevYear: React.PropTypes.bool,
    nextYear: React.PropTypes.bool,
    prevMonth: React.PropTypes.bool,
    nextMonth: React.PropTypes.bool,
    hideYearChangeButtons: React.PropTypes.bool
  },

  getDefaultProps: function getDefaultProps() {
    return {
      prevYear: true,
      nextYear: true,
      prevMonth: true,
      nextMonth: true,
      hideYearChangeButtons: false
    };
  },

  getInitialState: function getInitialState() {
    return {
      transitionDirection: 'up'
    };
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    var direction = undefined;

    if (nextProps.displayDate !== this.props.displayDate) {
      direction = nextProps.displayDate > this.props.displayDate ? 'up' : 'down';
      this.setState({
        transitionDirection: direction
      });
    }
  },

  _styles: function _styles() {
    return {
      root: {
        position: 'relative',
        padding: 0,
        backgroundColor: 'inherit'
      },

      title: {
        position: 'absolute',
        top: '17px',
        lineHeight: '14px',
        fontSize: '14px',
        height: '14px',
        width: '100%',
        fontWeight: '500',
        textAlign: 'center'
      }
    };
  },

  render: function render() {
    var month = DateTime.getFullMonth(this.props.displayDate);
    var year = this.props.displayDate.getFullYear();
    var prevYearChangeButton = this._getPrevYearChangeButton();
    var nextYearChangeButton = this._getNextYearChangeButton();
    var styles = this._styles();

    return React.createElement(
      Toolbar,
      { className: 'mui-date-picker-calendar-toolbar', style: styles.root, noGutter: true },
      React.createElement(
        SlideInTransitionGroup,
        {
          style: styles.title,
          direction: this.state.transitionDirection },
        React.createElement(
          'div',
          { key: month + '_' + year },
          month,
          ' ',
          year
        )
      ),
      React.createElement(
        ToolbarGroup,
        { key: 0, float: 'left' },
        prevYearChangeButton,
        React.createElement(
          IconButton,
          {
            style: styles.button,
            disabled: !this.props.prevMonth,
            onTouchTap: this._prevMonthTouchTap },
          React.createElement(NavigationChevronLeft, null)
        )
      ),
      React.createElement(
        ToolbarGroup,
        { key: 1, float: 'right' },
        React.createElement(
          IconButton,
          {
            style: styles.button,
            disabled: !this.props.nextMonth,
            onTouchTap: this._nextMonthTouchTap },
          React.createElement(NavigationChevronRight, null)
        ),
        nextYearChangeButton
      )
    );
  },

  _getPrevYearChangeButton: function _getPrevYearChangeButton() {
    var style = {
      display: this.props.hideYearChangeButtons ? 'none' : ''
    };

    return React.createElement(
      IconButton,
      {
        style: style,
        disabled: !this.props.prevYear,
        onTouchTap: this._prevYearTouchTap },
      React.createElement(NavigationChevronLeftDouble, null)
    );
  },

  _getNextYearChangeButton: function _getNextYearChangeButton() {
    var style = {
      display: this.props.hideYearChangeButtons ? 'none' : ''
    };

    return React.createElement(
      IconButton,
      {
        style: style,
        disabled: !this.props.nextYear,
        onTouchTap: this._nextYearTouchTap },
      React.createElement(NavigationChevronRightDouble, null)
    );
  },

  _prevYearTouchTap: function _prevYearTouchTap() {
    if (this.props.onYearChange && this.props.prevYear) this.props.onYearChange(-1);
  },

  _nextYearTouchTap: function _nextYearTouchTap() {
    if (this.props.onYearChange && this.props.nextYear) this.props.onYearChange(1);
  },

  _prevMonthTouchTap: function _prevMonthTouchTap() {
    if (this.props.onMonthChange && this.props.prevMonth) this.props.onMonthChange(-1);
  },

  _nextMonthTouchTap: function _nextMonthTouchTap() {
    if (this.props.onMonthChange && this.props.nextMonth) this.props.onMonthChange(1);
  }

});

module.exports = CalendarToolbar;
},{"../icon-button":39,"../svg-icons/navigation-chevron-left-double":85,"../svg-icons/navigation-chevron-right-double":86,"../svg-icons/navigation/chevron-left":89,"../svg-icons/navigation/chevron-right":90,"../toolbar/toolbar":122,"../toolbar/toolbar-group":119,"../transition-groups/slide-in":127,"../utils/date-time":131,"react":326}],23:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');
var StylePropable = require('../mixins/style-propable');
var Colors = require('../styles/colors');
var DateTime = require('../utils/date-time');
var YearButton = require('./year-button');

var CalendarYear = React.createClass({
  displayName: 'CalendarYear',

  mixins: [StylePropable],

  propTypes: {
    displayDate: React.PropTypes.object.isRequired,
    onYearTouchTap: React.PropTypes.func,
    selectedDate: React.PropTypes.object.isRequired,
    minDate: React.PropTypes.object,
    maxDate: React.PropTypes.object
  },

  componentDidMount: function componentDidMount() {
    this._scrollToSelectedYear();
  },

  componentDidUpdate: function componentDidUpdate() {
    this._scrollToSelectedYear();
  },

  render: function render() {
    var years = this._getYears();
    var styles = {
      position: 'relative',
      height: 'inherit',
      lineHeight: '36px',
      textAlign: 'center',
      padding: '8px 14px 0 14px',
      backgroundColor: Colors.white,
      overflowX: 'hidden',
      overflowY: 'scroll'
    };

    return React.createElement(
      'div',
      { style: styles },
      years
    );
  },

  _getYears: function _getYears() {
    var minYear = this.props.minDate.getFullYear();
    var maxYear = this.props.maxDate.getFullYear();

    var years = [];
    var dateCheck = DateTime.clone(this.props.selectedDate);
    for (var year = minYear; year <= maxYear; year++) {
      dateCheck.setFullYear(year);
      if (!DateTime.isBetweenDates(dateCheck, this.props.minDate, this.props.maxDate)) continue;
      var selected = this.props.selectedDate.getFullYear() === year;
      var selectedProps = {};
      if (selected) {
        selectedProps = { ref: 'selectedYearButton' };
      }

      var yearButton = React.createElement(YearButton, _extends({
        key: 'yb' + year,
        year: year,
        onTouchTap: this._handleYearTouchTap,
        selected: selected
      }, selectedProps));

      years.push(yearButton);
    }

    return years;
  },

  _scrollToSelectedYear: function _scrollToSelectedYear() {
    if (this.refs.selectedYearButton === undefined) return;

    var container = this.getDOMNode();
    var yearButtonNode = this.refs.selectedYearButton.getDOMNode();

    var containerHeight = container.clientHeight;
    var yearButtonNodeHeight = yearButtonNode.clientHeight || 32;

    var scrollYOffset = yearButtonNode.offsetTop + yearButtonNodeHeight / 2 - containerHeight / 2;
    container.scrollTop = scrollYOffset;
  },

  _handleYearTouchTap: function _handleYearTouchTap(e, year) {
    if (this.props.onYearTouchTap) this.props.onYearTouchTap(e, year);
  }

});

module.exports = CalendarYear;
},{"../mixins/style-propable":57,"../styles/colors":74,"../utils/date-time":131,"./year-button":29,"react":326}],24:[function(require,module,exports){
'use strict';

var React = require('react');
var StylePropable = require('../mixins/style-propable');
var WindowListenable = require('../mixins/window-listenable');
var DateTime = require('../utils/date-time');
var KeyCode = require('../utils/key-code');
var Transitions = require('../styles/transitions');
var CalendarMonth = require('./calendar-month');
var CalendarYear = require('./calendar-year');
var CalendarToolbar = require('./calendar-toolbar');
var DateDisplay = require('./date-display');
var SlideInTransitionGroup = require('../transition-groups/slide-in');
var ClearFix = require('../clearfix');

var Calendar = React.createClass({
  displayName: 'Calendar',

  mixins: [StylePropable, WindowListenable],

  propTypes: {
    initialDate: React.PropTypes.object,
    isActive: React.PropTypes.bool,
    minDate: React.PropTypes.object,
    maxDate: React.PropTypes.object,
    shouldDisableDate: React.PropTypes.func,
    hideToolbarYearChange: React.PropTypes.bool,
    shouldShowMonthDayPickerFirst: React.PropTypes.bool,
    shouldShowYearPickerFirst: React.PropTypes.bool,
    showYearSelector: React.PropTypes.bool,
    onDayTouchTap: React.PropTypes.func
  },

  windowListeners: {
    'keydown': '_handleWindowKeyDown'
  },

  getDefaultProps: function getDefaultProps() {
    return {
      initialDate: new Date(),
      minDate: DateTime.addYears(new Date(), -100),
      maxDate: DateTime.addYears(new Date(), 100),
      hideToolbarYearChange: false,
      shouldShowMonthDayPickerFirst: true,
      shouldShowYearPickerFirst: false,
      showYearSelector: false
    };
  },

  getInitialState: function getInitialState() {
    return {
      displayDate: DateTime.getFirstDayOfMonth(this.props.initialDate),
      selectedDate: this.props.initialDate,
      transitionDirection: 'left',
      displayMonthDay: this.props.shouldShowMonthDayPickerFirst || this.props.shouldShowYearPickerFirst || true,
      transitionEnter: true
    };
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (nextProps.initialDate !== this.props.initialDate) {
      var d = nextProps.initialDate || new Date();
      this.setState({
        displayDate: DateTime.getFirstDayOfMonth(d),
        selectedDate: d
      });
    }

    if (nextProps.shouldShowMonthDayPickerFirst) {
      this.setState({ displayMonthDay: nextProps.shouldShowMonthDayPickerFirst });
    }
  },

  render: function render() {
    var yearCount = DateTime.yearDiff(this.props.maxDate, this.props.minDate) + 1;
    var weekCount = DateTime.getWeekArray(this.state.displayDate).length;
    var toolbarInteractions = this._getToolbarInteractions();
    var hideYearChangeButtons = this.props.hideToolbarYearChange || !this.props.showYearSelector;
    var isMultiYearRange = yearCount > 2; // Want a year range greater than 1. Ex. [2014,2016] has a count of 3
    var isLandscape = this.props.mode === 'landscape';
    var styles = {
      root: {
        fontSize: 12
      },
      calendarContainer: {
        width: isLandscape ? 280 : '100%',
        height: weekCount === 5 ? 268 : weekCount === 6 ? 308 : 228,
        float: isLandscape ? 'right' : 'none',
        transition: Transitions.easeOut('150ms', 'height'),
        overflow: 'hidden'
      },
      yearContainer: {
        width: 280,
        overflow: 'hidden',
        height: yearCount < 6 ? yearCount * 56 + 10 : weekCount === 5 ? 268 : weekCount === 6 ? 308 : 228,
        float: isLandscape ? 'right' : 'none'
      },
      dateDisplay: {
        width: isLandscape ? 280 : '100%',
        height: '100%',
        float: isLandscape ? 'left' : 'none'
      },
      weekTitle: {
        padding: '0 14px',
        lineHeight: '12px',
        opacity: '0.5',
        height: 12,
        fontWeight: '500',
        margin: 0
      },
      weekTitleDay: {
        listStyle: 'none',
        float: 'left',
        width: 32,
        textAlign: 'center',
        margin: '0 2px'
      }
    };

    if (this.state.displayMonthDay || !this.props.showYearSelector) {
      styles.yearContainer.display = 'none';
    } else {
      styles.calendarContainer.display = 'none';
    }

    return React.createElement(
      ClearFix,
      { style: this.mergeAndPrefix(styles.root) },
      React.createElement(DateDisplay, {
        style: styles.dateDisplay,
        selectedDate: this.state.selectedDate,
        handleMonthDayClick: this._handleMonthDayClick,
        handleYearClick: this._handleYearClick,
        yearSelectionAvailable: this.props.showYearSelector && isMultiYearRange,
        monthDaySelected: this.state.displayMonthDay,
        mode: this.props.mode,
        weekCount: weekCount }),
      React.createElement(
        'div',
        { style: styles.calendarContainer },
        React.createElement(CalendarToolbar, {
          displayDate: this.state.displayDate,
          onMonthChange: this._handleMonthChange,
          onYearChange: this._handleYearChange,
          prevMonth: toolbarInteractions.prevMonth,
          nextMonth: toolbarInteractions.nextMonth,
          prevYear: toolbarInteractions.prevYear,
          nextYear: toolbarInteractions.nextYear,
          hideYearChangeButtons: hideYearChangeButtons }),
        React.createElement(
          ClearFix,
          {
            elementType: 'ul',
            style: styles.weekTitle },
          React.createElement(
            'li',
            { style: styles.weekTitleDay },
            'S'
          ),
          React.createElement(
            'li',
            { style: styles.weekTitleDay },
            'M'
          ),
          React.createElement(
            'li',
            { style: styles.weekTitleDay },
            'T'
          ),
          React.createElement(
            'li',
            { style: styles.weekTitleDay },
            'W'
          ),
          React.createElement(
            'li',
            { style: styles.weekTitleDay },
            'T'
          ),
          React.createElement(
            'li',
            { style: styles.weekTitleDay },
            'F'
          ),
          React.createElement(
            'li',
            { style: styles.weekTitleDay },
            'S'
          )
        ),
        React.createElement(
          SlideInTransitionGroup,
          {
            direction: this.state.transitionDirection },
          React.createElement(CalendarMonth, {
            key: this.state.displayDate.toDateString(),
            ref: 'calendar',
            displayDate: this.state.displayDate,
            onDayTouchTap: this._handleDayTouchTap,
            selectedDate: this.state.selectedDate,
            minDate: this.props.minDate,
            maxDate: this.props.maxDate,
            shouldDisableDate: this.props.shouldDisableDate })
        )
      ),
      React.createElement(
        'div',
        { style: styles.yearContainer },
        this._yearSelector()
      )
    );
  },

  _yearSelector: function _yearSelector() {
    if (this.props.showYearSelector) {
      return React.createElement(CalendarYear, {
        key: 'years',
        displayDate: this.state.displayDate,
        onYearTouchTap: this._handleYearTouchTap,
        selectedDate: this.state.selectedDate,
        minDate: this.props.minDate,
        maxDate: this.props.maxDate });
    }
  },

  getSelectedDate: function getSelectedDate() {
    return this.state.selectedDate;
  },

  isSelectedDateDisabled: function isSelectedDateDisabled() {
    return this.refs.calendar.isSelectedDateDisabled();
  },

  _addSelectedDays: function _addSelectedDays(days) {
    this._setSelectedDate(DateTime.addDays(this.state.selectedDate, days));
  },

  _addSelectedMonths: function _addSelectedMonths(months) {
    this._setSelectedDate(DateTime.addMonths(this.state.selectedDate, months));
  },

  _addSelectedYears: function _addSelectedYears(years) {
    this._setSelectedDate(DateTime.addYears(this.state.selectedDate, years));
  },

  _setDisplayDate: function _setDisplayDate(d, newSelectedDate) {
    var newDisplayDate = DateTime.getFirstDayOfMonth(d);
    var direction = newDisplayDate > this.state.displayDate ? 'left' : 'right';

    if (newDisplayDate !== this.state.displayDate) {
      this.setState({
        displayDate: newDisplayDate,
        transitionDirection: direction,
        selectedDate: newSelectedDate || this.state.selectedDate
      });
    }
  },

  _setSelectedDate: function _setSelectedDate(date) {
    var adjustedDate = date;
    if (DateTime.isBeforeDate(date, this.props.minDate)) {
      adjustedDate = this.props.minDate;
    } else if (DateTime.isAfterDate(date, this.props.maxDate)) {
      adjustedDate = this.props.maxDate;
    }

    var newDisplayDate = DateTime.getFirstDayOfMonth(adjustedDate);
    if (newDisplayDate !== this.state.displayDate) {
      this._setDisplayDate(newDisplayDate, adjustedDate);
    } else {
      this.setState({
        selectedDate: adjustedDate
      });
    }
  },

  _handleDayTouchTap: function _handleDayTouchTap(e, date) {
    this._setSelectedDate(date);
    if (this.props.onDayTouchTap) this.props.onDayTouchTap(e, date);
  },

  _handleMonthChange: function _handleMonthChange(months) {
    this._addSelectedMonths(months);
  },

  _handleYearChange: function _handleYearChange(years) {
    this._addSelectedYears(years);
  },

  _handleYearTouchTap: function _handleYearTouchTap(e, year) {
    var date = DateTime.clone(this.state.selectedDate);
    date.setFullYear(year);
    this._setSelectedDate(date, e);
  },

  _getToolbarInteractions: function _getToolbarInteractions() {
    return {
      prevMonth: DateTime.monthDiff(this.state.selectedDate, this.props.minDate) > 0,
      nextMonth: DateTime.monthDiff(this.state.selectedDate, this.props.maxDate) < 0,
      prevYear: DateTime.yearDiff(this.state.selectedDate, this.props.minDate) > 0,
      nextYear: DateTime.yearDiff(this.state.selectedDate, this.props.maxDate) < 0
    };
  },

  _handleMonthDayClick: function _handleMonthDayClick() {
    this.setState({ displayMonthDay: true });
  },

  _handleYearClick: function _handleYearClick() {
    this.setState({ displayMonthDay: false });
  },

  _handleWindowKeyDown: function _handleWindowKeyDown(e) {
    if (this.props.isActive) {

      switch (e.keyCode) {
        case KeyCode.UP:
          if (e.altKey && e.shiftKey) {
            this._addSelectedYears(-1);
          } else if (e.shiftKey) {
            this._addSelectedMonths(-1);
          } else {
            this._addSelectedDays(-7);
          }
          break;

        case KeyCode.DOWN:
          if (e.altKey && e.shiftKey) {
            this._addSelectedYears(1);
          } else if (e.shiftKey) {
            this._addSelectedMonths(1);
          } else {
            this._addSelectedDays(7);
          }
          break;

        case KeyCode.RIGHT:
          if (e.altKey && e.shiftKey) {
            this._addSelectedYears(1);
          } else if (e.shiftKey) {
            this._addSelectedMonths(1);
          } else {
            this._addSelectedDays(1);
          }
          break;

        case KeyCode.LEFT:
          if (e.altKey && e.shiftKey) {
            this._addSelectedYears(-1);
          } else if (e.shiftKey) {
            this._addSelectedMonths(-1);
          } else {
            this._addSelectedDays(-1);
          }
          break;
      }
    }
  }

});

module.exports = Calendar;
},{"../clearfix":20,"../mixins/style-propable":57,"../mixins/window-listenable":59,"../styles/transitions":80,"../transition-groups/slide-in":127,"../utils/date-time":131,"../utils/key-code":137,"./calendar-month":21,"./calendar-toolbar":22,"./calendar-year":23,"./date-display":25,"react":326}],25:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react');
var StylePropable = require('../mixins/style-propable');
var DateTime = require('../utils/date-time');
var Transitions = require('../styles/transitions');
var AutoPrefix = require('../styles/auto-prefix');
var SlideInTransitionGroup = require('../transition-groups/slide-in');

var DateDisplay = React.createClass({
  displayName: 'DateDisplay',

  mixins: [StylePropable],

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  propTypes: {
    selectedDate: React.PropTypes.object.isRequired,
    weekCount: React.PropTypes.number,
    yearSelectionAvailable: React.PropTypes.bool,
    monthDaySelected: React.PropTypes.bool
  },

  getDefaultProps: function getDefaultProps() {
    return {
      weekCount: 4,
      yearSelectionAvailable: true,
      monthDaySelected: true
    };
  },

  getInitialState: function getInitialState() {
    return {
      transitionDirection: 'up',
      selectedYear: !this.props.monthDaySelected
    };
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    var direction = undefined;

    if (nextProps.selectedDate !== this.props.selectedDate) {
      direction = nextProps.selectedDate > this.props.selectedDate ? 'up' : 'down';
      this.setState({
        transitionDirection: direction
      });
    }

    if (nextProps.monthDaySelected !== undefined) {
      this.setState({ selectedYear: !nextProps.monthDaySelected });
    }
  },

  getTheme: function getTheme() {
    return this.context.muiTheme.component.datePicker;
  },

  render: function render() {
    var _props = this.props;
    var selectedDate = _props.selectedDate;
    var style = _props.style;

    var other = _objectWithoutProperties(_props, ['selectedDate', 'style']);

    var dayOfWeek = DateTime.getDayOfWeek(this.props.selectedDate);
    var month = DateTime.getShortMonth(this.props.selectedDate);
    var day = this.props.selectedDate.getDate();
    var year = this.props.selectedDate.getFullYear();

    var isLandscape = this.props.mode === 'landscape';
    var dateYPosition = 0;
    var dayYPosition = 30;
    var yearYPosition = 95;

    if (isLandscape) {
      dateYPosition = this.props.weekCount === 5 ? 14 : this.props.weekCount === 6 ? 34 : 8;
      yearYPosition = this.props.weekCount === 4 ? 114 : 150;
      if (this.props.weekCount > 4) dayYPosition = 50;
    }

    var styles = {
      root: {
        textAlign: 'center',
        position: 'relative'
      },

      dateContainer: {
        backgroundColor: this.getTheme().color,
        height: isLandscape ? this.props.weekCount * 40 + 36 : 150,
        padding: '16px 0',
        transition: Transitions.easeOut(),
        boxSizing: 'border-box'
      },

      date: {
        position: 'relative',
        color: this.getTheme().textColor,
        transition: Transitions.easeOut(),
        transform: 'translate3d(0,' + dateYPosition + 'px,0)'
      },

      dowContainer: {
        height: 32,
        backgroundColor: this.getTheme().selectColor,
        borderRadius: isLandscape ? '2px 0 0 0' : '2px 2px 0 0',
        paddingTop: 9,
        boxSizing: 'border-box'
      },

      dow: {
        fontSize: 13,
        lineHeight: '13px',
        height: '100%',
        color: this.getTheme().selectTextColor
      },

      day: {
        root: {
          position: 'absolute',
          lineHeight: isLandscape ? '76px' : '58px',
          fontSize: isLandscape ? 76 : 58,
          height: isLandscape ? 76 : 58,
          width: '100%',
          opacity: this.state.selectedYear ? 0.7 : 1.0,
          transition: Transitions.easeOut(),
          transform: 'translate3d(0,' + dayYPosition + 'px,0)'
        },

        title: {
          width: 100,
          marginLeft: 'auto',
          marginRight: 'auto',
          cursor: !this.state.selectedYear ? 'default' : 'pointer'
        }
      },

      month: {
        root: {
          position: 'absolute',
          top: isLandscape ? 0 : 1,
          fontSize: isLandscape ? 26 : 22,
          lineHeight: isLandscape ? '26px' : '22px',
          height: isLandscape ? 26 : 22,
          width: '100%',
          textTransform: 'uppercase',
          opacity: this.state.selectedYear ? 0.7 : 1.0
        },

        title: {
          width: 100,
          marginLeft: 'auto',
          marginRight: 'auto',
          cursor: !this.state.selectedYear ? 'default' : 'pointer'
        }
      },

      year: {
        root: {
          position: 'absolute',
          margin: 0,
          fontSize: isLandscape ? 26 : 22,
          lineHeight: isLandscape ? '26px' : '22px',
          height: isLandscape ? 26 : 22,
          width: '100%',
          textTransform: 'uppercase',
          opacity: this.state.selectedYear ? 1.0 : 0.7,
          transition: Transitions.easeOut(),
          transform: 'translate3d(0,' + yearYPosition + 'px,0)'
        },

        title: {
          width: 100,
          marginLeft: 'auto',
          marginRight: 'auto',
          cursor: !this.props.yearSelectionAvailable || this.state.selectedYear ? 'default' : 'pointer'
        }
      }
    };

    return React.createElement(
      'div',
      _extends({}, other, { style: this.mergeAndPrefix(styles.root, this.props.style) }),
      React.createElement(
        'div',
        { style: styles.dowContainer },
        React.createElement(
          SlideInTransitionGroup,
          {
            style: styles.dow,
            direction: this.state.transitionDirection },
          React.createElement(
            'div',
            { key: dayOfWeek },
            dayOfWeek
          )
        )
      ),
      React.createElement(
        'div',
        { style: AutoPrefix.all(styles.dateContainer) },
        React.createElement(
          'div',
          { style: AutoPrefix.all(styles.date) },
          React.createElement(
            SlideInTransitionGroup,
            {
              style: styles.month.root,
              direction: this.state.transitionDirection },
            React.createElement(
              'div',
              { key: month, style: styles.month.title, onTouchTap: this._handleMonthDayClick },
              month
            )
          ),
          React.createElement(
            SlideInTransitionGroup,
            {
              style: styles.day.root,
              direction: this.state.transitionDirection },
            React.createElement(
              'div',
              { key: day, style: styles.day.title, onTouchTap: this._handleMonthDayClick },
              day
            )
          ),
          React.createElement(
            SlideInTransitionGroup,
            {
              style: styles.year.root,
              direction: this.state.transitionDirection },
            React.createElement(
              'div',
              { key: year, style: styles.year.title, onTouchTap: this._handleYearClick },
              year
            )
          )
        )
      )
    );
  },

  _handleMonthDayClick: function _handleMonthDayClick() {
    if (this.props.handleMonthDayClick && this.state.selectedYear) {
      this.props.handleMonthDayClick();
    }

    if (this.props.yearSelectionAvailable) this.setState({ selectedYear: false });
  },

  _handleYearClick: function _handleYearClick() {
    if (this.props.handleYearClick && !this.state.selectedYear && this.props.yearSelectionAvailable) {
      this.props.handleYearClick();
    }

    if (this.props.yearSelectionAvailable) this.setState({ selectedYear: true });
  }

});

module.exports = DateDisplay;
},{"../mixins/style-propable":57,"../styles/auto-prefix":73,"../styles/transitions":80,"../transition-groups/slide-in":127,"../utils/date-time":131,"react":326}],26:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react');
var StylePropable = require('../mixins/style-propable');
var WindowListenable = require('../mixins/window-listenable');
var CssEvent = require('../utils/css-event');
var KeyCode = require('../utils/key-code');
var Calendar = require('./calendar');
var Dialog = require('../dialog');
var FlatButton = require('../flat-button');

var DatePickerDialog = React.createClass({
  displayName: 'DatePickerDialog',

  mixins: [StylePropable, WindowListenable],

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  propTypes: {
    initialDate: React.PropTypes.object,
    onAccept: React.PropTypes.func,
    onShow: React.PropTypes.func,
    onDismiss: React.PropTypes.func,
    onClickAway: React.PropTypes.func,
    minDate: React.PropTypes.object,
    maxDate: React.PropTypes.object,
    shouldDisableDate: React.PropTypes.func,
    hideToolbarYearChange: React.PropTypes.bool,
    showYearSelector: React.PropTypes.bool
  },

  windowListeners: {
    keyup: '_handleWindowKeyUp'
  },

  getInitialState: function getInitialState() {
    return {
      isCalendarActive: false,
      showMonthDayPicker: true
    };
  },

  render: function render() {
    var _props = this.props;
    var initialDate = _props.initialDate;
    var onAccept = _props.onAccept;
    var style = _props.style;

    var other = _objectWithoutProperties(_props, ['initialDate', 'onAccept', 'style']);

    var styles = {
      root: {
        fontSize: 14,
        color: this.context.muiTheme.component.datePicker.calendarTextColor
      },

      dialogContent: {
        width: this.props.mode === 'landscape' ? 560 : 280
      },

      dialogBodyContent: {
        padding: 0
      },

      actions: {
        marginRight: 8
      }
    };

    var actions = [React.createElement(FlatButton, {
      key: 0,
      label: 'Cancel',
      secondary: true,
      style: styles.actions,
      onTouchTap: this._handleCancelTouchTap })];

    if (!this.props.autoOk) {
      actions.push(React.createElement(FlatButton, {
        key: 1,
        label: 'OK',
        secondary: true,
        disabled: this.refs.calendar !== undefined && this.refs.calendar.isSelectedDateDisabled(),
        style: styles.actions,
        onTouchTap: this._handleOKTouchTap }));
    }

    return React.createElement(
      Dialog,
      _extends({}, other, {
        ref: 'dialog',
        style: styles.root,
        contentStyle: styles.dialogContent,
        bodyStyle: styles.dialogBodyContent,
        actions: actions,
        onDismiss: this._handleDialogDismiss,
        onShow: this._handleDialogShow,
        onClickAway: this._handleDialogClickAway,
        repositionOnUpdate: false }),
      React.createElement(Calendar, {
        ref: 'calendar',
        onDayTouchTap: this._onDayTouchTap,
        initialDate: this.props.initialDate,
        isActive: this.state.isCalendarActive,
        minDate: this.props.minDate,
        maxDate: this.props.maxDate,
        shouldDisableDate: this.props.shouldDisableDate,
        shouldShowMonthDayPickerFirst: this.state.showMonthDayPicker,
        hideToolbarYearChange: this.props.hideToolbarYearChange,
        showYearSelector: this.props.showYearSelector,
        mode: this.props.mode })
    );
  },

  show: function show() {
    this.refs.dialog.show();
  },

  dismiss: function dismiss() {
    this.refs.dialog.dismiss();
  },

  _onDayTouchTap: function _onDayTouchTap() {
    if (this.props.autoOk) {
      setTimeout(this._handleOKTouchTap, 300);
    }
  },

  _handleCancelTouchTap: function _handleCancelTouchTap() {
    this.dismiss();
  },

  _handleOKTouchTap: function _handleOKTouchTap() {
    if (this.props.onAccept && !this.refs.calendar.isSelectedDateDisabled()) {
      this.props.onAccept(this.refs.calendar.getSelectedDate());
    }

    this.dismiss();
  },

  _handleDialogShow: function _handleDialogShow() {
    this.setState({
      isCalendarActive: true
    });

    if (this.props.onShow) this.props.onShow();
  },

  _handleDialogDismiss: function _handleDialogDismiss() {
    var _this = this;

    CssEvent.onTransitionEnd(this.refs.dialog.getDOMNode(), function () {
      _this.setState({
        isCalendarActive: false,
        showMonthDayPicker: true
      });
    });

    if (this.props.onDismiss) this.props.onDismiss();
  },

  _handleDialogClickAway: function _handleDialogClickAway() {
    var _this2 = this;

    CssEvent.onTransitionEnd(this.refs.dialog.getDOMNode(), function () {
      _this2.setState({
        isCalendarActive: false,
        showMonthDayPicker: true
      });
    });

    if (this.props.onClickAway) this.props.onClickAway();
  },

  _handleWindowKeyUp: function _handleWindowKeyUp(e) {
    if (this.state.isCalendarActive) {
      switch (e.keyCode) {
        case KeyCode.ENTER:
          this._handleOKTouchTap();
          break;
      }
    }
  }

});

module.exports = DatePickerDialog;
},{"../dialog":30,"../flat-button":36,"../mixins/style-propable":57,"../mixins/window-listenable":59,"../utils/css-event":130,"../utils/key-code":137,"./calendar":24,"react":326}],27:[function(require,module,exports){
(function (process){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react');
var StylePropable = require('../mixins/style-propable');
var WindowListenable = require('../mixins/window-listenable');
var DateTime = require('../utils/date-time');
var DatePickerDialog = require('./date-picker-dialog');
var TextField = require('../text-field');

var DatePicker = React.createClass({
  displayName: 'DatePicker',

  mixins: [StylePropable, WindowListenable],

  propTypes: {
    autoOk: React.PropTypes.bool,
    defaultDate: React.PropTypes.object,
    formatDate: React.PropTypes.func,
    hideToolbarYearChange: React.PropTypes.bool,
    maxDate: React.PropTypes.object,
    minDate: React.PropTypes.object,
    mode: React.PropTypes.oneOf(['portrait', 'landscape', 'inline']),
    onDismiss: React.PropTypes.func,
    onChange: React.PropTypes.func,
    onFocus: React.PropTypes.func,
    onShow: React.PropTypes.func,
    onTouchTap: React.PropTypes.func,
    shouldDisableDate: React.PropTypes.func,
    showYearSelector: React.PropTypes.bool,
    style: React.PropTypes.object,
    textFieldStyle: React.PropTypes.object
  },

  windowListeners: {
    keyup: '_handleWindowKeyUp'
  },

  getDefaultProps: function getDefaultProps() {
    return {
      formatDate: DateTime.format,
      autoOk: false,
      showYearSelector: false
    };
  },

  getInitialState: function getInitialState() {
    return {
      date: this._isControlled() ? this._getControlledDate() : this.props.defaultDate,
      dialogDate: new Date()
    };
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (this._isControlled()) {
      var newDate = this._getControlledDate(nextProps);
      if (!DateTime.isEqualDate(this.state.date, newDate)) {
        this.setState({
          date: newDate
        });
      }
    }
  },

  render: function render() {
    var _props = this.props;
    var autoOk = _props.autoOk;
    var defaultDate = _props.defaultDate;
    var formatDate = _props.formatDate;
    var maxDate = _props.maxDate;
    var minDate = _props.minDate;
    var mode = _props.mode;
    var onDismiss = _props.onDismiss;
    var onFocus = _props.onFocus;
    var onShow = _props.onShow;
    var onTouchTap = _props.onTouchTap;
    var showYearSelector = _props.showYearSelector;
    var style = _props.style;
    var textFieldStyle = _props.textFieldStyle;
    var valueLink = _props.valueLink;

    var other = _objectWithoutProperties(_props, ['autoOk', 'defaultDate', 'formatDate', 'maxDate', 'minDate', 'mode', 'onDismiss', 'onFocus', 'onShow', 'onTouchTap', 'showYearSelector', 'style', 'textFieldStyle', 'valueLink']);

    return React.createElement(
      'div',
      { style: style },
      React.createElement(TextField, _extends({}, other, {
        style: textFieldStyle,
        ref: 'input',
        value: this.state.date ? formatDate(this.state.date) : undefined,
        onFocus: this._handleInputFocus,
        onTouchTap: this._handleInputTouchTap })),
      React.createElement(DatePickerDialog, {
        ref: 'dialogWindow',
        mode: mode,
        initialDate: this.state.dialogDate,
        onAccept: this._handleDialogAccept,
        onShow: onShow,
        onDismiss: this._handleDialogDismiss,
        minDate: minDate,
        maxDate: maxDate,
        autoOk: autoOk,
        showYearSelector: showYearSelector,
        shouldDisableDate: this.props.shouldDisableDate,
        hideToolbarYearChange: this.props.hideToolbarYearChange })
    );
  },

  getDate: function getDate() {
    return this.state.date;
  },

  setDate: function setDate(d) {
    if (process.env.NODE_ENV !== 'production' && this._isControlled()) {
      console.error('Cannot call DatePicker.setDate when value or valueLink is defined as a property.');
    }
    this.setState({
      date: d
    });
  },

  /**
   * Open the date-picker dialog programmatically from a parent.
   */
  openDialog: function openDialog() {
    this.setState({
      dialogDate: this.getDate()
    }, this.refs.dialogWindow.show);
  },

  /**
   * Alias for `openDialog()` for an api consistent with TextField.
   */
  focus: function focus() {
    this.openDialog();
  },

  _handleDialogAccept: function _handleDialogAccept(d) {
    if (!this._isControlled()) {
      this.setDate(d);
    }
    if (this.props.onChange) this.props.onChange(null, d);
    if (this.props.valueLink) this.props.valueLink.requestChange(d);
  },

  _handleDialogDismiss: function _handleDialogDismiss() {
    if (this.props.onDismiss) this.props.onDismiss();
  },

  _handleInputFocus: function _handleInputFocus(e) {
    e.target.blur();
    if (this.props.onFocus) this.props.onFocus(e);
  },

  _handleInputTouchTap: function _handleInputTouchTap(e) {
    this.openDialog();
    if (this.props.onTouchTap) this.props.onTouchTap(e);
  },

  _handleWindowKeyUp: function _handleWindowKeyUp() {
    //TO DO: open the dialog if input has focus
  },

  _isControlled: function _isControlled() {
    return this.props.hasOwnProperty('value') || this.props.hasOwnProperty('valueLink');
  },

  _getControlledDate: function _getControlledDate() {
    var props = arguments.length <= 0 || arguments[0] === undefined ? this.props : arguments[0];

    if (DateTime.isDateObject(props.value)) {
      return props.value;
    } else if (props.valueLink && DateTime.isDateObject(props.valueLink.value)) {
      return props.valueLink.value;
    }
  }

});

module.exports = DatePicker;
}).call(this,require('_process'))
},{"../mixins/style-propable":57,"../mixins/window-listenable":59,"../text-field":106,"../utils/date-time":131,"./date-picker-dialog":26,"_process":2,"react":326}],28:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react');
var StylePropable = require('../mixins/style-propable');
var Transition = require('../styles/transitions');
var DateTime = require('../utils/date-time');
var EnhancedButton = require('../enhanced-button');

var DayButton = React.createClass({
  displayName: 'DayButton',

  mixins: [StylePropable],

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  propTypes: {
    date: React.PropTypes.object,
    onTouchTap: React.PropTypes.func,
    selected: React.PropTypes.bool,
    disabled: React.PropTypes.bool
  },

  getDefaultProps: function getDefaultProps() {
    return {
      selected: false,
      disabled: false
    };
  },

  getInitialState: function getInitialState() {
    return {
      hover: false
    };
  },

  getTheme: function getTheme() {
    return this.context.muiTheme.component.datePicker;
  },

  render: function render() {
    var _props = this.props;
    var date = _props.date;
    var onTouchTap = _props.onTouchTap;
    var selected = _props.selected;

    var other = _objectWithoutProperties(_props, ['date', 'onTouchTap', 'selected']);

    var styles = {
      root: {
        boxSizing: 'border-box',
        WebkitTapHighlightColor: 'rgba(0,0,0,0)',
        position: 'relative',
        float: 'left',
        width: 36,
        padding: '4px 2px'
      },

      label: {
        position: 'relative',
        color: this.context.muiTheme.palette.textColor
      },

      buttonState: {
        position: 'absolute',
        height: 32,
        width: 32,
        opacity: 0,
        borderRadius: '50%',
        transform: 'scale(0)',
        transition: Transition.easeOut(),
        backgroundColor: this.getTheme().selectColor
      }
    };

    if (this.state.hover) {
      styles.label.color = this.getTheme().selectTextColor;
      styles.buttonState.opacity = '0.6';
      styles.buttonState.transform = 'scale(1)';
    }

    if (this.props.selected) {
      styles.label.color = this.getTheme().selectTextColor;
      styles.buttonState.opacity = 1;
      styles.buttonState.transform = 'scale(1)';
    } else if (this.props.disabled) {
      styles.root.opacity = '0.6';
    }

    if (DateTime.isEqualDate(this.props.date, new Date()) && !this.props.selected) {
      styles.label.color = this.getTheme().color;
    }

    return this.props.date ? React.createElement(
      EnhancedButton,
      _extends({}, other, {
        style: styles.root,
        hoverStyle: styles.hover,
        disabled: this.props.disabled,
        disableFocusRipple: true,
        disableTouchRipple: true,
        onMouseEnter: this._handleMouseEnter,
        onMouseLeave: this._handleMouseLeave,
        onTouchTap: this._handleTouchTap,
        onKeyboardFocus: this._handleKeyboardFocus }),
      React.createElement('div', { style: styles.buttonState }),
      React.createElement(
        'span',
        { style: styles.label },
        this.props.date.getDate()
      )
    ) : React.createElement('span', { style: styles.root });
  },

  _handleMouseEnter: function _handleMouseEnter() {
    if (!this.props.disabled) this.setState({ hover: true });
  },

  _handleMouseLeave: function _handleMouseLeave() {
    if (!this.props.disabled) this.setState({ hover: false });
  },

  _handleTouchTap: function _handleTouchTap(e) {
    if (!this.props.disabled && this.props.onTouchTap) this.props.onTouchTap(e, this.props.date);
  },

  _handleKeyboardFocus: function _handleKeyboardFocus(e, keyboardFocused) {
    if (!this.props.disabled && this.props.onKeyboardFocus) this.props.onKeyboardFocus(e, keyboardFocused, this.props.date);
  }

});

module.exports = DayButton;
},{"../enhanced-button":33,"../mixins/style-propable":57,"../styles/transitions":80,"../utils/date-time":131,"react":326}],29:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react');
var StylePropable = require('../mixins/style-propable');
var EnhancedButton = require('../enhanced-button');

var YearButton = React.createClass({
  displayName: 'YearButton',

  mixins: [StylePropable],

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  propTypes: {
    year: React.PropTypes.number,
    onTouchTap: React.PropTypes.func,
    selected: React.PropTypes.bool
  },

  getDefaultProps: function getDefaultProps() {
    return {
      selected: false
    };
  },

  getInitialState: function getInitialState() {
    return {
      hover: false
    };
  },

  getTheme: function getTheme() {
    return this.context.muiTheme.component.datePicker;
  },

  render: function render() {
    var _props = this.props;
    var className = _props.className;
    var year = _props.year;
    var onTouchTap = _props.onTouchTap;
    var selected = _props.selected;

    var other = _objectWithoutProperties(_props, ['className', 'year', 'onTouchTap', 'selected']);

    var styles = {
      root: {
        boxSizing: 'border-box',
        WebkitTapHighlightColor: 'rgba(0,0,0,0)',
        position: 'relative',
        display: 'block',
        margin: '0 auto',
        width: 36,
        fontSize: 14,
        padding: '8px 2px'
      },

      label: {
        position: 'relative',
        top: -1,
        color: this.context.muiTheme.palette.textColor
      },

      buttonState: {
        position: 'absolute',
        height: 32,
        width: 32,
        opacity: 0,
        borderRadius: '50%',
        transform: 'scale(0)',
        backgroundColor: this.getTheme().selectColor
      }
    };

    if (this.state.hover) {
      styles.label.color = this.getTheme().selectTextColor;
      styles.buttonState.opacity = 0.6;
      styles.buttonState.transform = 'scale(1.5)';
    }

    if (selected) {
      styles.label.color = this.getTheme().selectTextColor;
      styles.buttonState.opacity = 1;
      styles.buttonState.transform = 'scale(1.5)';
    }

    if (year === new Date().getFullYear()) {
      styles.root.color = this.getTheme().color;
    }

    return React.createElement(
      EnhancedButton,
      _extends({}, other, {
        style: styles.root,
        disableFocusRipple: true,
        disableTouchRipple: true,
        onMouseEnter: this._handleMouseEnter,
        onMouseLeave: this._handleMouseLeave,
        onTouchTap: this._handleTouchTap }),
      React.createElement('div', { style: styles.buttonState }),
      React.createElement(
        'span',
        { style: styles.label },
        year
      )
    );
  },

  _handleMouseEnter: function _handleMouseEnter() {
    this.setState({ hover: true });
  },

  _handleMouseLeave: function _handleMouseLeave() {
    this.setState({ hover: false });
  },

  _handleTouchTap: function _handleTouchTap(e) {
    if (this.props.onTouchTap) this.props.onTouchTap(e, this.props.year);
  }

});

module.exports = YearButton;
},{"../enhanced-button":33,"../mixins/style-propable":57,"react":326}],30:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react/addons');
var WindowListenable = require('./mixins/window-listenable');
var CssEvent = require('./utils/css-event');
var KeyCode = require('./utils/key-code');
var Transitions = require('./styles/transitions');
var StylePropable = require('./mixins/style-propable');
var FlatButton = require('./flat-button');
var Overlay = require('./overlay');
var Paper = require('./paper');

var ReactTransitionGroup = React.addons.TransitionGroup;

var TransitionItem = React.createClass({
  displayName: 'TransitionItem',

  mixins: [StylePropable],

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  getInitialState: function getInitialState() {
    return {
      style: {}
    };
  },

  componentWillEnter: function componentWillEnter(callback) {
    var spacing = this.context.muiTheme.spacing;

    this.setState({
      style: {
        opacity: 1,
        transform: 'translate3d(0, ' + spacing.desktopKeylineIncrement + 'px, 0)'
      }
    });

    setTimeout(callback, 450); // matches transition duration
  },

  componentWillLeave: function componentWillLeave(callback) {
    var _this = this;

    this.setState({
      style: {
        opacity: 0,
        transform: 'translate3d(0, 0, 0)'
      }
    });

    setTimeout((function () {
      if (_this.isMounted()) callback();
    }).bind(this), 450); // matches transition duration
  },

  render: function render() {
    var _props = this.props;
    var style = _props.style;

    var other = _objectWithoutProperties(_props, ['style']);

    return React.createElement(
      'div',
      _extends({}, other, { style: this.mergeAndPrefix(this.state.style, style) }),
      this.props.children
    );
  }
});

var Dialog = React.createClass({
  displayName: 'Dialog',

  mixins: [WindowListenable, StylePropable],

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  propTypes: {
    actions: React.PropTypes.array,
    autoDetectWindowHeight: React.PropTypes.bool,
    autoScrollBodyContent: React.PropTypes.bool,
    bodyStyle: React.PropTypes.object,
    contentClassName: React.PropTypes.string,
    contentStyle: React.PropTypes.object,
    modal: React.PropTypes.bool,
    openImmediately: React.PropTypes.bool,
    onClickAway: React.PropTypes.func,
    onDismiss: React.PropTypes.func,
    onShow: React.PropTypes.func,
    repositionOnUpdate: React.PropTypes.bool,
    title: React.PropTypes.node
  },

  windowListeners: {
    keyup: '_handleWindowKeyUp',
    resize: '_positionDialog'
  },

  getDefaultProps: function getDefaultProps() {
    return {
      autoDetectWindowHeight: false,
      autoScrollBodyContent: false,
      actions: [],
      modal: false,
      repositionOnUpdate: true
    };
  },

  getInitialState: function getInitialState() {
    return {
      open: this.props.openImmediately || false
    };
  },

  componentDidMount: function componentDidMount() {
    this._positionDialog();
    if (this.props.openImmediately) {
      this.refs.dialogOverlay.preventScrolling();
      this._onShow();
    }
  },

  componentDidUpdate: function componentDidUpdate() {
    this._positionDialog();
  },

  getStyles: function getStyles() {
    var spacing = this.context.muiTheme.spacing;

    var main = {
      position: 'fixed',
      boxSizing: 'border-box',
      WebkitTapHighlightColor: 'rgba(0,0,0,0)',
      zIndex: 10,
      top: 0,
      left: -10000,
      width: '100%',
      height: '100%',
      transition: Transitions.easeOut('0ms', 'left', '450ms')
    };

    var content = {
      boxSizing: 'border-box',
      WebkitTapHighlightColor: 'rgba(0,0,0,0)',
      transition: Transitions.easeOut(),
      position: 'relative',
      width: '75%',
      maxWidth: spacing.desktopKeylineIncrement * 12,
      margin: '0 auto',
      zIndex: 10
    };

    var body = {
      padding: spacing.desktopGutter,
      overflowY: this.props.autoScrollBodyContent ? 'auto' : 'hidden',
      overflowX: 'hidden'
    };

    var gutter = spacing.desktopGutter + 'px ';
    var title = {
      margin: 0,
      padding: gutter + gutter + '0 ' + gutter,
      color: this.context.muiTheme.palette.textColor,
      fontSize: 24,
      lineHeight: '32px',
      fontWeight: '400'
    };

    if (this.state.open) {
      main = this.mergeAndPrefix(main, {
        left: 0,
        transition: Transitions.easeOut('0ms', 'left', '0ms')
      });
    }

    return {
      main: this.mergeAndPrefix(main, this.props.style),
      content: this.mergeAndPrefix(content, this.props.contentStyle),
      paper: {
        background: this.context.muiTheme.canvasColor
      },
      body: this.mergeStyles(body, this.props.bodyStyle),
      title: this.mergeStyles(title, this.props.titleStyle)
    };
  },

  render: function render() {
    var styles = this.getStyles();
    var actions = this._getActionsContainer(this.props.actions);
    var title = undefined;
    if (this.props.title) {
      // If the title is a string, wrap in an h3 tag.
      // If not, just use it as a node.
      title = Object.prototype.toString.call(this.props.title) === '[object String]' ? React.createElement(
        'h3',
        { style: styles.title },
        this.props.title
      ) : this.props.title;
    }

    return React.createElement(
      'div',
      { ref: 'container', style: styles.main },
      React.createElement(
        ReactTransitionGroup,
        { component: 'div', ref: 'dialogWindow' },
        this.state.open && React.createElement(
          TransitionItem,
          {
            className: this.props.contentClassName,
            style: styles.content },
          React.createElement(
            Paper,
            {
              style: styles.paper,
              zDepth: 4 },
            title,
            React.createElement(
              'div',
              { ref: 'dialogContent', style: styles.body },
              this.props.children
            ),
            actions
          )
        )
      ),
      React.createElement(Overlay, {
        ref: 'dialogOverlay',
        show: this.state.open,
        autoLockScrolling: false,
        onTouchTap: this._handleOverlayTouchTap })
    );
  },

  isOpen: function isOpen() {
    return this.state.open;
  },

  dismiss: function dismiss() {
    var _this2 = this;

    CssEvent.onTransitionEnd(this.getDOMNode(), (function () {
      _this2.refs.dialogOverlay.allowScrolling();
    }).bind(this));

    this.setState({ open: false });
    this._onDismiss();
  },

  show: function show() {
    this.refs.dialogOverlay.preventScrolling();
    this.setState({ open: true }, this._onShow);
  },

  _getAction: function _getAction(actionJSON, key) {
    var _this3 = this;

    var styles = { marginRight: 8 };
    var props = {
      key: key,
      secondary: true,
      onClick: actionJSON.onClick,
      onTouchTap: function onTouchTap() {
        if (actionJSON.onTouchTap) {
          actionJSON.onTouchTap.call(undefined);
        }
        if (!(actionJSON.onClick || actionJSON.onTouchTap)) {
          _this3.dismiss();
        }
      },
      label: actionJSON.text,
      style: styles
    };
    if (actionJSON.ref) {
      props.ref = actionJSON.ref;
      props.keyboardFocused = actionJSON.ref === this.props.actionFocus;
    }

    return React.createElement(FlatButton, props);
  },

  _getActionsContainer: function _getActionsContainer(actions) {
    var actionContainer = undefined;
    var actionObjects = [];
    var actionStyle = {
      boxSizing: 'border-box',
      WebkitTapHighlightColor: 'rgba(0,0,0,0)',
      padding: 8,
      marginBottom: 8,
      width: '100%',
      textAlign: 'right'
    };

    if (actions.length) {
      for (var i = 0; i < actions.length; i++) {
        var currentAction = actions[i];

        //if the current action isn't a react object, create one
        if (!React.isValidElement(currentAction)) {
          currentAction = this._getAction(currentAction, i);
        }

        actionObjects.push(currentAction);
      }

      actionContainer = React.createElement(
        'div',
        { style: actionStyle },
        actionObjects
      );
    }

    return actionContainer;
  },

  _positionDialog: function _positionDialog() {
    if (this.state.open) {
      var clientHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
      var container = this.getDOMNode();
      var dialogWindow = this.refs.dialogWindow.getDOMNode();
      var dialogContent = this.refs.dialogContent.getDOMNode();
      var minPaddingTop = 16;

      //Reset the height in case the window was resized.
      dialogWindow.style.height = '';
      dialogContent.style.height = '';

      var dialogWindowHeight = dialogWindow.offsetHeight;
      var paddingTop = (clientHeight - dialogWindowHeight) / 2 - 64;
      if (paddingTop < minPaddingTop) paddingTop = minPaddingTop;

      //Vertically center the dialog window, but make sure it doesn't
      //transition to that position.
      if (this.props.repositionOnUpdate || !container.style.paddingTop) {
        container.style.paddingTop = paddingTop + 'px';
      }

      // Force a height if the dialog is taller than clientHeight
      if (this.props.autoDetectWindowHeight || this.props.autoScrollBodyContent) {
        var styles = this.getStyles();
        var maxDialogContentHeight = clientHeight - 2 * (styles.body.padding + 64);

        if (this.props.title) maxDialogContentHeight -= dialogContent.previousSibling.offsetHeight;
        if (this.props.actions) maxDialogContentHeight -= dialogContent.nextSibling.offsetHeight;

        dialogContent.style.maxHeight = maxDialogContentHeight + 'px';
      }
    }
  },

  _onShow: function _onShow() {
    if (this.props.onShow) this.props.onShow();
  },

  _onDismiss: function _onDismiss() {
    if (this.props.onDismiss) this.props.onDismiss();
  },

  _handleOverlayTouchTap: function _handleOverlayTouchTap(e) {
    if (this.props.modal) {
      e.stopPropagation();
    } else {
      this.dismiss();
      if (this.props.onClickAway) this.props.onClickAway();
    }
  },

  _handleWindowKeyUp: function _handleWindowKeyUp(e) {
    if (e.keyCode === KeyCode.ESC && !this.props.modal) {
      this.dismiss();
    }
  }

});

module.exports = Dialog;
},{"./flat-button":36,"./mixins/style-propable":57,"./mixins/window-listenable":59,"./overlay":60,"./paper":61,"./styles/transitions":80,"./utils/css-event":130,"./utils/key-code":137,"react/addons":154}],31:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react');
var StylePropable = require('./mixins/style-propable');
var Transitions = require('./styles/transitions');
var ClickAwayable = require('./mixins/click-awayable');
var FontIcon = require('./font-icon');
var Menu = require('./menu/menu');

var DropDownIcon = React.createClass({
  displayName: 'DropDownIcon',

  mixins: [StylePropable, ClickAwayable],

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  propTypes: {
    onChange: React.PropTypes.func,
    menuItems: React.PropTypes.array.isRequired,
    closeOnMenuItemTouchTap: React.PropTypes.bool,
    iconStyle: React.PropTypes.object,
    iconClassName: React.PropTypes.string,
    iconLigature: React.PropTypes.string
  },

  getInitialState: function getInitialState() {
    return {
      open: false
    };
  },

  getDefaultProps: function getDefaultProps() {
    return {
      closeOnMenuItemTouchTap: true
    };
  },

  componentDidMount: function componentDidMount() {
    // This component can be deprecated once ./menu/menu has been deprecated.
    // if (process.env.NODE_ENV !== 'production') {
    //   console.warn('DropDownIcon has been deprecated. Use IconMenu instead.');
    // }
  },

  componentClickAway: function componentClickAway() {
    this.setState({ open: false });
  },

  getStyles: function getStyles() {
    var spacing = this.context.muiTheme.spacing;
    var iconWidth = 48;
    var styles = {
      root: {
        display: 'inline-block',
        width: iconWidth + 'px !important',
        position: 'relative',
        height: spacing.desktopToolbarHeight,
        fontSize: spacing.desktopDropDownMenuFontSize,
        cursor: 'pointer'
      },
      menu: {
        transition: Transitions.easeOut(),
        right: '-14px !important',
        top: '9px !important',
        opacity: this.state.open ? 1 : 0
      },
      menuItem: { // similair to drop down menu's menu item styles
        paddingRight: spacing.iconSize + spacing.desktopGutterLess * 2,
        height: spacing.desktopDropDownMenuItemHeight,
        lineHeight: spacing.desktopDropDownMenuItemHeight + 'px'
      }
    };
    return styles;
  },

  render: function render() {
    var _props = this.props;
    var style = _props.style;
    var children = _props.children;
    var menuItems = _props.menuItems;
    var closeOnMenuItemTouchTap = _props.closeOnMenuItemTouchTap;
    var iconStyle = _props.iconStyle;
    var iconClassName = _props.iconClassName;

    var other = _objectWithoutProperties(_props, ['style', 'children', 'menuItems', 'closeOnMenuItemTouchTap', 'iconStyle', 'iconClassName']);

    var styles = this.getStyles();

    return React.createElement(
      'div',
      _extends({}, other, { style: this.mergeAndPrefix(styles.root, this.props.style) }),
      React.createElement(
        'div',
        { onTouchTap: this._onControlClick },
        React.createElement(
          FontIcon,
          {
            className: iconClassName,
            style: iconStyle },
          this.props.iconLigature
        ),
        this.props.children
      ),
      React.createElement(Menu, {
        ref: 'menuItems',
        style: this.mergeAndPrefix(styles.menu),
        menuItems: menuItems,
        menuItemStyle: styles.menuItem,
        hideable: true,
        visible: this.state.open,
        onItemTap: this._onMenuItemClick })
    );
  },

  _onControlClick: function _onControlClick() {
    this.setState({ open: !this.state.open });
  },

  _onMenuItemClick: function _onMenuItemClick(e, key, payload) {
    if (this.props.onChange) this.props.onChange(e, key, payload);

    if (this.props.closeOnMenuItemTouchTap) {
      this.setState({ open: false });
    }
  }
});

module.exports = DropDownIcon;
},{"./font-icon":38,"./menu/menu":50,"./mixins/click-awayable":54,"./mixins/style-propable":57,"./styles/transitions":80,"react":326}],32:[function(require,module,exports){
(function (process){
'use strict';

var React = require('react');
var StylePropable = require('./mixins/style-propable');
var Transitions = require('./styles/transitions');
var KeyCode = require('./utils/key-code');
var DropDownArrow = require('./svg-icons/navigation/arrow-drop-down');
var Paper = require('./paper');
var Menu = require('./menu/menu');
var ClearFix = require('./clearfix');

var DropDownMenu = React.createClass({
  displayName: 'DropDownMenu',

  mixins: [StylePropable],

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  // The nested styles for drop-down-menu are modified by toolbar and possibly
  // other user components, so it will give full access to its js styles rather
  // than just the parent.
  propTypes: {
    className: React.PropTypes.string,
    displayMember: React.PropTypes.string,
    valueMember: React.PropTypes.string,
    autoWidth: React.PropTypes.bool,
    disabled: React.PropTypes.bool,
    onChange: React.PropTypes.func,
    menuItems: React.PropTypes.array.isRequired,
    menuItemStyle: React.PropTypes.object,
    underlineStyle: React.PropTypes.object,
    iconStyle: React.PropTypes.object,
    labelStyle: React.PropTypes.object,
    selectedIndex: React.PropTypes.number
  },

  getDefaultProps: function getDefaultProps() {
    return {
      autoWidth: true,
      disabled: false,
      valueMember: 'payload',
      displayMember: 'text'
    };
  },

  getInitialState: function getInitialState() {
    return {
      open: false,
      selectedIndex: this._isControlled() ? null : this.props.selectedIndex || 0
    };
  },

  componentDidMount: function componentDidMount() {
    if (this.props.autoWidth) this._setWidth();
    if (this.props.hasOwnProperty('selectedIndex')) this._setSelectedIndex(this.props);
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (this.props.autoWidth) this._setWidth();
    if (nextProps.hasOwnProperty('value') || nextProps.hasOwnProperty('valueLink')) {
      return;
    } else if (nextProps.hasOwnProperty('selectedIndex')) {
      this._setSelectedIndex(nextProps);
    }
  },

  getStyles: function getStyles() {
    var disabled = this.props.disabled;

    var zIndex = 5; // As AppBar
    var spacing = this.context.muiTheme.spacing;
    var accentColor = this.context.muiTheme.component.dropDownMenu.accentColor;
    var backgroundColor = this.context.muiTheme.component.menu.backgroundColor;
    var styles = {
      root: {
        transition: Transitions.easeOut(),
        position: 'relative',
        display: 'inline-block',
        height: spacing.desktopSubheaderHeight,
        fontSize: spacing.desktopDropDownMenuFontSize,
        outline: 'none'
      },
      control: {
        cursor: disabled ? 'not-allowed' : 'pointer',
        position: 'static',
        height: '100%'
      },
      controlBg: {
        transition: Transitions.easeOut(),
        backgroundColor: backgroundColor,
        height: '100%',
        width: '100%',
        opacity: 0
      },
      icon: {
        position: 'absolute',
        top: (spacing.desktopToolbarHeight - 24) / 2,
        right: spacing.desktopGutterLess,
        fill: this.context.muiTheme.component.dropDownMenu.accentColor
      },
      label: {
        transition: Transitions.easeOut(),
        lineHeight: spacing.desktopToolbarHeight + 'px',
        position: 'absolute',
        paddingLeft: spacing.desktopGutter,
        top: 0,
        opacity: 1,
        color: disabled ? this.context.muiTheme.palette.disabledColor : this.context.muiTheme.palette.textColor
      },
      underline: {
        borderTop: 'solid 1px ' + accentColor,
        margin: '-1px ' + spacing.desktopGutter + 'px'
      },
      menu: {
        zIndex: zIndex + 1
      },
      menuItem: {
        paddingRight: spacing.iconSize + spacing.desktopGutterLess + spacing.desktopGutterMini,
        height: spacing.desktopDropDownMenuItemHeight,
        lineHeight: spacing.desktopDropDownMenuItemHeight + 'px',
        whiteSpace: 'nowrap'
      },
      rootWhenOpen: {
        opacity: 1
      },
      labelWhenOpen: {
        opacity: 0,
        top: spacing.desktopToolbarHeight / 2
      },
      overlay: {
        height: '100%',
        width: '100%',
        position: 'fixed',
        top: 0,
        left: 0,
        zIndex: zIndex
      }
    };

    return styles;
  },

  getInputNode: function getInputNode() {
    var root = this.refs.root;
    var item = this.props.menuItems[this.state.selectedIndex];
    if (item) {
      root.value = item[this.props.displayMember];
    }

    return root;
  },

  render: function render() {
    var _this = this;
    var styles = this.getStyles();
    var selectedIndex = this._isControlled() ? null : this.state.selectedIndex;
    var displayValue = "";
    if (selectedIndex) {
      if (process.env.NODE_ENV !== 'production') {
        console.assert(!!this.props.menuItems[selectedIndex], 'SelectedIndex of ' + selectedIndex + ' does not exist in menuItems.');
      }
    } else {
      if (this.props.valueMember && this._isControlled()) {
        var value = this.props.hasOwnProperty('value') ? this.props.value : this.props.valueLink.value;
        if (value) {
          for (var i = 0; i < this.props.menuItems.length; i++) {
            if (this.props.menuItems[i][this.props.valueMember] === value) {
              selectedIndex = i;
            }
          }
        }
      }
    }

    var selectedItem = this.props.menuItems[selectedIndex];
    if (selectedItem) {
      displayValue = selectedItem[this.props.displayMember];
    }

    var menuItems = this.props.menuItems.map(function (item) {
      item.text = item[_this.props.displayMember];
      item.payload = item[_this.props.valueMember];
      return item;
    });

    return React.createElement(
      'div',
      {
        ref: 'root',
        onKeyDown: this._onKeyDown,
        onFocus: this.props.onFocus,
        onBlur: this.props.onBlur,
        className: this.props.className,
        style: this.mergeAndPrefix(styles.root, this.state.open && styles.rootWhenOpen, this.props.style) },
      React.createElement(
        ClearFix,
        { style: this.mergeAndPrefix(styles.control), onTouchTap: this._onControlClick },
        React.createElement(Paper, { style: this.mergeAndPrefix(styles.controlBg), zDepth: 0 }),
        React.createElement(
          'div',
          { style: this.mergeAndPrefix(styles.label, this.state.open && styles.labelWhenOpen, this.props.labelStyle) },
          displayValue
        ),
        React.createElement(DropDownArrow, { style: this.mergeAndPrefix(styles.icon, this.props.iconStyle) }),
        React.createElement('div', { style: this.mergeAndPrefix(styles.underline, this.props.underlineStyle) })
      ),
      React.createElement(Menu, {
        ref: 'menuItems',
        autoWidth: this.props.autoWidth,
        selectedIndex: selectedIndex,
        menuItems: menuItems,
        style: styles.menu,
        menuItemStyle: this.mergeAndPrefix(styles.menuItem, this.props.menuItemStyle),
        hideable: true,
        visible: this.state.open,
        onRequestClose: this._onMenuRequestClose,
        onItemTap: this._onMenuItemClick }),
      this.state.open && React.createElement('div', { style: styles.overlay, onTouchTap: this._handleOverlayTouchTap })
    );
  },

  _setWidth: function _setWidth() {
    var el = React.findDOMNode(this);
    var menuItemsDom = React.findDOMNode(this.refs.menuItems);
    if (!this.props.style || !this.props.style.hasOwnProperty('width')) {
      el.style.width = 'auto';
      el.style.width = menuItemsDom.offsetWidth + 'px';
    }
  },

  _setSelectedIndex: function _setSelectedIndex(props) {
    var selectedIndex = props.selectedIndex;

    if (process.env.NODE_ENV !== 'production' && selectedIndex < 0) {
      console.warn('Cannot set selectedIndex to a negative index.', selectedIndex);
    }

    this.setState({ selectedIndex: selectedIndex > -1 ? selectedIndex : 0 });
  },

  _onControlClick: function _onControlClick() {
    if (!this.props.disabled) {
      this.setState({ open: !this.state.open });
    }
  },

  _onKeyDown: function _onKeyDown(e) {
    switch (e.which) {
      case KeyCode.UP:
        if (!this.state.open) {
          this._selectPreviousItem();
        } else {
          if (e.altKey) {
            this.setState({ open: false });
          }
        }
        break;
      case KeyCode.DOWN:
        if (!this.state.open) {
          if (e.altKey) {
            this.setState({ open: true });
          } else {
            this._selectNextItem();
          }
        }
        break;
      case KeyCode.ENTER:
      case KeyCode.SPACE:
        this.setState({ open: true });
        break;
      default:
        return; //important
    }
    e.preventDefault();
  },

  _onMenuItemClick: function _onMenuItemClick(e, key, payload) {
    if (this.props.onChange && this.state.selectedIndex !== key) {
      var selectedItem = this.props.menuItems[key];
      if (selectedItem) {
        e.target.value = selectedItem[this.props.valueMember];
      }

      if (this.props.valueLink) {
        this.props.valueLink.requestChange(e.target.value);
      } else {
        this.props.onChange(e, key, payload);
      }
    }

    this.setState({
      selectedIndex: key,
      value: e.target.value,
      open: false
    });
  },

  _onMenuRequestClose: function _onMenuRequestClose() {
    this.setState({ open: false });
  },

  _selectPreviousItem: function _selectPreviousItem() {
    this.setState({ selectedIndex: Math.max(this.state.selectedIndex - 1, 0) });
  },

  _selectNextItem: function _selectNextItem() {
    this.setState({ selectedIndex: Math.min(this.state.selectedIndex + 1, this.props.menuItems.length - 1) });
  },

  _handleOverlayTouchTap: function _handleOverlayTouchTap() {
    this.setState({
      open: false
    });
  },

  _isControlled: function _isControlled() {
    return this.props.hasOwnProperty('value') || this.props.hasOwnProperty('valueLink');
  }

});

module.exports = DropDownMenu;
}).call(this,require('_process'))
},{"./clearfix":20,"./menu/menu":50,"./mixins/style-propable":57,"./paper":61,"./styles/transitions":80,"./svg-icons/navigation/arrow-drop-down":87,"./utils/key-code":137,"_process":2,"react":326}],33:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react/addons');
var PureRenderMixin = React.addons.PureRenderMixin;
var StylePropable = require('./mixins/style-propable');
var Colors = require('./styles/colors');
var Children = require('./utils/children');
var Events = require('./utils/events');
var KeyCode = require('./utils/key-code');
var FocusRipple = require('./ripples/focus-ripple');
var TouchRipple = require('./ripples/touch-ripple');

var styleInjected = false;
var listening = false;
var tabPressed = false;

function injectStyle() {
  if (!styleInjected) {
    // Remove inner padding and border in Firefox 4+.
    var style = document.createElement("style");
    style.innerHTML = '\n      button::-moz-focus-inner,\n      input::-moz-focus-inner {\n        border: 0;\n        padding: 0;\n      }\n    ';

    document.body.appendChild(style);
    styleInjected = true;
  }
}

function listenForTabPresses() {
  if (!listening) {
    Events.on(window, 'keydown', function (e) {
      tabPressed = e.keyCode === KeyCode.TAB;
    });
    listening = true;
  }
}

var EnhancedButton = React.createClass({
  displayName: 'EnhancedButton',

  mixins: [PureRenderMixin, StylePropable],

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  propTypes: {
    centerRipple: React.PropTypes.bool,
    containerElement: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.element]),
    disabled: React.PropTypes.bool,
    disableFocusRipple: React.PropTypes.bool,
    disableKeyboardFocus: React.PropTypes.bool,
    disableTouchRipple: React.PropTypes.bool,
    keyboardFocused: React.PropTypes.bool,
    linkButton: React.PropTypes.bool,
    focusRippleColor: React.PropTypes.string,
    touchRippleColor: React.PropTypes.string,
    focusRippleOpacity: React.PropTypes.number,
    touchRippleOpacity: React.PropTypes.number,
    onBlur: React.PropTypes.func,
    onFocus: React.PropTypes.func,
    onKeyboardFocus: React.PropTypes.func,
    onKeyDown: React.PropTypes.func,
    onKeyUp: React.PropTypes.func,
    onTouchTap: React.PropTypes.func,
    tabIndex: React.PropTypes.number
  },

  getDefaultProps: function getDefaultProps() {
    return {
      containerElement: 'button',
      onBlur: function onBlur() {},
      onFocus: function onFocus() {},
      onKeyboardFocus: function onKeyboardFocus() {},
      onKeyDown: function onKeyDown() {},
      onKeyUp: function onKeyUp() {},
      onTouchTap: function onTouchTap() {},
      tabIndex: 0,
      type: 'button'
    };
  },

  getInitialState: function getInitialState() {
    return {
      isKeyboardFocused: !this.props.disabled && this.props.keyboardFocused && !this.props.disableKeyboardFocus
    };
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if ((nextProps.disabled || nextProps.disableKeyboardFocus) && this.state.isKeyboardFocused) {
      this.setState({ isKeyboardFocused: false });
      if (nextProps.onKeyboardFocus) {
        nextProps.onKeyboardFocus(null, false);
      }
    }
  },

  componentDidMount: function componentDidMount() {
    injectStyle();
    listenForTabPresses();
  },

  render: function render() {
    var _props = this.props;
    var centerRipple = _props.centerRipple;
    var children = _props.children;
    var containerElement = _props.containerElement;
    var disabled = _props.disabled;
    var disableFocusRipple = _props.disableFocusRipple;
    var disableKeyboardFocus = _props.disableKeyboardFocus;
    var disableTouchRipple = _props.disableTouchRipple;
    var focusRippleColor = _props.focusRippleColor;
    var focusRippleOpacity = _props.focusRippleOpacity;
    var linkButton = _props.linkButton;
    var touchRippleColor = _props.touchRippleColor;
    var touchRippleOpacity = _props.touchRippleOpacity;
    var onBlur = _props.onBlur;
    var onFocus = _props.onFocus;
    var onKeyUp = _props.onKeyUp;
    var onKeyDown = _props.onKeyDown;
    var onTouchTap = _props.onTouchTap;
    var style = _props.style;
    var tabIndex = _props.tabIndex;
    var type = _props.type;

    var other = _objectWithoutProperties(_props, ['centerRipple', 'children', 'containerElement', 'disabled', 'disableFocusRipple', 'disableKeyboardFocus', 'disableTouchRipple', 'focusRippleColor', 'focusRippleOpacity', 'linkButton', 'touchRippleColor', 'touchRippleOpacity', 'onBlur', 'onFocus', 'onKeyUp', 'onKeyDown', 'onTouchTap', 'style', 'tabIndex', 'type']);

    var mergedStyles = this.mergeAndPrefix({
      border: 10,
      background: 'none',
      boxSizing: 'border-box',
      display: 'inline-block',
      font: 'inherit',
      fontFamily: this.context.muiTheme.contentFontFamily,
      tapHighlightColor: Colors.transparent,
      appearance: linkButton ? null : 'button',
      cursor: disabled ? 'default' : 'pointer',
      textDecoration: 'none',
      outline: 'none'
    }, style);

    if (disabled && linkButton) {
      return React.createElement(
        'span',
        _extends({}, other, {
          style: mergedStyles }),
        children
      );
    }

    var buttonProps = _extends({}, other, {
      style: mergedStyles,
      disabled: disabled,
      onBlur: this._handleBlur,
      onFocus: this._handleFocus,
      onTouchTap: this._handleTouchTap,
      onKeyUp: this._handleKeyUp,
      onKeyDown: this._handleKeyDown,
      tabIndex: tabIndex,
      type: type
    });
    var buttonChildren = this._createButtonChildren();

    return React.isValidElement(containerElement) ? React.cloneElement(containerElement, buttonProps, buttonChildren) : React.createElement(linkButton ? 'a' : containerElement, buttonProps, buttonChildren);
  },

  isKeyboardFocused: function isKeyboardFocused() {
    return this.state.isKeyboardFocused;
  },

  removeKeyboardFocus: function removeKeyboardFocus(e) {
    if (this.state.isKeyboardFocused) {
      this.setState({ isKeyboardFocused: false });
      this.props.onKeyboardFocus(e, false);
    }
  },

  setKeyboardFocus: function setKeyboardFocus(e) {
    if (!this.state.isKeyboardFocused) {
      this.setState({ isKeyboardFocused: true });
      this.props.onKeyboardFocus(e, true);
    }
  },

  _cancelFocusTimeout: function _cancelFocusTimeout() {
    if (this._focusTimeout) {
      clearTimeout(this._focusTimeout);
      this._focusTimeout = null;
    }
  },

  _createButtonChildren: function _createButtonChildren() {
    var _props2 = this.props;
    var centerRipple = _props2.centerRipple;
    var children = _props2.children;
    var disabled = _props2.disabled;
    var disableFocusRipple = _props2.disableFocusRipple;
    var disableKeyboardFocus = _props2.disableKeyboardFocus;
    var disableTouchRipple = _props2.disableTouchRipple;
    var focusRippleColor = _props2.focusRippleColor;
    var focusRippleOpacity = _props2.focusRippleOpacity;
    var touchRippleColor = _props2.touchRippleColor;
    var touchRippleOpacity = _props2.touchRippleOpacity;
    var isKeyboardFocused = this.state.isKeyboardFocused;

    //Focus Ripple
    var focusRipple = isKeyboardFocused && !disabled && !disableFocusRipple && !disableKeyboardFocus ? React.createElement(FocusRipple, {
      color: focusRippleColor,
      opacity: focusRippleOpacity,
      show: isKeyboardFocused
    }) : undefined;

    //Touch Ripple
    var touchRipple = !disabled && !disableTouchRipple ? React.createElement(
      TouchRipple,
      {
        centerRipple: centerRipple,
        color: touchRippleColor,
        opacity: touchRippleOpacity },
      children
    ) : undefined;

    return Children.create({
      focusRipple: focusRipple,
      touchRipple: touchRipple,
      children: touchRipple ? undefined : children
    });
  },

  _handleKeyDown: function _handleKeyDown(e) {
    if (!this.props.disabled && !this.props.disableKeyboardFocus) {
      if (e.keyCode === KeyCode.ENTER && this.state.isKeyboardFocused) {
        this._handleTouchTap(e);
      }
    }
    this.props.onKeyDown(e);
  },

  _handleKeyUp: function _handleKeyUp(e) {
    if (!this.props.disabled && e.keyCode === KeyCode.SPACE && this.state.isKeyboardFocused) {
      this._handleTouchTap(e);
    }
    this.props.onKeyUp(e);
  },

  _handleBlur: function _handleBlur(e) {
    this._cancelFocusTimeout();
    this.removeKeyboardFocus(e);
    this.props.onBlur(e);
  },

  _handleFocus: function _handleFocus(e) {
    var _this = this;

    if (!this.props.disabled && !this.props.disableKeyboardFocus) {
      //setTimeout is needed because the focus event fires first
      //Wait so that we can capture if this was a keyboard focus
      //or touch focus
      this._focusTimeout = setTimeout(function () {
        if (tabPressed) {
          _this.setKeyboardFocus(e);
        }
      }, 150);

      this.props.onFocus(e);
    }
  },

  _handleTouchTap: function _handleTouchTap(e) {
    this._cancelFocusTimeout();
    if (!this.props.disabled) {
      tabPressed = false;
      this.removeKeyboardFocus(e);
      this.props.onTouchTap(e);
    }
  }

});

module.exports = EnhancedButton;
},{"./mixins/style-propable":57,"./ripples/focus-ripple":67,"./ripples/touch-ripple":69,"./styles/colors":74,"./utils/children":128,"./utils/events":133,"./utils/key-code":137,"react/addons":154}],34:[function(require,module,exports){
(function (process){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react');
var KeyCode = require('./utils/key-code');
var StylePropable = require('./mixins/style-propable');
var Transitions = require('./styles/transitions');
var UniqueId = require('./utils/unique-id');
var WindowListenable = require('./mixins/window-listenable');
var ClearFix = require('./clearfix');
var FocusRipple = require('./ripples/focus-ripple');
var TouchRipple = require('./ripples/touch-ripple');
var Paper = require('./paper');

var EnhancedSwitch = React.createClass({
  displayName: 'EnhancedSwitch',

  mixins: [WindowListenable, StylePropable],

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  propTypes: {
    id: React.PropTypes.string,
    inputType: React.PropTypes.string.isRequired,
    switchElement: React.PropTypes.element.isRequired,
    onParentShouldUpdate: React.PropTypes.func.isRequired,
    switched: React.PropTypes.bool.isRequired,
    rippleStyle: React.PropTypes.object,
    rippleColor: React.PropTypes.string,
    iconStyle: React.PropTypes.object,
    thumbStyle: React.PropTypes.object,
    trackStyle: React.PropTypes.object,
    labelStyle: React.PropTypes.object,
    name: React.PropTypes.string,
    value: React.PropTypes.string,
    label: React.PropTypes.string,
    onSwitch: React.PropTypes.func,
    required: React.PropTypes.bool,
    disabled: React.PropTypes.bool,
    defaultSwitched: React.PropTypes.bool,
    labelPosition: React.PropTypes.oneOf(['left', 'right']),
    disableFocusRipple: React.PropTypes.bool,
    disableTouchRipple: React.PropTypes.bool
  },

  windowListeners: {
    keydown: '_handleWindowKeydown',
    keyup: '_handleWindowKeyup'
  },

  getInitialState: function getInitialState() {
    return {
      isKeyboardFocused: false,
      parentWidth: 100
    };
  },

  getEvenWidth: function getEvenWidth() {
    return parseInt(window.getComputedStyle(React.findDOMNode(this.refs.root)).getPropertyValue('width'), 10);
  },

  componentDidMount: function componentDidMount() {
    var inputNode = React.findDOMNode(this.refs.checkbox);
    if (!this.props.switched || inputNode.checked !== this.props.switched) {
      this.props.onParentShouldUpdate(inputNode.checked);
    }

    window.addEventListener("resize", this._handleResize);

    this._handleResize();
  },

  componentWillUnmount: function componentWillUnmount() {
    window.removeEventListener("resize", this._handleResize);
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    var hasCheckedLinkProp = nextProps.hasOwnProperty('checkedLink');
    var hasCheckedProp = nextProps.hasOwnProperty('checked');
    var hasToggledProp = nextProps.hasOwnProperty('toggled');
    var hasNewDefaultProp = nextProps.hasOwnProperty('defaultSwitched') && nextProps.defaultSwitched !== this.props.defaultSwitched;
    var newState = {};

    if (hasCheckedProp) {
      newState.switched = nextProps.checked;
    } else if (hasToggledProp) {
      newState.switched = nextProps.toggled;
    } else if (hasCheckedLinkProp) {
      newState.switched = nextProps.checkedLink.value;
    } else if (hasNewDefaultProp) {
      newState.switched = nextProps.defaultSwitched;
    }

    if (newState.switched !== undefined && newState.switched !== this.props.switched) {
      this.props.onParentShouldUpdate(newState.switched);
    }
  },

  getTheme: function getTheme() {
    return this.context.muiTheme.palette;
  },

  getStyles: function getStyles() {
    var spacing = this.context.muiTheme.spacing;
    var switchWidth = 60 - spacing.desktopGutterLess;
    var labelWidth = 'calc(100% - 60px)';
    var styles = {
      root: {
        position: 'relative',
        cursor: this.props.disabled ? 'default' : 'pointer',
        overflow: 'visible',
        display: 'table',
        height: 'auto',
        width: '100%'
      },
      input: {
        position: 'absolute',
        cursor: this.props.disabled ? 'default' : 'pointer',
        pointerEvents: 'all',
        opacity: 0,
        width: '100%',
        height: '100%',
        zIndex: 2,
        left: 0,
        boxSizing: 'border-box',
        padding: 0,
        margin: 0
      },
      controls: {
        width: '100%',
        height: '100%'
      },
      label: {
        float: 'left',
        position: 'relative',
        display: 'block',
        width: labelWidth,
        lineHeight: '24px',
        color: this.getTheme().textColor
      },
      wrap: {
        transition: Transitions.easeOut(),
        float: 'left',
        position: 'relative',
        display: 'block',
        width: switchWidth,
        marginRight: this.props.labelPosition === 'right' ? spacing.desktopGutterLess : 0,
        marginLeft: this.props.labelPosition === 'left' ? spacing.desktopGutterLess : 0
      },
      ripple: {
        height: '200%',
        width: '200%',
        top: -12,
        left: -12
      }
    };

    return styles;
  },

  render: function render() {
    var _props = this.props;
    var type = _props.type;
    var name = _props.name;
    var value = _props.value;
    var label = _props.label;
    var onSwitch = _props.onSwitch;
    var defaultSwitched = _props.defaultSwitched;
    var onBlur = _props.onBlur;
    var onFocus = _props.onFocus;
    var onMouseUp = _props.onMouseUp;
    var onMouseDown = _props.onMouseDown;
    var onMouseLeave = _props.onMouseLeave;
    var onTouchStart = _props.onTouchStart;
    var onTouchEnd = _props.onTouchEnd;
    var disableTouchRipple = _props.disableTouchRipple;
    var disableFocusRipple = _props.disableFocusRipple;
    var className = _props.className;

    var other = _objectWithoutProperties(_props, ['type', 'name', 'value', 'label', 'onSwitch', 'defaultSwitched', 'onBlur', 'onFocus', 'onMouseUp', 'onMouseDown', 'onMouseLeave', 'onTouchStart', 'onTouchEnd', 'disableTouchRipple', 'disableFocusRipple', 'className']);

    var styles = this.getStyles();
    var wrapStyles = this.mergeAndPrefix(styles.wrap, this.props.iconStyle);
    var rippleStyle = this.mergeAndPrefix(styles.ripple, this.props.rippleStyle);
    var rippleColor = this.props.hasOwnProperty('rippleColor') ? this.props.rippleColor : this.getTheme().primary1Color;

    if (this.props.thumbStyle) {
      wrapStyles.marginLeft /= 2;
      wrapStyles.marginRight /= 2;
    }

    var inputId = this.props.id || UniqueId.generate();

    var labelStyle = this.mergeAndPrefix(styles.label, this.props.labelStyle);
    var labelElement = this.props.label ? React.createElement(
      'label',
      { style: labelStyle, htmlFor: inputId },
      this.props.label
    ) : null;

    var inputProps = {
      ref: "checkbox",
      type: this.props.inputType,
      style: this.mergeAndPrefix(styles.input),
      name: this.props.name,
      value: this.props.value,
      defaultChecked: this.props.defaultSwitched,
      onBlur: this._handleBlur,
      onFocus: this._handleFocus
    };

    var hideTouchRipple = this.props.disabled || disableTouchRipple;

    if (!hideTouchRipple) {
      inputProps.onMouseUp = this._handleMouseUp;
      inputProps.onMouseDown = this._handleMouseDown;
      inputProps.onMouseLeave = this._handleMouseLeave;
      inputProps.onTouchStart = this._handleTouchStart;
      inputProps.onTouchEnd = this._handleTouchEnd;
    }

    if (!this.props.hasOwnProperty('checkedLink')) {
      inputProps.onChange = this._handleChange;
    }

    var inputElement = React.createElement('input', _extends({}, other, inputProps));

    var touchRipple = React.createElement(TouchRipple, {
      ref: 'touchRipple',
      key: 'touchRipple',
      style: rippleStyle,
      color: rippleColor,
      centerRipple: true });

    var focusRipple = React.createElement(FocusRipple, {
      key: 'focusRipple',
      innerStyle: rippleStyle,
      color: rippleColor,
      show: this.state.isKeyboardFocused });

    var ripples = [hideTouchRipple ? null : touchRipple, this.props.disabled || disableFocusRipple ? null : focusRipple];

    // If toggle component (indicated by whether the style includes thumb) manually lay out
    // elements in order to nest ripple elements
    var switchElement = !this.props.thumbStyle ? React.createElement(
      'div',
      { style: wrapStyles },
      this.props.switchElement,
      ripples
    ) : React.createElement(
      'div',
      { style: wrapStyles },
      React.createElement('div', { style: this.props.trackStyle }),
      React.createElement(
        Paper,
        { style: this.props.thumbStyle, zDepth: 1, circle: true },
        ' ',
        ripples,
        ' '
      )
    );

    var labelPositionExist = this.props.labelPosition;

    // Position is left if not defined or invalid.
    var elementsInOrder = labelPositionExist && this.props.labelPosition.toUpperCase() === "RIGHT" ? React.createElement(
      ClearFix,
      { style: this.mergeAndPrefix(styles.controls) },
      switchElement,
      labelElement
    ) : React.createElement(
      ClearFix,
      { style: this.mergeAndPrefix(styles.controls) },
      labelElement,
      switchElement
    );

    return React.createElement(
      'div',
      { ref: 'root', className: className, style: this.mergeAndPrefix(styles.root, this.props.style) },
      inputElement,
      elementsInOrder
    );
  },

  isSwitched: function isSwitched() {
    return React.findDOMNode(this.refs.checkbox).checked;
  },

  // no callback here because there is no event
  setSwitched: function setSwitched(newSwitchedValue) {
    if (!this.props.hasOwnProperty('checked') || this.props.checked === false) {
      this.props.onParentShouldUpdate(newSwitchedValue);
      React.findDOMNode(this.refs.checkbox).checked = newSwitchedValue;
    } else if (process.env.NODE_ENV !== 'production') {
      var message = 'Cannot call set method while checked is defined as a property.';
      console.error(message);
    }
  },

  getValue: function getValue() {
    return React.findDOMNode(this.refs.checkbox).value;
  },

  isKeyboardFocused: function isKeyboardFocused() {
    return this.state.isKeyboardFocused;
  },

  _handleChange: function _handleChange(e) {
    this._tabPressed = false;
    this.setState({
      isKeyboardFocused: false
    });

    var isInputChecked = React.findDOMNode(this.refs.checkbox).checked;

    if (!this.props.hasOwnProperty('checked')) {
      this.props.onParentShouldUpdate(isInputChecked);
    }
    if (this.props.onSwitch) {
      this.props.onSwitch(e, isInputChecked);
    }
  },

  // Checkbox inputs only use SPACE to change their state. Using ENTER will
  // update the ui but not the input.
  _handleWindowKeydown: function _handleWindowKeydown(e) {
    if (e.keyCode === KeyCode.TAB) {
      this._tabPressed = true;
    }
    if (e.keyCode === KeyCode.SPACE && this.state.isKeyboardFocused) {
      this._handleChange(e);
    }
  },

  _handleWindowKeyup: function _handleWindowKeyup(e) {
    if (e.keyCode === KeyCode.SPACE && this.state.isKeyboardFocused) {
      this._handleChange(e);
    }
  },

  /**
   * Because both the ripples and the checkbox input cannot share pointer
   * events, the checkbox input takes control of pointer events and calls
   * ripple animations manually.
   */
  _handleMouseDown: function _handleMouseDown(e) {
    //only listen to left clicks
    if (e.button === 0) {
      this.refs.touchRipple.start(e);
    }
  },

  _handleMouseUp: function _handleMouseUp() {
    this.refs.touchRipple.end();
  },

  _handleMouseLeave: function _handleMouseLeave() {
    this.refs.touchRipple.end();
  },

  _handleTouchStart: function _handleTouchStart(e) {
    this.refs.touchRipple.start(e);
  },

  _handleTouchEnd: function _handleTouchEnd() {
    this.refs.touchRipple.end();
  },

  _handleBlur: function _handleBlur(e) {
    this.setState({
      isKeyboardFocused: false
    });

    if (this.props.onBlur) {
      this.props.onBlur(e);
    }
  },

  _handleFocus: function _handleFocus(e) {
    var _this = this;

    //setTimeout is needed becuase the focus event fires first
    //Wait so that we can capture if this was a keyboard focus
    //or touch focus
    setTimeout(function () {
      if (_this._tabPressed) {
        _this.setState({
          isKeyboardFocused: true
        });
      }
    }, 150);

    if (this.props.onFocus) {
      this.props.onFocus(e);
    }
  },

  _handleResize: function _handleResize() {
    this.setState({ parentWidth: this.getEvenWidth() });
  }

});

module.exports = EnhancedSwitch;
}).call(this,require('_process'))
},{"./clearfix":20,"./mixins/style-propable":57,"./mixins/window-listenable":59,"./paper":61,"./ripples/focus-ripple":67,"./ripples/touch-ripple":69,"./styles/transitions":80,"./utils/key-code":137,"./utils/unique-id":142,"_process":2,"react":326}],35:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react');
var StylePropable = require('./mixins/style-propable');
var AutoPrefix = require('./styles/auto-prefix');

var EnhancedTextarea = React.createClass({
  displayName: 'EnhancedTextarea',

  mixins: [StylePropable],

  propTypes: {
    onChange: React.PropTypes.func,
    onHeightChange: React.PropTypes.func,
    textareaStyle: React.PropTypes.object,
    rows: React.PropTypes.number
  },

  getDefaultProps: function getDefaultProps() {
    return {
      rows: 1
    };
  },

  getInitialState: function getInitialState() {
    return {
      height: this.props.rows * 24
    };
  },

  componentDidMount: function componentDidMount() {
    this._syncHeightWithShadow();
  },

  getStyles: function getStyles() {
    var styles = {
      root: {
        width: '100%',
        resize: 'none',
        overflow: 'hidden',
        font: 'inherit',
        padding: 0
      }
    };
    return styles;
  },

  render: function render() {
    var _props = this.props;
    var onChange = _props.onChange;
    var onHeightChange = _props.onHeightChange;
    var rows = _props.rows;
    var style = _props.style;
    var textareaStyle = _props.textareaStyle;
    var valueLink = _props.valueLink;

    var other = _objectWithoutProperties(_props, ['onChange', 'onHeightChange', 'rows', 'style', 'textareaStyle', 'valueLink']);

    var styles = this.getStyles().root;

    var textAreaStyles = {
      width: '100%',
      resize: 'none',
      overflow: 'hidden',
      font: 'inherit',
      padding: 0
    };

    var inputStyles = this.mergeAndPrefix(styles, {
      height: this.state.height + 'px'
    });

    inputStyles = this.mergeAndPrefix(inputStyles, textareaStyle);

    // Overflow also needed to here to remove the extra row
    // added to textareas in Firefox.
    var shadowStyles = this.mergeAndPrefix(textAreaStyles, {
      position: 'absolute',
      opacity: 0
    });

    if (this.props.hasOwnProperty('valueLink')) {
      other.value = this.props.valueLink.value;
    }
    if (this.props.disabled) {
      style.cursor = 'default';
    }

    return React.createElement(
      'div',
      { style: this.props.style },
      React.createElement('textarea', {
        ref: 'shadow',
        style: AutoPrefix.all(shadowStyles),
        tabIndex: '-1',
        rows: this.props.rows,
        defaultValue: this.props.defaultValue,
        readOnly: true,
        value: this.props.value,
        valueLink: this.props.valueLink }),
      React.createElement('textarea', _extends({}, other, {
        ref: 'input',
        rows: this.props.rows,
        style: AutoPrefix.all(inputStyles),
        onChange: this._handleChange }))
    );
  },

  getInputNode: function getInputNode() {
    return React.findDOMNode(this.refs.input);
  },

  setValue: function setValue(value) {
    this.getInputNode().value = value;
    this._syncHeightWithShadow(value);
  },

  _syncHeightWithShadow: function _syncHeightWithShadow(newValue, e) {
    var shadow = React.findDOMNode(this.refs.shadow);
    var currentHeight = this.state.height;
    var newHeight = undefined;

    if (newValue !== undefined) {
      shadow.value = newValue;
    }
    newHeight = shadow.scrollHeight;

    if (currentHeight !== newHeight) {
      this.setState({ height: newHeight });
      if (this.props.onHeightChange) {
        this.props.onHeightChange(e, newHeight);
      }
    }
  },

  _handleChange: function _handleChange(e) {
    this._syncHeightWithShadow(e.target.value);

    if (this.props.hasOwnProperty('valueLink')) {
      this.props.valueLink.requestChange(e.target.value);
    }

    if (this.props.onChange) {
      this.props.onChange(e);
    }
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (nextProps.value !== this.props.value) {
      this._syncHeightWithShadow(nextProps.value);
    }
  }
});

module.exports = EnhancedTextarea;
},{"./mixins/style-propable":57,"./styles/auto-prefix":73,"react":326}],36:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react/addons');
var PureRenderMixin = React.addons.PureRenderMixin;
var Transitions = require('./styles/transitions');
var Children = require('./utils/children');
var ColorManipulator = require('./utils/color-manipulator');
var ImmutabilityHelper = require('./utils/immutability-helper');
var Typography = require('./styles/typography');
var EnhancedButton = require('./enhanced-button');
var FlatButtonLabel = require('./buttons/flat-button-label');

function validateLabel(props, propName, componentName) {
  if (!props.children && !props.label) {
    return new Error('Required prop label or children was not ' + 'specified in ' + componentName + '.');
  }
}

var FlatButton = React.createClass({
  displayName: 'FlatButton',

  mixins: [PureRenderMixin],

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  propTypes: {
    disabled: React.PropTypes.bool,
    hoverColor: React.PropTypes.string,
    label: validateLabel,
    labelPosition: React.PropTypes.oneOf(['before', 'after']),
    labelStyle: React.PropTypes.object,
    onKeyboardFocus: React.PropTypes.func,
    onMouseEnter: React.PropTypes.func,
    onMouseLeave: React.PropTypes.func,
    onTouchStart: React.PropTypes.func,
    primary: React.PropTypes.bool,
    rippleColor: React.PropTypes.string,
    secondary: React.PropTypes.bool
  },

  getDefaultProps: function getDefaultProps() {
    return {
      labelStyle: {},
      labelPosition: 'before',
      onKeyboardFocus: function onKeyboardFocus() {},
      onMouseEnter: function onMouseEnter() {},
      onMouseLeave: function onMouseLeave() {},
      onTouchStart: function onTouchStart() {}
    };
  },

  getInitialState: function getInitialState() {
    return {
      hovered: false,
      isKeyboardFocused: false,
      touch: false
    };
  },

  getContextProps: function getContextProps() {
    var theme = this.context.muiTheme;
    var buttonTheme = theme.component.button;
    var flatButtonTheme = theme.component.flatButton;

    return {
      buttonColor: flatButtonTheme.color,
      buttonHeight: buttonTheme.height,
      buttonMinWidth: buttonTheme.minWidth,
      disabledTextColor: flatButtonTheme.disabledTextColor,
      primaryTextColor: flatButtonTheme.primaryTextColor,
      secondaryTextColor: flatButtonTheme.secondaryTextColor,
      textColor: flatButtonTheme.textColor
    };
  },

  render: function render() {
    var _props = this.props;
    var children = _props.children;
    var disabled = _props.disabled;
    var hoverColor = _props.hoverColor;
    var label = _props.label;
    var labelStyle = _props.labelStyle;
    var labelPosition = _props.labelPosition;
    var onKeyboardFocus = _props.onKeyboardFocus;
    var onMouseLeave = _props.onMouseLeave;
    var onMouseEnter = _props.onMouseEnter;
    var onTouchStart = _props.onTouchStart;
    var primary = _props.primary;
    var rippleColor = _props.rippleColor;
    var secondary = _props.secondary;
    var style = _props.style;

    var other = _objectWithoutProperties(_props, ['children', 'disabled', 'hoverColor', 'label', 'labelStyle', 'labelPosition', 'onKeyboardFocus', 'onMouseLeave', 'onMouseEnter', 'onTouchStart', 'primary', 'rippleColor', 'secondary', 'style']);

    var contextProps = this.getContextProps();

    var defaultColor = disabled ? contextProps.disabledTextColor : primary ? contextProps.primaryTextColor : secondary ? contextProps.secondaryTextColor : contextProps.textColor;

    var defaultHoverColor = ColorManipulator.fade(ColorManipulator.lighten(defaultColor, 0.4), 0.15);
    var defaultRippleColor = ColorManipulator.fade(defaultColor, 0.8);
    var buttonHoverColor = hoverColor || defaultHoverColor;
    var buttonRippleColor = rippleColor || defaultRippleColor;
    var hovered = (this.state.hovered || this.state.isKeyboardFocused) && !disabled;

    var mergedRootStyles = ImmutabilityHelper.merge({
      color: defaultColor,
      transition: Transitions.easeOut(),
      fontSize: Typography.fontStyleButtonFontSize,
      letterSpacing: 0,
      textTransform: 'uppercase',
      fontWeight: Typography.fontWeightMedium,
      borderRadius: 2,
      userSelect: 'none',
      position: 'relative',
      overflow: 'hidden',
      backgroundColor: hovered ? buttonHoverColor : contextProps.buttonColor,
      lineHeight: contextProps.buttonHeight + 'px',
      minWidth: contextProps.buttonMinWidth,
      padding: 0,
      margin: 0,
      //This is need so that ripples do not bleed past border radius.
      //See: http://stackoverflow.com/questions/17298739
      transform: 'translate3d(0, 0, 0)'
    }, style);

    var labelElement = label ? React.createElement(FlatButtonLabel, { label: label, style: labelStyle }) : undefined;
    // Place label before or after children.
    var childrenFragment = labelPosition === 'before' ? { labelElement: labelElement, children: children } : { children: children, labelElement: labelElement };
    var enhancedButtonChildren = Children.create(childrenFragment);

    return React.createElement(
      EnhancedButton,
      _extends({}, other, {
        disabled: disabled,
        focusRippleColor: buttonRippleColor,
        onKeyboardFocus: this._handleKeyboardFocus,
        onMouseLeave: this._handleMouseLeave,
        onMouseEnter: this._handleMouseEnter,
        onTouchStart: this._handleTouchStart,
        style: mergedRootStyles,
        touchRippleColor: buttonRippleColor }),
      enhancedButtonChildren
    );
  },

  _handleKeyboardFocus: function _handleKeyboardFocus(e, isKeyboardFocused) {
    this.setState({ isKeyboardFocused: isKeyboardFocused });
    this.props.onKeyboardFocus(e, isKeyboardFocused);
  },

  _handleMouseEnter: function _handleMouseEnter(e) {
    //Cancel hover styles for touch devices
    if (!this.state.touch) this.setState({ hovered: true });
    this.props.onMouseEnter(e);
  },

  _handleMouseLeave: function _handleMouseLeave(e) {
    this.setState({ hovered: false });
    this.props.onMouseLeave(e);
  },

  _handleTouchStart: function _handleTouchStart(e) {
    this.setState({ touch: true });
    this.props.onTouchStart(e);
  }

});

module.exports = FlatButton;
},{"./buttons/flat-button-label":10,"./enhanced-button":33,"./styles/transitions":80,"./styles/typography":81,"./utils/children":128,"./utils/color-manipulator":129,"./utils/immutability-helper":135,"react/addons":154}],37:[function(require,module,exports){
(function (process){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react');
var StylePropable = require('./mixins/style-propable');
var Transitions = require('./styles/transitions');
var ColorManipulator = require('./utils/color-manipulator');
var EnhancedButton = require('./enhanced-button');
var FontIcon = require('./font-icon');
var Paper = require('./paper');
var Children = require('./utils/children');

var getZDepth = function getZDepth(disabled) {
  var zDepth = disabled ? 0 : 2;
  return {
    zDepth: zDepth,
    initialZDepth: zDepth
  };
};

var FloatingActionButton = React.createClass({
  displayName: 'FloatingActionButton',

  mixins: [StylePropable],

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  propTypes: {
    backgroundColor: React.PropTypes.string,
    disabled: React.PropTypes.bool,
    disabledColor: React.PropTypes.string,
    iconClassName: React.PropTypes.string,
    iconStyle: React.PropTypes.object,
    mini: React.PropTypes.bool,
    onMouseDown: React.PropTypes.func,
    onMouseUp: React.PropTypes.func,
    onMouseLeave: React.PropTypes.func,
    onTouchEnd: React.PropTypes.func,
    onTouchStart: React.PropTypes.func,
    secondary: React.PropTypes.bool
  },

  getInitialState: function getInitialState() {
    var zDepth = this.props.disabled ? 0 : 2;
    return {
      hovered: false,
      initialZDepth: zDepth,
      touch: false,
      zDepth: zDepth
    };
  },

  componentWillMount: function componentWillMount() {
    this.setState(getZDepth(this.props.disabled));
  },

  componentWillReceiveProps: function componentWillReceiveProps(newProps) {
    if (newProps.disabled !== this.props.disabled) {
      this.setState(getZDepth(newProps.disabled));
    }
  },

  componentDidMount: function componentDidMount() {
    if (process.env.NODE_ENV !== 'production') {
      if (this.props.iconClassName && this.props.children) {
        var warning = 'You have set both an iconClassName and a child icon. ' + 'It is recommended you use only one method when adding ' + 'icons to FloatingActionButtons.';
        console.warn(warning);
      }
    }
  },

  _getBackgroundColor: function _getBackgroundColor() {
    return this.props.disabled ? this.props.disabledColor || this.getTheme().disabledColor : this.props.backgroundColor ? this.props.backgroundColor : this.props.secondary ? this.getTheme().secondaryColor : this.getTheme().color;
  },

  getTheme: function getTheme() {
    return this.context.muiTheme.component.floatingActionButton;
  },

  _getIconColor: function _getIconColor() {
    return this.props.disabled ? this.getTheme().disabledTextColor : this.props.secondary ? this.getTheme().secondaryIconColor : this.getTheme().iconColor;
  },

  getStyles: function getStyles() {
    var themeVariables = this.context.muiTheme.component.floatingActionButton;

    var styles = {
      root: {
        transition: Transitions.easeOut(),
        display: 'inline-block'
      },
      container: {
        transition: Transitions.easeOut(),
        position: 'relative',
        height: themeVariables.buttonSize,
        width: themeVariables.buttonSize,
        padding: 0,
        overflow: 'hidden',
        backgroundColor: this._getBackgroundColor(),
        borderRadius: '50%',
        textAlign: 'center',
        verticalAlign: 'bottom',
        //This is need so that ripples do not bleed
        //past border radius.
        //See: http://stackoverflow.com/questions/17298739/css-overflow-hidden-not-working-in-chrome-when-parent-has-border-radius-and-chil
        transform: 'translate3d(0, 0, 0)'
      },
      containerWhenMini: {
        height: themeVariables.miniSize,
        width: themeVariables.miniSize
      },
      overlay: {
        transition: Transitions.easeOut(),
        top: 0
      },
      overlayWhenHovered: {
        backgroundColor: ColorManipulator.fade(this._getIconColor(), 0.4)
      },
      icon: {
        height: themeVariables.buttonSize,
        lineHeight: themeVariables.buttonSize + 'px',
        fill: themeVariables.iconColor,
        color: this._getIconColor()
      },
      iconWhenMini: {
        height: themeVariables.miniSize,
        lineHeight: themeVariables.miniSize + 'px'
      }
    };
    return styles;
  },

  render: function render() {
    var _props = this.props;
    var disabled = _props.disabled;
    var mini = _props.mini;
    var secondary = _props.secondary;
    var iconStyle = _props.iconStyle;
    var iconClassName = _props.iconClassName;

    var other = _objectWithoutProperties(_props, ['disabled', 'mini', 'secondary', 'iconStyle', 'iconClassName']);

    var styles = this.getStyles();

    var iconElement = undefined;
    if (iconClassName) {
      iconElement = React.createElement(FontIcon, {
        className: iconClassName,
        style: this.mergeAndPrefix(styles.icon, mini && styles.iconWhenMini, iconStyle) });
    }

    var children = Children.extend(this.props.children, {
      style: this.mergeAndPrefix(styles.icon, mini && styles.iconWhenMini, iconStyle)
    });

    var buttonEventHandlers = disabled ? null : {
      onMouseDown: this._handleMouseDown,
      onMouseUp: this._handleMouseUp,
      onMouseLeave: this._handleMouseLeave,
      onMouseEnter: this._handleMouseEnter,
      onTouchStart: this._handleTouchStart,
      onTouchEnd: this._handleTouchEnd,
      onKeyboardFocus: this._handleKeyboardFocus
    };

    return React.createElement(
      Paper,
      {
        style: this.mergeAndPrefix(styles.root, this.props.style),
        zDepth: this.state.zDepth,
        circle: true },
      React.createElement(
        EnhancedButton,
        _extends({}, other, buttonEventHandlers, {
          ref: 'container',
          disabled: disabled,
          style: this.mergeAndPrefix(styles.container, this.props.mini && styles.containerWhenMini),
          focusRippleColor: styles.icon.color,
          touchRippleColor: styles.icon.color }),
        React.createElement(
          'div',
          {
            ref: 'overlay',
            style: this.mergeAndPrefix(styles.overlay, this.state.hovered && !this.props.disabled && styles.overlayWhenHovered) },
          iconElement,
          children
        )
      )
    );
  },

  _handleMouseDown: function _handleMouseDown(e) {
    //only listen to left clicks
    if (e.button === 0) {
      this.setState({ zDepth: this.state.initialZDepth + 1 });
    }
    if (this.props.onMouseDown) this.props.onMouseDown(e);
  },

  _handleMouseUp: function _handleMouseUp(e) {
    this.setState({ zDepth: this.state.initialZDepth });
    if (this.props.onMouseUp) this.props.onMouseUp(e);
  },

  _handleMouseLeave: function _handleMouseLeave(e) {
    if (!this.refs.container.isKeyboardFocused()) this.setState({ zDepth: this.state.initialZDepth, hovered: false });
    if (this.props.onMouseLeave) this.props.onMouseLeave(e);
  },

  _handleMouseEnter: function _handleMouseEnter(e) {
    if (!this.refs.container.isKeyboardFocused() && !this.state.touch) {
      this.setState({ hovered: true });
    }
    if (this.props.onMouseEnter) this.props.onMouseEnter(e);
  },

  _handleTouchStart: function _handleTouchStart(e) {
    this.setState({
      touch: true,
      zDepth: this.state.initialZDepth + 1
    });
    if (this.props.onTouchStart) this.props.onTouchStart(e);
  },

  _handleTouchEnd: function _handleTouchEnd(e) {
    this.setState({ zDepth: this.state.initialZDepth });
    if (this.props.onTouchEnd) this.props.onTouchEnd(e);
  },

  _handleKeyboardFocus: function _handleKeyboardFocus(e, keyboardFocused) {
    if (keyboardFocused && !this.props.disabled) {
      this.setState({ zDepth: this.state.initialZDepth + 1 });
      React.findDOMNode(this.refs.overlay).style.backgroundColor = ColorManipulator.fade(this.getStyles().icon.color, 0.4);
    } else if (!this.state.hovered) {
      this.setState({ zDepth: this.state.initialZDepth });
      React.findDOMNode(this.refs.overlay).style.backgroundColor = 'transparent';
    }
  }

});

module.exports = FloatingActionButton;
}).call(this,require('_process'))
},{"./enhanced-button":33,"./font-icon":38,"./mixins/style-propable":57,"./paper":61,"./styles/transitions":80,"./utils/children":128,"./utils/color-manipulator":129,"_process":2,"react":326}],38:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react');
var StylePropable = require('./mixins/style-propable');
var Transitions = require('./styles/transitions');

var FontIcon = React.createClass({
  displayName: 'FontIcon',

  mixins: [StylePropable],

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  propTypes: {
    color: React.PropTypes.string,
    hoverColor: React.PropTypes.string,
    onMouseLeave: React.PropTypes.func,
    onMouseEnter: React.PropTypes.func
  },

  getInitialState: function getInitialState() {
    return {
      hovered: false
    };
  },

  render: function render() {
    var _props = this.props;
    var color = _props.color;
    var hoverColor = _props.hoverColor;
    var onMouseLeave = _props.onMouseLeave;
    var onMouseEnter = _props.onMouseEnter;
    var style = _props.style;

    var other = _objectWithoutProperties(_props, ['color', 'hoverColor', 'onMouseLeave', 'onMouseEnter', 'style']);

    var spacing = this.context.muiTheme.spacing;
    var offColor = color ? color : style && style.color ? style.color : this.context.muiTheme.palette.textColor;
    var onColor = hoverColor ? hoverColor : offColor;

    var mergedStyles = this.mergeAndPrefix({
      position: 'relative',
      fontSize: spacing.iconSize,
      display: 'inline-block',
      userSelect: 'none',
      transition: Transitions.easeOut()
    }, style, {
      color: this.state.hovered ? onColor : offColor
    });

    return React.createElement('span', _extends({}, other, {
      onMouseLeave: this._handleMouseLeave,
      onMouseEnter: this._handleMouseEnter,
      style: mergedStyles }));
  },

  _handleMouseLeave: function _handleMouseLeave(e) {
    // hover is needed only when a hoverColor is defined
    if (this.props.hoverColor !== undefined) this.setState({ hovered: false });
    if (this.props.onMouseLeave) {
      this.props.onMouseLeave(e);
    }
  },

  _handleMouseEnter: function _handleMouseEnter(e) {
    // hover is needed only when a hoverColor is defined
    if (this.props.hoverColor !== undefined) this.setState({ hovered: true });
    if (this.props.onMouseEnter) {
      this.props.onMouseEnter(e);
    }
  }
});

module.exports = FontIcon;
},{"./mixins/style-propable":57,"./styles/transitions":80,"react":326}],39:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react');
var StylePropable = require('./mixins/style-propable');
var Transitions = require('./styles/transitions');
var PropTypes = require('./utils/prop-types');
var EnhancedButton = require('./enhanced-button');
var FontIcon = require('./font-icon');
var Tooltip = require('./tooltip');
var Children = require('./utils/children');

var IconButton = React.createClass({
  displayName: 'IconButton',

  mixins: [StylePropable],

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  propTypes: {
    className: React.PropTypes.string,
    disabled: React.PropTypes.bool,
    iconClassName: React.PropTypes.string,
    iconStyle: React.PropTypes.object,
    onBlur: React.PropTypes.func,
    onFocus: React.PropTypes.func,
    onKeyboardFocus: React.PropTypes.func,
    tooltip: React.PropTypes.string,
    tooltipStyles: React.PropTypes.object,
    tooltipPosition: PropTypes.cornersAndCenter,
    touch: React.PropTypes.bool
  },

  getInitialState: function getInitialState() {
    return {
      tooltipShown: false
    };
  },

  getDefaultProps: function getDefaultProps() {
    return {
      iconStyle: {},
      tooltipPosition: 'bottom-center'
    };
  },

  getStyles: function getStyles() {
    var spacing = this.context.muiTheme.spacing;
    var palette = this.context.muiTheme.palette;

    var styles = {
      root: {
        position: 'relative',
        boxSizing: 'border-box',
        transition: Transitions.easeOut(),
        padding: spacing.iconSize / 2,
        width: spacing.iconSize * 2,
        height: spacing.iconSize * 2,
        fontSize: 0
      },
      tooltip: {
        boxSizing: 'border-box'
      },
      icon: {
        color: palette.textColor,
        fill: palette.textColor
      },
      overlay: {
        position: 'relative',
        top: 0,
        width: '100%',
        height: '100%',
        background: palette.disabledColor
      },
      disabled: {
        color: palette.disabledColor,
        fill: palette.disabledColor
      }
    };

    return styles;
  },

  render: function render() {
    var _props = this.props;
    var disabled = _props.disabled;
    var iconClassName = _props.iconClassName;
    var tooltip = _props.tooltip;
    var touch = _props.touch;
    var iconStyle = _props.iconStyle;

    var other = _objectWithoutProperties(_props, ['disabled', 'iconClassName', 'tooltip', 'touch', 'iconStyle']);

    var fonticon = undefined;

    var styles = this.getStyles();
    var tooltipPosition = this.props.tooltipPosition.split('-');

    var tooltipElement = tooltip ? React.createElement(Tooltip, {
      ref: 'tooltip',
      label: tooltip,
      show: this.state.tooltipShown,
      touch: touch,
      style: this.mergeStyles(styles.tooltip, this.props.tooltipStyles),
      verticalPosition: tooltipPosition[0],
      horizontalPosition: tooltipPosition[1] }) : null;

    if (iconClassName) {
      var iconHoverColor = iconStyle.iconHoverColor;

      var iconStyleFontIcon = _objectWithoutProperties(iconStyle, ['iconHoverColor']);

      fonticon = React.createElement(
        FontIcon,
        {
          className: iconClassName,
          hoverColor: disabled ? null : iconHoverColor,
          style: this.mergeStyles(styles.icon, disabled ? styles.disabled : {}, iconStyleFontIcon) },
        this.props.children
      );
    }

    var childrenStyle = disabled ? this.mergeStyles(iconStyle, styles.disabled) : iconStyle;

    return React.createElement(
      EnhancedButton,
      _extends({}, other, {
        ref: 'button',
        centerRipple: true,
        disabled: disabled,
        style: this.mergeStyles(styles.root, this.props.style),
        onBlur: this._handleBlur,
        onFocus: this._handleFocus,
        onMouseLeave: this._handleMouseLeave,
        onMouseEnter: this._handleMouseEnter,
        onKeyboardFocus: this._handleKeyboardFocus }),
      tooltipElement,
      fonticon,
      Children.extend(this.props.children, {
        style: childrenStyle
      })
    );
  },

  setKeyboardFocus: function setKeyboardFocus() {
    this.refs.button.setKeyboardFocus();
  },

  _showTooltip: function _showTooltip() {
    if (!this.props.disabled && this.props.tooltip) {
      this.setState({ tooltipShown: true });
    }
  },

  _hideTooltip: function _hideTooltip() {
    if (this.props.tooltip) this.setState({ tooltipShown: false });
  },

  _handleBlur: function _handleBlur(e) {
    this._hideTooltip();
    if (this.props.onBlur) this.props.onBlur(e);
  },

  _handleFocus: function _handleFocus(e) {
    this._showTooltip();
    if (this.props.onFocus) this.props.onFocus(e);
  },

  _handleMouseLeave: function _handleMouseLeave(e) {
    if (!this.refs.button.isKeyboardFocused()) this._hideTooltip();
    if (this.props.onMouseLeave) this.props.onMouseLeave(e);
  },

  _handleMouseEnter: function _handleMouseEnter(e) {
    this._showTooltip();
    if (this.props.onMouseEnter) this.props.onMouseEnter(e);
  },

  _handleKeyboardFocus: function _handleKeyboardFocus(e, keyboardFocused) {
    if (keyboardFocused && !this.props.disabled) {
      this._showTooltip();
      if (this.props.onFocus) this.props.onFocus(e);
    } else if (!this.state.hovered) {
      this._hideTooltip();
      if (this.props.onBlur) this.props.onBlur(e);
    }

    if (this.props.onKeyboardFocus) this.props.onKeyboardFocus(e, keyboardFocused);
  }

});

module.exports = IconButton;
},{"./enhanced-button":33,"./font-icon":38,"./mixins/style-propable":57,"./styles/transitions":80,"./tooltip":123,"./utils/children":128,"./utils/prop-types":140,"react":326}],40:[function(require,module,exports){
'use strict';

module.exports = {
  AppBar: require('./app-bar'),
  AppCanvas: require('./app-canvas'),
  Avatar: require('./avatar'),
  BeforeAfterWrapper: require('./before-after-wrapper'),
  Card: require('./card/card'),
  CardActions: require('./card/card-actions'),
  CardExpandable: require('./card/card-expandable'),
  CardHeader: require('./card/card-header'),
  CardMedia: require('./card/card-media'),
  CardText: require('./card/card-text'),
  CardTitle: require('./card/card-title'),
  Checkbox: require('./checkbox'),
  CircularProgress: require('./circular-progress'),
  ClearFix: require('./clearfix'),
  DatePicker: require('./date-picker/date-picker'),
  DatePickerDialog: require('./date-picker/date-picker-dialog'),
  Dialog: require('./dialog'),
  DropDownIcon: require('./drop-down-icon'),
  DropDownMenu: require('./drop-down-menu'),
  EnhancedButton: require('./enhanced-button'),
  FlatButton: require('./flat-button'),
  FloatingActionButton: require('./floating-action-button'),
  FontIcon: require('./font-icon'),
  IconButton: require('./icon-button'),
  IconMenu: require('./menus/icon-menu'),
  LeftNav: require('./left-nav'),
  LinearProgress: require('./linear-progress'),
  List: require('./lists/list'),
  ListDivider: require('./lists/list-divider'),
  ListItem: require('./lists/list-item'),
  Menu: require('./menu/menu'),
  MenuItem: require('./menu/menu-item'),
  Mixins: require('./mixins/'),
  Overlay: require('./overlay'),
  Paper: require('./paper'),
  RadioButton: require('./radio-button'),
  RadioButtonGroup: require('./radio-button-group'),
  RaisedButton: require('./raised-button'),
  RefreshIndicator: require('./refresh-indicator'),
  Ripples: require('./ripples/'),
  SelectField: require('./select-field'),
  Slider: require('./slider'),
  SvgIcon: require('./svg-icon'),
  Icons: {
    NavigationMenu: require('./svg-icons/navigation/menu'),
    NavigationChevronLeft: require('./svg-icons/navigation/chevron-left'),
    NavigationChevronRight: require('./svg-icons/navigation/chevron-right')
  },
  Styles: require('./styles/'),
  Snackbar: require('./snackbar'),
  Tab: require('./tabs/tab'),
  Tabs: require('./tabs/tabs'),
  Table: require('./table/table'),
  TableBody: require('./table/table-body'),
  TableFooter: require('./table/table-footer'),
  TableHeader: require('./table/table-header'),
  TableHeaderColumn: require('./table/table-header-column'),
  TableRow: require('./table/table-row'),
  TableRowColumn: require('./table/table-row-column'),
  Theme: require('./theme'),
  Toggle: require('./toggle'),
  TimePicker: require('./time-picker'),
  TextField: require('./text-field'),
  Toolbar: require('./toolbar/toolbar'),
  ToolbarGroup: require('./toolbar/toolbar-group'),
  ToolbarSeparator: require('./toolbar/toolbar-separator'),
  ToolbarTitle: require('./toolbar/toolbar-title'),
  Tooltip: require('./tooltip'),
  Utils: require('./utils/')
};
},{"./app-bar":6,"./app-canvas":7,"./avatar":8,"./before-after-wrapper":9,"./card/card":17,"./card/card-actions":11,"./card/card-expandable":12,"./card/card-header":13,"./card/card-media":14,"./card/card-text":15,"./card/card-title":16,"./checkbox":18,"./circular-progress":19,"./clearfix":20,"./date-picker/date-picker":27,"./date-picker/date-picker-dialog":26,"./dialog":30,"./drop-down-icon":31,"./drop-down-menu":32,"./enhanced-button":33,"./flat-button":36,"./floating-action-button":37,"./font-icon":38,"./icon-button":39,"./left-nav":42,"./linear-progress":43,"./lists/list":46,"./lists/list-divider":44,"./lists/list-item":45,"./menu/menu":50,"./menu/menu-item":49,"./menus/icon-menu":52,"./mixins/":56,"./overlay":60,"./paper":61,"./radio-button":63,"./radio-button-group":62,"./raised-button":64,"./refresh-indicator":65,"./ripples/":68,"./select-field":70,"./slider":71,"./snackbar":72,"./styles/":75,"./svg-icon":82,"./svg-icons/navigation/chevron-left":89,"./svg-icons/navigation/chevron-right":90,"./svg-icons/navigation/menu":91,"./table/table":102,"./table/table-body":96,"./table/table-footer":97,"./table/table-header":99,"./table/table-header-column":98,"./table/table-row":101,"./table/table-row-column":100,"./tabs/tab":103,"./tabs/tabs":105,"./text-field":106,"./theme":107,"./time-picker":114,"./toggle":118,"./toolbar/toolbar":122,"./toolbar/toolbar-group":119,"./toolbar/toolbar-separator":120,"./toolbar/toolbar-title":121,"./tooltip":123,"./utils/":136}],41:[function(require,module,exports){
'use strict';

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react');
var Transitions = require('./styles/transitions');
var StylePropable = require('./mixins/style-propable');

var InkBar = React.createClass({
  displayName: 'InkBar',

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  propTypes: {
    color: React.PropTypes.string,
    left: React.PropTypes.string.isRequired,
    width: React.PropTypes.string.isRequired
  },

  mixins: [StylePropable],

  render: function render() {
    var _props = this.props;
    var color = _props.color;
    var left = _props.left;
    var width = _props.width;
    var style = _props.style;

    var other = _objectWithoutProperties(_props, ['color', 'left', 'width', 'style']);

    var colorStyle = color ? { backgroundColor: color } : undefined;
    var styles = this.mergeAndPrefix({
      left: left,
      width: width,
      bottom: 0,
      display: 'block',
      backgroundColor: this.context.muiTheme.component.inkBar.backgroundColor,
      height: 2,
      marginTop: -2,
      position: 'relative',
      transition: Transitions.easeOut('1s', 'left')
    }, this.props.style, colorStyle);

    return React.createElement(
      'div',
      { style: styles },
      ' '
    );
  }

});

module.exports = InkBar;
},{"./mixins/style-propable":57,"./styles/transitions":80,"react":326}],42:[function(require,module,exports){
'use strict';

var React = require('react');
var KeyCode = require('./utils/key-code');
var StylePropable = require('./mixins/style-propable');
var AutoPrefix = require('./styles/auto-prefix');
var Transitions = require('./styles/transitions');
var WindowListenable = require('./mixins/window-listenable');
var Overlay = require('./overlay');
var Paper = require('./paper');
var Menu = require('./menu/menu');

var openNavEventHandler = null;

var LeftNav = React.createClass({
  displayName: 'LeftNav',

  mixins: [StylePropable, WindowListenable],

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  propTypes: {
    className: React.PropTypes.string,
    disableSwipeToOpen: React.PropTypes.bool,
    docked: React.PropTypes.bool,
    header: React.PropTypes.element,
    menuItems: React.PropTypes.array.isRequired,
    onChange: React.PropTypes.func,
    onNavOpen: React.PropTypes.func,
    onNavClose: React.PropTypes.func,
    openRight: React.PropTypes.bool,
    selectedIndex: React.PropTypes.number,
    menuItemClassName: React.PropTypes.string,
    menuItemClassNameSubheader: React.PropTypes.string,
    menuItemClassNameLink: React.PropTypes.string
  },

  windowListeners: {
    'keyup': '_onWindowKeyUp',
    'resize': '_onWindowResize'
  },

  getDefaultProps: function getDefaultProps() {
    return {
      disableSwipeToOpen: false,
      docked: true
    };
  },

  getInitialState: function getInitialState() {
    this._maybeSwiping = false;
    this._touchStartX = null;
    this._touchStartY = null;
    this._swipeStartX = null;

    return {
      open: this.props.docked,
      swiping: null
    };
  },

  componentDidMount: function componentDidMount() {
    this._updateMenuHeight();
    this._enableSwipeHandling();
  },

  componentDidUpdate: function componentDidUpdate() {
    this._updateMenuHeight();
    this._enableSwipeHandling();
  },

  componentWillUnmount: function componentWillUnmount() {
    this._disableSwipeHandling();
  },

  toggle: function toggle() {
    this.setState({ open: !this.state.open });
    return this;
  },

  close: function close() {
    this.setState({ open: false });
    if (this.props.onNavClose) this.props.onNavClose();
    return this;
  },

  open: function open() {
    this.setState({ open: true });
    if (this.props.onNavOpen) this.props.onNavOpen();
    return this;
  },

  getThemePalette: function getThemePalette() {
    return this.context.muiTheme.palette;
  },

  getTheme: function getTheme() {
    return this.context.muiTheme.component.leftNav;
  },

  getStyles: function getStyles() {
    var x = this._getTranslateMultiplier() * (this.state.open ? 0 : this._getMaxTranslateX());
    var styles = {
      root: {
        height: '100%',
        width: this.getTheme().width,
        position: 'fixed',
        zIndex: 10,
        left: 0,
        top: 0,
        transform: 'translate3d(' + x + 'px, 0, 0)',
        transition: !this.state.swiping && Transitions.easeOut(),
        backgroundColor: this.getTheme().color,
        overflow: 'hidden'
      },
      menu: {
        overflowY: 'auto',
        overflowX: 'hidden',
        height: '100%',
        borderRadius: '0'
      },
      menuItem: {
        height: this.context.muiTheme.spacing.desktopLeftNavMenuItemHeight,
        lineHeight: this.context.muiTheme.spacing.desktopLeftNavMenuItemHeight + 'px'
      },
      rootWhenOpenRight: {
        left: 'auto',
        right: 0
      }
    };
    styles.menuItemLink = this.mergeAndPrefix(styles.menuItem, {
      display: 'block',
      textDecoration: 'none',
      color: this.getThemePalette().textColor
    });
    styles.menuItemSubheader = this.mergeAndPrefix(styles.menuItem, {
      overflow: 'hidden'
    });

    return styles;
  },

  render: function render() {
    var selectedIndex = this.props.selectedIndex;
    var overlay = undefined;

    var styles = this.getStyles();
    if (!this.props.docked) {
      overlay = React.createElement(Overlay, {
        ref: 'overlay',
        show: this.state.open || !!this.state.swiping,
        transitionEnabled: !this.state.swiping,
        onTouchTap: this._onOverlayTouchTap
      });
    }

    return React.createElement(
      'div',
      { className: this.props.className },
      overlay,
      React.createElement(
        Paper,
        {
          ref: 'clickAwayableElement',
          zDepth: 2,
          rounded: false,
          transitionEnabled: !this.state.swiping,
          style: this.mergeAndPrefix(styles.root, this.props.openRight && styles.rootWhenOpenRight, this.props.style) },
        this.props.header,
        React.createElement(Menu, {
          ref: 'menuItems',
          style: this.mergeAndPrefix(styles.menu),
          zDepth: 0,
          menuItems: this.props.menuItems,
          menuItemStyle: this.mergeAndPrefix(styles.menuItem),
          menuItemStyleLink: this.mergeAndPrefix(styles.menuItemLink),
          menuItemStyleSubheader: this.mergeAndPrefix(styles.menuItemSubheader),
          menuItemClassName: this.props.menuItemClassName,
          menuItemClassNameSubheader: this.props.menuItemClassNameSubheader,
          menuItemClassNameLink: this.props.menuItemClassNameLink,
          selectedIndex: selectedIndex,
          onItemTap: this._onMenuItemClick })
      )
    );
  },

  _updateMenuHeight: function _updateMenuHeight() {
    if (this.props.header) {
      var container = React.findDOMNode(this.refs.clickAwayableElement);
      var menu = React.findDOMNode(this.refs.menuItems);
      var menuHeight = container.clientHeight - menu.offsetTop;
      menu.style.height = menuHeight + 'px';
    }
  },

  _onMenuItemClick: function _onMenuItemClick(e, key, payload) {
    if (this.props.onChange && this.props.selectedIndex !== key) {
      this.props.onChange(e, key, payload);
    }
    if (!this.props.docked) this.close();
  },

  _onOverlayTouchTap: function _onOverlayTouchTap() {
    this.close();
  },

  _onWindowKeyUp: function _onWindowKeyUp(e) {
    if (e.keyCode === KeyCode.ESC && !this.props.docked && this.state.open) {
      this.close();
    }
  },

  _onWindowResize: function _onWindowResize() {
    this._updateMenuHeight();
  },

  _getMaxTranslateX: function _getMaxTranslateX() {
    return this.getTheme().width + 10;
  },

  _getTranslateMultiplier: function _getTranslateMultiplier() {
    return this.props.openRight ? 1 : -1;
  },

  _enableSwipeHandling: function _enableSwipeHandling() {
    if (!this.props.docked) {
      document.body.addEventListener('touchstart', this._onBodyTouchStart);
      if (!openNavEventHandler) {
        openNavEventHandler = this._onBodyTouchStart;
      }
    } else {
      this._disableSwipeHandling();
    }
  },

  _disableSwipeHandling: function _disableSwipeHandling() {
    document.body.removeEventListener('touchstart', this._onBodyTouchStart);
    if (openNavEventHandler === this._onBodyTouchStart) {
      openNavEventHandler = null;
    }
  },

  _onBodyTouchStart: function _onBodyTouchStart(e) {
    if (!this.state.open && (openNavEventHandler !== this._onBodyTouchStart || this.props.disableSwipeToOpen)) {
      return;
    }

    var touchStartX = e.touches[0].pageX;
    var touchStartY = e.touches[0].pageY;

    this._maybeSwiping = true;
    this._touchStartX = touchStartX;
    this._touchStartY = touchStartY;

    document.body.addEventListener('touchmove', this._onBodyTouchMove);
    document.body.addEventListener('touchend', this._onBodyTouchEnd);
    document.body.addEventListener('touchcancel', this._onBodyTouchEnd);
  },

  _setPosition: function _setPosition(translateX) {
    var leftNav = React.findDOMNode(this.refs.clickAwayableElement);
    leftNav.style[AutoPrefix.single('transform')] = 'translate3d(' + this._getTranslateMultiplier() * translateX + 'px, 0, 0)';
    this.refs.overlay.setOpacity(1 - translateX / this._getMaxTranslateX());
  },

  _getTranslateX: function _getTranslateX(currentX) {
    return Math.min(Math.max(this.state.swiping === 'closing' ? this._getTranslateMultiplier() * (currentX - this._swipeStartX) : this._getMaxTranslateX() - this._getTranslateMultiplier() * (this._swipeStartX - currentX), 0), this._getMaxTranslateX());
  },

  _onBodyTouchMove: function _onBodyTouchMove(e) {
    var currentX = e.touches[0].pageX;
    var currentY = e.touches[0].pageY;

    if (this.state.swiping) {
      e.preventDefault();
      this._setPosition(this._getTranslateX(currentX));
    } else if (this._maybeSwiping) {
      var dXAbs = Math.abs(currentX - this._touchStartX);
      var dYAbs = Math.abs(currentY - this._touchStartY);
      // If the user has moved his thumb ten pixels in either direction,
      // we can safely make an assumption about whether he was intending
      // to swipe or scroll.
      var threshold = 10;

      if (dXAbs > threshold && dYAbs <= threshold) {
        this._swipeStartX = currentX;
        this.setState({
          swiping: this.state.open ? 'closing' : 'opening'
        });
        this._setPosition(this._getTranslateX(currentX));
      } else if (dXAbs <= threshold && dYAbs > threshold) {
        this._onBodyTouchEnd();
      }
    }
  },

  _onBodyTouchEnd: function _onBodyTouchEnd(e) {
    if (this.state.swiping) {
      var currentX = e.changedTouches[0].pageX;
      var translateRatio = this._getTranslateX(currentX) / this._getMaxTranslateX();

      this._maybeSwiping = false;
      var swiping = this.state.swiping;
      this.setState({
        swiping: null
      });

      // We have to open or close after setting swiping to null,
      // because only then CSS transition is enabled.
      if (translateRatio > 0.5) {
        if (swiping === 'opening') {
          this._setPosition(this._getMaxTranslateX());
        } else {
          this.close();
        }
      } else {
        if (swiping === 'opening') {
          this.open();
        } else {
          this._setPosition(0);
        }
      }
    } else {
      this._maybeSwiping = false;
    }

    document.body.removeEventListener('touchmove', this._onBodyTouchMove);
    document.body.removeEventListener('touchend', this._onBodyTouchEnd);
    document.body.removeEventListener('touchcancel', this._onBodyTouchEnd);
  }

});

module.exports = LeftNav;
},{"./menu/menu":50,"./mixins/style-propable":57,"./mixins/window-listenable":59,"./overlay":60,"./paper":61,"./styles/auto-prefix":73,"./styles/transitions":80,"./utils/key-code":137,"react":326}],43:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react');
var StylePropable = require('./mixins/style-propable');
var Transitions = require("./styles/transitions");

var LinearProgress = React.createClass({
  displayName: 'LinearProgress',

  mixins: [StylePropable],

  propTypes: {
    mode: React.PropTypes.oneOf(["determinate", "indeterminate"]),
    value: React.PropTypes.number,
    min: React.PropTypes.number,
    max: React.PropTypes.number
  },

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  _getRelativeValue: function _getRelativeValue() {
    var value = this.props.value;
    var min = this.props.min;
    var max = this.props.max;

    var clampedValue = Math.min(Math.max(min, value), max);
    var rangeValue = max - min;
    var relValue = Math.round(clampedValue / rangeValue * 10000) / 10000;
    return relValue * 100;
  },

  componentDidMount: function componentDidMount() {
    var _this = this;

    var bar1 = React.findDOMNode(this.refs.bar1);
    var bar2 = React.findDOMNode(this.refs.bar2);

    this._barUpdate(0, bar1, [[-35, 100], [100, -90]]);

    setTimeout(function () {
      _this._barUpdate(0, bar2, [[-200, 100], [107, -8]]);
    }, 850);
  },

  _barUpdate: function _barUpdate(step, barElement, stepValues) {
    step = step || 0;
    step %= 4;
    setTimeout(this._barUpdate.bind(this, step + 1, barElement, stepValues), 420);
    if (!this.isMounted()) return;
    if (this.props.mode !== "indeterminate") return;

    if (step === 0) {
      barElement.style.left = stepValues[0][0] + "%";
      barElement.style.right = stepValues[0][1] + "%";
    } else if (step === 1) {
      barElement.style.transitionDuration = "840ms";
    } else if (step === 2) {
      barElement.style.left = stepValues[1][0] + "%";
      barElement.style.right = stepValues[1][1] + "%";
    } else if (step === 3) {
      barElement.style.transitionDuration = "0ms";
    }
  },

  getDefaultProps: function getDefaultProps() {
    return {
      mode: "indeterminate",
      value: 0,
      min: 0,
      max: 100
    };
  },

  getTheme: function getTheme() {
    return this.context.muiTheme.palette;
  },

  getStyles: function getStyles() {
    var styles = {
      root: {
        position: "relative",
        height: 4,
        display: "block",
        width: "100%",
        backgroundColor: this.getTheme().primary3Color,
        borderRadius: 2,
        margin: 0,
        overflow: "hidden"
      },
      bar: {
        height: "100%"
      },
      barFragment1: {},
      barFragment2: {}
    };

    if (this.props.mode === "indeterminate") {
      styles.barFragment1 = {
        position: "absolute",
        backgroundColor: this.getTheme().primary1Color,
        top: 0,
        left: 0,
        bottom: 0,
        transition: Transitions.create("all", "840ms", null, "cubic-bezier(0.650, 0.815, 0.735, 0.395)")
      };

      styles.barFragment2 = {
        position: "absolute",
        backgroundColor: this.getTheme().primary1Color,
        top: 0,
        left: 0,
        bottom: 0,
        transition: Transitions.create("all", "840ms", null, "cubic-bezier(0.165, 0.840, 0.440, 1.000)")
      };
    } else {
      styles.bar.backgroundColor = this.getTheme().primary1Color;
      styles.bar.transition = Transitions.create("width", ".3s", null, "linear");
      styles.bar.width = this._getRelativeValue() + "%";
    }

    return styles;
  },

  render: function render() {
    var _props = this.props;
    var style = _props.style;

    var other = _objectWithoutProperties(_props, ['style']);

    var styles = this.getStyles();

    return React.createElement(
      'div',
      _extends({}, other, { style: this.mergeAndPrefix(styles.root, style) }),
      React.createElement(
        'div',
        { style: this.mergeAndPrefix(styles.bar) },
        React.createElement('div', { ref: 'bar1', style: this.mergeAndPrefix(styles.barFragment1) }),
        React.createElement('div', { ref: 'bar2', style: this.mergeAndPrefix(styles.barFragment2) })
      )
    );
  }
});

module.exports = LinearProgress;
},{"./mixins/style-propable":57,"./styles/transitions":80,"react":326}],44:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react/addons');
var StylePropable = require('../mixins/style-propable');

var ListDivider = React.createClass({
  displayName: 'ListDivider',

  mixins: [StylePropable],

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  propTypes: {
    inset: React.PropTypes.bool
  },

  render: function render() {
    var _props = this.props;
    var inset = _props.inset;
    var style = _props.style;

    var other = _objectWithoutProperties(_props, ['inset', 'style']);

    var mergedStyles = this.mergeAndPrefix({
      margin: 0,
      marginTop: -1,
      marginLeft: inset ? 72 : 0,
      height: 1,
      border: 'none',
      backgroundColor: this.context.muiTheme.palette.borderColor
    }, style);

    return React.createElement('hr', _extends({}, other, { style: mergedStyles }));
  }
});

module.exports = ListDivider;
},{"../mixins/style-propable":57,"react/addons":154}],45:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react/addons');
var PureRenderMixin = React.addons.PureRenderMixin;
var ColorManipulator = require('../utils/color-manipulator');
var StylePropable = require('../mixins/style-propable');
var Colors = require('../styles/colors');
var Transitions = require('../styles/transitions');
var Typography = require('../styles/typography');
var EnhancedButton = require('../enhanced-button');
var IconButton = require('../icon-button');
var OpenIcon = require('../svg-icons/navigation/arrow-drop-up');
var CloseIcon = require('../svg-icons/navigation/arrow-drop-down');
var NestedList = require('./nested-list');

var ListItem = React.createClass({
  displayName: 'ListItem',

  mixins: [PureRenderMixin, StylePropable],

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  propTypes: {
    autoGenerateNestedIndicator: React.PropTypes.bool,
    disabled: React.PropTypes.bool,
    disableKeyboardFocus: React.PropTypes.bool,
    initiallyOpen: React.PropTypes.bool,
    innerDivStyle: React.PropTypes.object,
    insetChildren: React.PropTypes.bool,
    innerStyle: React.PropTypes.object,
    leftAvatar: React.PropTypes.element,
    leftCheckbox: React.PropTypes.element,
    leftIcon: React.PropTypes.element,
    nestedLevel: React.PropTypes.number,
    nestedItems: React.PropTypes.arrayOf(React.PropTypes.element),
    onKeyboardFocus: React.PropTypes.func,
    onMouseEnter: React.PropTypes.func,
    onMouseLeave: React.PropTypes.func,
    onNestedListToggle: React.PropTypes.func,
    onTouchStart: React.PropTypes.func,
    rightAvatar: React.PropTypes.element,
    rightIcon: React.PropTypes.element,
    rightIconButton: React.PropTypes.element,
    rightToggle: React.PropTypes.element,
    primaryText: React.PropTypes.node,
    secondaryText: React.PropTypes.node,
    secondaryTextLines: React.PropTypes.oneOf([1, 2])
  },

  getDefaultProps: function getDefaultProps() {
    return {
      autoGenerateNestedIndicator: true,
      initiallyOpen: false,
      nestedItems: [],
      nestedLevel: 0,
      onKeyboardFocus: function onKeyboardFocus() {},
      onMouseEnter: function onMouseEnter() {},
      onMouseLeave: function onMouseLeave() {},
      onNestedListToggle: function onNestedListToggle() {},
      onTouchStart: function onTouchStart() {},
      secondaryTextLines: 1
    };
  },

  getInitialState: function getInitialState() {
    return {
      hovered: false,
      isKeyboardFocused: false,
      open: this.props.initiallyOpen,
      rightIconButtonHovered: false,
      rightIconButtonKeyboardFocused: false,
      touch: false
    };
  },

  render: function render() {
    var _props = this.props;
    var autoGenerateNestedIndicator = _props.autoGenerateNestedIndicator;
    var children = _props.children;
    var disabled = _props.disabled;
    var disableKeyboardFocus = _props.disableKeyboardFocus;
    var innerDivStyle = _props.innerDivStyle;
    var insetChildren = _props.insetChildren;
    var leftAvatar = _props.leftAvatar;
    var leftCheckbox = _props.leftCheckbox;
    var leftIcon = _props.leftIcon;
    var nestedItems = _props.nestedItems;
    var nestedLevel = _props.nestedLevel;
    var onKeyboardFocus = _props.onKeyboardFocus;
    var onMouseLeave = _props.onMouseLeave;
    var onMouseEnter = _props.onMouseEnter;
    var onTouchStart = _props.onTouchStart;
    var rightAvatar = _props.rightAvatar;
    var rightIcon = _props.rightIcon;
    var rightIconButton = _props.rightIconButton;
    var rightToggle = _props.rightToggle;
    var primaryText = _props.primaryText;
    var secondaryText = _props.secondaryText;
    var secondaryTextLines = _props.secondaryTextLines;
    var style = _props.style;

    var other = _objectWithoutProperties(_props, ['autoGenerateNestedIndicator', 'children', 'disabled', 'disableKeyboardFocus', 'innerDivStyle', 'insetChildren', 'leftAvatar', 'leftCheckbox', 'leftIcon', 'nestedItems', 'nestedLevel', 'onKeyboardFocus', 'onMouseLeave', 'onMouseEnter', 'onTouchStart', 'rightAvatar', 'rightIcon', 'rightIconButton', 'rightToggle', 'primaryText', 'secondaryText', 'secondaryTextLines', 'style']);

    var textColor = this.context.muiTheme.palette.textColor;
    var hoverColor = ColorManipulator.fade(textColor, 0.1);
    var singleAvatar = !secondaryText && (leftAvatar || rightAvatar);
    var singleNoAvatar = !secondaryText && !(leftAvatar || rightAvatar);
    var twoLine = secondaryText && secondaryTextLines === 1;
    var threeLine = secondaryText && secondaryTextLines > 1;
    var hasCheckbox = leftCheckbox || rightToggle;

    var styles = {
      root: {
        backgroundColor: (this.state.isKeyboardFocused || this.state.hovered) && !this.state.rightIconButtonHovered && !this.state.rightIconButtonKeyboardFocused ? hoverColor : null,
        color: textColor,
        display: 'block',
        fontSize: 16,
        lineHeight: '16px',
        position: 'relative',
        transition: Transitions.easeOut()
      },

      //This inner div is needed so that ripples will span the entire container
      innerDiv: {
        marginLeft: nestedLevel * this.context.muiTheme.component.listItem.nestedLevelDepth,
        paddingLeft: leftIcon || leftAvatar || leftCheckbox || insetChildren ? 72 : 16,
        paddingRight: rightIcon || rightAvatar || rightIconButton ? 56 : rightToggle ? 72 : 16,
        paddingBottom: singleAvatar ? 20 : 16,
        paddingTop: singleNoAvatar || threeLine ? 16 : 20,
        position: 'relative'
      },

      icons: {
        height: 24,
        width: 24,
        display: 'block',
        position: 'absolute',
        top: twoLine ? 12 : singleAvatar ? 4 : 0,
        padding: 12
      },

      leftIcon: {
        color: Colors.grey600,
        fill: Colors.grey600,
        left: 4
      },

      rightIcon: {
        color: Colors.grey400,
        fill: Colors.grey400,
        right: 4
      },

      avatars: {
        position: 'absolute',
        top: singleAvatar ? 8 : 16
      },

      label: {
        cursor: 'pointer'
      },

      leftAvatar: {
        left: 16
      },

      rightAvatar: {
        right: 16
      },

      leftCheckbox: {
        position: 'absolute',
        display: 'block',
        width: 24,
        top: twoLine ? 24 : singleAvatar ? 16 : 12,
        left: 16
      },

      primaryText: {
        margin: 0
      },

      rightIconButton: {
        position: 'absolute',
        display: 'block',
        top: twoLine ? 12 : singleAvatar ? 4 : 0,
        right: 4
      },

      rightToggle: {
        position: 'absolute',
        display: 'block',
        width: 54,
        top: twoLine ? 25 : singleAvatar ? 17 : 13,
        right: 8
      },

      secondaryText: {
        fontSize: 14,
        lineHeight: threeLine ? '18px' : '16px',
        height: threeLine ? 36 : 16,
        margin: 0,
        marginTop: 4,
        color: Typography.textLightBlack,

        //needed for 2 and 3 line ellipsis
        overflow: 'hidden',
        textOverflow: 'ellipsis',
        whiteSpace: threeLine ? null : 'nowrap',
        display: threeLine ? '-webkit-box' : null,
        WebkitLineClamp: threeLine ? 2 : null,
        WebkitBoxOrient: threeLine ? 'vertical' : null
      }
    };

    var contentChildren = [];

    if (leftIcon) {
      this._pushElement(contentChildren, leftIcon, this.mergeStyles(styles.icons, styles.leftIcon));
    }

    if (rightIcon) {
      this._pushElement(contentChildren, rightIcon, this.mergeStyles(styles.icons, styles.rightIcon));
    }

    if (leftAvatar) {
      this._pushElement(contentChildren, leftAvatar, this.mergeStyles(styles.avatars, styles.leftAvatar));
    }

    if (rightAvatar) {
      this._pushElement(contentChildren, rightAvatar, this.mergeStyles(styles.avatars, styles.rightAvatar));
    }

    if (leftCheckbox) {
      this._pushElement(contentChildren, leftCheckbox, this.mergeStyles(styles.leftCheckbox));
    }

    //RightIconButtonElement
    var hasNestListItems = nestedItems.length;
    var hasRightElement = rightAvatar || rightIcon || rightIconButton || rightToggle;
    var needsNestedIndicator = hasNestListItems && autoGenerateNestedIndicator && !hasRightElement;

    if (rightIconButton || needsNestedIndicator) {
      var rightIconButtonElement = rightIconButton;
      var rightIconButtonHandlers = {
        onKeyboardFocus: this._handleRightIconButtonKeyboardFocus,
        onMouseEnter: this._handleRightIconButtonMouseEnter,
        onMouseLeave: this._handleRightIconButtonMouseLeave,
        onTouchTap: this._handleRightIconButtonTouchTap,
        onMouseDown: this._handleRightIconButtonMouseUp,
        onMouseUp: this._handleRightIconButtonMouseUp
      };

      // Create a nested list indicator icon if we don't have an icon on the right
      if (needsNestedIndicator) {
        rightIconButtonElement = this.state.open ? React.createElement(
          IconButton,
          null,
          React.createElement(OpenIcon, null)
        ) : React.createElement(
          IconButton,
          null,
          React.createElement(CloseIcon, null)
        );
        rightIconButtonHandlers.onTouchTap = this._handleNestedListToggle;
      }

      this._pushElement(contentChildren, rightIconButtonElement, this.mergeStyles(styles.rightIconButton), rightIconButtonHandlers);
    }

    if (rightToggle) {
      this._pushElement(contentChildren, rightToggle, this.mergeStyles(styles.rightToggle));
    }

    if (primaryText) {
      var secondaryTextElement = this._createTextElement(styles.primaryText, primaryText, 'primaryText');
      contentChildren.push(secondaryTextElement);
    }

    if (secondaryText) {
      var secondaryTextElement = this._createTextElement(styles.secondaryText, secondaryText, 'secondaryText');
      contentChildren.push(secondaryTextElement);
    }

    var nestedList = nestedItems.length ? React.createElement(
      NestedList,
      { nestedLevel: nestedLevel + 1, open: this.state.open },
      nestedItems
    ) : undefined;

    return hasCheckbox ? this._createLabelElement(styles, contentChildren) : disabled ? this._createDisabledElement(styles, contentChildren) : React.createElement(
      'div',
      null,
      React.createElement(
        EnhancedButton,
        _extends({}, other, {
          disabled: disabled,
          disableKeyboardFocus: disableKeyboardFocus || this.state.rightIconButtonKeyboardFocused,
          linkButton: true,
          onKeyboardFocus: this._handleKeyboardFocus,
          onMouseLeave: this._handleMouseLeave,
          onMouseEnter: this._handleMouseEnter,
          onTouchStart: this._handleTouchStart,
          ref: 'enhancedButton',
          style: this.mergeAndPrefix(styles.root, style) }),
        React.createElement(
          'div',
          { style: this.mergeAndPrefix(styles.innerDiv, innerDivStyle) },
          contentChildren
        )
      ),
      nestedList
    );
  },

  applyFocusState: function applyFocusState(focusState) {
    var button = this.refs.enhancedButton;
    var buttonEl = React.findDOMNode(button);

    if (button) {
      switch (focusState) {
        case 'none':
          buttonEl.blur();
          break;
        case 'focused':
          buttonEl.focus();
          break;
        case 'keyboard-focused':
          button.setKeyboardFocus();
          buttonEl.focus();
          break;
      }
    }
  },

  _createDisabledElement: function _createDisabledElement(styles, contentChildren) {
    var _props2 = this.props;
    var innerDivStyle = _props2.innerDivStyle;
    var style = _props2.style;

    var mergedDivStyles = this.mergeAndPrefix(styles.root, styles.innerDiv, innerDivStyle, style);

    return React.createElement('div', { style: mergedDivStyles }, contentChildren);
  },

  _createLabelElement: function _createLabelElement(styles, contentChildren) {
    var _props3 = this.props;
    var innerDivStyle = _props3.innerDivStyle;
    var style = _props3.style;

    var mergedLabelStyles = this.mergeAndPrefix(styles.root, styles.innerDiv, innerDivStyle, styles.label, style);

    return React.createElement('label', { style: mergedLabelStyles }, contentChildren);
  },

  _createTextElement: function _createTextElement(styles, data, key) {
    var isAnElement = React.isValidElement(data);
    var mergedStyles = isAnElement ? this.mergeStyles(styles, data.props.style) : null;

    return isAnElement ? React.cloneElement(data, {
      key: key,
      style: mergedStyles
    }) : React.createElement(
      'div',
      { key: key, style: styles },
      data
    );
  },

  _handleKeyboardFocus: function _handleKeyboardFocus(e, isKeyboardFocused) {
    this.setState({ isKeyboardFocused: isKeyboardFocused });
    this.props.onKeyboardFocus(e, isKeyboardFocused);
  },

  _handleMouseEnter: function _handleMouseEnter(e) {
    if (!this.state.touch) this.setState({ hovered: true });
    this.props.onMouseEnter(e);
  },

  _handleMouseLeave: function _handleMouseLeave(e) {
    this.setState({ hovered: false });
    this.props.onMouseLeave(e);
  },

  _handleNestedListToggle: function _handleNestedListToggle(e) {
    e.stopPropagation();
    this.setState({ open: !this.state.open });
    this.props.onNestedListToggle(this);
  },

  _handleRightIconButtonKeyboardFocus: function _handleRightIconButtonKeyboardFocus(e, isKeyboardFocused) {
    var iconButton = this.props.rightIconButton;
    var newState = {};

    newState.rightIconButtonKeyboardFocused = isKeyboardFocused;
    if (isKeyboardFocused) newState.isKeyboardFocused = false;
    this.setState(newState);

    if (iconButton && iconButton.props.onKeyboardFocus) iconButton.props.onKeyboardFocus(e, isKeyboardFocused);
  },

  _handleRightIconButtonMouseDown: function _handleRightIconButtonMouseDown(e) {
    var iconButton = this.props.rightIconButton;
    e.stopPropagation();
    if (iconButton && iconButton.props.onMouseDown) iconButton.props.onMouseDown(e);
  },

  _handleRightIconButtonMouseLeave: function _handleRightIconButtonMouseLeave(e) {
    var iconButton = this.props.rightIconButton;
    this.setState({ rightIconButtonHovered: false });
    if (iconButton && iconButton.props.onMouseLeave) iconButton.props.onMouseLeave(e);
  },

  _handleRightIconButtonMouseEnter: function _handleRightIconButtonMouseEnter(e) {
    var iconButton = this.props.rightIconButton;
    this.setState({ rightIconButtonHovered: true });
    if (iconButton && iconButton.props.onMouseEnter) iconButton.props.onMouseEnter(e);
  },

  _handleRightIconButtonMouseUp: function _handleRightIconButtonMouseUp(e) {
    var iconButton = this.props.rightIconButton;
    e.stopPropagation();
    if (iconButton && iconButton.props.onMouseUp) iconButton.props.onMouseUp(e);
  },

  _handleRightIconButtonTouchTap: function _handleRightIconButtonTouchTap(e) {
    var iconButton = this.props.rightIconButton;

    //Stop the event from bubbling up to the list-item
    e.stopPropagation();
    if (iconButton && iconButton.props.onTouchTap) iconButton.props.onTouchTap(e);
  },

  _handleTouchStart: function _handleTouchStart(e) {
    this.setState({ touch: true });
    this.props.onTouchStart(e);
  },

  _pushElement: function _pushElement(children, element, baseStyles, additionalProps) {
    if (element) {
      var styles = this.mergeStyles(baseStyles, element.props.style);
      children.push(React.cloneElement(element, _extends({
        key: children.length,
        style: styles
      }, additionalProps)));
    }
  }

});

module.exports = ListItem;
},{"../enhanced-button":33,"../icon-button":39,"../mixins/style-propable":57,"../styles/colors":74,"../styles/transitions":80,"../styles/typography":81,"../svg-icons/navigation/arrow-drop-down":87,"../svg-icons/navigation/arrow-drop-up":88,"../utils/color-manipulator":129,"./nested-list":47,"react/addons":154}],46:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react/addons');
var PureRenderMixin = React.addons.PureRenderMixin;
var PropTypes = require('../utils/prop-types');
var StylePropable = require('../mixins/style-propable');
var Typography = require('../styles/typography');
var Paper = require('../paper');

var List = React.createClass({
  displayName: 'List',

  mixins: [PureRenderMixin, StylePropable],

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  propTypes: {
    insetSubheader: React.PropTypes.bool,
    subheader: React.PropTypes.string,
    subheaderStyle: React.PropTypes.object,
    zDepth: PropTypes.zDepth
  },

  getDefaultProps: function getDefaultProps() {
    return {
      zDepth: 0
    };
  },

  render: function render() {
    var _props = this.props;
    var children = _props.children;
    var insetSubheader = _props.insetSubheader;
    var style = _props.style;
    var subheader = _props.subheader;
    var subheaderStyle = _props.subheaderStyle;
    var zDepth = _props.zDepth;

    var other = _objectWithoutProperties(_props, ['children', 'insetSubheader', 'style', 'subheader', 'subheaderStyle', 'zDepth']);

    var styles = {
      root: {
        padding: 0,
        paddingBottom: 8,
        paddingTop: subheader ? 0 : 8
      },

      subheader: {
        color: Typography.textLightBlack,
        fontSize: 14,
        fontWeight: Typography.fontWeightMedium,
        lineHeight: '48px',
        paddingLeft: insetSubheader ? 72 : 16
      }
    };

    var subheaderElement = undefined;
    if (subheader) {
      var mergedSubheaderStyles = this.mergeAndPrefix(styles.subheader, subheaderStyle);
      subheaderElement = React.createElement(
        'div',
        { style: mergedSubheaderStyles },
        subheader
      );
    }

    return React.createElement(
      Paper,
      _extends({}, other, {
        style: this.mergeStyles(styles.root, style),
        zDepth: zDepth }),
      subheaderElement,
      children
    );
  }
});

module.exports = List;
},{"../mixins/style-propable":57,"../paper":61,"../styles/typography":81,"../utils/prop-types":140,"react/addons":154}],47:[function(require,module,exports){
'use strict';

var React = require('react');
var ImmutabilityHelper = require('../utils/immutability-helper');
var List = require('./list');

var NestedList = React.createClass({
  displayName: 'NestedList',

  propTypes: {
    nestedLevel: React.PropTypes.number,
    open: React.PropTypes.bool
  },

  getDefaultProps: function getDefaultProps() {
    return {
      nestedLevel: 1,
      open: false
    };
  },

  render: function render() {
    var _props = this.props;
    var children = _props.children;
    var open = _props.open;
    var nestedLevel = _props.nestedLevel;
    var style = _props.style;

    var styles = {
      root: {
        display: open ? null : 'none'
      }
    };

    return React.createElement(
      List,
      { style: ImmutabilityHelper.merge(styles.root, style) },
      React.Children.map(children, function (child) {
        return React.isValidElement(child) ? React.cloneElement(child, {
          nestedLevel: nestedLevel + 1
        }) : child;
      })
    );
  }

});

module.exports = NestedList;
},{"../utils/immutability-helper":135,"./list":46,"react":326}],48:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');
var StylePropable = require('../mixins/style-propable');

var LinkMenuItem = React.createClass({
  displayName: 'LinkMenuItem',

  mixins: [StylePropable],

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  propTypes: {
    index: React.PropTypes.number.isRequired,
    payload: React.PropTypes.string.isRequired,
    text: React.PropTypes.string.isRequired,
    target: React.PropTypes.string,
    active: React.PropTypes.bool,
    disabled: React.PropTypes.bool,
    className: React.PropTypes.string
  },

  getDefaultProps: function getDefaultProps() {
    return {
      active: false,
      disabled: false
    };
  },

  getInitialState: function getInitialState() {
    return {
      hovered: false
    };
  },

  getTheme: function getTheme() {
    return this.context.muiTheme.component.menuItem;
  },

  getStyles: function getStyles() {
    var style = {
      root: {
        userSelect: 'none',
        cursor: 'pointer',
        display: 'block',
        lineHeight: this.getTheme().height + 'px',
        paddingLeft: this.getTheme().padding,
        paddingRight: this.getTheme().padding
      },
      rootWhenHovered: {
        backgroundColor: this.getTheme().hoverColor
      },
      rootWhenSelected: {
        color: this.getTheme().selectedTextColor
      },
      rootWhenDisabled: {
        cursor: 'default',
        color: this.context.muiTheme.palette.disabledColor
      }
    };

    return style;
  },

  render: function render() {
    var onClickHandler = this.props.disabled ? this._stopLink : undefined;
    // Prevent context menu 'Open In New Tab/Window'
    var linkAttribute = this.props.disabled ? 'data-href' : 'href';
    var link = {};
    link[linkAttribute] = this.props.payload;

    var styles = this.getStyles();

    var linkStyles = this.mergeAndPrefix(styles.root, this.props.selected && styles.rootWhenSelected, this.props.selected && styles.rootWhenSelected, this.props.active && !this.props.disabled && styles.rootWhenHovered, this.props.style, this.props.disabled && styles.rootWhenDisabled);

    return React.createElement(
      'a',
      _extends({
        key: this.props.index,
        target: this.props.target,
        style: linkStyles }, link, {
        className: this.props.className,
        onClick: onClickHandler,
        onMouseEnter: this._handleMouseEnter,
        onMouseLeave: this._handleMouseLeave }),
      this.props.text
    );
  },

  _stopLink: function _stopLink(event) {
    event.preventDefault();
  },

  _handleMouseEnter: function _handleMouseEnter(e) {
    this.setState({ hovered: true });
    if (!this.props.disabled && this.props.onMouseEnter) this.props.onMouseEnter(e);
  },

  _handleMouseLeave: function _handleMouseLeave(e) {
    this.setState({ hovered: false });
    if (!this.props.disabled && this.props.onMouseLeave) this.props.onMouseLeave(e);
  }
});

module.exports = LinkMenuItem;
},{"../mixins/style-propable":57,"react":326}],49:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react');
var StylePropable = require('../mixins/style-propable');
var FontIcon = require('../font-icon');
var Toggle = require('../toggle');

var Types = {
  LINK: 'LINK',
  SUBHEADER: 'SUBHEADER',
  NESTED: 'NESTED'
};

var MenuItem = React.createClass({
  displayName: 'MenuItem',

  mixins: [StylePropable],

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  propTypes: {
    index: React.PropTypes.number.isRequired,
    className: React.PropTypes.string,
    iconClassName: React.PropTypes.string,
    iconRightClassName: React.PropTypes.string,
    iconStyle: React.PropTypes.object,
    iconRightStyle: React.PropTypes.object,
    attribute: React.PropTypes.string,
    number: React.PropTypes.string,
    data: React.PropTypes.string,
    toggle: React.PropTypes.bool,
    disabled: React.PropTypes.bool,
    onTouchTap: React.PropTypes.func,
    onToggle: React.PropTypes.func,
    selected: React.PropTypes.bool,
    active: React.PropTypes.bool
  },

  statics: {
    Types: Types
  },

  getDefaultProps: function getDefaultProps() {
    return {
      toggle: false,
      disabled: false,
      active: false
    };
  },

  getTheme: function getTheme() {
    return this.context.muiTheme.component.menuItem;
  },

  getSpacing: function getSpacing() {
    return this.context.muiTheme.spacing;
  },

  getStyles: function getStyles() {
    var styles = {
      root: {
        userSelect: 'none',
        cursor: 'pointer',
        lineHeight: this.getTheme().height + 'px',
        paddingLeft: this.getTheme().padding,
        paddingRight: this.getTheme().padding,
        color: this.context.muiTheme.palette.textColor
      },
      number: {
        float: 'right',
        width: 24,
        textAlign: 'center'
      },
      attribute: {
        float: 'right'
      },
      iconRight: {
        lineHeight: this.getTheme().height + 'px',
        float: 'right'
      },
      icon: {
        float: 'left',
        lineHeight: this.getTheme().height + 'px',
        marginRight: this.getSpacing().desktopGutter
      },
      data: {
        display: 'block',
        paddingLeft: this.getSpacing().desktopGutter * 2,
        lineHeight: this.getTheme().dataHeight + 'px',
        height: this.getTheme().dataHeight + 'px',
        verticalAlign: 'top',
        top: -12,
        position: 'relative',
        fontWeight: 300,
        color: this.context.muiTheme.palette.textColor
      },
      toggle: {
        marginTop: (this.getTheme().height - this.context.muiTheme.component.radioButton.size) / 2,
        float: 'right',
        width: 42
      },
      rootWhenHovered: {
        backgroundColor: this.getTheme().hoverColor
      },
      rootWhenSelected: {
        color: this.getTheme().selectedTextColor
      },
      rootWhenDisabled: {
        cursor: 'default',
        color: this.context.muiTheme.palette.disabledColor
      }
    };

    return styles;
  },

  render: function render() {
    var icon = undefined;
    var data = undefined;
    var iconRight = undefined;
    var attribute = undefined;
    var number = undefined;
    var toggleElement = undefined;
    var styles = this.getStyles();

    if (this.props.iconClassName) icon = React.createElement(FontIcon, { style: this.mergeAndPrefix(styles.icon, this.props.iconStyle, this.props.selected && styles.rootWhenSelected), className: this.props.iconClassName });
    if (this.props.iconRightClassName) iconRight = React.createElement(FontIcon, { style: this.mergeAndPrefix(styles.iconRight, this.props.iconRightStyle), className: this.props.iconRightClassName });
    if (this.props.data) data = React.createElement(
      'span',
      { style: this.mergeAndPrefix(styles.data) },
      this.props.data
    );
    if (this.props.number !== undefined) number = React.createElement(
      'span',
      { style: this.mergeAndPrefix(styles.number) },
      this.props.number
    );
    if (this.props.attribute !== undefined) attribute = React.createElement(
      'span',
      { style: this.mergeAndPrefix(styles.style) },
      this.props.attribute
    );
    if (this.props.icon) icon = this.props.icon;

    if (this.props.toggle) {
      var _props = this.props;
      var toggle = _props.toggle;
      var onTouchTap = _props.onTouchTap;
      var onToggle = _props.onToggle;
      var onMouseEnter = _props.onMouseEnter;
      var onMouseLeave = _props.onMouseLeave;
      var children = _props.children;
      var label = _props.label;
      var style = _props.style;

      var other = _objectWithoutProperties(_props, ['toggle', 'onTouchTap', 'onToggle', 'onMouseEnter', 'onMouseLeave', 'children', 'label', 'style']);

      toggleElement = React.createElement(Toggle, _extends({}, other, { onToggle: this._handleToggle, style: styles.toggle }));
    }

    return React.createElement(
      'div',
      {
        key: this.props.index,
        className: this.props.className,
        onTouchTap: this._handleTouchTap,
        onMouseEnter: this._handleMouseEnter,
        onMouseLeave: this._handleMouseLeave,
        style: this.mergeAndPrefix(styles.root, this.props.selected && styles.rootWhenSelected, this.props.active && !this.props.disabled && styles.rootWhenHovered, this.props.style, this.props.disabled && styles.rootWhenDisabled) },
      icon,
      this.props.children,
      data,
      attribute,
      number,
      toggleElement,
      iconRight
    );
  },

  _handleTouchTap: function _handleTouchTap(e) {
    if (!this.props.disabled && this.props.onTouchTap) this.props.onTouchTap(e, this.props.index);
  },

  _handleToggle: function _handleToggle(e, toggled) {
    if (!this.props.disabled && this.props.onToggle) this.props.onToggle(e, this.props.index, toggled);
  },

  _handleMouseEnter: function _handleMouseEnter(e) {
    if (!this.props.disabled && this.props.onMouseEnter) this.props.onMouseEnter(e, this.props.index);
  },

  _handleMouseLeave: function _handleMouseLeave(e) {
    if (!this.props.disabled && this.props.onMouseLeave) this.props.onMouseLeave(e, this.props.index);
  }
});

module.exports = MenuItem;
},{"../font-icon":38,"../mixins/style-propable":57,"../toggle":118,"react":326}],50:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react');
var CssEvent = require('../utils/css-event');
var KeyLine = require('../utils/key-line');
var KeyCode = require('../utils/key-code');
var StylePropable = require('../mixins/style-propable');
var Transitions = require('../styles/transitions');
var ClickAwayable = require('../mixins/click-awayable');
var Paper = require('../paper');
var MenuItem = require('./menu-item');
var LinkMenuItem = require('./link-menu-item');
var SubheaderMenuItem = require('./subheader-menu-item');

/***********************
* Nested Menu Component
***********************/
var NestedMenuItem = React.createClass({
  displayName: 'NestedMenuItem',

  mixins: [ClickAwayable, StylePropable],

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  propTypes: {
    index: React.PropTypes.number.isRequired,
    text: React.PropTypes.string,
    menuItems: React.PropTypes.array.isRequired,
    zDepth: React.PropTypes.number,
    disabled: React.PropTypes.bool,
    active: React.PropTypes.bool,
    onItemTap: React.PropTypes.func,
    menuItemStyle: React.PropTypes.object
  },

  getDefaultProps: function getDefaultProps() {
    return {
      disabled: false
    };
  },

  getInitialState: function getInitialState() {
    return {
      open: false,
      activeIndex: 0
    };
  },

  componentClickAway: function componentClickAway() {
    this._closeNestedMenu();
  },

  componentDidMount: function componentDidMount() {
    this._positionNestedMenu();
    var el = this.getDOMNode();
    el.focus();
  },

  componentDidUpdate: function componentDidUpdate() {
    this._positionNestedMenu();
  },

  getSpacing: function getSpacing() {
    return this.context.muiTheme.spacing;
  },

  getStyles: function getStyles() {
    var styles = {
      root: {
        userSelect: 'none',
        cursor: 'pointer',
        lineHeight: this.getTheme().height + 'px',
        color: this.context.muiTheme.palette.textColor
      },
      icon: {
        float: 'left',
        lineHeight: this.getTheme().height + 'px',
        marginRight: this.getSpacing().desktopGutter
      },
      toggle: {
        marginTop: (this.getTheme().height - this.context.muiTheme.component.radioButton.size) / 2,
        float: 'right',
        width: 42
      },
      rootWhenHovered: {
        backgroundColor: this.getTheme().hoverColor
      },
      rootWhenSelected: {
        color: this.getTheme().selectedTextColor
      },
      rootWhenDisabled: {
        cursor: 'default',
        color: this.context.muiTheme.palette.disabledColor
      }
    };

    return styles;
  },

  getTheme: function getTheme() {
    return this.context.muiTheme.component.menuItem;
  },

  render: function render() {
    var styles = this.getStyles();
    styles = this.mergeAndPrefix(styles.root, this.props.active && !this.props.disabled && styles.rootWhenHovered, {
      position: 'relative'
    }, this.props.style);

    var iconCustomArrowDropRight = {
      marginRight: this.getSpacing().desktopGutterMini * -1,
      color: this.context.muiTheme.component.dropDownMenu.accentColor
    };

    var _props = this.props;
    var index = _props.index;
    var menuItemStyle = _props.menuItemStyle;

    var other = _objectWithoutProperties(_props, ['index', 'menuItemStyle']);

    return React.createElement(
      'div',
      {
        ref: 'root',
        style: styles,
        onMouseEnter: this._openNestedMenu,
        onMouseLeave: this._closeNestedMenu,
        onMouseOver: this._handleMouseOver,
        onMouseOut: this._handleMouseOut },
      React.createElement(
        MenuItem,
        {
          index: index,
          style: menuItemStyle,
          disabled: this.props.disabled,
          iconRightStyle: iconCustomArrowDropRight,
          iconRightClassName: 'muidocs-icon-custom-arrow-drop-right',
          onTouchTap: this._onParentItemTap },
        this.props.text
      ),
      React.createElement(Menu, _extends({}, other, {
        ref: 'nestedMenu',
        menuItems: this.props.menuItems,
        menuItemStyle: menuItemStyle,
        onItemTap: this._onMenuItemTap,
        hideable: true,
        visible: this.state.open,
        onRequestClose: this._closeNestedMenu,
        zDepth: this.props.zDepth + 1 }))
    );
  },

  toggleNestedMenu: function toggleNestedMenu() {
    if (!this.props.disabled) this.setState({ open: !this.state.open });
  },

  isOpen: function isOpen() {
    return this.state.open;
  },

  _positionNestedMenu: function _positionNestedMenu() {
    var el = React.findDOMNode(this);
    var nestedMenu = React.findDOMNode(this.refs.nestedMenu);
    nestedMenu.style.left = el.offsetWidth + 'px';
  },

  _openNestedMenu: function _openNestedMenu() {
    if (!this.props.disabled) this.setState({ open: true });
  },

  _closeNestedMenu: function _closeNestedMenu() {
    this.setState({ open: false });
    React.findDOMNode(this).focus();
  },

  _onParentItemTap: function _onParentItemTap() {
    this.toggleNestedMenu();
  },

  _onMenuItemTap: function _onMenuItemTap(e, index, menuItem) {
    if (this.props.onItemTap) this.props.onItemTap(e, index, menuItem);
    this._closeNestedMenu();
  },
  _handleMouseOver: function _handleMouseOver(e) {
    if (!this.props.disabled && this.props.onMouseOver) this.props.onMouseOver(e, this.props.index);
  },

  _handleMouseOut: function _handleMouseOut(e) {
    if (!this.props.disabled && this.props.onMouseOut) this.props.onMouseOut(e, this.props.index);
  }

});

/****************
* Menu Component
****************/
var Menu = React.createClass({
  displayName: 'Menu',

  mixins: [StylePropable],

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  propTypes: {
    autoWidth: React.PropTypes.bool,
    onItemTap: React.PropTypes.func,
    onToggle: React.PropTypes.func,
    onRequestClose: React.PropTypes.func,
    menuItems: React.PropTypes.array.isRequired,
    selectedIndex: React.PropTypes.number,
    hideable: React.PropTypes.bool,
    visible: React.PropTypes.bool,
    zDepth: React.PropTypes.number,
    menuItemStyle: React.PropTypes.object,
    menuItemStyleSubheader: React.PropTypes.object,
    menuItemStyleLink: React.PropTypes.object,
    menuItemClassName: React.PropTypes.string,
    menuItemClassNameSubheader: React.PropTypes.string,
    menuItemClassNameLink: React.PropTypes.string
  },

  getInitialState: function getInitialState() {
    return {
      nestedMenuShown: false,
      activeIndex: 0
    };
  },

  getDefaultProps: function getDefaultProps() {
    return {
      autoWidth: true,
      hideable: false,
      visible: true,
      zDepth: 1,
      onRequestClose: function onRequestClose() {}
    };
  },

  componentDidMount: function componentDidMount() {
    var el = React.findDOMNode(this);

    //Set the menu width
    this._setKeyWidth(el);

    //Show or Hide the menu according to visibility
    this._renderVisibility();
  },

  componentDidUpdate: function componentDidUpdate(prevProps) {
    if (this.props.visible !== prevProps.visible || this.props.menuItems.length !== prevProps.menuItems.length) {
      this._renderVisibility();
    }
  },

  componentWillReceiveProps: function componentWillReceiveProps() {
    //Set the menu width
    this._setKeyWidth(React.findDOMNode(this));
  },

  getTheme: function getTheme() {
    return this.context.muiTheme.component.menu;
  },

  getSpacing: function getSpacing() {
    return this.context.muiTheme.spacing;
  },

  getStyles: function getStyles() {
    var styles = {
      root: {
        backgroundColor: this.getTheme().containerBackgroundColor,
        paddingTop: this.getSpacing().desktopGutterMini,
        paddingBottom: this.getSpacing().desktopGutterMini,
        transition: Transitions.easeOut(null, 'height'),
        outline: 'none !important'
      },
      subheader: {
        paddingLeft: this.context.muiTheme.component.menuSubheader.padding,
        paddingRight: this.context.muiTheme.component.menuSubheader.padding
      },
      hideable: {
        overflow: 'hidden',
        position: 'absolute',
        top: 0,
        zIndex: 1
      },
      item: {
        height: 34
      }
    };

    return styles;
  },

  render: function render() {
    var styles = this.getStyles();
    return React.createElement(
      Paper,
      {
        ref: 'paperContainer',
        tabIndex: '0',
        onKeyDown: this._onKeyDown,
        zDepth: this.props.zDepth,
        style: this.mergeAndPrefix(styles.root, this.props.hideable && styles.hideable, this.props.style) },
      this._getChildren()
    );
  },

  _getChildren: function _getChildren() {
    var menuItem = undefined,
        itemComponent = undefined,
        isDisabled = undefined;

    var styles = this.getStyles();

    this._children = [];
    //This array is used to keep track of all nested menu refs
    this._nestedChildren = [];

    for (var i = 0; i < this.props.menuItems.length; i++) {
      menuItem = this.props.menuItems[i];
      isDisabled = menuItem.disabled === undefined ? false : menuItem.disabled;

      var _menuItem = menuItem;
      var icon = _menuItem.icon;
      var data = _menuItem.data;
      var attribute = _menuItem.attribute;
      var number = _menuItem.number;
      var toggle = _menuItem.toggle;
      var onTouchTap = _menuItem.onTouchTap;

      var other = _objectWithoutProperties(_menuItem, ['icon', 'data', 'attribute', 'number', 'toggle', 'onTouchTap']);

      switch (menuItem.type) {

        case MenuItem.Types.LINK:
          itemComponent = React.createElement(LinkMenuItem, {
            key: i,
            index: i,
            active: this.state.activeIndex === i,
            text: menuItem.text,
            disabled: isDisabled,
            className: this.props.menuItemClassNameLink,
            style: this.props.menuItemStyleLink,
            payload: menuItem.payload,
            target: menuItem.target });
          break;

        case MenuItem.Types.SUBHEADER:
          itemComponent = React.createElement(SubheaderMenuItem, {
            key: i,
            index: i,
            className: this.props.menuItemClassNameSubheader,
            style: this.mergeAndPrefix(styles.subheader, this.props.menuItemStyleSubheader),
            firstChild: i === 0,
            text: menuItem.text });
          break;

        case MenuItem.Types.NESTED:
          var _props2 = this.props,
              ref = _props2.ref,
              key = _props2.key,
              index = _props2.index,
              zDepth = _props2.zDepth,
              other = _objectWithoutProperties(_props2, ['ref', 'key', 'index', 'zDepth']);

          itemComponent = React.createElement(NestedMenuItem, _extends({}, other, {
            ref: i,
            key: i,
            index: i,
            nested: true,
            active: this.state.activeIndex === i,
            text: menuItem.text,
            disabled: isDisabled,
            menuItems: menuItem.items,
            menuItemStyle: this.props.menuItemStyle,
            zDepth: this.props.zDepth,
            onMouseEnter: this._onItemActivated,
            onMouseLeave: this._onItemDeactivated,
            onItemTap: this._onNestedItemTap }));
          this._nestedChildren.push(i);
          break;

        default:
          itemComponent = React.createElement(
            MenuItem,
            _extends({}, other, {
              selected: this.props.selectedIndex === i,
              key: i,
              index: i,
              active: this.state.activeIndex === i,
              icon: menuItem.icon,
              data: menuItem.data,
              className: this.props.menuItemClassName,
              style: this.props.menuItemStyle,
              attribute: menuItem.attribute,
              number: menuItem.number,
              toggle: menuItem.toggle,
              onToggle: this.props.onToggle,
              disabled: isDisabled,
              onTouchTap: this._onItemTap,
              onMouseEnter: this._onItemActivated,
              onMouseLeave: this._onItemDeactivated
            }),
            menuItem.text
          );
      }
      this._children.push(itemComponent);
    }

    return this._children;
  },

  _setKeyWidth: function _setKeyWidth(el) {
    //Update the menu width
    var menuWidth = '100%';

    if (this.props.autoWidth) {
      el.style.width = 'auto';
      menuWidth = KeyLine.getIncrementalDim(el.offsetWidth) + 'px';
    }

    el.style.width = menuWidth;
  },

  _renderVisibility: function _renderVisibility() {
    if (this.props.hideable) {
      if (this.props.visible) this._expandHideableMenu();else this._collapseHideableMenu();
    }
  },

  _expandHideableMenu: function _expandHideableMenu() {
    var _this = this;

    var el = React.findDOMNode(this);
    var container = React.findDOMNode(this.refs.paperContainer);
    var padding = this.getSpacing().desktopGutterMini;
    var height = this._getHiddenMenuHeight(el, padding);

    //Add transition
    if (!el.style.transition) {
      el.style.transition = Transitions.easeOut();
    }

    this._nextAnimationFrame(function () {
      container.style.overflow = 'hidden';

      // Yeild to the DOM, then apply height and padding. This makes the transition smoother.
      el.style.paddingTop = padding + 'px';
      el.style.paddingBottom = padding + 'px';
      el.style.height = height + 'px';
      el.style.opacity = 1;

      //Set the overflow to visible after the animation is done so
      //that other nested menus can be shown
      CssEvent.onTransitionEnd(el, function () {
        //Make sure the menu is open before setting the overflow.
        //This is to accout for fast clicks
        if (_this.props.visible) container.style.overflow = 'visible';
        el.style.transition = null;
        el.focus();
      });
    });
  },

  _getHiddenMenuHeight: function _getHiddenMenuHeight(el, padding) {
    //Add padding to the offset height, because it is not yet set in the style.
    var height = padding * 2;

    //Hide the element and allow the browser to automatically resize it.
    el.style.visibility = 'hidden';
    el.style.height = 'auto';

    //Determine the height of the menu.
    height += el.offsetHeight;

    //Unhide the menu with the height set back to zero.
    el.style.height = '0px';
    el.style.visibility = 'visible';

    return height;
  },

  _collapseHideableMenu: function _collapseHideableMenu() {
    var el = React.findDOMNode(this);
    var container = React.findDOMNode(this.refs.paperContainer);
    var originalOpacity = el.style.opacity;

    //Add transition
    if (!el.style.transition && originalOpacity !== '') {
      el.style.transition = Transitions.easeOut();
    }

    this._nextAnimationFrame(function () {
      //Set the overflow to hidden so that animation works properly
      container.style.overflow = 'hidden';

      //Close the menu
      el.style.opacity = 0;
      el.style.height = '0px';
      el.style.paddingTop = '0px';
      el.style.paddingBottom = '0px';

      var end = function end() {
        el.style.transition = null;
      };

      if (originalOpacity === '') end();else CssEvent.onTransitionEnd(el, end);
    });
  },

  _nextAnimationFrame: function _nextAnimationFrame(func) {
    if (window.requestAnimationFrame) {
      return window.requestAnimationFrame(func);
    }
    return setTimeout(func, 16);
  },

  _onNestedItemTap: function _onNestedItemTap(e, index, menuItem) {
    if (this.props.onItemTap) this.props.onItemTap(e, index, menuItem);
  },

  _onItemTap: function _onItemTap(e, index) {
    if (this.props.onItemTap) this.props.onItemTap(e, index, this.props.menuItems[index]);
  },

  _onItemToggle: function _onItemToggle(e, index, toggled) {
    if (this.props.onItemToggle) this.props.onItemToggle(e, index, this.props.menuItems[index], toggled);
  },
  _onItemActivated: function _onItemActivated(e, index) {
    this.setState({ activeIndex: index });
  },
  _onItemDeactivated: function _onItemDeactivated(e, index) {
    if (this.state.activeKey === index) this.setState({ activeIndex: 0 });
  },

  _onKeyDown: function _onKeyDown(e) {
    if (!(this.state.open || this.props.visible)) return;

    var nested = this._children[this.state.activeIndex];
    if (nested && nested.props.nested && this.refs[this.state.activeIndex].isOpen()) return;

    switch (e.which) {
      case KeyCode.UP:
        this._activatePreviousItem();
        break;
      case KeyCode.DOWN:
        this._activateNextItem();
        break;
      case KeyCode.RIGHT:
        this._tryToggleNested(this.state.activeIndex);
        break;
      case KeyCode.LEFT:
        this._close();
        break;
      case KeyCode.ESC:
        this._close();
        break;
      case KeyCode.TAB:
        this._close();
        return; // so the tab key can propagate
      case KeyCode.ENTER:
      case KeyCode.SPACE:
        e.stopPropagation(); // needs called before the close
        this._triggerSelection(e);
        break;
      default:
        return; //important
    }
    e.preventDefault();
    e.stopPropagation();
  },

  _activatePreviousItem: function _activatePreviousItem() {
    var active = this.state.activeIndex || 0;
    active = Math.max(active - 1, 0);
    this.setState({ activeIndex: active });
  },

  _activateNextItem: function _activateNextItem() {
    var active = this.state.activeIndex || 0;
    active = Math.min(active + 1, this._children.length - 1);
    this.setState({ activeIndex: active });
  },

  _triggerSelection: function _triggerSelection(e) {
    var index = this.state.activeIndex || 0;
    this._onItemTap(e, index);
  },

  _close: function _close() {
    this.props.onRequestClose();
  },

  _tryToggleNested: function _tryToggleNested(index) {
    var item = this.refs[index];
    if (item && item.toggleNestedMenu) item.toggleNestedMenu();
  }

});

module.exports = Menu;
},{"../mixins/click-awayable":54,"../mixins/style-propable":57,"../paper":61,"../styles/transitions":80,"../utils/css-event":130,"../utils/key-code":137,"../utils/key-line":138,"./link-menu-item":48,"./menu-item":49,"./subheader-menu-item":51,"react":326}],51:[function(require,module,exports){
'use strict';

var React = require('react');
var StylePropable = require('../mixins/style-propable');
var Typography = require('../styles/typography');

var SubheaderMenuItem = React.createClass({
  displayName: 'SubheaderMenuItem',

  mixins: [StylePropable],

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  propTypes: {
    index: React.PropTypes.number.isRequired,
    text: React.PropTypes.string.isRequired,
    firstChild: React.PropTypes.bool,
    className: React.PropTypes.string
  },

  getTheme: function getTheme() {
    return this.context.muiTheme.component.menuSubheader;
  },

  getSpacing: function getSpacing() {
    return this.context.muiTheme.spacing;
  },

  getStyles: function getStyles() {
    var gutterMini = this.getSpacing().desktopGutterMini;
    var subheaderHeight = this.getSpacing().desktopSubheaderHeight;
    var styles = {
      root: {
        boxSizing: 'border-box',
        fontSize: '13px',
        letterSpacing: 0,
        fontWeight: Typography.fontWeightMedium,
        margin: 0,
        height: subheaderHeight + gutterMini,
        lineHeight: subheaderHeight + 'px',
        color: this.getTheme().textColor,
        borderTop: 'solid 1px ' + this.getTheme().borderColor,
        paddingTop: gutterMini,
        marginTop: gutterMini
      },
      rootWhenFirstChild: {
        height: subheaderHeight,
        borderTop: 'none',
        paddingTop: 0,
        marginTop: 0
      }
    };

    return styles;
  },

  render: function render() {
    return React.createElement(
      'div',
      {
        key: this.props.index,
        className: this.props.className,
        style: this.mergeAndPrefix(this.getStyles().root, this.props.firstChild && this.getStyles().rootWhenFirstChild, this.props.style) },
      this.props.text
    );
  }

});

module.exports = SubheaderMenuItem;
},{"../mixins/style-propable":57,"../styles/typography":81,"react":326}],52:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react/addons');
var ReactTransitionGroup = React.addons.TransitionGroup;
var ClickAwayable = require('../mixins/click-awayable');
var StylePropable = require('../mixins/style-propable');
var Events = require('../utils/events');
var PropTypes = require('../utils/prop-types');
var Menu = require('../menus/menu');

var IconMenu = React.createClass({
  displayName: 'IconMenu',

  mixins: [StylePropable, ClickAwayable],

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  propTypes: {
    closeOnItemTouchTap: React.PropTypes.bool,
    iconButtonElement: React.PropTypes.element.isRequired,
    openDirection: PropTypes.corners,
    onItemTouchTap: React.PropTypes.func,
    onKeyboardFocus: React.PropTypes.func,
    onMouseDown: React.PropTypes.func,
    onMouseLeave: React.PropTypes.func,
    onMouseEnter: React.PropTypes.func,
    onMouseUp: React.PropTypes.func,
    onTouchTap: React.PropTypes.func,
    menuStyle: React.PropTypes.object,
    touchTapCloseDelay: React.PropTypes.number
  },

  getDefaultProps: function getDefaultProps() {
    return {
      closeOnItemTouchTap: true,
      openDirection: 'bottom-left',
      onItemTouchTap: function onItemTouchTap() {},
      onKeyboardFocus: function onKeyboardFocus() {},
      onMouseDown: function onMouseDown() {},
      onMouseLeave: function onMouseLeave() {},
      onMouseEnter: function onMouseEnter() {},
      onMouseUp: function onMouseUp() {},
      onTouchTap: function onTouchTap() {},
      touchTapCloseDelay: 200
    };
  },

  getInitialState: function getInitialState() {
    return {
      iconButtonRef: this.props.iconButtonElement.props.ref || 'iconButton',
      menuInitiallyKeyboardFocused: false,
      open: false
    };
  },

  componentWillUnmount: function componentWillUnmount() {
    if (this._timeout) clearTimeout(this._timeout);
  },

  componentClickAway: function componentClickAway() {
    this.close();
  },

  render: function render() {
    var _this = this;

    var _props = this.props;
    var closeOnItemTouchTap = _props.closeOnItemTouchTap;
    var iconButtonElement = _props.iconButtonElement;
    var openDirection = _props.openDirection;
    var onItemTouchTap = _props.onItemTouchTap;
    var onKeyboardFocus = _props.onKeyboardFocus;
    var onMouseDown = _props.onMouseDown;
    var onMouseLeave = _props.onMouseLeave;
    var onMouseEnter = _props.onMouseEnter;
    var onMouseUp = _props.onMouseUp;
    var onTouchTap = _props.onTouchTap;
    var menuStyle = _props.menuStyle;
    var style = _props.style;

    var other = _objectWithoutProperties(_props, ['closeOnItemTouchTap', 'iconButtonElement', 'openDirection', 'onItemTouchTap', 'onKeyboardFocus', 'onMouseDown', 'onMouseLeave', 'onMouseEnter', 'onMouseUp', 'onTouchTap', 'menuStyle', 'style']);

    var open = this.state.open;
    var openDown = openDirection.split('-')[0] === 'bottom';
    var openLeft = openDirection.split('-')[1] === 'left';

    var styles = {
      root: {
        display: 'inline-block',
        position: 'relative'
      },

      menu: {
        top: openDown ? 12 : null,
        bottom: !openDown ? 12 : null,
        left: !openLeft ? 12 : null,
        right: openLeft ? 12 : null
      }
    };

    var mergedRootStyles = this.mergeAndPrefix(styles.root, style);
    var mergedMenuStyles = this.mergeStyles(styles.menu, menuStyle);

    var iconButton = React.cloneElement(iconButtonElement, {
      onKeyboardFocus: this.props.onKeyboardFocus,
      onTouchTap: (function (e) {
        _this.open(Events.isKeyboard(e));
        if (iconButtonElement.props.onTouchTap) iconButtonElement.props.onTouchTap(e);
      }).bind(this),
      ref: this.state.iconButtonRef
    });

    var menu = open ? React.createElement(
      Menu,
      _extends({}, other, {
        animated: true,
        initiallyKeyboardFocused: this.state.menuInitiallyKeyboardFocused,
        onEscKeyDown: this._handleMenuEscKeyDown,
        onItemTouchTap: this._handleItemTouchTap,
        openDirection: openDirection,
        style: mergedMenuStyles }),
      this.props.children
    ) : null;

    return React.createElement(
      'div',
      {
        onMouseDown: onMouseDown,
        onMouseLeave: onMouseLeave,
        onMouseEnter: onMouseEnter,
        onMouseUp: onMouseUp,
        onTouchTap: onTouchTap,
        style: mergedRootStyles },
      iconButton,
      React.createElement(
        ReactTransitionGroup,
        null,
        menu
      )
    );
  },

  isOpen: function isOpen() {
    return this.state.open;
  },

  close: function close(isKeyboard) {
    var _this2 = this;

    if (this.state.open) {
      this.setState({ open: false }, function () {
        //Set focus on the icon button when the menu close
        if (isKeyboard) {
          var iconButton = _this2.refs[_this2.state.iconButtonRef];
          React.findDOMNode(iconButton).focus();
          iconButton.setKeyboardFocus();
        }
      });
    }
  },

  open: function open(menuInitiallyKeyboardFocused) {
    if (!this.state.open) {
      this.setState({
        open: true,
        menuInitiallyKeyboardFocused: menuInitiallyKeyboardFocused
      });
    }
  },

  _handleItemTouchTap: function _handleItemTouchTap(e, child) {
    var _this3 = this;

    if (this.props.closeOnItemTouchTap) {
      (function () {
        var isKeyboard = Events.isKeyboard(e);

        _this3._timeout = setTimeout(function () {
          _this3.close(isKeyboard);
        }, _this3.props.touchTapCloseDelay);
      })();
    }

    this.props.onItemTouchTap(e, child);
  },

  _handleMenuEscKeyDown: function _handleMenuEscKeyDown() {
    this.close(true);
  }

});

module.exports = IconMenu;
},{"../menus/menu":53,"../mixins/click-awayable":54,"../mixins/style-propable":57,"../utils/events":133,"../utils/prop-types":140,"react/addons":154}],53:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react/addons');
var update = React.addons.update;
var Controllable = require('../mixins/controllable');
var StylePropable = require('../mixins/style-propable');
var AutoPrefix = require('../styles/auto-prefix');
var Transitions = require('../styles/transitions');
var KeyCode = require('../utils/key-code');
var PropTypes = require('../utils/prop-types');
var List = require('../lists/list');
var Paper = require('../paper');

var Menu = React.createClass({
  displayName: 'Menu',

  mixins: [StylePropable, Controllable],

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  propTypes: {
    animated: React.PropTypes.bool,
    autoWidth: React.PropTypes.bool,
    desktop: React.PropTypes.bool,
    initiallyKeyboardFocused: React.PropTypes.bool,
    listStyle: React.PropTypes.object,
    maxHeight: React.PropTypes.number,
    multiple: React.PropTypes.bool,
    onEscKeyDown: React.PropTypes.func,
    onItemTouchTap: React.PropTypes.func,
    onKeyDown: React.PropTypes.func,
    openDirection: PropTypes.corners,
    selectedMenuItemStyle: React.PropTypes.object,
    width: PropTypes.stringOrNumber,
    zDepth: PropTypes.zDepth
  },

  getDefaultProps: function getDefaultProps() {
    return {
      animated: false,
      autoWidth: true,
      maxHeight: null,
      onEscKeyDown: function onEscKeyDown() {},
      onItemTouchTap: function onItemTouchTap() {},
      onKeyDown: function onKeyDown() {},
      openDirection: 'bottom-left',
      zDepth: 1
    };
  },

  getInitialState: function getInitialState() {
    var selectedIndex = this._getSelectedIndex(this.props);

    return {
      focusIndex: selectedIndex >= 0 ? selectedIndex : 0,
      isKeyboardFocused: this.props.initiallyKeyboardFocused,
      keyWidth: this.props.desktop ? 64 : 56
    };
  },

  componentDidEnter: function componentDidEnter() {
    this._animateOpen();
  },

  componentDidMount: function componentDidMount() {
    if (this.props.autoWidth) this._setWidth();
    if (!this.props.animated) this._animateOpen();
    this._setScollPosition();
  },

  componentDidUpdate: function componentDidUpdate() {
    if (this.props.autoWidth) this._setWidth();
  },

  componentWillLeave: function componentWillLeave(callback) {
    var _this = this;

    var rootStyle = React.findDOMNode(this).style;

    AutoPrefix.set(rootStyle, 'transition', Transitions.easeOut('250ms', ['opacity', 'transform']));
    AutoPrefix.set(rootStyle, 'transform', 'translate3d(0,-8px,0)');
    rootStyle.opacity = 0;

    setTimeout((function () {
      if (_this.isMounted()) callback();
    }).bind(this), 250);
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    var selectedIndex = this._getSelectedIndex(nextProps);

    this.setState({
      focusIndex: selectedIndex >= 0 ? selectedIndex : 0,
      keyWidth: nextProps.desktop ? 64 : 56
    });
  },

  render: function render() {
    var _this2 = this;

    var _props = this.props;
    var animated = _props.animated;
    var autoWidth = _props.autoWidth;
    var children = _props.children;
    var desktop = _props.desktop;
    var initiallyKeyboardFocused = _props.initiallyKeyboardFocused;
    var listStyle = _props.listStyle;
    var maxHeight = _props.maxHeight;
    var multiple = _props.multiple;
    var openDirection = _props.openDirection;
    var selectedMenuItemStyle = _props.selectedMenuItemStyle;
    var style = _props.style;
    var value = _props.value;
    var valueLink = _props.valueLink;
    var width = _props.width;
    var zDepth = _props.zDepth;

    var other = _objectWithoutProperties(_props, ['animated', 'autoWidth', 'children', 'desktop', 'initiallyKeyboardFocused', 'listStyle', 'maxHeight', 'multiple', 'openDirection', 'selectedMenuItemStyle', 'style', 'value', 'valueLink', 'width', 'zDepth']);

    var openDown = openDirection.split('-')[0] === 'bottom';
    var openLeft = openDirection.split('-')[1] === 'left';

    var styles = {
      root: {
        //Nested div bacause the List scales x faster than
        //it scales y
        transition: animated ? Transitions.easeOut('250ms', 'transform') : null,
        position: 'absolute',
        zIndex: 10,
        top: openDown ? 0 : null,
        bottom: !openDown ? 0 : null,
        left: !openLeft ? 0 : null,
        right: openLeft ? 0 : null,
        transform: 'scaleX(0)',
        transformOrigin: openLeft ? 'right' : 'left'
      },

      list: {
        display: 'table-cell',
        paddingBottom: desktop ? 16 : 8,
        paddingTop: desktop ? 16 : 8,
        userSelect: 'none',
        width: width
      },

      menuItemContainer: {
        transition: animated ? Transitions.easeOut(null, 'opacity') : null,
        opacity: 0
      },

      paper: {
        transition: animated ? Transitions.easeOut('500ms', ['transform', 'opacity']) : null,
        transform: 'scaleY(0)',
        transformOrigin: openDown ? 'top' : 'bottom',
        opacity: 0,
        maxHeight: maxHeight,
        overflowY: maxHeight ? 'scroll' : null
      },

      selectedMenuItem: {
        color: this.context.muiTheme.palette.accent1Color
      }
    };

    var mergedRootStyles = this.mergeAndPrefix(styles.root, style);
    var mergedListStyles = this.mergeStyles(styles.list, listStyle);

    //Cascade children opacity
    var cumulativeDelay = openDown ? 175 : 325;
    var cascadeChildrenCount = this._getCascadeChildrenCount();
    var cumulativeDelayIncrement = Math.ceil(150 / cascadeChildrenCount);

    var menuItemIndex = 0;
    var newChildren = React.Children.map(children, (function (child) {

      var childIsADivider = child.type.displayName === 'MenuDivider';
      var childIsDisabled = child.props.disabled;
      var childrenContainerStyles = {};

      if (animated) {
        var focusIndex = _this2.state.focusIndex;
        var transitionDelay = 0;

        //Only cascade the visible menu items
        if (menuItemIndex >= focusIndex - 1 && menuItemIndex <= focusIndex + cascadeChildrenCount - 1) {
          cumulativeDelay = openDown ? cumulativeDelay + cumulativeDelayIncrement : cumulativeDelay - cumulativeDelayIncrement;
          transitionDelay = cumulativeDelay;
        }

        childrenContainerStyles = _this2.mergeAndPrefix(styles.menuItemContainer, {
          transitionDelay: transitionDelay + 'ms'
        });
      }

      var clonedChild = childIsADivider ? child : childIsDisabled ? React.cloneElement(child, { desktop: desktop }) : _this2._cloneMenuItem(child, menuItemIndex, styles);

      if (!childIsADivider && !childIsDisabled) menuItemIndex++;

      return animated ? React.createElement(
        'div',
        { style: childrenContainerStyles },
        clonedChild
      ) : clonedChild;
    }).bind(this));

    return React.createElement(
      'div',
      {
        onKeyDown: this._handleKeyDown,
        style: mergedRootStyles },
      React.createElement(
        Paper,
        {
          ref: 'scrollContainer',
          style: styles.paper,
          zDepth: zDepth },
        React.createElement(
          List,
          _extends({}, other, {
            ref: 'list',
            style: mergedListStyles }),
          newChildren
        )
      )
    );
  },

  setKeyboardFocused: function setKeyboardFocused(keyboardFocused) {
    this.setState({
      isKeyboardFocused: keyboardFocused
    });
  },

  _animateOpen: function _animateOpen() {
    var rootStyle = React.findDOMNode(this).style;
    var scrollContainerStyle = React.findDOMNode(this.refs.scrollContainer).style;
    var menuContainers = React.findDOMNode(this.refs.list).childNodes;

    AutoPrefix.set(rootStyle, 'transform', 'scaleX(1)');
    AutoPrefix.set(scrollContainerStyle, 'transform', 'scaleY(1)');
    scrollContainerStyle.opacity = 1;

    for (var i = 0; i < menuContainers.length; ++i) {
      menuContainers[i].style.opacity = 1;
    }
  },

  _cloneMenuItem: function _cloneMenuItem(child, childIndex, styles) {
    var _this3 = this;

    var _props2 = this.props;
    var desktop = _props2.desktop;
    var selectedMenuItemStyle = _props2.selectedMenuItemStyle;

    var selected = this._isChildSelected(child, this.props);
    var selectedChildrenStyles = {};

    if (selected) {
      selectedChildrenStyles = this.mergeStyles(styles.selectedMenuItem, selectedMenuItemStyle);
    }

    var mergedChildrenStyles = this.mergeStyles(child.props.style || {}, selectedChildrenStyles);

    var isFocused = childIndex === this.state.focusIndex;
    var focusState = 'none';
    if (isFocused) {
      focusState = this.state.isKeyboardFocused ? 'keyboard-focused' : 'focused';
    }

    return React.cloneElement(child, {
      desktop: desktop,
      focusState: focusState,
      onTouchTap: function onTouchTap(e) {
        _this3._handleMenuItemTouchTap(e, child);
        if (child.props.onTouchTap) child.props.onTouchTap(e);
      },
      ref: isFocused ? 'focusedMenuItem' : null,
      style: mergedChildrenStyles
    });
  },

  _decrementKeyboardFocusIndex: function _decrementKeyboardFocusIndex() {
    var index = this.state.focusIndex;

    index--;
    if (index < 0) index = 0;

    this._setFocusIndex(index, true);
  },

  _getCascadeChildrenCount: function _getCascadeChildrenCount() {
    var _props3 = this.props;
    var children = _props3.children;
    var desktop = _props3.desktop;
    var maxHeight = _props3.maxHeight;

    var count = 1;
    var currentHeight = desktop ? 16 : 8;
    var menuItemHeight = desktop ? 32 : 48;

    //MaxHeight isn't set - cascade all of the children
    if (!maxHeight) return React.Children.count(children);

    //Count all the children that will fit inside the
    //max menu height
    React.Children.forEach(children, function (child) {
      if (currentHeight < maxHeight) {
        var childIsADivider = child.type.displayName === 'MenuDivider';

        currentHeight += childIsADivider ? 16 : menuItemHeight;
        count++;
      }
    });

    return count;
  },

  _getMenuItemCount: function _getMenuItemCount() {
    var menuItemCount = 0;
    React.Children.forEach(this.props.children, function (child) {
      var childIsADivider = child.type.displayName === 'MenuDivider';
      var childIsDisabled = child.props.disabled;
      if (!childIsADivider && !childIsDisabled) menuItemCount++;
    });
    return menuItemCount;
  },

  _getSelectedIndex: function _getSelectedIndex(props) {
    var _this4 = this;

    var children = props.children;

    var selectedIndex = -1;
    var menuItemIndex = 0;

    React.Children.forEach(children, (function (child) {
      var childIsADivider = child.type.displayName === 'MenuDivider';

      if (_this4._isChildSelected(child, props)) selectedIndex = menuItemIndex;
      if (!childIsADivider) menuItemIndex++;
    }).bind(this));

    return selectedIndex;
  },

  _handleKeyDown: function _handleKeyDown(e) {
    switch (e.keyCode) {
      case KeyCode.DOWN:
        e.preventDefault();
        this._incrementKeyboardFocusIndex();
        break;
      case KeyCode.ESC:
        this.props.onEscKeyDown(e);
        break;
      case KeyCode.TAB:
        e.preventDefault();
        if (e.shiftKey) {
          this._decrementKeyboardFocusIndex();
        } else {
          this._incrementKeyboardFocusIndex();
        }
        break;
      case KeyCode.UP:
        e.preventDefault();
        this._decrementKeyboardFocusIndex();
        break;
    }
    this.props.onKeyDown(e);
  },

  _handleMenuItemTouchTap: function _handleMenuItemTouchTap(e, item) {
    var multiple = this.props.multiple;
    var valueLink = this.getValueLink(this.props);
    var menuValue = valueLink.value;
    var itemValue = item.props.value;

    if (multiple) {
      var index = menuValue.indexOf(itemValue);
      var newMenuValue = index === -1 ? update(menuValue, { $push: [itemValue] }) : update(menuValue, { $splice: [[index, 1]] });

      valueLink.requestChange(e, newMenuValue);
    } else if (!multiple && itemValue !== menuValue) {
      valueLink.requestChange(e, itemValue);
    }

    this.props.onItemTouchTap(e, item);
  },

  _incrementKeyboardFocusIndex: function _incrementKeyboardFocusIndex() {
    var index = this.state.focusIndex;
    var maxIndex = this._getMenuItemCount() - 1;

    index++;
    if (index > maxIndex) index = maxIndex;

    this._setFocusIndex(index, true);
  },

  _isChildSelected: function _isChildSelected(child, props) {
    var multiple = props.multiple;
    var menuValue = this.getValueLink(props).value;
    var childValue = child.props.value;

    return multiple && menuValue.length && menuValue.indexOf(childValue) !== -1 || !multiple && menuValue && menuValue === childValue;
  },

  _setFocusIndex: function _setFocusIndex(newIndex, isKeyboardFocused) {
    this.setState({
      focusIndex: newIndex,
      isKeyboardFocused: isKeyboardFocused
    });
  },

  _setScollPosition: function _setScollPosition() {
    var desktop = this.props.desktop;
    var focusedMenuItem = this.refs.focusedMenuItem;
    var menuItemHeight = desktop ? 32 : 48;

    if (focusedMenuItem) {
      var selectedOffSet = React.findDOMNode(focusedMenuItem).offsetTop;

      //Make the focused item be the 2nd item in the list the
      //user sees
      var scrollTop = selectedOffSet - menuItemHeight;
      if (scrollTop < menuItemHeight) scrollTop = 0;

      React.findDOMNode(this.refs.scrollContainer).scrollTop = scrollTop;
    }
  },

  _setWidth: function _setWidth() {
    var el = React.findDOMNode(this);
    var listEl = React.findDOMNode(this.refs.list);
    var elWidth = el.offsetWidth;
    var keyWidth = this.state.keyWidth;
    var minWidth = keyWidth * 1.5;
    var keyIncrements = elWidth / keyWidth;
    var newWidth = undefined;

    keyIncrements = keyIncrements <= 1.5 ? 1.5 : Math.ceil(keyIncrements);
    newWidth = keyIncrements * keyWidth;

    if (newWidth < minWidth) newWidth = minWidth;

    el.style.width = newWidth + 'px';
    listEl.style.width = newWidth + 'px';
  }

});

module.exports = Menu;
},{"../lists/list":46,"../mixins/controllable":55,"../mixins/style-propable":57,"../paper":61,"../styles/auto-prefix":73,"../styles/transitions":80,"../utils/key-code":137,"../utils/prop-types":140,"react/addons":154}],54:[function(require,module,exports){
'use strict';

var React = require('react');
var Events = require('../utils/events');
var Dom = require('../utils/dom');

module.exports = {

  //When the component mounts, listen to click events and check if we need to
  //Call the componentClickAway function.
  componentDidMount: function componentDidMount() {
    if (!this.manuallyBindClickAway) this._bindClickAway();
  },

  componentWillUnmount: function componentWillUnmount() {
    this._unbindClickAway();
  },

  _checkClickAway: function _checkClickAway(event) {
    var el = React.findDOMNode(this);

    // Check if the target is inside the current component
    if (event.target !== el && !Dom.isDescendant(el, event.target) && document.documentElement.contains(event.target)) {
      if (this.componentClickAway) this.componentClickAway();
    }
  },

  _bindClickAway: function _bindClickAway() {
    // On touch-enabled devices, both events fire, and the handler is called twice,
    // but it's fine since all operations for which the mixin is used
    // are idempotent.
    Events.on(document, 'mouseup', this._checkClickAway);
    Events.on(document, 'touchend', this._checkClickAway);
  },

  _unbindClickAway: function _unbindClickAway() {
    Events.off(document, 'mouseup', this._checkClickAway);
    Events.off(document, 'touchend', this._checkClickAway);
  }

};
},{"../utils/dom":132,"../utils/events":133,"react":326}],55:[function(require,module,exports){
'use strict';

var React = require('react/addons');

module.exports = {

  propTypes: {
    onChange: React.PropTypes.func,
    value: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.array]),
    valueLink: React.PropTypes.shape({
      value: React.PropTypes.string.isRequired,
      requestChange: React.PropTypes.func.isRequired
    })
  },

  getDefaultProps: function getDefaultProps() {
    return {
      onChange: function onChange() {}
    };
  },

  getValueLink: function getValueLink(props) {
    return props.valueLink || {
      value: props.value,
      requestChange: props.onChange
    };
  }

};
},{"react/addons":154}],56:[function(require,module,exports){
'use strict';

module.exports = {
  ClickAwayable: require('./click-awayable'),
  WindowListenable: require('./window-listenable'),
  StylePropable: require('./style-propable'),
  StyleResizable: require('./style-resizable')
};
},{"./click-awayable":54,"./style-propable":57,"./style-resizable":58,"./window-listenable":59}],57:[function(require,module,exports){
'use strict';

var React = require('react');
var ImmutabilityHelper = require('../utils/immutability-helper');
var Styles = require('../utils/styles');

// This mixin isn't necessary and will be removed in v0.11

/**
 *	@params:
 *	styles = Current styles.
 *  props = New style properties that will override the current style.
 */
module.exports = {

  propTypes: {
    style: React.PropTypes.object
  },

  //Moved this function to ImmutabilityHelper.merge
  mergeStyles: function mergeStyles() {
    return ImmutabilityHelper.merge.apply(this, arguments);
  },

  //Moved this function to /utils/styles.js
  mergeAndPrefix: function mergeAndPrefix() {
    return Styles.mergeAndPrefix.apply(this, arguments);
  }
};
},{"../utils/immutability-helper":135,"../utils/styles":141,"react":326}],58:[function(require,module,exports){
'use strict';

var Events = require('../utils/events');

var Sizes = {
  SMALL: 1,
  MEDIUM: 2,
  LARGE: 3
};

module.exports = {

  statics: {
    Sizes: Sizes
  },

  getInitialState: function getInitialState() {
    return {
      deviceSize: Sizes.SMALL
    };
  },

  componentDidMount: function componentDidMount() {
    this._updateDeviceSize();
    if (!this.manuallyBindResize) this._bindResize();
  },

  componentWillUnmount: function componentWillUnmount() {
    this._unbindResize();
  },

  isDeviceSize: function isDeviceSize(desiredSize) {
    return this.state.deviceSize >= desiredSize;
  },

  _updateDeviceSize: function _updateDeviceSize() {
    var width = window.innerWidth;
    if (width >= 992) this.setState({ deviceSize: Sizes.LARGE });else if (width >= 768) this.setState({ deviceSize: Sizes.MEDIUM });else this.setState({ deviceSize: Sizes.SMALL }); // width >= 375
  },

  _bindResize: function _bindResize() {
    Events.on(window, 'resize', this._updateDeviceSize);
  },

  _unbindResize: function _unbindResize() {
    Events.off(window, 'resize', this._updateDeviceSize);
  }
};
},{"../utils/events":133}],59:[function(require,module,exports){
'use strict';

var Events = require('../utils/events');

module.exports = {

  componentDidMount: function componentDidMount() {
    var listeners = this.windowListeners;

    for (var eventName in listeners) {
      var callbackName = listeners[eventName];
      Events.on(window, eventName, this[callbackName]);
    }
  },

  componentWillUnmount: function componentWillUnmount() {
    var listeners = this.windowListeners;

    for (var eventName in listeners) {
      var callbackName = listeners[eventName];
      Events.off(window, eventName, this[callbackName]);
    }
  }

};
},{"../utils/events":133}],60:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react');
var StylePropable = require('./mixins/style-propable');
var Transitions = require('./styles/transitions');
var Colors = require('./styles/colors');

var Overlay = React.createClass({
  displayName: 'Overlay',

  _originalBodyOverflow: '',

  mixins: [StylePropable],

  propTypes: {
    autoLockScrolling: React.PropTypes.bool,
    show: React.PropTypes.bool,
    transitionEnabled: React.PropTypes.bool
  },

  getDefaultProps: function getDefaultProps() {
    return {
      autoLockScrolling: true,
      transitionEnabled: true
    };
  },

  componentDidMount: function componentDidMount() {
    this._originalBodyOverflow = document.getElementsByTagName('body')[0].style.oveflow;
  },

  componentDidUpdate: function componentDidUpdate() {
    if (this.props.autoLockScrolling) {
      if (this.props.show) {
        this._preventScrolling();
      } else {
        this._allowScrolling();
      }
    }
  },

  componentWillUnmount: function componentWillUnmount() {
    this._allowScrolling();
  },

  setOpacity: function setOpacity(opacity) {
    var overlay = React.findDOMNode(this);
    overlay.style.opacity = opacity;
  },

  getStyles: function getStyles() {
    var styles = {
      root: {
        position: 'fixed',
        height: '100%',
        width: '100%',
        zIndex: 9,
        top: 0,
        left: '-100%',
        opacity: 0,
        backgroundColor: Colors.lightBlack,
        WebkitTapHighlightColor: 'rgba(0, 0, 0, 0)',

        // Two ways to promote overlay to its own render layer
        willChange: 'opacity',
        transform: 'translateZ(0)',

        transition: this.props.transitionEnabled && Transitions.easeOut('0ms', 'left', '400ms') + ',' + Transitions.easeOut('400ms', 'opacity')
      },
      rootWhenShown: {
        left: '0',
        opacity: 1,
        transition: this.props.transitionEnabled && Transitions.easeOut('0ms', 'left') + ',' + Transitions.easeOut('400ms', 'opacity')
      }
    };
    return styles;
  },

  render: function render() {
    var _props = this.props;
    var show = _props.show;
    var style = _props.style;

    var other = _objectWithoutProperties(_props, ['show', 'style']);

    var styles = this.mergeAndPrefix(this.getStyles().root, this.props.style, this.props.show && this.getStyles().rootWhenShown);

    return React.createElement('div', _extends({}, other, { style: styles }));
  },

  preventScrolling: function preventScrolling() {
    if (!this.props.autoLockScrolling) this._preventScrolling();
  },

  allowScrolling: function allowScrolling() {
    if (!this.props.autoLockScrolling) this._allowScrolling();
  },

  _preventScrolling: function _preventScrolling() {
    var body = document.getElementsByTagName('body')[0];
    body.style.overflow = 'hidden';
  },

  _allowScrolling: function _allowScrolling() {
    var body = document.getElementsByTagName('body')[0];
    body.style.overflow = this._originalBodyOverflow || '';
  }

});

module.exports = Overlay;
},{"./mixins/style-propable":57,"./styles/colors":74,"./styles/transitions":80,"react":326}],61:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react/addons');
var PureRenderMixin = React.addons.PureRenderMixin;
var StylePropable = require('./mixins/style-propable');
var PropTypes = require('./utils/prop-types');
var Transitions = require('./styles/transitions');

var Paper = React.createClass({
  displayName: 'Paper',

  mixins: [PureRenderMixin, StylePropable],

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  propTypes: {
    circle: React.PropTypes.bool,
    rounded: React.PropTypes.bool,
    transitionEnabled: React.PropTypes.bool,
    zDepth: PropTypes.zDepth
  },

  getDefaultProps: function getDefaultProps() {
    return {
      circle: false,
      rounded: true,
      transitionEnabled: true,
      zDepth: 1
    };
  },

  render: function render() {
    var _props = this.props;
    var children = _props.children;
    var circle = _props.circle;
    var rounded = _props.rounded;
    var style = _props.style;
    var transitionEnabled = _props.transitionEnabled;
    var zDepth = _props.zDepth;

    var other = _objectWithoutProperties(_props, ['children', 'circle', 'rounded', 'style', 'transitionEnabled', 'zDepth']);

    var styles = {
      backgroundColor: this.context.muiTheme.component.paper.backgroundColor,
      transition: transitionEnabled && Transitions.easeOut(),
      boxSizing: 'border-box',
      fontFamily: this.context.muiTheme.contentFontFamily,
      WebkitTapHighlightColor: 'rgba(0,0,0,0)',
      boxShadow: this._getZDepthShadows(zDepth),
      borderRadius: circle ? '50%' : rounded ? '2px' : '0px'
    };

    return React.createElement(
      'div',
      _extends({}, other, { style: this.mergeAndPrefix(styles, style) }),
      children
    );
  },

  _getZDepthShadows: function _getZDepthShadows(zDepth) {
    var shadows = [null, '0 1px 6px rgba(0, 0, 0, 0.12), 0 1px 4px rgba(0, 0, 0, 0.24)', '0 3px 10px rgba(0, 0, 0, 0.16), 0 3px 10px rgba(0, 0, 0, 0.23)', '0 10px 30px rgba(0, 0, 0, 0.19), 0 6px 10px rgba(0, 0, 0, 0.23)', '0 14px 45px rgba(0, 0, 0, 0.25), 0 10px 18px rgba(0, 0, 0, 0.22)', '0 19px 60px rgba(0, 0, 0, 0.30), 0 15px 20px rgba(0, 0, 0, 0.22)'];

    return shadows[zDepth];
  }

});

module.exports = Paper;
},{"./mixins/style-propable":57,"./styles/transitions":80,"./utils/prop-types":140,"react/addons":154}],62:[function(require,module,exports){
(function (process){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react');
var RadioButton = require('./radio-button');

var RadioButtonGroup = React.createClass({
  displayName: 'RadioButtonGroup',

  propTypes: {
    name: React.PropTypes.string.isRequired,
    valueSelected: React.PropTypes.string,
    defaultSelected: React.PropTypes.string,
    labelPosition: React.PropTypes.oneOf(['left', 'right']),
    onChange: React.PropTypes.func
  },

  _hasCheckAttribute: function _hasCheckAttribute(radioButton) {
    return radioButton.props.hasOwnProperty('checked') && radioButton.props.checked;
  },

  getInitialState: function getInitialState() {
    return {
      numberCheckedRadioButtons: 0,
      selected: this.props.valueSelected || this.props.defaultSelected || ''
    };
  },

  componentWillMount: function componentWillMount() {
    var _this = this;

    var cnt = 0;

    React.Children.forEach(this.props.children, function (option) {
      if (_this._hasCheckAttribute(option)) cnt++;
    }, this);

    this.setState({ numberCheckedRadioButtons: cnt });
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (nextProps.hasOwnProperty('valueSelected')) {
      this.setState({ selected: nextProps.valueSelected });
    }
  },

  render: function render() {
    var _this2 = this;

    var options = React.Children.map(this.props.children, function (option) {
      var _option$props = option.props;
      var name = _option$props.name;
      var value = _option$props.value;
      var label = _option$props.label;
      var onCheck = _option$props.onCheck;

      var other = _objectWithoutProperties(_option$props, ['name', 'value', 'label', 'onCheck']);

      return React.createElement(RadioButton, _extends({}, other, {
        ref: option.props.value,
        name: _this2.props.name,
        key: option.props.value,
        value: option.props.value,
        label: option.props.label,
        labelPosition: _this2.props.labelPosition,
        onCheck: _this2._onChange,
        checked: option.props.value === _this2.state.selected }));
    }, this);

    return React.createElement(
      'div',
      {
        style: this.props.style,
        className: this.props.className || '' },
      options
    );
  },

  _updateRadioButtons: function _updateRadioButtons(newSelection) {
    if (this.state.numberCheckedRadioButtons === 0) {
      this.setState({ selected: newSelection });
    } else if (process.env.NODE_ENV !== 'production') {
      var message = "Cannot select a different radio button while another radio button " + "has the 'checked' property set to true.";
      console.error(message);
    }
  },

  _onChange: function _onChange(e, newSelection) {
    this._updateRadioButtons(newSelection);

    // Successful update
    if (this.state.numberCheckedRadioButtons === 0) {
      if (this.props.onChange) this.props.onChange(e, newSelection);
    }
  },

  getSelectedValue: function getSelectedValue() {
    return this.state.selected;
  },

  setSelectedValue: function setSelectedValue(newSelectionValue) {
    this._updateRadioButtons(newSelectionValue);
  },

  clearValue: function clearValue() {
    this.setSelectedValue('');
  }

});

module.exports = RadioButtonGroup;
}).call(this,require('_process'))
},{"./radio-button":63,"_process":2,"react":326}],63:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react');
var StylePropable = require('./mixins/style-propable');
var Transitions = require('./styles/transitions');
var EnhancedSwitch = require('./enhanced-switch');
var RadioButtonOff = require('./svg-icons/toggle/radio-button-unchecked');
var RadioButtonOn = require('./svg-icons/toggle/radio-button-checked');

var RadioButton = React.createClass({
  displayName: 'RadioButton',

  mixins: [StylePropable],

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  propTypes: {
    iconStyle: React.PropTypes.object,
    labelStyle: React.PropTypes.object,
    onCheck: React.PropTypes.func
  },

  getTheme: function getTheme() {
    return this.context.muiTheme.component.radioButton;
  },

  getStyles: function getStyles() {
    var styles = {
      icon: {
        height: this.getTheme().size,
        width: this.getTheme().size
      },
      target: {
        transition: Transitions.easeOut(),
        position: 'absolute',
        opacity: 1,
        transform: 'scale(1)',
        fill: this.getTheme().borderColor
      },
      fill: {
        position: 'absolute',
        opacity: 1,
        transform: 'scale(0)',
        transformOrigin: '50% 50%',
        transition: Transitions.easeOut(),
        fill: this.getTheme().checkedColor
      },
      targetWhenChecked: {
        opacity: 0,
        transform: 'scale(0)'
      },
      fillWhenChecked: {
        opacity: 1,
        transform: 'scale(1)'
      },
      targetWhenDisabled: {
        fill: this.getTheme().disabledColor
      },
      fillWhenDisabled: {
        fill: this.getTheme().disabledColor
      },
      label: {
        color: this.props.disabled ? this.getTheme().labelDisabledColor : this.getTheme().labelColor
      }
    };

    return styles;
  },

  render: function render() {
    var _props = this.props;
    var onCheck = _props.onCheck;

    var other = _objectWithoutProperties(_props, ['onCheck']);

    var styles = this.getStyles();
    var onStyles = this.mergeAndPrefix(styles.target, this.props.checked && styles.targetWhenChecked, this.props.iconStyle, this.props.disabled && styles.targetWhenDisabled);
    var offStyles = this.mergeAndPrefix(styles.fill, this.props.checked && styles.fillWhenChecked, this.props.iconStyle, this.props.disabled && styles.fillWhenDisabled);

    var radioButtonElement = React.createElement(
      'div',
      null,
      React.createElement(RadioButtonOff, { style: onStyles }),
      React.createElement(RadioButtonOn, { style: offStyles })
    );

    var rippleColor = this.props.checked ? this.getTheme().checkedColor : this.getTheme().borderColor;

    var iconStyle = this.mergeAndPrefix(styles.icon, this.props.iconStyle);

    var labelStyle = this.mergeAndPrefix(styles.label, this.props.labelStyle);

    var enhancedSwitchProps = {
      ref: "enhancedSwitch",
      inputType: "radio",
      switched: this.props.checked || false,
      switchElement: radioButtonElement,
      rippleColor: rippleColor,
      iconStyle: iconStyle,
      labelStyle: labelStyle,
      onSwitch: this._handleCheck,
      onParentShouldUpdate: this._handleStateChange,
      labelPosition: this.props.labelPosition ? this.props.labelPosition : "right"
    };

    return React.createElement(EnhancedSwitch, _extends({}, other, enhancedSwitchProps));
  },

  // Only called when selected, not when unselected.
  _handleCheck: function _handleCheck(e) {
    if (this.props.onCheck) this.props.onCheck(e, this.props.value);
  },

  _handleStateChange: function _handleStateChange() {},

  isChecked: function isChecked() {
    return this.refs.enhancedSwitch.isSwitched();
  },

  // Use RadioButtonGroup.setSelectedValue(newSelectionValue) to set a
  // RadioButton's checked value.
  setChecked: function setChecked(newCheckedValue) {
    this.refs.enhancedSwitch.setSwitched(newCheckedValue);
  },

  getValue: function getValue() {
    return this.refs.enhancedSwitch.getValue();
  }

});

module.exports = RadioButton;
},{"./enhanced-switch":34,"./mixins/style-propable":57,"./styles/transitions":80,"./svg-icons/toggle/radio-button-checked":94,"./svg-icons/toggle/radio-button-unchecked":95,"react":326}],64:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react');
var StylePropable = require('./mixins/style-propable');
var Transitions = require('./styles/transitions');
var ColorManipulator = require('./utils/color-manipulator');
var Typography = require('./styles/typography');
var EnhancedButton = require('./enhanced-button');
var Paper = require('./paper');

function validateLabel(props, propName, componentName) {
  if (!props.children && !props.label) {
    return new Error('Required prop label or children was not ' + 'specified in ' + componentName + '.');
  }
}

var RaisedButton = React.createClass({
  displayName: 'RaisedButton',

  mixins: [StylePropable],

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  propTypes: {
    className: React.PropTypes.string,
    disabled: React.PropTypes.bool,
    label: validateLabel,
    onMouseDown: React.PropTypes.func,
    onMouseUp: React.PropTypes.func,
    onMouseLeave: React.PropTypes.func,
    onTouchEnd: React.PropTypes.func,
    onTouchStart: React.PropTypes.func,
    primary: React.PropTypes.bool,
    secondary: React.PropTypes.bool,
    labelStyle: React.PropTypes.object,
    backgroundColor: React.PropTypes.string,
    labelColor: React.PropTypes.string,
    disabledBackgroundColor: React.PropTypes.string,
    disabledLabelColor: React.PropTypes.string,
    fullWidth: React.PropTypes.bool
  },

  getInitialState: function getInitialState() {
    var zDepth = this.props.disabled ? 0 : 1;
    return {
      hovered: false,
      touched: false,
      initialZDepth: zDepth,
      zDepth: zDepth
    };
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    var zDepth = nextProps.disabled ? 0 : 1;
    this.setState({
      zDepth: zDepth,
      initialZDepth: zDepth
    });
  },

  _getBackgroundColor: function _getBackgroundColor() {
    var disabledColor = this.props.disabledBackgroundColor ? this.props.disabledBackgroundColor : this.getTheme().disabledColor;

    return this.props.disabled ? disabledColor : this.props.backgroundColor ? this.props.backgroundColor : this.props.primary ? this.getTheme().primaryColor : this.props.secondary ? this.getTheme().secondaryColor : this.getTheme().color;
  },

  _getLabelColor: function _getLabelColor() {
    var disabledColor = this.props.disabledLabelColor ? this.props.disabledLabelColor : this.getTheme().disabledTextColor;

    return this.props.disabled ? disabledColor : this.props.labelColor ? this.props.labelColor : this.props.primary ? this.getTheme().primaryTextColor : this.props.secondary ? this.getTheme().secondaryTextColor : this.getTheme().textColor;
  },

  getThemeButton: function getThemeButton() {
    return this.context.muiTheme.component.button;
  },

  getTheme: function getTheme() {
    return this.context.muiTheme.component.raisedButton;
  },

  getStyles: function getStyles() {
    var amount = this.props.primary || this.props.secondary ? 0.4 : 0.08;
    var styles = {
      root: {
        backgroundColor: 'none',
        display: 'inline-block',
        minWidth: this.props.fullWidth ? '100%' : this.getThemeButton().minWidth,
        height: this.getThemeButton().height,
        transition: Transitions.easeOut()
      },
      container: {
        position: 'relative',
        height: '100%',
        width: '100%',
        padding: 0,
        overflow: 'hidden',
        borderRadius: 2,
        transition: Transitions.easeOut(),
        backgroundColor: this._getBackgroundColor(),

        //This is need so that ripples do not bleed
        //past border radius.
        //See: http://stackoverflow.com/questions/17298739/css-overflow-hidden-not-working-in-chrome-when-parent-has-border-radius-and-chil
        transform: 'translate3d(0, 0, 0)'
      },
      label: {
        position: 'relative',
        opacity: 1,
        fontSize: '14px',
        letterSpacing: 0,
        textTransform: 'uppercase',
        fontWeight: Typography.fontWeightMedium,
        margin: 0,
        padding: '0px ' + this.context.muiTheme.spacing.desktopGutterLess + 'px',
        userSelect: 'none',
        lineHeight: this.props.style && this.props.style.height ? this.props.style.height : this.getThemeButton().height + 'px',
        color: this._getLabelColor()
      },
      overlay: {
        transition: Transitions.easeOut(),
        top: 0
      },
      overlayWhenHovered: {
        backgroundColor: ColorManipulator.fade(this._getLabelColor(), amount)
      }
    };
    return styles;
  },

  render: function render() {
    var _props = this.props;
    var disabled = _props.disabled;
    var label = _props.label;
    var primary = _props.primary;
    var secondary = _props.secondary;

    var other = _objectWithoutProperties(_props, ['disabled', 'label', 'primary', 'secondary']);

    var styles = this.getStyles();

    var labelElement = undefined;
    if (label) {
      labelElement = React.createElement(
        'span',
        { style: this.mergeAndPrefix(styles.label, this.props.labelStyle) },
        label
      );
    }

    var rippleColor = styles.label.color;
    var rippleOpacity = !(primary || secondary) ? 0.1 : 0.16;

    var buttonEventHandlers = disabled ? null : {
      onMouseDown: this._handleMouseDown,
      onMouseUp: this._handleMouseUp,
      onMouseLeave: this._handleMouseLeave,
      onMouseEnter: this._handleMouseEnter,
      onTouchStart: this._handleTouchStart,
      onTouchEnd: this._handleTouchEnd,
      onKeyboardFocus: this._handleKeyboardFocus
    };

    return React.createElement(
      Paper,
      {
        style: this.mergeAndPrefix(styles.root, this.props.style),
        zDepth: this.state.zDepth },
      React.createElement(
        EnhancedButton,
        _extends({}, other, buttonEventHandlers, {
          ref: 'container',
          disabled: disabled,
          style: this.mergeAndPrefix(styles.container),
          focusRippleColor: rippleColor,
          touchRippleColor: rippleColor,
          focusRippleOpacity: rippleOpacity,
          touchRippleOpacity: rippleOpacity }),
        React.createElement(
          'div',
          { ref: 'overlay', style: this.mergeAndPrefix(styles.overlay, this.state.hovered && !this.props.disabled && styles.overlayWhenHovered) },
          labelElement,
          this.props.children
        )
      )
    );
  },

  _handleMouseDown: function _handleMouseDown(e) {
    //only listen to left clicks
    if (e.button === 0) {
      this.setState({ zDepth: this.state.initialZDepth + 1 });
    }
    if (this.props.onMouseDown) this.props.onMouseDown(e);
  },

  _handleMouseUp: function _handleMouseUp(e) {
    this.setState({ zDepth: this.state.initialZDepth });
    if (this.props.onMouseUp) this.props.onMouseUp(e);
  },

  _handleMouseLeave: function _handleMouseLeave(e) {
    if (!this.refs.container.isKeyboardFocused()) this.setState({ zDepth: this.state.initialZDepth, hovered: false });
    if (this.props.onMouseLeave) this.props.onMouseLeave(e);
  },

  _handleMouseEnter: function _handleMouseEnter(e) {
    if (!this.refs.container.isKeyboardFocused() && !this.state.touch) {
      this.setState({ hovered: true });
    }
    if (this.props.onMouseEnter) this.props.onMouseEnter(e);
  },

  _handleTouchStart: function _handleTouchStart(e) {
    this.setState({
      touch: true,
      zDepth: this.state.initialZDepth + 1
    });
    if (this.props.onTouchStart) this.props.onTouchStart(e);
  },

  _handleTouchEnd: function _handleTouchEnd(e) {
    this.setState({ zDepth: this.state.initialZDepth });
    if (this.props.onTouchEnd) this.props.onTouchEnd(e);
  },

  _handleKeyboardFocus: function _handleKeyboardFocus(e, keyboardFocused) {
    if (keyboardFocused && !this.props.disabled) {
      this.setState({ zDepth: this.state.initialZDepth + 1 });
      var amount = this.props.primary || this.props.secondary ? 0.4 : 0.08;
      React.findDOMNode(this.refs.overlay).style.backgroundColor = ColorManipulator.fade(this.mergeAndPrefix(this.getStyles().label, this.props.labelStyle).color, amount);
    } else if (!this.state.hovered) {
      this.setState({ zDepth: this.state.initialZDepth });
      React.findDOMNode(this.refs.overlay).style.backgroundColor = 'transparent';
    }
  }
});

module.exports = RaisedButton;
},{"./enhanced-button":33,"./mixins/style-propable":57,"./paper":61,"./styles/transitions":80,"./styles/typography":81,"./utils/color-manipulator":129,"react":326}],65:[function(require,module,exports){
'use strict';

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var StylePropable = require('./mixins/style-propable');
var AutoPrefix = require('./styles/auto-prefix');
var Transitions = require("./styles/transitions");
var Paper = require('./paper');

var VIEWBOX_SIZE = 32;
var RefreshIndicator = _react2['default'].createClass({
  displayName: 'RefreshIndicator',

  mixins: [StylePropable],

  propTypes: {
    left: _react2['default'].PropTypes.number.isRequired,
    percentage: _react2['default'].PropTypes.number,
    size: _react2['default'].PropTypes.number,
    status: _react2['default'].PropTypes.oneOf(['ready', 'loading', 'hide']),
    style: _react2['default'].PropTypes.object,
    top: _react2['default'].PropTypes.number.isRequired
  },

  getDefaultProps: function getDefaultProps() {
    return {
      percentage: 0,
      size: 40,
      status: 'hide'
    };
  },

  contextTypes: {
    muiTheme: _react2['default'].PropTypes.object
  },

  componentDidMount: function componentDidMount() {
    this.componentDidUpdate();
  },

  componentDidUpdate: function componentDidUpdate() {
    this._scalePath(_react2['default'].findDOMNode(this.refs.path), 0);
    this._rotateWrapper(_react2['default'].findDOMNode(this.refs.wrapper));
  },

  render: function render() {
    var rootStyle = this._getRootStyle();
    return _react2['default'].createElement(
      Paper,
      {
        circle: true,
        style: this.mergeAndPrefix(rootStyle, this.props.style),
        ref: 'indicatorCt'
      },
      this._renderChildren()
    );
  },

  _renderChildren: function _renderChildren() {
    var paperSize = this._getPaperSize();
    var childrenCmp = null;
    if (this.props.status !== 'ready') {
      var circleStyle = this._getCircleStyle(paperSize);
      childrenCmp = _react2['default'].createElement(
        'div',
        { ref: 'wrapper', style: this.mergeAndPrefix({
            transition: Transitions.create('transform', '20s', null, 'linear'),
            width: '100%',
            height: '100%'
          })
        },
        _react2['default'].createElement(
          'svg',
          { style: {
              width: paperSize,
              height: paperSize
            },
            viewBox: '0 0 ' + VIEWBOX_SIZE + ' ' + VIEWBOX_SIZE
          },
          _react2['default'].createElement('circle', _extends({ ref: 'path',
            style: this.mergeAndPrefix(circleStyle.style, {
              transition: Transitions.create('all', '1.5s', null, 'ease-in-out')
            })
          }, circleStyle.attr))
        )
      );
    } else {
      var circleStyle = this._getCircleStyle(paperSize);
      var polygonStyle = this._getPolygonStyle(paperSize);
      childrenCmp = _react2['default'].createElement(
        'svg',
        { style: {
            width: paperSize,
            height: paperSize
          },
          viewBox: '0 0 ' + VIEWBOX_SIZE + ' ' + VIEWBOX_SIZE
        },
        _react2['default'].createElement('circle', _extends({
          style: this.mergeAndPrefix(circleStyle.style)
        }, circleStyle.attr)),
        _react2['default'].createElement('polygon', _extends({
          style: this.mergeAndPrefix(polygonStyle.style)
        }, polygonStyle.attr))
      );
    }

    return childrenCmp;
  },

  _getTheme: function _getTheme() {
    return this.context.muiTheme.component.refreshIndicator;
  },

  _getPaddingSize: function _getPaddingSize() {
    var padding = this.props.size * 0.1;
    return padding;
  },

  _getPaperSize: function _getPaperSize() {
    return this.props.size - this._getPaddingSize() * 2;
  },

  _getCircleAttr: function _getCircleAttr() {
    return {
      radiu: VIEWBOX_SIZE / 2 - 5,
      originX: VIEWBOX_SIZE / 2,
      originY: VIEWBOX_SIZE / 2,
      strokeWidth: 3
    };
  },

  _getArcDeg: function _getArcDeg() {
    var p = this.props.percentage / 100;

    var beginDeg = p * 120;
    var endDeg = p * 410;
    return [beginDeg, endDeg];
  },

  _getFactor: function _getFactor() {
    var p = this.props.percentage / 100;
    var p1 = Math.min(1, p / 0.4);

    return p1;
  },

  _getRootStyle: function _getRootStyle() {
    var padding = this._getPaddingSize();
    return {
      position: "absolute",
      zIndex: 2,
      width: this.props.size,
      height: this.props.size,
      padding: padding,
      top: -10000,
      left: -10000,
      transform: 'translate3d(' + (10000 + this.props.left) + 'px, ' + (10000 + this.props.top) + 'px, 0)',
      opacity: this.props.status === 'hide' ? 0 : 1,
      transition: this.props.status === 'hide' ? Transitions.create('all', '.3s', 'ease-out') : 'none'
    };
  },

  _getCircleStyle: function _getCircleStyle() {
    var isLoading = this.props.status === 'loading';
    var p1 = isLoading ? 1 : this._getFactor();
    var circle = this._getCircleAttr();
    var perimeter = Math.PI * 2 * circle.radiu;

    var _getArcDeg2 = this._getArcDeg();

    var _getArcDeg22 = _slicedToArray(_getArcDeg2, 2);

    var beginDeg = _getArcDeg22[0];
    var endDeg = _getArcDeg22[1];

    var arcLen = (endDeg - beginDeg) * perimeter / 360;
    var dashOffset = -beginDeg * perimeter / 360;

    var theme = this._getTheme();
    return {
      style: {
        strokeDasharray: arcLen + ', ' + (perimeter - arcLen),
        strokeDashoffset: dashOffset,
        stroke: isLoading || this.props.percentage === 100 ? theme.loadingStrokeColor : theme.strokeColor,
        strokeLinecap: 'round',
        opacity: p1,
        strokeWidth: circle.strokeWidth * p1,
        fill: 'none'
      },
      attr: {
        cx: circle.originX,
        cy: circle.originY,
        r: circle.radiu
      }
    };
  },

  _getPolygonStyle: function _getPolygonStyle() {
    var p1 = this._getFactor();
    var circle = this._getCircleAttr();

    var triangleCx = circle.originX + circle.radiu;
    var triangleCy = circle.originY;
    var dx = circle.strokeWidth * 7 / 4 * p1;
    var trianglePath = triangleCx - dx + ',' + triangleCy + ' ' + (triangleCx + dx) + ',' + triangleCy + ' ' + triangleCx + ',' + (triangleCy + dx);

    var _getArcDeg3 = this._getArcDeg();

    var _getArcDeg32 = _slicedToArray(_getArcDeg3, 2);

    var endDeg = _getArcDeg32[1];

    var theme = this._getTheme();
    return {
      style: {
        fill: this.props.percentage === 100 ? theme.loadingStrokeColor : theme.strokeColor,
        transform: 'rotate(' + endDeg + 'deg)',
        transformOrigin: circle.originX + 'px ' + circle.originY + 'px',
        opacity: p1
      },
      attr: {
        points: trianglePath
      }
    };
  },

  _scalePath: function _scalePath(path, step) {
    if (this.props.status !== 'loading' || !this.isMounted()) return;

    var currStep = (step || 0) % 3;

    clearTimeout(this._timer1);
    this._timer1 = setTimeout(this._scalePath.bind(this, path, currStep + 1), currStep ? 750 : 250);

    var circle = this._getCircleAttr();
    var perimeter = Math.PI * 2 * circle.radiu;
    var arcLen = perimeter * 0.64;

    if (currStep === 0) {
      path.style.strokeDasharray = '1, 200';
      path.style.strokeDashoffset = 0;
      path.style[this.prefixed('transitionDuration')] = '0ms';
    } else if (currStep === 1) {
      path.style.strokeDasharray = arcLen + ', 200';
      path.style.strokeDashoffset = -15;
      path.style[this.prefixed('transitionDuration')] = '750ms';
    } else {
      path.style.strokeDasharray = arcLen + ',200';
      path.style.strokeDashoffset = -(perimeter - 1);
      path.style[this.prefixed('transitionDuration')] = '850ms';
    }
  },

  _rotateWrapper: function _rotateWrapper(wrapper) {
    var _this = this;

    if (this.props.status !== 'loading' || !this.isMounted()) return;

    clearTimeout(this._timer2);
    this._timer2 = setTimeout(this._rotateWrapper.bind(this, wrapper), 10050);

    AutoPrefix.set(wrapper.style, "transform", null);
    AutoPrefix.set(wrapper.style, "transform", "rotate(0deg)");
    AutoPrefix.set(wrapper.style, "transitionDuration", "0ms");

    setTimeout(function () {
      if (_this.isMounted()) {
        AutoPrefix.set(wrapper.style, "transform", "rotate(1800deg)");
        wrapper.style.transitionDuration = "10s";
        AutoPrefix.set(wrapper.style, "transitionTimingFunction", "linear");
      }
    }, 50);
  },

  prefixed: function prefixed(key) {
    return AutoPrefix.single(key);
  }

});

module.exports = RefreshIndicator;
},{"./mixins/style-propable":57,"./paper":61,"./styles/auto-prefix":73,"./styles/transitions":80,"react":326}],66:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react/addons');
var PureRenderMixin = React.addons.PureRenderMixin;
var StylePropable = require('../mixins/style-propable');
var AutoPrefix = require('../styles/auto-prefix');
var Transitions = require('../styles/transitions');
var Colors = require('../styles/colors');

var CircleRipple = React.createClass({
  displayName: 'CircleRipple',

  mixins: [PureRenderMixin, StylePropable],

  propTypes: {
    color: React.PropTypes.string,
    opacity: React.PropTypes.number
  },

  getDefaultProps: function getDefaultProps() {
    return {
      color: Colors.darkBlack,
      opacity: 0.16
    };
  },

  componentWillAppear: function componentWillAppear(callback) {
    this._initializeAnimation(callback);
  },

  componentWillEnter: function componentWillEnter(callback) {
    this._initializeAnimation(callback);
  },

  componentDidAppear: function componentDidAppear() {
    this._animate();
  },

  componentDidEnter: function componentDidEnter() {
    this._animate();
  },

  componentWillLeave: function componentWillLeave(callback) {
    var _this = this;

    var style = React.findDOMNode(this).style;
    style.opacity = 0;
    setTimeout((function () {
      if (_this.isMounted()) callback();
    }).bind(this), 2000);
  },

  render: function render() {
    var _props = this.props;
    var color = _props.color;
    var opacity = _props.opacity;
    var style = _props.style;

    var other = _objectWithoutProperties(_props, ['color', 'opacity', 'style']);

    var mergedStyles = this.mergeAndPrefix({
      position: 'absolute',
      top: 0,
      left: 0,
      height: '100%',
      width: '100%',
      borderRadius: '50%',
      backgroundColor: color
    }, style);

    return React.createElement('div', _extends({}, other, { style: mergedStyles }));
  },

  _animate: function _animate() {
    var style = React.findDOMNode(this).style;
    var transitionValue = Transitions.easeOut('2s', 'opacity') + ',' + Transitions.easeOut('1s', 'transform');
    AutoPrefix.set(style, 'transition', transitionValue);
    AutoPrefix.set(style, 'transform', 'scale(1)');
  },

  _initializeAnimation: function _initializeAnimation(callback) {
    var _this2 = this;

    var style = React.findDOMNode(this).style;
    style.opacity = this.props.opacity;
    AutoPrefix.set(style, 'transform', 'scale(0)');
    setTimeout((function () {
      if (_this2.isMounted()) callback();
    }).bind(this), 0);
  }

});

module.exports = CircleRipple;
},{"../mixins/style-propable":57,"../styles/auto-prefix":73,"../styles/colors":74,"../styles/transitions":80,"react/addons":154}],67:[function(require,module,exports){
'use strict';

var React = require('react/addons');
var PureRenderMixin = React.addons.PureRenderMixin;
var StylePropable = require('../mixins/style-propable');
var AutoPrefix = require('../styles/auto-prefix');
var Colors = require('../styles/colors');
var Transitions = require('../styles/transitions');
var ScaleInTransitionGroup = require('../transition-groups/scale-in');

var pulsateDuration = 750;

var FocusRipple = React.createClass({
  displayName: 'FocusRipple',

  mixins: [PureRenderMixin, StylePropable],

  propTypes: {
    color: React.PropTypes.string,
    innerStyle: React.PropTypes.object,
    opacity: React.PropTypes.number,
    show: React.PropTypes.bool
  },

  getDefaultProps: function getDefaultProps() {
    return {
      color: Colors.darkBlack
    };
  },

  componentDidMount: function componentDidMount() {
    if (this.props.show) {
      this._setRippleSize();
      this._pulsate();
    }
  },

  componentDidUpdate: function componentDidUpdate() {
    if (this.props.show) {
      this._setRippleSize();
      this._pulsate();
    } else {
      if (this._timeout) clearTimeout(this._timeout);
    }
  },

  render: function render() {
    var _props = this.props;
    var show = _props.show;
    var style = _props.style;

    var mergedRootStyles = this.mergeStyles({
      height: '100%',
      width: '100%',
      position: 'absolute',
      top: 0,
      left: 0
    }, style);

    var ripple = show ? this._getRippleElement(this.props) : null;

    return React.createElement(
      ScaleInTransitionGroup,
      {
        maxScale: 0.85,
        style: mergedRootStyles },
      ripple
    );
  },

  _getRippleElement: function _getRippleElement(props) {
    var color = props.color;
    var innerStyle = props.innerStyle;
    var opacity = props.opacity;

    var innerStyles = this.mergeAndPrefix({
      position: 'absolute',
      height: '100%',
      width: '100%',
      borderRadius: '50%',
      opacity: opacity ? opacity : 0.16,
      backgroundColor: color,
      transition: Transitions.easeOut(pulsateDuration + 'ms', 'transform', null, Transitions.easeInOutFunction)
    }, innerStyle);

    return React.createElement('div', { ref: 'innerCircle', style: innerStyles });
  },

  _pulsate: function _pulsate() {
    if (!this.isMounted()) return;

    var innerCircle = React.findDOMNode(this.refs.innerCircle);
    if (!innerCircle) return;

    var startScale = 'scale(1)';
    var endScale = 'scale(0.85)';
    var currentScale = innerCircle.style[AutoPrefix.single('transform')];
    var nextScale = undefined;

    currentScale = currentScale || startScale;
    nextScale = currentScale === startScale ? endScale : startScale;

    innerCircle.style[AutoPrefix.single('transform')] = nextScale;
    this._timeout = setTimeout(this._pulsate, pulsateDuration);
  },

  _setRippleSize: function _setRippleSize() {
    var el = React.findDOMNode(this.refs.innerCircle);
    var height = el.offsetHeight;
    var width = el.offsetWidth;
    var size = Math.max(height, width);

    var oldTop = 0;
    // For browsers that don't support endsWith()
    if (el.style.top.indexOf('px', el.style.top.length - 2) !== -1) {
      oldTop = parseInt(el.style.top);
    }
    el.style.height = size + 'px';
    el.style.top = height / 2 - size / 2 + oldTop + 'px';
  }

});

module.exports = FocusRipple;
},{"../mixins/style-propable":57,"../styles/auto-prefix":73,"../styles/colors":74,"../styles/transitions":80,"../transition-groups/scale-in":125,"react/addons":154}],68:[function(require,module,exports){
'use strict';

module.exports = {
  CircleRipple: require('./circle-ripple'),
  FocusRipple: require('./focus-ripple'),
  TouchRipple: require('./touch-ripple')
};
},{"./circle-ripple":66,"./focus-ripple":67,"./touch-ripple":69}],69:[function(require,module,exports){
'use strict';

var React = require('react/addons');
var PureRenderMixin = React.addons.PureRenderMixin;
var ReactTransitionGroup = React.addons.TransitionGroup;
var StylePropable = require('../mixins/style-propable');
var Dom = require('../utils/dom');
var ImmutabilityHelper = require('../utils/immutability-helper');
var CircleRipple = require('./circle-ripple');

var TouchRipple = React.createClass({
  displayName: 'TouchRipple',

  mixins: [PureRenderMixin, StylePropable],

  propTypes: {
    centerRipple: React.PropTypes.bool,
    color: React.PropTypes.string,
    opacity: React.PropTypes.number
  },

  getInitialState: function getInitialState() {
    return {
      //This prop allows us to only render the ReactTransitionGroup
      //on the first click of the component, making the inital
      //render faster
      hasRipples: false,
      nextKey: 0,
      ripples: []
    };
  },

  render: function render() {
    var _props = this.props;
    var children = _props.children;
    var style = _props.style;
    var _state = this.state;
    var hasRipples = _state.hasRipples;
    var ripples = _state.ripples;

    var rippleGroup = undefined;
    if (hasRipples) {
      var mergedStyles = this.mergeAndPrefix({
        height: '100%',
        width: '100%',
        position: 'absolute',
        top: 0,
        left: 0,
        overflow: 'hidden'
      }, style);

      rippleGroup = React.createElement(
        ReactTransitionGroup,
        { style: mergedStyles },
        ripples
      );
    }

    return React.createElement(
      'div',
      {
        onMouseUp: this._handleMouseUp,
        onMouseDown: this._handleMouseDown,
        onMouseLeave: this._handleMouseLeave,
        onTouchStart: this._handleTouchStart,
        onTouchEnd: this._handleTouchEnd },
      rippleGroup,
      children
    );
  },

  start: function start(e, isRippleTouchGenerated) {
    var ripples = this.state.ripples;

    //Do nothing if we're starting a click-event-generated ripple
    //while having touch-generated ripples
    if (!isRippleTouchGenerated) {
      for (var i = 0; i < ripples.length; i++) {
        if (ripples[i].props.touchGenerated) return;
      }
    }

    //Add a ripple to the ripples array
    ripples = ImmutabilityHelper.push(ripples, React.createElement(CircleRipple, {
      key: this.state.nextKey,
      style: !this.props.centerRipple ? this._getRippleStyle(e) : {},
      color: this.props.color,
      opacity: this.props.opacity,
      touchGenerated: isRippleTouchGenerated }));

    this.setState({
      hasRipples: true,
      nextKey: this.state.nextKey + 1,
      ripples: ripples
    });
  },

  end: function end() {
    var currentRipples = this.state.ripples;
    this.setState({
      ripples: ImmutabilityHelper.shift(currentRipples)
    });
  },

  _handleMouseDown: function _handleMouseDown(e) {
    //only listen to left clicks
    if (e.button === 0) this.start(e, false);
  },

  _handleMouseUp: function _handleMouseUp() {
    this.end();
  },

  _handleMouseLeave: function _handleMouseLeave() {
    this.end();
  },

  _handleTouchStart: function _handleTouchStart(e) {
    this.start(e, true);
  },

  _handleTouchEnd: function _handleTouchEnd() {
    this.end();
  },

  _getRippleStyle: function _getRippleStyle(e) {
    var style = {};
    var el = React.findDOMNode(this);
    var elHeight = el.offsetHeight;
    var elWidth = el.offsetWidth;
    var offset = Dom.offset(el);
    var isTouchEvent = e.touches && e.touches.length;
    var pageX = isTouchEvent ? e.touches[0].pageX : e.pageX;
    var pageY = isTouchEvent ? e.touches[0].pageY : e.pageY;
    var pointerX = pageX - offset.left;
    var pointerY = pageY - offset.top;
    var topLeftDiag = this._calcDiag(pointerX, pointerY);
    var topRightDiag = this._calcDiag(elWidth - pointerX, pointerY);
    var botRightDiag = this._calcDiag(elWidth - pointerX, elHeight - pointerY);
    var botLeftDiag = this._calcDiag(pointerX, elHeight - pointerY);
    var rippleRadius = Math.max(topLeftDiag, topRightDiag, botRightDiag, botLeftDiag);
    var rippleSize = rippleRadius * 2;
    var left = pointerX - rippleRadius;
    var top = pointerY - rippleRadius;

    style.height = rippleSize + 'px';
    style.width = rippleSize + 'px';
    style.top = top + 'px';
    style.left = left + 'px';

    return style;
  },

  _calcDiag: function _calcDiag(a, b) {
    return Math.sqrt(a * a + b * b);
  }

});

module.exports = TouchRipple;
},{"../mixins/style-propable":57,"../utils/dom":132,"../utils/immutability-helper":135,"./circle-ripple":66,"react/addons":154}],70:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react');
var StylePropable = require('./mixins/style-propable');
var TextField = require('./text-field');
var DropDownMenu = require('./drop-down-menu');

var SelectField = React.createClass({
  displayName: 'SelectField',

  mixins: [StylePropable],

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  propTypes: {
    errorText: React.PropTypes.string,
    floatingLabelText: React.PropTypes.string,
    selectFieldRoot: React.PropTypes.string,
    underlineStyle: React.PropTypes.object,
    labelStyle: React.PropTypes.object,
    errorStyle: React.PropTypes.object,
    hintText: React.PropTypes.string,
    id: React.PropTypes.string,
    multiLine: React.PropTypes.bool,
    onBlur: React.PropTypes.func,
    onChange: React.PropTypes.func,
    onFocus: React.PropTypes.func,
    onKeyDown: React.PropTypes.func,
    onEnterKeyDown: React.PropTypes.func,
    type: React.PropTypes.string,
    rows: React.PropTypes.number,
    inputStyle: React.PropTypes.object,
    iconStyle: React.PropTypes.object,
    floatingLabelStyle: React.PropTypes.object,
    autoWidth: React.PropTypes.bool,
    menuItems: React.PropTypes.array.isRequired,
    menuItemStyle: React.PropTypes.object,
    selectedIndex: React.PropTypes.number
  },

  getDefaultProps: function getDefaultProps() {
    return {
      fullWidth: false
    };
  },

  getStyles: function getStyles() {
    var styles = {
      root: {
        height: 46,
        position: 'relative',
        width: '100%',
        top: 16,
        fontSize: 16
      },
      label: {
        paddingLeft: 0,
        top: 4,
        width: '100%'
      },
      icon: {
        top: 20,
        right: 0
      },
      underline: {
        borderTop: 'none'
      },
      input: {},
      error: {}
    };

    if (!this.props.floatingLabelText) {
      if (this.props.hintText) {
        styles.root.top = -5;
        styles.label.top = 1;
        styles.icon.top = 17;
      } else {
        styles.root.top = -8;
      }
    } else {
      styles.error.bottom = -15;
    }

    return styles;
  },

  render: function render() {
    var styles = this.getStyles();
    var _props = this.props;
    var style = _props.style;
    var labelStyle = _props.labelStyle;
    var iconStyle = _props.iconStyle;
    var underlineStyle = _props.underlineStyle;
    var errorStyle = _props.errorStyle;
    var selectFieldRoot = _props.selectFieldRoot;
    var menuItems = _props.menuItems;
    var disabled = _props.disabled;
    var floatingLabelText = _props.floatingLabelText;
    var floatingLabelStyle = _props.floatingLabelStyle;
    var hintText = _props.hintText;
    var fullWidth = _props.fullWidth;
    var errorText = _props.errorText;

    var other = _objectWithoutProperties(_props, ['style', 'labelStyle', 'iconStyle', 'underlineStyle', 'errorStyle', 'selectFieldRoot', 'menuItems', 'disabled', 'floatingLabelText', 'floatingLabelStyle', 'hintText', 'fullWidth', 'errorText']);

    var textFieldProps = {
      style: this.mergeAndPrefix(styles.input, style),
      floatingLabelText: floatingLabelText,
      floatingLabelStyle: floatingLabelStyle,
      hintText: !hintText && !floatingLabelText ? ' ' : hintText,
      fullWidth: fullWidth,
      errorText: errorText,
      errorStyle: this.mergeAndPrefix(styles.error, errorStyle)
    };
    var dropDownMenuProps = {
      menuItems: menuItems,
      disabled: disabled,
      style: this.mergeAndPrefix(styles.root, selectFieldRoot),
      labelStyle: this.mergeAndPrefix(styles.label, labelStyle),
      iconStyle: this.mergeAndPrefix(styles.icon, iconStyle),
      underlineStyle: this.mergeAndPrefix(styles.underline),
      autoWidth: false
    };

    return React.createElement(
      TextField,
      textFieldProps,
      React.createElement(DropDownMenu, _extends({}, dropDownMenuProps, other))
    );
  }
});

module.exports = SelectField;
},{"./drop-down-menu":32,"./mixins/style-propable":57,"./text-field":106,"react":326}],71:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react');
var StylePropable = require('./mixins/style-propable');
var Draggable = require('react-draggable2');
var Transitions = require('./styles/transitions');
var FocusRipple = require('./ripples/focus-ripple');

/**
  * Verifies min/max range.
  * @param   {Object} props         Properties of the React component.
  * @param   {String} propName      Name of the property to validate.
  * @param   {String} componentName Name of the component whose property is being validated.
  * @returns {Object} Returns an Error if min >= max otherwise null.
  */
var minMaxPropType = function minMaxPropType(props, propName, componentName) {
  var error = React.PropTypes.number(props, propName, componentName);
  if (error !== null) return error;

  if (props.min >= props.max) {
    var errorMsg = propName === 'min' ? 'min should be less than max' : 'max should be greater than min';
    return new Error(errorMsg);
  }
};

/**
  * Verifies value is within the min/max range.
  * @param   {Object} props         Properties of the React component.
  * @param   {String} propName      Name of the property to validate.
  * @param   {String} componentName Name of the component whose property is being validated.
  * @returns {Object} Returns an Error if the value is not within the range otherwise null.
  */
var valueInRangePropType = function valueInRangePropType(props, propName, componentName) {
  var error = React.PropTypes.number(props, propName, componentName);
  if (error !== null) return error;

  var value = props[propName];
  if (value < props.min || props.max < value) {
    return new Error(propName + ' should be within the range specified by min and max');
  }
};

var Slider = React.createClass({
  displayName: 'Slider',

  mixins: [StylePropable],

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  propTypes: {
    name: React.PropTypes.string.isRequired,
    defaultValue: valueInRangePropType,
    description: React.PropTypes.string,
    disabled: React.PropTypes.bool,
    error: React.PropTypes.string,
    max: minMaxPropType,
    min: minMaxPropType,
    required: React.PropTypes.bool,
    step: React.PropTypes.number,
    onBlur: React.PropTypes.func,
    onChange: React.PropTypes.func,
    onDragStart: React.PropTypes.func,
    onDragStop: React.PropTypes.func,
    onFocus: React.PropTypes.func,
    value: valueInRangePropType
  },

  getDefaultProps: function getDefaultProps() {
    return {
      defaultValue: 0,
      disabled: false,
      max: 1,
      min: 0,
      required: true,
      step: 0.01
    };
  },

  getInitialState: function getInitialState() {
    var value = this.props.value;
    if (value === undefined) {
      value = this.props.defaultValue;
    }
    var percent = (value - this.props.min) / (this.props.max - this.props.min);
    if (isNaN(percent)) percent = 0;

    return {
      active: false,
      dragging: false,
      focused: false,
      hovered: false,
      percent: percent,
      value: value
    };
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (nextProps.value !== undefined) {
      this.setValue(nextProps.value);
    }
  },

  getTheme: function getTheme() {
    return this.context.muiTheme.component.slider;
  },

  getStyles: function getStyles() {
    var fillGutter = this.getTheme().handleSize / 2;
    var disabledGutter = this.getTheme().trackSize + this.getTheme().handleSizeDisabled / 2;
    var calcDisabledSpacing = this.props.disabled ? ' - ' + disabledGutter + 'px' : '';
    var styles = {
      root: {
        touchCallout: 'none',
        userSelect: 'none',
        cursor: 'default',
        height: this.getTheme().handleSizeActive,
        position: 'relative',
        marginTop: 24,
        marginBottom: 48
      },
      track: {
        position: 'absolute',
        top: (this.getTheme().handleSizeActive - this.getTheme().trackSize) / 2,
        left: 0,
        width: '100%',
        height: this.getTheme().trackSize
      },
      filledAndRemaining: {
        position: 'absolute',
        top: 0,
        height: '100%',
        transition: Transitions.easeOut(null, 'margin')
      },
      handle: {
        boxSizing: 'border-box',
        position: 'absolute',
        cursor: 'pointer',
        pointerEvents: 'inherit',
        top: (this.getTheme().handleSizeActive - this.getTheme().trackSize) / 2 + 'px',
        left: '0%',
        zIndex: 1,
        margin: this.getTheme().trackSize / 2 + 'px 0 0 0',
        width: this.getTheme().handleSize,
        height: this.getTheme().handleSize,
        backgroundColor: this.getTheme().selectionColor,
        backgroundClip: 'padding-box',
        border: '0px solid transparent',
        borderRadius: '50%',
        transform: 'translate(-50%, -50%)',
        transition: Transitions.easeOut('450ms', 'background') + ',' + Transitions.easeOut('450ms', 'border-color') + ',' + Transitions.easeOut('450ms', 'width') + ',' + Transitions.easeOut('450ms', 'height'),
        overflow: 'visible'
      },
      handleWhenDisabled: {
        boxSizing: 'content-box',
        cursor: 'not-allowed',
        backgroundColor: this.getTheme().trackColor,
        width: this.getTheme().handleSizeDisabled,
        height: this.getTheme().handleSizeDisabled,
        border: 'none'
      },
      handleWhenPercentZero: {
        border: this.getTheme().trackSize + 'px solid ' + this.getTheme().handleColorZero,
        backgroundColor: this.getTheme().handleFillColor,
        boxShadow: 'none'
      },
      handleWhenPercentZeroAndDisabled: {
        cursor: 'not-allowed',
        width: this.getTheme().handleSizeDisabled,
        height: this.getTheme().handleSizeDisabled
      },
      handleWhenPercentZeroAndFocused: {
        border: this.getTheme().trackSize + 'px solid ' + this.getTheme().trackColorSelected
      },
      handleWhenActive: {
        width: this.getTheme().handleSizeActive,
        height: this.getTheme().handleSizeActive
      },
      ripple: {
        height: this.getTheme().handleSize,
        width: this.getTheme().handleSize,
        overflow: 'visible'
      },
      rippleWhenPercentZero: {
        top: -this.getTheme().trackSize,
        left: -this.getTheme().trackSize
      },
      rippleInner: {
        height: '300%',
        width: '300%',
        top: -this.getTheme().handleSize,
        left: -this.getTheme().handleSize
      }
    };
    styles.filled = this.mergeAndPrefix(styles.filledAndRemaining, {
      left: 0,
      backgroundColor: this.props.disabled ? this.getTheme().trackColor : this.getTheme().selectionColor,
      marginRight: fillGutter,
      width: 'calc(' + this.state.percent * 100 + '%' + calcDisabledSpacing + ')'
    });
    styles.remaining = this.mergeAndPrefix(styles.filledAndRemaining, {
      right: 0,
      backgroundColor: this.getTheme().trackColor,
      marginLeft: fillGutter,
      width: 'calc(' + (1 - this.state.percent) * 100 + '%' + calcDisabledSpacing + ')'
    });

    return styles;
  },

  render: function render() {
    var others = _objectWithoutProperties(this.props, []);

    var percent = this.state.percent;
    if (percent > 1) percent = 1;else if (percent < 0) percent = 0;

    var styles = this.getStyles();
    var sliderStyles = this.mergeAndPrefix(styles.root, this.props.style);
    var handleStyles = percent === 0 ? this.mergeAndPrefix(styles.handle, styles.handleWhenPercentZero, this.state.active && styles.handleWhenActive, this.state.focused && { outline: 'none' }, (this.state.hovered || this.state.focused) && !this.props.disabled && styles.handleWhenPercentZeroAndFocused, this.props.disabled && styles.handleWhenPercentZeroAndDisabled) : this.mergeAndPrefix(styles.handle, this.state.active && styles.handleWhenActive, this.state.focused && { outline: 'none' }, this.props.disabled && styles.handleWhenDisabled);
    var rippleStyle = this.mergeAndPrefix(styles.ripple, percent === 0 && styles.rippleWhenPercentZero);
    var remainingStyles = styles.remaining;
    if ((this.state.hovered || this.state.focused) && !this.props.disabled) {
      remainingStyles.backgroundColor = this.getTheme().trackColorSelected;
    }

    var rippleShowCondition = (this.state.hovered || this.state.focused) && !this.state.active;
    var rippleColor = this.state.percent === 0 ? this.getTheme().handleColorZero : this.getTheme().rippleColor;
    var focusRipple = undefined;
    if (!this.props.disabled && !this.props.disableFocusRipple) {
      focusRipple = React.createElement(FocusRipple, {
        ref: 'focusRipple',
        key: 'focusRipple',
        style: rippleStyle,
        innerStyle: styles.rippleInner,
        show: rippleShowCondition,
        color: rippleColor });
    }
    return React.createElement(
      'div',
      _extends({}, others, { style: this.props.style }),
      React.createElement('span', { className: 'mui-input-highlight' }),
      React.createElement('span', { className: 'mui-input-bar' }),
      React.createElement(
        'span',
        { className: 'mui-input-description' },
        this.props.description
      ),
      React.createElement(
        'span',
        { className: 'mui-input-error' },
        this.props.error
      ),
      React.createElement(
        'div',
        { style: sliderStyles,
          onFocus: this._onFocus,
          onBlur: this._onBlur,
          onMouseDown: this._onMouseDown,
          onMouseEnter: this._onMouseEnter,
          onMouseLeave: this._onMouseLeave,
          onMouseUp: this._onMouseUp },
        React.createElement(
          'div',
          { ref: 'track', style: styles.track },
          React.createElement('div', { style: styles.filled }),
          React.createElement('div', { style: remainingStyles }),
          React.createElement(
            Draggable,
            { axis: 'x', bound: 'point',
              cancel: this.props.disabled ? '*' : null,
              start: { x: percent * 100 + '%' },
              constrain: this._constrain(),
              onStart: this._onDragStart,
              onStop: this._onDragStop,
              onDrag: this._onDragUpdate,
              onMouseDown: this._onMouseDownKnob },
            React.createElement(
              'div',
              { style: handleStyles, tabIndex: 0 },
              focusRipple
            )
          )
        )
      ),
      React.createElement('input', { ref: 'input', type: 'hidden',
        name: this.props.name,
        value: this.state.value,
        required: this.props.required,
        min: this.props.min,
        max: this.props.max,
        step: this.props.step })
    );
  },

  getValue: function getValue() {
    return this.state.value;
  },

  setValue: function setValue(i) {
    // calculate percentage
    var percent = (i - this.props.min) / (this.props.max - this.props.min);
    if (isNaN(percent)) percent = 0;
    // update state
    this.setState({
      value: i,
      percent: percent
    });
  },

  getPercent: function getPercent() {
    return this.state.percent;
  },

  setPercent: function setPercent(percent) {
    var value = this._alignValue(this._percentToValue(percent));
    this.setState({ value: value, percent: percent });
  },

  clearValue: function clearValue() {
    this.setValue(this.props.min);
  },

  _alignValue: function _alignValue(val) {
    var _props = this.props;
    var step = _props.step;
    var min = _props.min;

    var valModStep = (val - min) % step;
    var alignValue = val - valModStep;

    if (Math.abs(valModStep) * 2 >= step) {
      alignValue += valModStep > 0 ? step : -step;
    }

    return parseFloat(alignValue.toFixed(5));
  },

  _constrain: function _constrain() {
    var _this = this;

    var _props2 = this.props;
    var min = _props2.min;
    var max = _props2.max;
    var step = _props2.step;

    return function (pos) {
      var pixelMax = React.findDOMNode(_this.refs.track).clientWidth;
      var pixelStep = pixelMax / ((max - min) / step);

      var cursor = min;
      var i = undefined;
      for (i = 0; i < (max - min) / step; i++) {
        var distance = pos.left - cursor;
        var nextDistance = cursor + pixelStep - pos.left;
        if (Math.abs(distance) > Math.abs(nextDistance)) {
          cursor += pixelStep;
        } else {
          break;
        }
      }

      return {
        left: cursor
      };
    };
  },

  _onFocus: function _onFocus(e) {
    this.setState({ focused: true });
    if (this.props.onFocus) this.props.onFocus(e);
  },

  _onBlur: function _onBlur(e) {
    this.setState({ focused: false, active: false });
    if (this.props.onBlur) this.props.onBlur(e);
  },

  _onMouseDown: function _onMouseDown(e) {
    if (!this.props.disabled) this._pos = e.clientX;
  },

  _onMouseEnter: function _onMouseEnter() {
    this.setState({ hovered: true });
  },

  _onMouseLeave: function _onMouseLeave() {
    this.setState({ hovered: false });
  },

  _onMouseUp: function _onMouseUp(e) {
    if (!this.props.disabled) this.setState({ active: false });
    if (!this.state.dragging && Math.abs(this._pos - e.clientX) < 5) {
      var pos = e.clientX - React.findDOMNode(this).getBoundingClientRect().left;
      this._dragX(e, pos);
    }

    this._pos = undefined;
  },

  _onMouseDownKnob: function _onMouseDownKnob() {
    if (!this.props.disabled) this.setState({ active: true });
  },

  _onDragStart: function _onDragStart(e, ui) {
    this.setState({
      dragging: true,
      active: true
    });
    if (this.props.onDragStart) this.props.onDragStart(e, ui);
  },

  _onDragStop: function _onDragStop(e, ui) {
    this.setState({
      dragging: false,
      active: false
    });
    if (this.props.onDragStop) this.props.onDragStop(e, ui);
  },

  _onDragUpdate: function _onDragUpdate(e, ui) {
    if (!this.state.dragging) return;
    if (!this.props.disabled) this._dragX(e, ui.position.left);
  },

  _dragX: function _dragX(e, pos) {
    var max = React.findDOMNode(this.refs.track).clientWidth;
    if (pos < 0) pos = 0;else if (pos > max) pos = max;
    if (pos === this.props.min) {
      return this._updateWithChangeEvent(e, 0);
    }
    this._updateWithChangeEvent(e, pos / max);
  },

  _updateWithChangeEvent: function _updateWithChangeEvent(e, percent) {
    if (this.state.percent === percent) return;
    this.setPercent(percent);
    var value = this._alignValue(this._percentToValue(percent));
    if (this.props.onChange) this.props.onChange(e, value);
  },

  _percentToValue: function _percentToValue(percent) {
    return percent * (this.props.max - this.props.min) + this.props.min;
  }

});

module.exports = Slider;
},{"./mixins/style-propable":57,"./ripples/focus-ripple":67,"./styles/transitions":80,"react":326,"react-draggable2":143}],72:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react');
var CssEvent = require('./utils/css-event');
var StylePropable = require('./mixins/style-propable');
var Transitions = require('./styles/transitions');
var ClickAwayable = require('./mixins/click-awayable');
var FlatButton = require('./flat-button');

var Snackbar = React.createClass({
  displayName: 'Snackbar',

  mixins: [StylePropable, ClickAwayable],

  manuallyBindClickAway: true,

  // ID of the active timer.
  _autoHideTimerId: undefined,

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  propTypes: {
    message: React.PropTypes.string.isRequired,
    action: React.PropTypes.string,
    autoHideDuration: React.PropTypes.number,
    onActionTouchTap: React.PropTypes.func,
    onShow: React.PropTypes.func,
    onDismiss: React.PropTypes.func,
    openOnMount: React.PropTypes.bool
  },

  getInitialState: function getInitialState() {
    return {
      open: this.props.openOnMount || false
    };
  },

  componentDidMount: function componentDidMount() {
    if (this.props.openOnMount) {
      this._setAutoHideTimer();
      this._bindClickAway();
    }
  },

  componentClickAway: function componentClickAway() {
    this.dismiss();
  },

  componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
    var _this = this;

    if (prevState.open !== this.state.open) {
      if (this.state.open) {
        this._setAutoHideTimer();

        //Only Bind clickaway after transition finishes
        CssEvent.onTransitionEnd(React.findDOMNode(this), function () {
          _this._bindClickAway();
        });
      } else {
        this._unbindClickAway();
      }
    }
  },

  componentWillUnmount: function componentWillUnmount() {
    this._clearAutoHideTimer();
    this._unbindClickAway();
  },

  getTheme: function getTheme() {
    return this.context.muiTheme.component.snackbar;
  },

  getSpacing: function getSpacing() {
    return this.context.muiTheme.spacing;
  },

  getStyles: function getStyles() {
    var styles = {
      root: {
        color: this.getTheme().textColor,
        backgroundColor: this.getTheme().backgroundColor,
        borderRadius: 2,
        padding: '0px ' + this.getSpacing().desktopGutter + 'px',
        height: this.getSpacing().desktopSubheaderHeight,
        lineHeight: this.getSpacing().desktopSubheaderHeight + 'px',
        minWidth: 288,
        maxWidth: 568,

        position: 'fixed',
        zIndex: 10,
        bottom: this.getSpacing().desktopGutter,
        marginLeft: this.getSpacing().desktopGutter,

        left: 0,
        opacity: 0,
        visibility: 'hidden',
        transform: 'translate3d(0, 20px, 0)',
        transition: Transitions.easeOut('0ms', 'left', '400ms') + ',' + Transitions.easeOut('400ms', 'opacity') + ',' + Transitions.easeOut('400ms', 'transform') + ',' + Transitions.easeOut('400ms', 'visibility')
      },
      action: {
        color: this.getTheme().actionColor,
        float: 'right',
        marginTop: 6,
        marginRight: -16,
        marginLeft: this.getSpacing().desktopGutter,
        backgroundColor: 'transparent'
      },
      rootWhenOpen: {
        opacity: 1,
        visibility: 'visible',
        transform: 'translate3d(0, 0, 0)',
        transition: Transitions.easeOut('0ms', 'left', '0ms') + ',' + Transitions.easeOut('400ms', 'opacity', '0ms') + ',' + Transitions.easeOut('400ms', 'transform', '0ms') + ',' + Transitions.easeOut('400ms', 'visibility', '0ms')
      }
    };

    return styles;
  },

  render: function render() {
    var _props = this.props;
    var action = _props.action;
    var message = _props.message;
    var onActionTouchTap = _props.onActionTouchTap;
    var style = _props.style;

    var others = _objectWithoutProperties(_props, ['action', 'message', 'onActionTouchTap', 'style']);

    var styles = this.getStyles();

    var rootStyles = this.state.open ? this.mergeStyles(styles.root, styles.rootWhenOpen, style) : this.mergeStyles(styles.root, style);

    var actionButton = undefined;
    if (action) {
      actionButton = React.createElement(FlatButton, {
        style: styles.action,
        label: action,
        onTouchTap: onActionTouchTap });
    }

    return React.createElement(
      'span',
      _extends({}, others, { style: rootStyles }),
      React.createElement(
        'span',
        null,
        message
      ),
      actionButton
    );
  },

  show: function show() {
    this.setState({ open: true });
    if (this.props.onShow) this.props.onShow();
  },

  dismiss: function dismiss() {
    this._clearAutoHideTimer();
    this.setState({ open: false });
    if (this.props.onDismiss) this.props.onDismiss();
  },

  _clearAutoHideTimer: function _clearAutoHideTimer() {
    if (this._autoHideTimerId !== undefined) {
      this._autoHideTimerId = clearTimeout(this._autoHideTimerId);
    }
  },

  _setAutoHideTimer: function _setAutoHideTimer() {
    var _this2 = this;

    if (this.props.autoHideDuration > 0) {
      this._clearAutoHideTimer();
      this._autoHideTimerId = setTimeout(function () {
        _this2.dismiss();
      }, this.props.autoHideDuration);
    }
  }

});

module.exports = Snackbar;
},{"./flat-button":36,"./mixins/click-awayable":54,"./mixins/style-propable":57,"./styles/transitions":80,"./utils/css-event":130,"react":326}],73:[function(require,module,exports){
'use strict';

var isBrowser = typeof window !== 'undefined';
var Modernizr = isBrowser ? require('../utils/modernizr.custom') : undefined;

//Keep track of already prefixed keys so we can skip Modernizr prefixing
var prefixedKeys = {};

module.exports = {

  all: function all(styles) {
    var prefixedStyle = {};
    for (var key in styles) {
      prefixedStyle[this.single(key)] = styles[key];
    }
    return prefixedStyle;
  },

  set: function set(style, key, value) {
    style[this.single(key)] = value;
  },

  single: function single(key) {

    //If a browser doesn't exist, we can't prefix with Modernizr so
    //just return the key
    if (!isBrowser) return key;

    //Check if we've prefixed this key before, just return it
    if (prefixedKeys.hasOwnProperty(key)) return prefixedKeys[key];

    //Key hasn't been prefixed yet, prefix with Modernizr
    var prefKey = Modernizr.prefixed(key);

    // Windows 7 Firefox has an issue with the implementation of Modernizr.prefixed
    // and is capturing 'false' as the CSS property name instead of the non-prefixed version.
    if (prefKey === false) return key;

    //Save the key off for the future and return the prefixed key
    prefixedKeys[key] = prefKey;
    return prefKey;
  },

  singleHyphened: function singleHyphened(key) {
    var str = this.single(key);

    return !str ? key : str.replace(/([A-Z])/g, function (str, m1) {
      return '-' + m1.toLowerCase();
    }).replace(/^ms-/, '-ms-');
  }

};
},{"../utils/modernizr.custom":139}],74:[function(require,module,exports){
// To include this file in your project:
// let mui = require('mui');
// let Colors = mui.Styles.Colors;

'use strict';

module.exports = {

  red50: '#ffebee',
  red100: '#ffcdd2',
  red200: '#ef9a9a',
  red300: '#e57373',
  red400: '#ef5350',
  red500: '#f44336',
  red600: '#e53935',
  red700: '#d32f2f',
  red800: '#c62828',
  red900: '#b71c1c',
  redA100: '#ff8a80',
  redA200: '#ff5252',
  redA400: '#ff1744',
  redA700: '#d50000',

  pink50: '#fce4ec',
  pink100: '#f8bbd0',
  pink200: '#f48fb1',
  pink300: '#f06292',
  pink400: '#ec407a',
  pink500: '#e91e63',
  pink600: '#d81b60',
  pink700: '#c2185b',
  pink800: '#ad1457',
  pink900: '#880e4f',
  pinkA100: '#ff80ab',
  pinkA200: '#ff4081',
  pinkA400: '#f50057',
  pinkA700: '#c51162',

  purple50: '#f3e5f5',
  purple100: '#e1bee7',
  purple200: '#ce93d8',
  purple300: '#ba68c8',
  purple400: '#ab47bc',
  purple500: '#9c27b0',
  purple600: '#8e24aa',
  purple700: '#7b1fa2',
  purple800: '#6a1b9a',
  purple900: '#4a148c',
  purpleA100: '#ea80fc',
  purpleA200: '#e040fb',
  purpleA400: '#d500f9',
  purpleA700: '#aa00ff',

  deepPurple50: '#ede7f6',
  deepPurple100: '#d1c4e9',
  deepPurple200: '#b39ddb',
  deepPurple300: '#9575cd',
  deepPurple400: '#7e57c2',
  deepPurple500: '#673ab7',
  deepPurple600: '#5e35b1',
  deepPurple700: '#512da8',
  deepPurple800: '#4527a0',
  deepPurple900: '#311b92',
  deepPurpleA100: '#b388ff',
  deepPurpleA200: '#7c4dff',
  deepPurpleA400: '#651fff',
  deepPurpleA700: '#6200ea',

  indigo50: '#e8eaf6',
  indigo100: '#c5cae9',
  indigo200: '#9fa8da',
  indigo300: '#7986cb',
  indigo400: '#5c6bc0',
  indigo500: '#3f51b5',
  indigo600: '#3949ab',
  indigo700: '#303f9f',
  indigo800: '#283593',
  indigo900: '#1a237e',
  indigoA100: '#8c9eff',
  indigoA200: '#536dfe',
  indigoA400: '#3d5afe',
  indigoA700: '#304ffe',

  blue50: '#e3f2fd',
  blue100: '#bbdefb',
  blue200: '#90caf9',
  blue300: '#64b5f6',
  blue400: '#42a5f5',
  blue500: '#2196f3',
  blue600: '#1e88e5',
  blue700: '#1976d2',
  blue800: '#1565c0',
  blue900: '#0d47a1',
  blueA100: '#82b1ff',
  blueA200: '#448aff',
  blueA400: '#2979ff',
  blueA700: '#2962ff',

  lightBlue50: '#e1f5fe',
  lightBlue100: '#b3e5fc',
  lightBlue200: '#81d4fa',
  lightBlue300: '#4fc3f7',
  lightBlue400: '#29b6f6',
  lightBlue500: '#03a9f4',
  lightBlue600: '#039be5',
  lightBlue700: '#0288d1',
  lightBlue800: '#0277bd',
  lightBlue900: '#01579b',
  lightBlueA100: '#80d8ff',
  lightBlueA200: '#40c4ff',
  lightBlueA400: '#00b0ff',
  lightBlueA700: '#0091ea',

  cyan50: '#e0f7fa',
  cyan100: '#b2ebf2',
  cyan200: '#80deea',
  cyan300: '#4dd0e1',
  cyan400: '#26c6da',
  cyan500: '#00bcd4',
  cyan600: '#00acc1',
  cyan700: '#0097a7',
  cyan800: '#00838f',
  cyan900: '#006064',
  cyanA100: '#84ffff',
  cyanA200: '#18ffff',
  cyanA400: '#00e5ff',
  cyanA700: '#00b8d4',

  teal50: '#e0f2f1',
  teal100: '#b2dfdb',
  teal200: '#80cbc4',
  teal300: '#4db6ac',
  teal400: '#26a69a',
  teal500: '#009688',
  teal600: '#00897b',
  teal700: '#00796b',
  teal800: '#00695c',
  teal900: '#004d40',
  tealA100: '#a7ffeb',
  tealA200: '#64ffda',
  tealA400: '#1de9b6',
  tealA700: '#00bfa5',

  green50: '#e8f5e9',
  green100: '#c8e6c9',
  green200: '#a5d6a7',
  green300: '#81c784',
  green400: '#66bb6a',
  green500: '#4caf50',
  green600: '#43a047',
  green700: '#388e3c',
  green800: '#2e7d32',
  green900: '#1b5e20',
  greenA100: '#b9f6ca',
  greenA200: '#69f0ae',
  greenA400: '#00e676',
  greenA700: '#00c853',

  lightGreen50: '#f1f8e9',
  lightGreen100: '#dcedc8',
  lightGreen200: '#c5e1a5',
  lightGreen300: '#aed581',
  lightGreen400: '#9ccc65',
  lightGreen500: '#8bc34a',
  lightGreen600: '#7cb342',
  lightGreen700: '#689f38',
  lightGreen800: '#558b2f',
  lightGreen900: '#33691e',
  lightGreenA100: '#ccff90',
  lightGreenA200: '#b2ff59',
  lightGreenA400: '#76ff03',
  lightGreenA700: '#64dd17',

  lime50: '#f9fbe7',
  lime100: '#f0f4c3',
  lime200: '#e6ee9c',
  lime300: '#dce775',
  lime400: '#d4e157',
  lime500: '#cddc39',
  lime600: '#c0ca33',
  lime700: '#afb42b',
  lime800: '#9e9d24',
  lime900: '#827717',
  limeA100: '#f4ff81',
  limeA200: '#eeff41',
  limeA400: '#c6ff00',
  limeA700: '#aeea00',

  yellow50: '#fffde7',
  yellow100: '#fff9c4',
  yellow200: '#fff59d',
  yellow300: '#fff176',
  yellow400: '#ffee58',
  yellow500: '#ffeb3b',
  yellow600: '#fdd835',
  yellow700: '#fbc02d',
  yellow800: '#f9a825',
  yellow900: '#f57f17',
  yellowA100: '#ffff8d',
  yellowA200: '#ffff00',
  yellowA400: '#ffea00',
  yellowA700: '#ffd600',

  amber50: '#fff8e1',
  amber100: '#ffecb3',
  amber200: '#ffe082',
  amber300: '#ffd54f',
  amber400: '#ffca28',
  amber500: '#ffc107',
  amber600: '#ffb300',
  amber700: '#ffa000',
  amber800: '#ff8f00',
  amber900: '#ff6f00',
  amberA100: '#ffe57f',
  amberA200: '#ffd740',
  amberA400: '#ffc400',
  amberA700: '#ffab00',

  orange50: '#fff3e0',
  orange100: '#ffe0b2',
  orange200: '#ffcc80',
  orange300: '#ffb74d',
  orange400: '#ffa726',
  orange500: '#ff9800',
  orange600: '#fb8c00',
  orange700: '#f57c00',
  orange800: '#ef6c00',
  orange900: '#e65100',
  orangeA100: '#ffd180',
  orangeA200: '#ffab40',
  orangeA400: '#ff9100',
  orangeA700: '#ff6d00',

  deepOrange50: '#fbe9e7',
  deepOrange100: '#ffccbc',
  deepOrange200: '#ffab91',
  deepOrange300: '#ff8a65',
  deepOrange400: '#ff7043',
  deepOrange500: '#ff5722',
  deepOrange600: '#f4511e',
  deepOrange700: '#e64a19',
  deepOrange800: '#d84315',
  deepOrange900: '#bf360c',
  deepOrangeA100: '#ff9e80',
  deepOrangeA200: '#ff6e40',
  deepOrangeA400: '#ff3d00',
  deepOrangeA700: '#dd2c00',

  brown50: '#efebe9',
  brown100: '#d7ccc8',
  brown200: '#bcaaa4',
  brown300: '#a1887f',
  brown400: '#8d6e63',
  brown500: '#795548',
  brown600: '#6d4c41',
  brown700: '#5d4037',
  brown800: '#4e342e',
  brown900: '#3e2723',

  blueGrey50: '#eceff1',
  blueGrey100: '#cfd8dc',
  blueGrey200: '#b0bec5',
  blueGrey300: '#90a4ae',
  blueGrey400: '#78909c',
  blueGrey500: '#607d8b',
  blueGrey600: '#546e7a',
  blueGrey700: '#455a64',
  blueGrey800: '#37474f',
  blueGrey900: '#263238',

  grey50: '#fafafa',
  grey100: '#f5f5f5',
  grey200: '#eeeeee',
  grey300: '#e0e0e0',
  grey400: '#bdbdbd',
  grey500: '#9e9e9e',
  grey600: '#757575',
  grey700: '#616161',
  grey800: '#424242',
  grey900: '#212121',

  black: '#000000',
  white: '#ffffff',

  transparent: 'rgba(0, 0, 0, 0)',
  fullBlack: 'rgba(0, 0, 0, 1)',
  darkBlack: 'rgba(0, 0, 0, 0.87)',
  lightBlack: 'rgba(0, 0, 0, 0.54)',
  minBlack: 'rgba(0, 0, 0, 0.26)',
  faintBlack: 'rgba(0, 0, 0, 0.12)',
  fullWhite: 'rgba(255, 255, 255, 1)',
  darkWhite: 'rgba(255, 255, 255, 0.87)',
  lightWhite: 'rgba(255, 255, 255, 0.54)'

};
},{}],75:[function(require,module,exports){
'use strict';

module.exports = {
  AutoPrefix: require('./auto-prefix'),
  Colors: require('./colors'),
  Spacing: require('./spacing'),
  ThemeManager: require('./theme-manager'),
  Transitions: require('./transitions'),
  Typography: require('./typography')
};
},{"./auto-prefix":73,"./colors":74,"./spacing":76,"./theme-manager":77,"./transitions":80,"./typography":81}],76:[function(require,module,exports){
"use strict";

module.exports = {
  iconSize: 24,

  desktopGutter: 24,
  desktopGutterMore: 32,
  desktopGutterLess: 16,
  desktopGutterMini: 8,
  desktopKeylineIncrement: 64,
  desktopDropDownMenuItemHeight: 32,
  desktopDropDownMenuFontSize: 15,
  desktopLeftNavMenuItemHeight: 48,
  desktopSubheaderHeight: 48,
  desktopToolbarHeight: 56
};
},{}],77:[function(require,module,exports){
'use strict';

var Extend = require('../utils/extend');

var Types = {
  LIGHT: require('./themes/light-theme'),
  DARK: require('./themes/dark-theme')
};

var ThemeManager = function ThemeManager() {
  return {

    //In most cases, theme variables remain static thoughout the life of an
    //app. If you plan on mutating theme variables after the theme has been
    //intialized, set static to false. This will allow components to update
    //when theme variables change. For more information see issue #1176
    'static': true,

    types: Types,
    template: Types.LIGHT,

    spacing: Types.LIGHT.spacing,
    contentFontFamily: 'Roboto, sans-serif',

    palette: Types.LIGHT.getPalette(),
    component: Types.LIGHT.getComponentThemes(Types.LIGHT.getPalette()),

    getCurrentTheme: function getCurrentTheme() {
      return this;
    },

    // Component gets updated to reflect palette changes.
    setTheme: function setTheme(newTheme) {
      this.setSpacing(newTheme.spacing);
      this.setContentFontFamily(newTheme.contentFontFamily);
      this.setPalette(newTheme.getPalette());
      this.setComponentThemes(newTheme.getComponentThemes(newTheme.getPalette()));
    },

    setSpacing: function setSpacing(newSpacing) {
      this.spacing = Extend(this.spacing, newSpacing);
      this.component = Extend(this.component, this.template.getComponentThemes(this.palette, this.spacing));
    },

    setContentFontFamily: function setContentFontFamily(newContentFontFamily) {
      if (typeof newContentFontFamily !== "undefined" && newContentFontFamily !== null) {
        this.contentFontFamily = newContentFontFamily;
        this.component = Extend(this.component, this.template.getComponentThemes(this.palette, this.spacing));
      }
    },

    setPalette: function setPalette(newPalette) {
      this.palette = Extend(this.palette, newPalette);
      this.component = Extend(this.component, this.template.getComponentThemes(this.palette));
    },

    setComponentThemes: function setComponentThemes(overrides) {
      this.component = Extend(this.component, overrides);
    },

    setIsRtl: function setIsRtl(isRtl) {
      this.isRtl = !!isRtl;
    }
  };
};

module.exports = ThemeManager;
},{"../utils/extend":134,"./themes/dark-theme":78,"./themes/light-theme":79}],78:[function(require,module,exports){
'use strict';

var Colors = require('../colors');
var ColorManipulator = require('../../utils/color-manipulator');

var DarkTheme = {
  getPalette: function getPalette() {
    return {
      textColor: Colors.fullWhite,
      canvasColor: '#303030',
      borderColor: ColorManipulator.fade(Colors.fullWhite, 0.3), //Colors.grey300
      disabledColor: ColorManipulator.fade(Colors.fullWhite, 0.3),
      primary1Color: Colors.teal200
    };
  },
  getComponentThemes: function getComponentThemes(palette) {
    var cardColor = Colors.grey800;
    return {
      avatar: {
        borderColor: 'rgba(0, 0, 0, 0.5)'
      },
      floatingActionButton: {
        disabledColor: ColorManipulator.fade(palette.textColor, 0.12)
      },
      leftNav: {
        color: cardColor
      },
      menu: {
        backgroundColor: cardColor,
        containerBackgroundColor: cardColor
      },
      menuItem: {
        hoverColor: 'rgba(255, 255, 255, .03)'
      },
      menuSubheader: {
        borderColor: 'rgba(255, 255, 255, 0.3)'
      },
      paper: {
        backgroundColor: cardColor
      },
      raisedButton: {
        color: Colors.grey500
      },
      toggle: {
        thumbOnColor: Colors.cyan200,
        thumbOffColor: Colors.grey400,
        thumbDisabledColor: Colors.grey800,
        thumbRequiredColor: Colors.cyan200,
        trackOnColor: ColorManipulator.fade(Colors.cyan200, 0.5),
        trackOffColor: 'rgba(255, 255, 255, 0.3)',
        trackDisabledColor: 'rgba(255, 255, 255, 0.1)'
      },
      refreshIndicator: {
        strokeColor: Colors.grey700,
        loadingStrokeColor: Colors.teal300
      },
      slider: {
        trackColor: Colors.minBlack,
        handleColorZero: cardColor,
        handleFillColor: cardColor,
        selectionColor: Colors.cyan200
      }
    };
  }
};

module.exports = DarkTheme;
},{"../../utils/color-manipulator":129,"../colors":74}],79:[function(require,module,exports){
'use strict';

var Colors = require('../colors');
var Spacing = require('../spacing');
var ColorManipulator = require('../../utils/color-manipulator');

/**
 *  Light Theme is the default theme used in material-ui. It is guaranteed to
 *  have all theme variables needed for every component. Variables not defined
 *  in a custom theme will default to these values.
 */

var LightTheme = {
  spacing: Spacing,
  contentFontFamily: 'Roboto, sans-serif',
  getPalette: function getPalette() {
    return {
      primary1Color: Colors.cyan500,
      primary2Color: Colors.cyan700,
      primary3Color: Colors.cyan100,
      accent1Color: Colors.pinkA200,
      accent2Color: Colors.pinkA400,
      accent3Color: Colors.pinkA100,
      textColor: Colors.darkBlack,
      canvasColor: Colors.white,
      borderColor: Colors.grey300,
      disabledColor: ColorManipulator.fade(Colors.darkBlack, 0.3)
    };
  },
  getComponentThemes: function getComponentThemes(palette, spacing) {
    spacing = spacing || Spacing;
    var obj = {
      appBar: {
        color: palette.primary1Color,
        textColor: Colors.darkWhite,
        height: spacing.desktopKeylineIncrement
      },
      avatar: {
        borderColor: 'rgba(0, 0, 0, 0.08)'
      },
      button: {
        height: 36,
        minWidth: 88,
        iconButtonSize: spacing.iconSize * 2
      },
      checkbox: {
        boxColor: palette.textColor,
        checkedColor: palette.primary1Color,
        requiredColor: palette.primary1Color,
        disabledColor: palette.disabledColor,
        labelColor: palette.textColor,
        labelDisabledColor: palette.disabledColor
      },
      datePicker: {
        color: palette.primary1Color,
        textColor: Colors.white,
        calendarTextColor: palette.textColor,
        selectColor: palette.primary2Color,
        selectTextColor: Colors.white
      },
      dropDownMenu: {
        accentColor: palette.borderColor
      },
      flatButton: {
        color: palette.canvasColor,
        textColor: palette.textColor,
        primaryTextColor: palette.accent1Color,
        secondaryTextColor: palette.primary1Color
      },
      floatingActionButton: {
        buttonSize: 56,
        miniSize: 40,
        color: palette.accent1Color,
        iconColor: Colors.white,
        secondaryColor: palette.primary1Color,
        secondaryIconColor: Colors.white
      },
      inkBar: {
        backgroundColor: palette.accent1Color
      },
      leftNav: {
        width: spacing.desktopKeylineIncrement * 4,
        color: Colors.white
      },
      listItem: {
        nestedLevelDepth: 18
      },
      menu: {
        backgroundColor: Colors.white,
        containerBackgroundColor: Colors.white
      },
      menuItem: {
        dataHeight: 32,
        height: 48,
        hoverColor: 'rgba(0, 0, 0, .035)',
        padding: spacing.desktopGutter,
        selectedTextColor: palette.accent1Color
      },
      menuSubheader: {
        padding: spacing.desktopGutter,
        borderColor: palette.borderColor,
        textColor: palette.primary1Color
      },
      paper: {
        backgroundColor: Colors.white
      },
      radioButton: {
        borderColor: palette.textColor,
        backgroundColor: Colors.white,
        checkedColor: palette.primary1Color,
        requiredColor: palette.primary1Color,
        disabledColor: palette.disabledColor,
        size: 24,
        labelColor: palette.textColor,
        labelDisabledColor: palette.disabledColor
      },
      raisedButton: {
        color: Colors.white,
        textColor: palette.textColor,
        primaryColor: palette.accent1Color,
        primaryTextColor: Colors.white,
        secondaryColor: palette.primary1Color,
        secondaryTextColor: Colors.white
      },
      refreshIndicator: {
        strokeColor: Colors.grey300,
        loadingStrokeColor: palette.primary1Color
      },
      slider: {
        trackSize: 2,
        trackColor: Colors.minBlack,
        trackColorSelected: Colors.grey500,
        handleSize: 12,
        handleSizeDisabled: 8,
        handleSizeActive: 18,
        handleColorZero: Colors.grey400,
        handleFillColor: Colors.white,
        selectionColor: palette.primary3Color,
        rippleColor: palette.primary1Color
      },
      snackbar: {
        textColor: Colors.white,
        backgroundColor: '#323232',
        actionColor: palette.accent1Color
      },
      table: {
        backgroundColor: Colors.white
      },
      tableHeader: {
        borderColor: palette.borderColor
      },
      tableHeaderColumn: {
        textColor: Colors.lightBlack,
        height: 56,
        spacing: 24
      },
      tableFooter: {
        borderColor: palette.borderColor,
        textColor: Colors.lightBlack
      },
      tableRow: {
        hoverColor: Colors.grey200,
        stripeColor: ColorManipulator.lighten(palette.primary1Color, 0.55),
        selectedColor: Colors.grey300,
        textColor: Colors.darkBlack,
        borderColor: palette.borderColor
      },
      tableRowColumn: {
        height: 48,
        spacing: 24
      },
      timePicker: {
        color: Colors.white,
        textColor: Colors.grey600,
        accentColor: palette.primary1Color,
        clockColor: Colors.black,
        selectColor: palette.primary2Color,
        selectTextColor: Colors.white
      },
      toggle: {
        thumbOnColor: palette.primary1Color,
        thumbOffColor: Colors.grey50,
        thumbDisabledColor: Colors.grey400,
        thumbRequiredColor: palette.primary1Color,
        trackOnColor: ColorManipulator.fade(palette.primary1Color, 0.5),
        trackOffColor: Colors.minBlack,
        trackDisabledColor: Colors.faintBlack,
        labelColor: palette.textColor,
        labelDisabledColor: palette.disabledColor
      },
      toolbar: {
        backgroundColor: ColorManipulator.darken('#eeeeee', 0.05),
        height: 56,
        titleFontSize: 20,
        iconColor: 'rgba(0, 0, 0, .40)',
        separatorColor: 'rgba(0, 0, 0, .175)',
        menuHoverColor: 'rgba(0, 0, 0, .10)'
      },
      tabs: {
        backgroundColor: palette.primary1Color
      },
      textField: {
        textColor: palette.textColor,
        hintColor: palette.disabledColor,
        floatingLabelColor: palette.textColor,
        disabledTextColor: palette.disabledColor,
        errorColor: Colors.red500,
        focusColor: palette.primary1Color,
        backgroundColor: 'transparent',
        borderColor: palette.borderColor
      }
    };

    // Properties based on previous properties
    obj.flatButton.disabledTextColor = ColorManipulator.fade(obj.flatButton.textColor, 0.3);
    obj.floatingActionButton.disabledColor = ColorManipulator.darken(Colors.white, 0.1);
    obj.floatingActionButton.disabledTextColor = ColorManipulator.fade(palette.textColor, 0.3);
    obj.raisedButton.disabledColor = ColorManipulator.darken(obj.raisedButton.color, 0.1);
    obj.raisedButton.disabledTextColor = ColorManipulator.fade(obj.raisedButton.textColor, 0.3);
    obj.toggle.trackRequiredColor = ColorManipulator.fade(obj.toggle.thumbRequiredColor, 0.5);

    return obj;
  }
};

module.exports = LightTheme;
},{"../../utils/color-manipulator":129,"../colors":74,"../spacing":76}],80:[function(require,module,exports){
'use strict';

var AutoPrefix = require('./auto-prefix');

module.exports = {

  easeOutFunction: 'cubic-bezier(0.23, 1, 0.32, 1)',
  easeInOutFunction: 'cubic-bezier(0.445, 0.05, 0.55, 0.95)',

  easeOut: function easeOut(duration, property, delay, easeFunction) {

    easeFunction = easeFunction || this.easeOutFunction;

    if (property && Object.prototype.toString.call(property) === '[object Array]') {

      var transitions = '';
      for (var i = 0; i < property.length; i++) {
        if (transitions) transitions += ',';
        transitions += this.create(duration, property[i], delay, easeFunction);
      }
      return transitions;
    } else {
      return this.create(duration, property, delay, easeFunction);
    }
  },

  create: function create(duration, property, delay, easeFunction) {
    duration = duration || '450ms';
    property = property || 'all';
    delay = delay || '0ms';
    easeFunction = easeFunction || "linear";

    return AutoPrefix.singleHyphened(property) + ' ' + duration + ' ' + easeFunction + ' ' + delay;
  }
};
},{"./auto-prefix":73}],81:[function(require,module,exports){
'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var Colors = require('./colors');

var Typography = function Typography() {
  _classCallCheck(this, Typography);

  // text colors
  this.textFullBlack = Colors.fullBlack;
  this.textDarkBlack = Colors.darkBlack;
  this.textLightBlack = Colors.lightBlack;
  this.textMinBlack = Colors.minBlack;
  this.textFullWhite = Colors.fullWhite;
  this.textDarkWhite = Colors.darkWhite;
  this.textLightWhite = Colors.lightWhite;

  // font weight
  this.fontWeightLight = 300;
  this.fontWeightNormal = 400;
  this.fontWeightMedium = 500;

  this.fontStyleButtonFontSize = 14;
};

module.exports = new Typography();
},{"./colors":74}],82:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react');
var StylePropable = require('./mixins/style-propable');
var Transitions = require('./styles/transitions');

var SvgIcon = React.createClass({
  displayName: 'SvgIcon',

  mixins: [StylePropable],

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  propTypes: {
    color: React.PropTypes.string,
    hoverColor: React.PropTypes.string,
    onMouseEnter: React.PropTypes.func,
    onMouseLeave: React.PropTypes.func,
    viewBox: React.PropTypes.string
  },

  getInitialState: function getInitialState() {
    return {
      hovered: false
    };
  },

  getDefaultProps: function getDefaultProps() {
    return {
      onMouseEnter: function onMouseEnter() {},
      onMouseLeave: function onMouseLeave() {},
      viewBox: '0 0 24 24'
    };
  },

  render: function render() {
    var _props = this.props;
    var children = _props.children;
    var color = _props.color;
    var hoverColor = _props.hoverColor;
    var onMouseEnter = _props.onMouseEnter;
    var onMouseLeave = _props.onMouseLeave;
    var style = _props.style;
    var viewBox = _props.viewBox;

    var other = _objectWithoutProperties(_props, ['children', 'color', 'hoverColor', 'onMouseEnter', 'onMouseLeave', 'style', 'viewBox']);

    var offColor = color ? color : style && style.fill ? style.fill : this.context.muiTheme.palette.textColor;
    var onColor = hoverColor ? hoverColor : offColor;

    var mergedStyles = this.mergeAndPrefix({
      display: 'inline-block',
      height: 24,
      width: 24,
      userSelect: 'none',
      transition: Transitions.easeOut()
    }, style, {
      // Make sure our fill color overrides fill provided in props.style
      fill: this.state.hovered ? onColor : offColor
    });

    var events = hoverColor ? {
      onMouseEnter: this._handleMouseEnter,
      onMouseLeave: this._handleMouseLeave
    } : {};

    return React.createElement(
      'svg',
      _extends({}, other, events, {
        style: mergedStyles,
        viewBox: viewBox }),
      children
    );
  },

  _handleMouseLeave: function _handleMouseLeave(e) {
    this.setState({ hovered: false });
    this.props.onMouseLeave(e);
  },

  _handleMouseEnter: function _handleMouseEnter(e) {
    this.setState({ hovered: true });
    this.props.onMouseEnter(e);
  }
});

module.exports = SvgIcon;
},{"./mixins/style-propable":57,"./styles/transitions":80,"react":326}],83:[function(require,module,exports){
'use strict';

var React = require('react/addons');
var PureRenderMixin = React.addons.PureRenderMixin;
var SvgIcon = require('../../svg-icon');

var HardwareKeyboardArrowDown = React.createClass({
  displayName: 'HardwareKeyboardArrowDown',

  mixins: [PureRenderMixin],

  render: function render() {
    return React.createElement(
      SvgIcon,
      this.props,
      React.createElement('path', { d: 'M7.41 7.84L12 12.42l4.59-4.58L18 9.25l-6 6-6-6z' })
    );
  }

});

module.exports = HardwareKeyboardArrowDown;
},{"../../svg-icon":82,"react/addons":154}],84:[function(require,module,exports){
'use strict';

var React = require('react/addons');
var PureRenderMixin = React.addons.PureRenderMixin;
var SvgIcon = require('../../svg-icon');

var HardwareKeyboardArrowUp = React.createClass({
  displayName: 'HardwareKeyboardArrowUp',

  mixins: [PureRenderMixin],

  render: function render() {
    return React.createElement(
      SvgIcon,
      this.props,
      React.createElement('path', { d: 'M7.41 15.41L12 10.83l4.59 4.58L18 14l-6-6-6 6z' })
    );
  }

});

module.exports = HardwareKeyboardArrowUp;
},{"../../svg-icon":82,"react/addons":154}],85:[function(require,module,exports){
'use strict';

var React = require('react');
var SvgIcon = require('../svg-icon');

var NavigationChevronLeftDouble = React.createClass({
  displayName: 'NavigationChevronLeftDouble',

  render: function render() {
    return React.createElement(
      SvgIcon,
      this.props,
      React.createElement('path', { d: 'M11.41 7.41 L10 6 l-6 6 6 6 1.41-1.41 L6.83 12z' }),
      React.createElement('path', { d: 'M18.41 7.41 L17 6 l-6 6 6 6 1.41-1.41 L13.83 12z' })
    );
  }

});

module.exports = NavigationChevronLeftDouble;
},{"../svg-icon":82,"react":326}],86:[function(require,module,exports){
'use strict';

var React = require('react');
var SvgIcon = require('../svg-icon');

var NavigationChevronRightDouble = React.createClass({
  displayName: 'NavigationChevronRightDouble',

  render: function render() {
    return React.createElement(
      SvgIcon,
      this.props,
      React.createElement('path', { d: 'M6 6 L4.59  7.41 9.17 12 l-4.58 4.59 L6 18 l6 -6z' }),
      React.createElement('path', { d: 'M13 6 L11.59 7.41 16.17 12 l-4.58 4.59 L13 18 l6 -6z' })
    );
  }

});

module.exports = NavigationChevronRightDouble;
},{"../svg-icon":82,"react":326}],87:[function(require,module,exports){
'use strict';

var React = require('react/addons');
var PureRenderMixin = React.addons.PureRenderMixin;
var SvgIcon = require('../../svg-icon');

var NavigationArrowDropDown = React.createClass({
  displayName: 'NavigationArrowDropDown',

  mixins: [PureRenderMixin],

  render: function render() {
    return React.createElement(
      SvgIcon,
      this.props,
      React.createElement('path', { d: 'M7 10l5 5 5-5z' })
    );
  }

});

module.exports = NavigationArrowDropDown;
},{"../../svg-icon":82,"react/addons":154}],88:[function(require,module,exports){
'use strict';

var React = require('react/addons');
var PureRenderMixin = React.addons.PureRenderMixin;
var SvgIcon = require('../../svg-icon');

var NavigationArrowDropUp = React.createClass({
  displayName: 'NavigationArrowDropUp',

  mixins: [PureRenderMixin],

  render: function render() {
    return React.createElement(
      SvgIcon,
      this.props,
      React.createElement('path', { d: 'M7 14l5-5 5 5z' })
    );
  }

});

module.exports = NavigationArrowDropUp;
},{"../../svg-icon":82,"react/addons":154}],89:[function(require,module,exports){
'use strict';

var React = require('react/addons');
var PureRenderMixin = React.addons.PureRenderMixin;
var SvgIcon = require('../../svg-icon');

var NavigationChevronLeft = React.createClass({
  displayName: 'NavigationChevronLeft',

  mixins: [PureRenderMixin],

  render: function render() {
    return React.createElement(
      SvgIcon,
      this.props,
      React.createElement('path', { d: 'M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z' })
    );
  }

});

module.exports = NavigationChevronLeft;
},{"../../svg-icon":82,"react/addons":154}],90:[function(require,module,exports){
'use strict';

var React = require('react/addons');
var PureRenderMixin = React.addons.PureRenderMixin;
var SvgIcon = require('../../svg-icon');

var NavigationChevronRight = React.createClass({
  displayName: 'NavigationChevronRight',

  mixins: [PureRenderMixin],

  render: function render() {
    return React.createElement(
      SvgIcon,
      this.props,
      React.createElement('path', { d: 'M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z' })
    );
  }

});

module.exports = NavigationChevronRight;
},{"../../svg-icon":82,"react/addons":154}],91:[function(require,module,exports){
'use strict';

var React = require('react/addons');
var PureRenderMixin = React.addons.PureRenderMixin;
var SvgIcon = require('../../svg-icon');

var NavigationMenu = React.createClass({
  displayName: 'NavigationMenu',

  mixins: [PureRenderMixin],

  render: function render() {
    return React.createElement(
      SvgIcon,
      this.props,
      React.createElement('path', { d: 'M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z' })
    );
  }

});

module.exports = NavigationMenu;
},{"../../svg-icon":82,"react/addons":154}],92:[function(require,module,exports){
'use strict';

var React = require('react/addons');
var PureRenderMixin = React.addons.PureRenderMixin;
var SvgIcon = require('../../svg-icon');

var ToggleCheckBoxOutlineBlank = React.createClass({
  displayName: 'ToggleCheckBoxOutlineBlank',

  mixins: [PureRenderMixin],

  render: function render() {
    return React.createElement(
      SvgIcon,
      this.props,
      React.createElement('path', { d: 'M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z' })
    );
  }

});

module.exports = ToggleCheckBoxOutlineBlank;
},{"../../svg-icon":82,"react/addons":154}],93:[function(require,module,exports){
'use strict';

var React = require('react/addons');
var PureRenderMixin = React.addons.PureRenderMixin;
var SvgIcon = require('../../svg-icon');

var ToggleCheckBox = React.createClass({
  displayName: 'ToggleCheckBox',

  mixins: [PureRenderMixin],

  render: function render() {
    return React.createElement(
      SvgIcon,
      this.props,
      React.createElement('path', { d: 'M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z' })
    );
  }

});

module.exports = ToggleCheckBox;
},{"../../svg-icon":82,"react/addons":154}],94:[function(require,module,exports){
'use strict';

var React = require('react/addons');
var PureRenderMixin = React.addons.PureRenderMixin;
var SvgIcon = require('../../svg-icon');

var ToggleRadioButtonChecked = React.createClass({
  displayName: 'ToggleRadioButtonChecked',

  mixins: [PureRenderMixin],

  render: function render() {
    return React.createElement(
      SvgIcon,
      this.props,
      React.createElement('path', { d: 'M12 7c-2.76 0-5 2.24-5 5s2.24 5 5 5 5-2.24 5-5-2.24-5-5-5zm0-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z' })
    );
  }

});

module.exports = ToggleRadioButtonChecked;
},{"../../svg-icon":82,"react/addons":154}],95:[function(require,module,exports){
'use strict';

var React = require('react/addons');
var PureRenderMixin = React.addons.PureRenderMixin;
var SvgIcon = require('../../svg-icon');

var ToggleRadioButtonUnchecked = React.createClass({
  displayName: 'ToggleRadioButtonUnchecked',

  mixins: [PureRenderMixin],

  render: function render() {
    return React.createElement(
      SvgIcon,
      this.props,
      React.createElement('path', { d: 'M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z' })
    );
  }

});

module.exports = ToggleRadioButtonUnchecked;
},{"../../svg-icon":82,"react/addons":154}],96:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react');
var Checkbox = require('../checkbox');
var TableRowColumn = require('./table-row-column');
var ClickAwayable = require('../mixins/click-awayable');
var StylePropable = require('../mixins/style-propable');

var TableBody = React.createClass({
  displayName: 'TableBody',

  mixins: [ClickAwayable, StylePropable],

  propTypes: {
    allRowsSelected: React.PropTypes.bool,
    deselectOnClickaway: React.PropTypes.bool,
    displayRowCheckbox: React.PropTypes.bool,
    multiSelectable: React.PropTypes.bool,
    onCellClick: React.PropTypes.func,
    onCellHover: React.PropTypes.func,
    onCellHoverExit: React.PropTypes.func,
    onRowHover: React.PropTypes.func,
    onRowHoverExit: React.PropTypes.func,
    onRowSelection: React.PropTypes.func,
    preScanRows: React.PropTypes.bool,
    selectable: React.PropTypes.bool,
    showRowHover: React.PropTypes.bool,
    stripedRows: React.PropTypes.bool,
    style: React.PropTypes.object
  },

  getDefaultProps: function getDefaultProps() {
    return {
      allRowsSelected: false,
      deselectOnClickaway: true,
      displayRowCheckbox: true,
      multiSelectable: false,
      preScanRows: true,
      selectable: true
    };
  },

  getInitialState: function getInitialState() {
    return {
      selectedRows: this._calculatePreselectedRows(this.props)
    };
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    var newState = {};

    if (this.props.allRowsSelected && !nextProps.allRowsSelected) {
      var lastSelectedRow = this.state.selectedRows.length ? this.state.selectedRows[this.state.selectedRows.length - 1] : undefined;

      newState.selectedRows = [lastSelectedRow];
    } else {
      newState.selectedRows = this._calculatePreselectedRows(nextProps);
    }

    this.setState(newState);
  },

  componentClickAway: function componentClickAway() {
    if (this.props.deselectOnClickaway && this.state.selectedRows.length) {
      this.setState({ selectedRows: [] });
    }
  },

  render: function render() {
    var _props = this.props;
    var className = _props.className;
    var style = _props.style;

    var other = _objectWithoutProperties(_props, ['className', 'style']);

    var classes = 'mui-table-body';
    if (className) classes += ' ' + className;

    var rows = this._createRows();

    return React.createElement(
      'tbody',
      { className: classes, style: style },
      rows
    );
  },

  _createRows: function _createRows() {
    var _this = this;

    var numChildren = React.Children.count(this.props.children);
    var rowNumber = 0;
    var handlers = {
      onCellClick: this._onCellClick,
      onCellHover: this._onCellHover,
      onCellHoverExit: this._onCellHoverExit,
      onRowHover: this._onRowHover,
      onRowHoverExit: this._onRowHoverExit,
      onRowClick: this._onRowClick
    };

    return React.Children.map(this.props.children, function (child) {
      if (React.isValidElement(child)) {
        var _ret = (function () {
          var props = {
            displayRowCheckbox: _this.props.displayRowCheckbox,
            hoverable: _this.props.showRowHover,
            selected: _this._isRowSelected(rowNumber),
            striped: _this.props.stripedRows && rowNumber % 2 === 0,
            rowNumber: rowNumber++
          };
          var checkboxColumn = _this._createRowCheckboxColumn(props);

          if (rowNumber === numChildren) {
            props.displayBorder = false;
          }

          var children = [checkboxColumn];
          React.Children.forEach(child.props.children, function (child) {
            children.push(child);
          });

          return {
            v: React.cloneElement(child, _extends({}, props, handlers), children)
          };
        })();

        if (typeof _ret === 'object') return _ret.v;
      }
    });
  },

  _createRowCheckboxColumn: function _createRowCheckboxColumn(rowProps) {
    if (!this.props.displayRowCheckbox) return null;

    var key = rowProps.rowNumber + '-cb';
    var checkbox = React.createElement(Checkbox, {
      ref: 'rowSelectCB',
      name: key,
      value: 'selected',
      disabled: !this.props.selectable,
      checked: rowProps.selected });

    return React.createElement(
      TableRowColumn,
      {
        key: key,
        columnNumber: 0,
        style: { width: 24 } },
      checkbox
    );
  },

  _calculatePreselectedRows: function _calculatePreselectedRows(props) {
    // Determine what rows are 'pre-selected'.
    var preSelectedRows = [];

    if (props.selectable && props.preScanRows) {
      (function () {
        var index = 0;
        React.Children.forEach(props.children, function (child) {
          if (React.isValidElement(child)) {
            if (child.props.selected && (preSelectedRows.length === 0 || props.multiSelectable)) {
              preSelectedRows.push(index);
            }

            index++;
          }
        });
      })();
    }

    return preSelectedRows;
  },

  _isRowSelected: function _isRowSelected(rowNumber) {
    if (this.props.allRowsSelected) {
      return true;
    }

    for (var i = 0; i < this.state.selectedRows.length; i++) {
      var selection = this.state.selectedRows[i];

      if (typeof selection === 'object') {
        if (this._isValueInRange(rowNumber, selection)) return true;
      } else {
        if (selection === rowNumber) return true;
      }
    }

    return false;
  },

  _isValueInRange: function _isValueInRange(value, range) {
    if (!range) return false;

    if (range.start <= value && value <= range.end || range.end <= value && value <= range.start) {
      return true;
    }

    return false;
  },

  _onRowClick: function _onRowClick(e, rowNumber) {
    e.stopPropagation();

    if (this.props.selectable) {
      // Prevent text selection while selecting rows.
      window.getSelection().removeAllRanges();
      this._processRowSelection(e, rowNumber);
    }
  },

  _processRowSelection: function _processRowSelection(e, rowNumber) {
    var selectedRows = this.state.selectedRows;

    if (e.shiftKey && this.props.multiSelectable && selectedRows.length) {
      var lastIndex = selectedRows.length - 1;
      var lastSelection = selectedRows[lastIndex];

      if (typeof lastSelection === 'object') {
        lastSelection.end = rowNumber;
      } else {
        selectedRows.splice(lastIndex, 1, { start: lastSelection, end: rowNumber });
      }
    } else if ((e.ctrlKey && !e.metaKey || e.metaKey && !e.ctrlKey) && this.props.multiSelectable) {
      var idx = selectedRows.indexOf(rowNumber);
      if (idx < 0) {
        var foundRange = false;
        for (var i = 0; i < selectedRows.length; i++) {
          var range = selectedRows[i];
          if (typeof range !== 'object') continue;

          if (this._isValueInRange(rowNumber, range)) {
            var _selectedRows;

            foundRange = true;
            var values = this._splitRange(range, rowNumber);
            (_selectedRows = selectedRows).splice.apply(_selectedRows, [i, 1].concat(_toConsumableArray(values)));
          }
        }

        if (!foundRange) selectedRows.push(rowNumber);
      } else {
        selectedRows.splice(idx, 1);
      }
    } else {
      if (selectedRows.length === 1 && selectedRows[0] === rowNumber) {
        selectedRows = [];
      } else {
        selectedRows = [rowNumber];
      }
    }

    this.setState({ selectedRows: selectedRows });
    if (this.props.onRowSelection) this.props.onRowSelection(this._flattenRanges(selectedRows));
  },

  _splitRange: function _splitRange(range, splitPoint) {
    var splitValues = [];
    var startOffset = range.start - splitPoint;
    var endOffset = range.end - splitPoint;

    // Process start half
    splitValues.push.apply(splitValues, _toConsumableArray(this._genRangeOfValues(splitPoint, startOffset)));

    // Process end half
    splitValues.push.apply(splitValues, _toConsumableArray(this._genRangeOfValues(splitPoint, endOffset)));

    return splitValues;
  },

  _genRangeOfValues: function _genRangeOfValues(start, offset) {
    var values = [];
    var dir = offset > 0 ? -1 : 1; // This forces offset to approach 0 from either direction.
    while (offset !== 0) {
      values.push(start + offset);
      offset += dir;
    }

    return values;
  },

  _flattenRanges: function _flattenRanges(selectedRows) {
    var rows = [];
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = selectedRows[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var selection = _step.value;

        if (typeof selection === 'object') {
          var values = this._genRangeOfValues(selection.end, selection.start - selection.end);
          rows.push.apply(rows, [selection.end].concat(_toConsumableArray(values)));
        } else {
          rows.push(selection);
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return rows.sort();
  },

  _onCellClick: function _onCellClick(e, rowNumber, columnNumber) {
    e.stopPropagation();
    if (this.props.onCellClick) this.props.onCellClick(rowNumber, this._getColumnId(columnNumber));
  },

  _onCellHover: function _onCellHover(e, rowNumber, columnNumber) {
    if (this.props.onCellHover) this.props.onCellHover(rowNumber, this._getColumnId(columnNumber));
    this._onRowHover(e, rowNumber);
  },

  _onCellHoverExit: function _onCellHoverExit(e, rowNumber, columnNumber) {
    if (this.props.onCellHoverExit) this.props.onCellHoverExit(rowNumber, this._getColumnId(columnNumber));
    this._onRowHoverExit(e, rowNumber);
  },

  _onRowHover: function _onRowHover(e, rowNumber) {
    if (this.props.onRowHover) this.props.onRowHover(rowNumber);
  },

  _onRowHoverExit: function _onRowHoverExit(e, rowNumber) {
    if (this.props.onRowHoverExit) this.props.onRowHoverExit(rowNumber);
  },

  _getColumnId: function _getColumnId(columnNumber) {
    var columnId = columnNumber;
    if (this.props.displayRowCheckbox) columnId--;

    return columnId;
  }

});

module.exports = TableBody;
},{"../checkbox":18,"../mixins/click-awayable":54,"../mixins/style-propable":57,"./table-row-column":100,"react":326}],97:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react');
var TableRowColumn = require('./table-row-column');
var StylePropable = require('../mixins/style-propable');

var TableFooter = React.createClass({
  displayName: 'TableFooter',

  mixins: [StylePropable],

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  propTypes: {
    adjustForCheckbox: React.PropTypes.bool,
    style: React.PropTypes.object
  },

  getDefaultProps: function getDefaultProps() {
    return {
      adjustForCheckbox: true
    };
  },

  getTheme: function getTheme() {
    return this.context.muiTheme.component.tableFooter;
  },

  getStyles: function getStyles() {
    var styles = {
      cell: {
        borderTop: '1px solid ' + this.getTheme().borderColor,
        verticalAlign: 'bottom',
        padding: 20,
        textAlign: 'left',
        whiteSpace: 'nowrap'
      }
    };

    return styles;
  },

  render: function render() {
    var _props = this.props;
    var className = _props.className;

    var other = _objectWithoutProperties(_props, ['className']);

    var classes = 'mui-table-footer';
    if (className) classes += ' ' + className;

    var footerRows = this._createRows();

    return React.createElement(
      'tfoot',
      _extends({ className: classes }, other),
      footerRows
    );
  },

  _createRows: function _createRows() {
    var _this = this;

    var rowNumber = 0;
    return React.Children.map(this.props.children, function (child) {
      return _this._createRow(child, rowNumber++);
    });
  },

  _createRow: function _createRow(child, rowNumber) {
    var styles = this.getStyles();
    var props = {
      className: 'mui-table-footer-row',
      displayBorder: false,
      key: 'f-' + rowNumber,
      rowNumber: rowNumber,
      style: this.mergeAndPrefix(styles.cell, child.props.style)
    };

    var children = [this._getCheckboxPlaceholder(props)];
    React.Children.forEach(child.props.children, function (child) {
      children.push(child);
    });

    return React.cloneElement(child, props, children);
  },

  _getCheckboxPlaceholder: function _getCheckboxPlaceholder(props) {
    if (!this.props.adjustForCheckbox) return null;

    var key = 'fpcb' + props.rowNumber;
    return React.createElement(TableRowColumn, { key: key, style: { width: 24 } });
  }

});

module.exports = TableFooter;
},{"../mixins/style-propable":57,"./table-row-column":100,"react":326}],98:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react');
var StylePropable = require('../mixins/style-propable');
var Tooltip = require('../tooltip');

var TableHeaderColumn = React.createClass({
  displayName: 'TableHeaderColumn',

  mixins: [StylePropable],

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  propTypes: {
    columnNumber: React.PropTypes.number,
    onClick: React.PropTypes.func,
    style: React.PropTypes.object,
    tooltip: React.PropTypes.string,
    tooltipStyle: React.PropTypes.object
  },

  getInitialState: function getInitialState() {
    return {
      hovered: false
    };
  },

  getTheme: function getTheme() {
    return this.context.muiTheme.component.tableHeaderColumn;
  },

  getStyles: function getStyles() {
    var theme = this.getTheme();
    var styles = {
      root: {
        fontWeight: 'normal',
        fontSize: 12,
        paddingLeft: theme.spacing,
        paddingRight: theme.spacing,
        height: theme.height,
        textAlign: 'left',
        whiteSpace: 'nowrap',
        textOverflow: 'ellipsis',
        color: this.getTheme().textColor,
        position: 'relative'
      },
      tooltip: {
        boxSizing: 'border-box',
        marginTop: theme.height / 2
      }
    };

    return styles;
  },

  render: function render() {
    var styles = this.getStyles();
    var handlers = {
      onMouseEnter: this._onMouseEnter,
      onMouseLeave: this._onMouseLeave,
      onClick: this._onClick
    };
    var _props = this.props;
    var className = _props.className;
    var columnNumber = _props.columnNumber;
    var onClick = _props.onClick;
    var style = _props.style;
    var tooltip = _props.tooltip;
    var tooltipStyle = _props.tooltipStyle;

    var other = _objectWithoutProperties(_props, ['className', 'columnNumber', 'onClick', 'style', 'tooltip', 'tooltipStyle']);

    var classes = 'mui-table-header-column';
    if (className) classes += ' ' + className;

    if (this.props.tooltip !== undefined) {
      tooltip = React.createElement(Tooltip, {
        label: this.props.tooltip,
        show: this.state.hovered,
        style: this.mergeAndPrefix(styles.tooltip, tooltipStyle) });
    }

    return React.createElement(
      'th',
      _extends({
        key: this.props.key,
        className: classes,
        style: this.mergeAndPrefix(styles.root, style)
      }, handlers, other),
      tooltip,
      this.props.children
    );
  },

  _onMouseEnter: function _onMouseEnter() {
    if (this.props.tooltip !== undefined) this.setState({ hovered: true });
  },

  _onMouseLeave: function _onMouseLeave() {
    if (this.props.tooltip !== undefined) this.setState({ hovered: false });
  },

  _onClick: function _onClick(e) {
    if (this.props.onClick) this.props.onClick(e, this.props.columnNumber);
  }

});

module.exports = TableHeaderColumn;
},{"../mixins/style-propable":57,"../tooltip":123,"react":326}],99:[function(require,module,exports){
'use strict';

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react');
var Checkbox = require('../checkbox');
var StylePropable = require('../mixins/style-propable');
var TableHeaderColumn = require('./table-header-column');

var TableHeader = React.createClass({
  displayName: 'TableHeader',

  mixins: [StylePropable],

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  propTypes: {
    adjustForCheckbox: React.PropTypes.bool,
    displaySelectAll: React.PropTypes.bool,
    enableSelectAll: React.PropTypes.bool,
    onSelectAll: React.PropTypes.func,
    selectAllSelected: React.PropTypes.bool,
    style: React.PropTypes.object
  },

  getDefaultProps: function getDefaultProps() {
    return {
      adjustForCheckbox: true,
      displaySelectAll: true,
      enableSelectAll: true,
      selectAllSelected: false
    };
  },

  getTheme: function getTheme() {
    return this.context.muiTheme.component.tableHeader;
  },

  getStyles: function getStyles() {
    var styles = {
      root: {
        borderBottom: '1px solid ' + this.getTheme().borderColor
      }
    };

    return styles;
  },

  render: function render() {
    var _props = this.props;
    var className = _props.className;
    var style = _props.style;

    var other = _objectWithoutProperties(_props, ['className', 'style']);

    var classes = 'mui-table-header';
    if (className) classes += ' ' + className;

    var superHeaderRows = this._createSuperHeaderRows();
    var baseHeaderRow = this._createBaseHeaderRow();

    return React.createElement(
      'thead',
      { className: classes, style: this.mergeAndPrefix(this.getStyles().root, style) },
      superHeaderRows,
      baseHeaderRow
    );
  },

  _createSuperHeaderRows: function _createSuperHeaderRows() {
    var numChildren = React.Children.count(this.props.children);
    if (numChildren === 1) return undefined;

    var superHeaders = [];
    for (var index = 0; index < numChildren - 1; index++) {
      var child = this.props.children[index];

      if (!React.isValidElement(child)) continue;

      var props = {
        className: 'mui-table-super-header-row',
        displayRowCheckbox: false,
        key: 'sh' + index,
        rowNumber: index
      };
      superHeaders.push(this._createSuperHeaderRow(child, props));
    }

    if (superHeaders.length) return superHeaders;
  },

  _createSuperHeaderRow: function _createSuperHeaderRow(child, props) {
    var children = [];
    if (this.props.adjustForCheckbox) {
      children.push(this._getCheckboxPlaceholder(props));
    }
    React.Children.forEach(child.props.children, function (child) {
      children.push(child);
    });

    return React.cloneElement(child, props, children);
  },

  _createBaseHeaderRow: function _createBaseHeaderRow() {
    var numChildren = React.Children.count(this.props.children);
    var child = numChildren === 1 ? this.props.children : this.props.children[numChildren - 1];
    var props = {
      className: 'mui-table-header-row',
      key: 'h' + numChildren,
      rowNumber: numChildren
    };

    var children = [this._getSelectAllCheckboxColumn(props)];
    React.Children.forEach(child.props.children, function (child) {
      children.push(child);
    });

    return React.cloneElement(child, props, children);
  },

  _getCheckboxPlaceholder: function _getCheckboxPlaceholder(props) {
    if (!this.props.adjustForCheckbox) return null;

    var key = 'hpcb' + props.rowNumber;
    return React.createElement(TableHeaderColumn, { key: key, style: { width: 24 } });
  },

  _getSelectAllCheckboxColumn: function _getSelectAllCheckboxColumn(props) {
    if (!this.props.displaySelectAll) return this._getCheckboxPlaceholder(props);

    var checkbox = React.createElement(Checkbox, {
      key: 'selectallcb',
      name: 'selectallcb',
      value: 'selected',
      disabled: !this.props.enableSelectAll,
      checked: this.props.selectAllSelected,
      onCheck: this._onSelectAll });

    return React.createElement(
      TableHeaderColumn,
      { style: { width: 24 } },
      checkbox
    );
  },

  _onSelectAll: function _onSelectAll(e, checked) {
    if (this.props.onSelectAll) this.props.onSelectAll(checked);
  }

});

module.exports = TableHeader;
},{"../checkbox":18,"../mixins/style-propable":57,"./table-header-column":98,"react":326}],100:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react');
var StylePropable = require('../mixins/style-propable');

var TableRowColumn = React.createClass({
  displayName: 'TableRowColumn',

  mixins: [StylePropable],

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  propTypes: {
    columnNumber: React.PropTypes.number,
    hoverable: React.PropTypes.bool,
    onClick: React.PropTypes.func,
    onHover: React.PropTypes.func,
    onHoverExit: React.PropTypes.func,
    style: React.PropTypes.object
  },

  getDefaultProps: function getDefaultProps() {
    return {
      hoverable: false
    };
  },

  getInitialState: function getInitialState() {
    return {
      hovered: false
    };
  },

  getTheme: function getTheme() {
    return this.context.muiTheme.component.tableRowColumn;
  },

  getStyles: function getStyles() {
    var theme = this.getTheme();
    var styles = {
      root: {
        paddingLeft: theme.spacing,
        paddingRight: theme.spacing,
        height: theme.height,
        textAlign: 'left',
        fontSize: 13,
        overflow: 'hidden',
        whiteSpace: 'nowrap',
        textOverflow: 'ellipsis'
      }
    };

    if (React.Children.count(this.props.children) === 1 && !isNaN(this.props.children)) {
      styles.textAlign = 'right';
    }

    return styles;
  },

  render: function render() {
    var _props = this.props;
    var className = _props.className;
    var columnNumber = _props.columnNumber;
    var hoverable = _props.hoverable;
    var onClick = _props.onClick;
    var onHover = _props.onHover;
    var onHoverExit = _props.onHoverExit;
    var style = _props.style;

    var other = _objectWithoutProperties(_props, ['className', 'columnNumber', 'hoverable', 'onClick', 'onHover', 'onHoverExit', 'style']);

    var styles = this.getStyles();
    var handlers = {
      onClick: this._onClick,
      onMouseEnter: this._onMouseEnter,
      onMouseLeave: this._onMouseLeave
    };
    var classes = 'mui-table-row-column';
    if (className) classes += ' ' + className;

    return React.createElement(
      'td',
      _extends({
        key: this.props.key,
        className: classes,
        style: this.mergeAndPrefix(styles.root, style)
      }, handlers, other),
      this.props.children
    );
  },

  _onClick: function _onClick(e) {
    if (this.props.onClick) this.props.onClick(e, this.props.columnNumber);
  },

  _onMouseEnter: function _onMouseEnter(e) {
    if (this.props.hoverable) {
      this.setState({ hovered: true });
      if (this.props.onHover) this.props.onHover(e, this.props.columnNumber);
    }
  },

  _onMouseLeave: function _onMouseLeave(e) {
    if (this.props.hoverable) {
      this.setState({ hovered: false });
      if (this.props.onHoverExit) this.props.onHoverExit(e, this.props.columnNumber);
    }
  }

});

module.exports = TableRowColumn;
},{"../mixins/style-propable":57,"react":326}],101:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react');
var StylePropable = require('../mixins/style-propable');

var TableRow = React.createClass({
  displayName: 'TableRow',

  mixins: [StylePropable],

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  propTypes: {
    displayBorder: React.PropTypes.bool,
    hoverable: React.PropTypes.bool,
    onCellClick: React.PropTypes.func,
    onCellHover: React.PropTypes.func,
    onCellHoverExit: React.PropTypes.func,
    onRowClick: React.PropTypes.func,
    onRowHover: React.PropTypes.func,
    onRowHoverExit: React.PropTypes.func,
    rowNumber: React.PropTypes.number,
    selectable: React.PropTypes.bool,
    selected: React.PropTypes.bool,
    striped: React.PropTypes.bool,
    style: React.PropTypes.object
  },

  getDefaultProps: function getDefaultProps() {
    return {
      displayBorder: true,
      displayRowCheckbox: true,
      hoverable: false,
      selectable: true,
      selected: false,
      striped: false
    };
  },

  getInitialState: function getInitialState() {
    return {
      hovered: false
    };
  },

  getTheme: function getTheme() {
    return this.context.muiTheme.component.tableRow;
  },

  getStyles: function getStyles() {
    var theme = this.getTheme();
    var cellBgColor = 'inherit';
    if (this.state.hovered) {
      cellBgColor = theme.hoverColor;
    } else if (this.props.selected) {
      cellBgColor = theme.selectedColor;
    } else if (this.props.striped) {
      cellBgColor = theme.stripeColor;
    }

    var styles = {
      root: {
        borderBottom: '1px solid ' + this.getTheme().borderColor,
        color: this.getTheme().textColor
      },
      cell: {
        backgroundColor: cellBgColor
      }
    };

    if (!this.props.displayBorder) {
      styles.root.borderBottom = '';
    }

    return styles;
  },

  render: function render() {
    var _props = this.props;
    var className = _props.className;
    var displayBorder = _props.displayBorder;
    var hoverable = _props.hoverable;
    var onCellClick = _props.onCellClick;
    var onCellHover = _props.onCellHover;
    var onCellHoverExit = _props.onCellHoverExit;
    var onRowClick = _props.onRowClick;
    var onRowHover = _props.onRowHover;
    var onRowHoverExit = _props.onRowHoverExit;
    var rowNumber = _props.rowNumber;
    var selectable = _props.selectable;
    var selected = _props.selected;
    var striped = _props.striped;
    var style = _props.style;

    var other = _objectWithoutProperties(_props, ['className', 'displayBorder', 'hoverable', 'onCellClick', 'onCellHover', 'onCellHoverExit', 'onRowClick', 'onRowHover', 'onRowHoverExit', 'rowNumber', 'selectable', 'selected', 'striped', 'style']);

    var classes = 'mui-table-row';
    if (className) classes += ' ' + className;
    var rowColumns = this._createColumns();

    return React.createElement(
      'tr',
      _extends({
        className: classes,
        style: this.mergeAndPrefix(this.getStyles().root, style)
      }, other),
      rowColumns
    );
  },

  _createColumns: function _createColumns() {
    var _this = this;

    var columnNumber = 1;
    return React.Children.map(this.props.children, function (child) {
      if (React.isValidElement(child)) {
        return _this._createColumn(child, columnNumber++);
      }
    });
  },

  _createColumn: function _createColumn(child, columnNumber) {
    var key = this.props.rowNumber + '-' + columnNumber;
    var styles = this.getStyles();
    var handlers = {
      onClick: this._onCellClick,
      onHover: this._onCellHover,
      onHoverExit: this._onCellHoverExit
    };

    return React.cloneElement(child, _extends({
      columnNumber: columnNumber,
      hoverable: this.props.hoverable,
      key: child.props.key || key,
      style: this.mergeAndPrefix(styles.cell, child.props.style)
    }, handlers));
  },

  _onRowClick: function _onRowClick(e) {
    if (this.props.onRowClick) this.props.onRowClick(e, this.props.rowNumber);
  },

  _onRowHover: function _onRowHover(e) {
    if (this.props.onRowHover) this.props.onRowHover(e, this.props.rowNumber);
  },

  _onRowHoverExit: function _onRowHoverExit(e) {
    if (this.props.onRowHoverExit) this.props.onRowHoverExit(e, this.props.rowNumber);
  },

  _onCellClick: function _onCellClick(e, columnIndex) {
    if (this.props.selectable && this.props.onCellClick) this.props.onCellClick(e, this.props.rowNumber, columnIndex);
    e.ctrlKey = true;
    this._onRowClick(e);
  },

  _onCellHover: function _onCellHover(e, columnIndex) {
    if (this.props.hoverable) {
      this.setState({ hovered: true });
      if (this.props.onCellHover) this.props.onCellHover(e, this.props.rowNumber, columnIndex);
      this._onRowHover(e);
    }
  },

  _onCellHoverExit: function _onCellHoverExit(e, columnIndex) {
    if (this.props.hoverable) {
      this.setState({ hovered: false });
      if (this.props.onCellHoverExit) this.props.onCellHoverExit(e, this.props.rowNumber, columnIndex);
      this._onRowHoverExit(e);
    }
  }

});

module.exports = TableRow;
},{"../mixins/style-propable":57,"react":326}],102:[function(require,module,exports){
'use strict';

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react');
var StylePropable = require('../mixins/style-propable');

var Table = React.createClass({
  displayName: 'Table',

  mixins: [StylePropable],

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  propTypes: {
    allRowsSelected: React.PropTypes.bool,
    fixedFooter: React.PropTypes.bool,
    fixedHeader: React.PropTypes.bool,
    height: React.PropTypes.string,
    multiSelectable: React.PropTypes.bool,
    onCellClick: React.PropTypes.func,
    onCellHover: React.PropTypes.func,
    onCellHoverExit: React.PropTypes.func,
    onRowHover: React.PropTypes.func,
    onRowHoverExit: React.PropTypes.func,
    onRowSelection: React.PropTypes.func,
    selectable: React.PropTypes.bool,
    style: React.PropTypes.object
  },

  getDefaultProps: function getDefaultProps() {
    return {
      allRowsSelected: false,
      fixedFooter: true,
      fixedHeader: true,
      height: 'inherit',
      multiSelectable: false,
      selectable: true
    };
  },

  getInitialState: function getInitialState() {
    return {
      allRowsSelected: this.props.allRowsSelected
    };
  },

  getTheme: function getTheme() {
    return this.context.muiTheme.component.table;
  },

  getStyles: function getStyles() {
    var styles = {
      root: {
        backgroundColor: this.getTheme().backgroundColor,
        padding: '0 ' + this.context.muiTheme.spacing.desktopGutter + 'px',
        width: '100%',
        borderCollapse: 'collapse',
        borderSpacing: 0,
        tableLayout: 'fixed'
      },
      bodyTable: {
        height: this.props.fixedHeader || this.props.fixedFooter ? this.props.height : 'auto',
        overflowX: 'hidden',
        overflowY: 'auto'
      },
      tableWrapper: {
        height: this.props.fixedHeader || this.props.fixedFooter ? 'auto' : this.props.height,
        overflow: 'auto'
      }
    };

    return styles;
  },

  render: function render() {
    var _props = this.props;
    var children = _props.children;
    var className = _props.className;
    var fixedFooter = _props.fixedFooter;
    var fixedHeader = _props.fixedHeader;
    var style = _props.style;

    var other = _objectWithoutProperties(_props, ['children', 'className', 'fixedFooter', 'fixedHeader', 'style']);

    var classes = 'mui-table';
    if (className) classes += ' ' + className;
    var styles = this.getStyles();

    var tHead = undefined,
        tFoot = undefined,
        tBody = undefined;
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var child = _step.value;

        if (!React.isValidElement(child)) continue;

        var displayName = child.type.displayName;
        if (displayName === 'TableBody') {
          tBody = this._createTableBody(child);
        } else if (displayName === 'TableHeader') {
          tHead = this._createTableHeader(child);
        } else if (displayName === 'TableFooter') {
          tFoot = this._createTableFooter(child);
        }
      }

      // If we could not find a table-header and a table-body, do not attempt to display anything.
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    if (!tBody && !tHead) return null;

    var mergedTableStyle = this.mergeAndPrefix(styles.root, style);
    var headerTable = undefined,
        footerTable = undefined;
    var inlineHeader = undefined,
        inlineFooter = undefined;
    if (fixedHeader) {
      headerTable = React.createElement(
        'div',
        { className: 'mui-header-table' },
        React.createElement(
          'table',
          { className: className, style: mergedTableStyle },
          tHead
        )
      );
    } else {
      inlineHeader = tHead;
    }
    if (tFoot !== undefined) {
      if (fixedFooter) {
        footerTable = React.createElement(
          'div',
          { className: 'mui-footer-table' },
          React.createElement(
            'table',
            { className: className, style: mergedTableStyle },
            tFoot
          )
        );
      } else {
        inlineFooter = tFoot;
      }
    }

    return React.createElement(
      'div',
      { className: 'mui-table-wrapper', style: styles.tableWrapper },
      headerTable,
      React.createElement(
        'div',
        { className: 'mui-body-table', style: styles.bodyTable },
        React.createElement(
          'table',
          { className: classes, style: mergedTableStyle },
          inlineHeader,
          inlineFooter,
          tBody
        )
      ),
      footerTable
    );
  },

  _createTableHeader: function _createTableHeader(base) {
    return React.cloneElement(base, {
      enableSelectAll: base.props.enableSelectAll && this.props.selectable && this.props.multiSelectable,
      onSelectAll: this._onSelectAll,
      selectAllSelected: this.state.allRowsSelected
    });
  },

  _createTableBody: function _createTableBody(base) {
    return React.cloneElement(base, {
      allRowsSelected: this.state.allRowsSelected,
      multiSelectable: this.props.multiSelectable,
      onCellClick: this._onCellClick,
      onCellHover: this._onCellHover,
      onCellHoverExit: this._onCellHoverExit,
      onRowHover: this._onRowHover,
      onRowHoverExit: this._onRowHoverExit,
      onRowSelection: this._onRowSelection,
      selectable: this.props.selectable,
      style: this.mergeAndPrefix({ height: this.props.height }, base.props.style)
    });
  },

  _createTableFooter: function _createTableFooter(base) {
    return base;
  },

  _onCellClick: function _onCellClick(rowNumber, columnNumber) {
    if (this.props.onCellClick) this.props.onCellClick(rowNumber, columnNumber);
  },

  _onCellHover: function _onCellHover(rowNumber, columnNumber) {
    if (this.props.onCellHover) this.props.onCellHover(rowNumber, columnNumber);
  },

  _onCellHoverExit: function _onCellHoverExit(rowNumber, columnNumber) {
    if (this.props.onCellHoverExit) this.props.onCellHoverExit(rowNumber, columnNumber);
  },

  _onRowHover: function _onRowHover(rowNumber) {
    if (this.props.onRowHover) this.props.onRowHover(rowNumber);
  },

  _onRowHoverExit: function _onRowHoverExit(rowNumber) {
    if (this.props.onRowHoverExit) this.props.onRowHoverExit(rowNumber);
  },

  _onRowSelection: function _onRowSelection(selectedRows) {
    if (this.state.allRowsSelected) this.setState({ allRowsSelected: false });
    if (this.props.onRowSelection) this.props.onRowSelection(selectedRows);
  },

  _onSelectAll: function _onSelectAll() {
    if (this.props.onRowSelection && !this.state.allRowsSelected) this.props.onRowSelection('all');
    this.setState({ allRowsSelected: !this.state.allRowsSelected });
  }

});

module.exports = Table;
},{"../mixins/style-propable":57,"react":326}],103:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react');
var StylePropable = require('../mixins/style-propable');

var Tab = React.createClass({
  displayName: 'Tab',

  mixins: [StylePropable],

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  propTypes: {
    onTouchTap: React.PropTypes.func,
    label: React.PropTypes.string,
    onActive: React.PropTypes.func,
    selected: React.PropTypes.bool,
    width: React.PropTypes.string,
    value: React.PropTypes.string
  },

  getDefaultProps: function getDefaultProps() {
    return {
      onActive: function onActive() {},
      onTouchTap: function onTouchTap() {}
    };
  },

  render: function render() {
    var _props = this.props;
    var label = _props.label;
    var onActive = _props.onActive;
    var onTouchTap = _props.onTouchTap;
    var selected = _props.selected;
    var style = _props.style;
    var value = _props.value;
    var width = _props.width;

    var other = _objectWithoutProperties(_props, ['label', 'onActive', 'onTouchTap', 'selected', 'style', 'value', 'width']);

    var styles = this.mergeAndPrefix({
      display: 'table-cell',
      cursor: 'pointer',
      textAlign: 'center',
      verticalAlign: 'middle',
      height: 48,
      color: selected ? 'rgba(255,255,255,1)' : 'rgba(255,255,255,0.6)',
      outline: 'none',
      fontSize: 14,
      fontWeight: 500,
      whiteSpace: 'initial',
      fontFamily: this.context.muiTheme.contentFontFamily,
      boxSizing: 'border-box',
      width: width
    }, style);

    return React.createElement(
      'div',
      _extends({}, other, {
        style: styles,
        onTouchTap: this._handleTouchTap }),
      label
    );
  },

  _handleTouchTap: function _handleTouchTap(e) {
    this.props.onTouchTap(this.props.value, e, this);
  }

});

module.exports = Tab;
},{"../mixins/style-propable":57,"react":326}],104:[function(require,module,exports){
'use strict';

var React = require('react');

var TabTemplate = React.createClass({
  displayName: 'TabTemplate',

  render: function render() {
    var styles = {
      'height': 0,
      'overflow': 'hidden',
      'width': '100%',
      'position': 'relative',
      'textAlign': 'initial'
    };

    if (this.props.selected) {
      delete styles.height;
      delete styles.overflow;
    }

    return React.createElement(
      'div',
      { style: styles },
      this.props.children
    );
  }
});

module.exports = TabTemplate;
},{"react":326}],105:[function(require,module,exports){
(function (process){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react/addons');
var TabTemplate = require('./tabTemplate');
var InkBar = require('../ink-bar');
var StylePropable = require('../mixins/style-propable');
var Controllable = require('../mixins/controllable');

var Tabs = React.createClass({
  displayName: 'Tabs',

  mixins: [StylePropable, Controllable],

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  propTypes: {
    contentContainerStyle: React.PropTypes.object,
    initialSelectedIndex: React.PropTypes.number,
    inkBarStyle: React.PropTypes.object,
    tabItemContainerStyle: React.PropTypes.object
  },

  getDefaultProps: function getDefaultProps() {
    return {
      initialSelectedIndex: 0
    };
  },

  getInitialState: function getInitialState() {
    var valueLink = this.getValueLink(this.props);
    var initialIndex = this.props.initialSelectedIndex;

    return {
      selectedIndex: valueLink.value ? this._getSelectedIndex(this.props) : initialIndex < this.getTabCount() ? initialIndex : 0
    };
  },

  getEvenWidth: function getEvenWidth() {
    return parseInt(window.getComputedStyle(React.findDOMNode(this)).getPropertyValue('width'), 10);
  },

  getTabCount: function getTabCount() {
    return React.Children.count(this.props.children);
  },

  componentWillReceiveProps: function componentWillReceiveProps(newProps) {
    var valueLink = this.getValueLink(newProps);

    if (valueLink.value) {
      this.setState({ selectedIndex: this._getSelectedIndex(newProps) });
    }
  },

  render: function render() {
    var _this = this;

    var _props = this.props;
    var children = _props.children;
    var contentContainerStyle = _props.contentContainerStyle;
    var initialSelectedIndex = _props.initialSelectedIndex;
    var inkBarStyle = _props.inkBarStyle;
    var style = _props.style;
    var tabWidth = _props.tabWidth;
    var tabItemContainerStyle = _props.tabItemContainerStyle;

    var other = _objectWithoutProperties(_props, ['children', 'contentContainerStyle', 'initialSelectedIndex', 'inkBarStyle', 'style', 'tabWidth', 'tabItemContainerStyle']);

    var themeVariables = this.context.muiTheme.component.tabs;
    var styles = {
      tabItemContainer: {
        margin: 0,
        padding: 0,
        width: '100%',
        height: 48,
        backgroundColor: themeVariables.backgroundColor,
        whiteSpace: 'nowrap',
        display: 'table'
      }
    };

    var valueLink = this.getValueLink(this.props);
    var tabValue = valueLink.value;
    var tabContent = [];

    var width = 100 / this.getTabCount() + '%';

    var left = 'calc(' + width + '*' + this.state.selectedIndex + ')';

    var tabs = React.Children.map(children, function (tab, index) {
      if (tab.type.displayName === "Tab") {
        if (!tab.props.value && tabValue && process.env.NODE_ENV !== 'production') {
          console.error('Tabs value prop has been passed, but Tab ' + index + ' does not have a value prop. Needs value if Tabs is going' + ' to be a controlled component.');
        }

        tabContent.push(tab.props.children ? React.createElement(TabTemplate, {
          key: index,
          selected: _this._getSelected(tab, index)
        }, tab.props.children) : undefined);

        return React.cloneElement(tab, {
          key: index,
          selected: _this._getSelected(tab, index),
          tabIndex: index,
          width: width,
          onTouchTap: _this._handleTabTouchTap
        });
      } else {
        var type = tab.type.displayName || tab.type;
        console.error('Tabs only accepts Tab Components as children. Found ' + type + ' as child number ' + (index + 1) + ' of Tabs');
      }
    }, this);

    var inkBar = this.state.selectedIndex !== -1 ? React.createElement(InkBar, {
      left: left,
      width: width,
      style: inkBarStyle }) : null;

    var inkBarContainerWidth = tabItemContainerStyle ? tabItemContainerStyle.width : '100%';

    return React.createElement(
      'div',
      _extends({}, other, {
        style: this.mergeAndPrefix(style) }),
      React.createElement(
        'div',
        { style: this.mergeAndPrefix(styles.tabItemContainer, tabItemContainerStyle) },
        tabs
      ),
      React.createElement(
        'div',
        { style: { width: inkBarContainerWidth } },
        inkBar
      ),
      React.createElement(
        'div',
        { style: this.mergeAndPrefix(contentContainerStyle) },
        tabContent
      )
    );
  },

  _getSelectedIndex: function _getSelectedIndex(props) {
    var valueLink = this.getValueLink(props);
    var selectedIndex = -1;

    React.Children.forEach(props.children, function (tab, index) {
      if (valueLink.value === tab.props.value) {
        selectedIndex = index;
      }
    });

    return selectedIndex;
  },

  _handleTabTouchTap: function _handleTabTouchTap(value, e, tab) {
    var valueLink = this.getValueLink(this.props);
    var tabIndex = tab.props.tabIndex;

    if (valueLink.value && valueLink.value !== value || this.state.selectedIndex !== tabIndex) {
      valueLink.requestChange(value, e, tab);
    }

    this.setState({ selectedIndex: tabIndex });
    tab.props.onActive(tab);
  },

  _getSelected: function _getSelected(tab, index) {
    var valueLink = this.getValueLink(this.props);
    return valueLink.value ? valueLink.value === tab.props.value : this.state.selectedIndex === index;
  }

});

module.exports = Tabs;
}).call(this,require('_process'))
},{"../ink-bar":41,"../mixins/controllable":55,"../mixins/style-propable":57,"./tabTemplate":104,"_process":2,"react/addons":154}],106:[function(require,module,exports){
(function (process){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react');
var ColorManipulator = require('./utils/color-manipulator');
var StylePropable = require('./mixins/style-propable');
var Transitions = require('./styles/transitions');
var UniqueId = require('./utils/unique-id');
var EnhancedTextarea = require('./enhanced-textarea');

/**
 * Check if a value is valid to be displayed inside an input.
 *
 * @param The value to check.
 * @returns True if the string provided is valid, false otherwise.
 */
function isValid(value) {
  return value || value === 0;
}

var TextField = React.createClass({
  displayName: 'TextField',

  mixins: [StylePropable],

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  propTypes: {
    errorStyle: React.PropTypes.object,
    errorText: React.PropTypes.string,
    floatingLabelStyle: React.PropTypes.object,
    floatingLabelText: React.PropTypes.string,
    fullWidth: React.PropTypes.bool,
    hintText: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.element]),
    id: React.PropTypes.string,
    inputStyle: React.PropTypes.object,
    multiLine: React.PropTypes.bool,
    onBlur: React.PropTypes.func,
    onChange: React.PropTypes.func,
    onEnterKeyDown: React.PropTypes.func,
    onFocus: React.PropTypes.func,
    onKeyDown: React.PropTypes.func,
    rows: React.PropTypes.number,
    type: React.PropTypes.string,
    underlineStyle: React.PropTypes.object,
    underlineFocusStyle: React.PropTypes.object
  },

  getDefaultProps: function getDefaultProps() {
    return {
      fullWidth: false,
      type: 'text',
      rows: 1
    };
  },

  getContextProps: function getContextProps() {
    var theme = this.context.muiTheme;

    return {
      isRtl: theme.isRtl
    };
  },

  getInitialState: function getInitialState() {
    var props = this.props.children ? this.props.children.props : this.props;

    return {
      errorText: this.props.errorText,
      hasValue: isValid(props.value) || isValid(props.defaultValue) || props.valueLink && isValid(props.valueLink.value)
    };
  },

  getTheme: function getTheme() {
    return this.context.muiTheme.component.textField;
  },

  componentDidMount: function componentDidMount() {
    this._uniqueId = UniqueId.generate();
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    var newState = {};

    newState.errorText = nextProps.errorText;
    if (nextProps.children && nextProps.children.props) {
      nextProps = nextProps.children.props;
    }

    var hasValueLinkProp = nextProps.hasOwnProperty('valueLink');
    var hasValueProp = nextProps.hasOwnProperty('value');
    var hasNewDefaultValue = nextProps.defaultValue !== this.props.defaultValue;

    if (hasValueLinkProp) {
      newState.hasValue = isValid(nextProps.valueLink.value);
    } else if (hasValueProp) {
      newState.hasValue = isValid(nextProps.value);
    } else if (hasNewDefaultValue) {
      newState.hasValue = isValid(nextProps.defaultValue);
    }

    if (newState) this.setState(newState);
  },

  getStyles: function getStyles() {
    var props = this.props;
    var theme = this.getTheme();
    var contextProps = this.getContextProps();

    var styles = {
      root: {
        fontSize: 16,
        lineHeight: '24px',
        width: props.fullWidth ? '100%' : 256,
        height: (props.rows - 1) * 24 + (props.floatingLabelText ? 72 : 48),
        display: 'inline-block',
        position: 'relative',
        fontFamily: this.context.muiTheme.contentFontFamily,
        transition: Transitions.easeOut('200ms', 'height')
      },
      error: {
        position: 'relative',
        bottom: 5,
        fontSize: 12,
        lineHeight: '12px',
        color: theme.errorColor,
        transition: Transitions.easeOut()
      },
      hint: {
        position: 'absolute',
        lineHeight: '22px',
        opacity: 1,
        color: theme.hintColor,
        transition: Transitions.easeOut(),
        bottom: 12
      },
      input: {
        tapHighlightColor: 'rgba(0,0,0,0)',
        padding: 0,
        position: 'relative',
        width: '100%',
        height: '100%',
        border: 'none',
        outline: 'none',
        backgroundColor: theme.backgroundColor,
        color: props.disabled ? theme.disabledTextColor : theme.textColor,
        font: 'inherit'
      },
      underline: {
        border: 'none',
        borderBottom: 'solid 1px ' + theme.borderColor,
        position: 'absolute',
        width: '100%',
        bottom: 8,
        margin: 0,
        MozBoxSizing: 'content-box',
        boxSizing: 'content-box',
        height: 0
      },
      underlineAfter: {
        position: 'absolute',
        width: '100%',
        overflow: 'hidden',
        userSelect: 'none',
        cursor: 'default',
        bottom: 8,
        borderBottom: 'dotted 2px ' + theme.disabledTextColor
      },
      underlineFocus: {
        borderBottom: 'solid 2px',
        borderColor: theme.focusColor,
        transform: 'scaleX(0)',
        transition: Transitions.easeOut()
      }
    };

    styles.error = this.mergeAndPrefix(styles.error, props.errorStyle);
    styles.underline = this.mergeAndPrefix(styles.underline, props.underlineStyle);

    styles.floatingLabel = this.mergeStyles(styles.hint, {
      lineHeight: '22px',
      top: 38,
      bottom: 'none',
      opacity: 1,
      transform: 'scale(1) translate3d(0, 0, 0)',
      transformOrigin: contextProps.isRtl ? 'right top' : 'left top'
    });

    styles.textarea = this.mergeStyles(styles.input, {
      marginTop: props.floatingLabelText ? 36 : 12,
      marginBottom: props.floatingLabelText ? -36 : -12,
      boxSizing: 'border-box',
      font: 'inherit'
    });

    styles.focusUnderline = this.mergeStyles(styles.underline, styles.underlineFocus, props.underlineFocusStyle);

    if (this.state.isFocused) {
      styles.floatingLabel.color = theme.focusColor;
      styles.floatingLabel.transform = 'perspective(1px) scale(0.75) translate3d(2px, -28px, 0)';
      styles.focusUnderline.transform = 'scaleX(1)';
    }

    if (this.state.hasValue) {
      styles.floatingLabel.color = ColorManipulator.fade(props.disabled ? theme.disabledTextColor : theme.floatingLabelColor, 0.5);
      styles.floatingLabel.transform = 'perspective(1px) scale(0.75) translate3d(2px, -28px, 0)';
      styles.hint.opacity = 0;
    }

    if (props.floatingLabelText) {
      styles.hint.opacity = 0;
      styles.input.boxSizing = 'border-box';
      if (this.state.isFocused && !this.state.hasValue) styles.hint.opacity = 1;
    }

    if (props.style && props.style.height) {
      styles.hint.lineHeight = props.style.height;
    }

    if (this.state.errorText && this.state.isFocused) styles.floatingLabel.color = styles.error.color;
    if (props.floatingLabelText && !props.multiLine) styles.input.paddingTop = 26;

    if (this.state.errorText) {
      styles.focusUnderline.borderColor = styles.error.color;
      styles.focusUnderline.transform = 'scaleX(1)';
    }

    return styles;
  },

  render: function render() {
    var _props = this.props;
    var className = _props.className;
    var errorStyle = _props.errorStyle;
    var errorText = _props.errorText;
    var floatingLabelText = _props.floatingLabelText;
    var fullWidth = _props.fullWidth;
    var hintText = _props.hintText;
    var id = _props.id;
    var multiLine = _props.multiLine;
    var onBlur = _props.onBlur;
    var onChange = _props.onChange;
    var onFocus = _props.onFocus;
    var type = _props.type;
    var rows = _props.rows;

    var other = _objectWithoutProperties(_props, ['className', 'errorStyle', 'errorText', 'floatingLabelText', 'fullWidth', 'hintText', 'id', 'multiLine', 'onBlur', 'onChange', 'onFocus', 'type', 'rows']);

    var styles = this.getStyles();

    var inputId = id || this._uniqueId;

    var errorTextElement = this.state.errorText ? React.createElement(
      'div',
      { style: styles.error },
      this.state.errorText
    ) : null;

    var hintTextElement = hintText ? React.createElement(
      'div',
      { style: this.mergeAndPrefix(styles.hint) },
      hintText
    ) : null;

    var floatingLabelTextElement = floatingLabelText ? React.createElement(
      'label',
      {
        style: this.mergeAndPrefix(styles.floatingLabel, this.props.floatingLabelStyle),
        htmlFor: inputId },
      floatingLabelText
    ) : null;

    var inputProps = undefined;
    var inputElement = undefined;

    inputProps = {
      id: inputId,
      ref: this._getRef(),
      style: this.mergeAndPrefix(styles.input, this.props.inputStyle),
      onBlur: this._handleInputBlur,
      onFocus: this._handleInputFocus,
      disabled: this.props.disabled,
      onKeyDown: this._handleInputKeyDown
    };

    if (!this.props.hasOwnProperty('valueLink')) {
      inputProps.onChange = this._handleInputChange;
    }
    if (this.props.children) {
      inputElement = React.cloneElement(this.props.children, _extends({}, inputProps, this.props.children.props));
    } else {
      inputElement = multiLine ? React.createElement(EnhancedTextarea, _extends({}, other, inputProps, {
        rows: rows,
        onHeightChange: this._handleTextAreaHeightChange,
        textareaStyle: this.mergeAndPrefix(styles.textarea) })) : React.createElement('input', _extends({}, other, inputProps, {
        type: type }));
    }

    var underlineElement = this.props.disabled ? React.createElement('div', { style: this.mergeAndPrefix(styles.underlineAfter) }) : React.createElement('hr', { style: this.mergeAndPrefix(styles.underline) });
    var focusUnderlineElement = React.createElement('hr', { style: this.mergeAndPrefix(styles.focusUnderline) });

    return React.createElement(
      'div',
      { className: className, style: this.mergeAndPrefix(styles.root, this.props.style) },
      floatingLabelTextElement,
      hintTextElement,
      inputElement,
      underlineElement,
      focusUnderlineElement,
      errorTextElement
    );
  },

  blur: function blur() {
    if (this.isMounted()) this._getInputNode().blur();
  },

  clearValue: function clearValue() {
    this.setValue('');
  },

  focus: function focus() {
    if (this.isMounted()) this._getInputNode().focus();
  },

  getValue: function getValue() {
    return this.isMounted() ? this._getInputNode().value : undefined;
  },

  setErrorText: function setErrorText(newErrorText) {
    if (process.env.NODE_ENV !== 'production' && this.props.hasOwnProperty('errorText')) {
      console.error('Cannot call TextField.setErrorText when errorText is defined as a property.');
    } else if (this.isMounted()) {
      this.setState({ errorText: newErrorText });
    }
  },

  setValue: function setValue(newValue) {
    if (process.env.NODE_ENV !== 'production' && this._isControlled()) {
      console.error('Cannot call TextField.setValue when value or valueLink is defined as a property.');
    } else if (this.isMounted()) {
      if (this.props.multiLine) {
        this.refs[this._getRef()].setValue(newValue);
      } else {
        this._getInputNode().value = newValue;
      }

      this.setState({ hasValue: isValid(newValue) });
    }
  },

  _getRef: function _getRef() {
    return this.props.ref ? this.props.ref : 'input';
  },

  _getInputNode: function _getInputNode() {
    return this.props.children || this.props.multiLine ? this.refs[this._getRef()].getInputNode() : React.findDOMNode(this.refs[this._getRef()]);
  },

  _handleInputBlur: function _handleInputBlur(e) {
    this.setState({ isFocused: false });
    if (this.props.onBlur) this.props.onBlur(e);
  },

  _handleInputChange: function _handleInputChange(e) {
    this.setState({ hasValue: isValid(e.target.value) });
    if (this.props.onChange) this.props.onChange(e);
  },

  _handleInputFocus: function _handleInputFocus(e) {
    if (this.props.disabled) return;
    this.setState({ isFocused: true });
    if (this.props.onFocus) this.props.onFocus(e);
  },

  _handleInputKeyDown: function _handleInputKeyDown(e) {
    if (e.keyCode === 13 && this.props.onEnterKeyDown) this.props.onEnterKeyDown(e);
    if (this.props.onKeyDown) this.props.onKeyDown(e);
  },

  _handleTextAreaHeightChange: function _handleTextAreaHeightChange(e, height) {
    var newHeight = height + 24;
    if (this.props.floatingLabelText) newHeight += 24;
    React.findDOMNode(this).style.height = newHeight + 'px';
  },

  _isControlled: function _isControlled() {
    return this.props.hasOwnProperty('value') || this.props.hasOwnProperty('valueLink');
  }

});

module.exports = TextField;
}).call(this,require('_process'))
},{"./enhanced-textarea":35,"./mixins/style-propable":57,"./styles/transitions":80,"./utils/color-manipulator":129,"./utils/unique-id":142,"_process":2,"react":326}],107:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');
var ThemeManager = require('./styles/theme-manager');

var Theme = React.createClass({
  displayName: 'Theme',

  propTypes: {
    theme: React.PropTypes.object
  },

  childContextTypes: {
    muiTheme: React.PropTypes.object.isRequired,
    muiThemeManager: React.PropTypes.object.isRequired
  },

  getChildContext: function getChildContext() {
    return {
      muiTheme: this.themeManager.getCurrentTheme(),
      muiThemeManager: this.themeManager
    };
  },

  componentWillMount: function componentWillMount() {
    this.themeManager = new ThemeManager();

    if (this.props.theme) {
      this.themeManager.setTheme(this.props.theme);
    }
  },

  render: function render() {
    return this.props.children({
      muiTheme: this.themeManager.getCurrentTheme(),
      muiThemeManager: this.themeManager
    });
  }
});

function getDisplayName(Component) {
  return Component.displayName || Component.name || 'Component';
}

function theme(customTheme) {
  return function (Component) {
    return React.createClass({

      displayName: 'Theme(' + getDisplayName(Component) + ')',

      render: function render() {
        return React.createElement(
          Theme,
          { theme: customTheme },
          (function (props) {
            return React.createElement(Component, _extends({}, this.props, props));
          }).bind(this)
        );
      }
    });
  };
}

module.exports = Theme;
module.exports.theme = theme;
},{"./styles/theme-manager":77,"react":326}],108:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react');
var StylePropable = require('../mixins/style-propable');
var EnhancedButton = require('../enhanced-button');
var Transitions = require('../styles/transitions');

var ClockButton = React.createClass({
  displayName: 'ClockButton',

  mixins: [StylePropable],

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  propTypes: {
    position: React.PropTypes.oneOf(['left', 'right'])
  },

  getDefaultProps: function getDefaultProps() {
    return {
      position: "left"
    };
  },

  _handleTouchTap: function _handleTouchTap() {
    this.setState({
      selected: true
    });
    this.props.onTouchTap();
  },

  getTheme: function getTheme() {
    return this.context.muiTheme.component.timePicker;
  },

  render: function render() {
    var _props = this.props;
    var className = _props.className;

    var other = _objectWithoutProperties(_props, ['className']);

    var styles = {
      root: {
        position: "absolute",
        bottom: 65,
        pointerEvents: "auto",
        height: 50,
        width: 50,
        borderRadius: "100%"
      },

      label: {
        position: "absolute",
        top: 17,
        left: 14
      },

      select: {
        position: 'absolute',
        height: 50,
        width: 50,
        top: 0,
        left: 0,
        opacity: 0,
        borderRadius: '50%',
        transform: 'scale(0)',
        transition: Transitions.easeOut(),
        backgroundColor: this.getTheme().accentColor
      }
    };

    if (this.props.selected) {
      styles.label.color = this.getTheme().selectTextColor;
      styles.select.opacity = 1;
      styles.select.transform = 'scale(1)';
    }

    if (this.props.position === "right") {
      styles.root.right = "5px";
    } else {
      styles.root.left = "5px";
    }

    return React.createElement(
      EnhancedButton,
      _extends({}, other, {
        style: this.mergeAndPrefix(styles.root),
        disableFocusRipple: true,
        disableTouchRipple: true,
        onTouchTap: this._handleTouchTap }),
      React.createElement('span', { style: this.mergeAndPrefix(styles.select) }),
      React.createElement(
        'span',
        { style: this.mergeAndPrefix(styles.label) },
        this.props.children
      )
    );
  }
});

module.exports = ClockButton;
},{"../enhanced-button":33,"../mixins/style-propable":57,"../styles/transitions":80,"react":326}],109:[function(require,module,exports){
'use strict';

var React = require('react');
var StylePropable = require('../mixins/style-propable');
var ClockNumber = require("./clock-number");
var ClockPointer = require("./clock-pointer");

function rad2deg(rad) {
  return rad * 57.29577951308232;
}

function getTouchEventOffsetValues(e) {
  var el = e.target;
  var boundingRect = el.getBoundingClientRect();

  var offset = {
    offsetX: e.clientX - boundingRect.left,
    offsetY: e.clientY - boundingRect.top
  };

  return offset;
}

var ClockHours = React.createClass({
  displayName: 'ClockHours',

  mixins: [StylePropable],

  propTypes: {
    initialHours: React.PropTypes.number,
    onChange: React.PropTypes.func,
    format: React.PropTypes.oneOf(['ampm', '24hr'])
  },

  center: { x: 0, y: 0 },
  basePoint: { x: 0, y: 0 },

  isMousePressed: function isMousePressed(e) {
    if (typeof e.buttons === "undefined") {
      return e.nativeEvent.which;
    }

    return e.buttons;
  },

  getDefaultProps: function getDefaultProps() {
    return {
      initialHours: new Date().getHours(),
      onChange: function onChange() {},
      format: 'ampm'
    };
  },

  componentDidMount: function componentDidMount() {
    var clockElement = React.findDOMNode(this.refs.mask);

    this.center = {
      x: clockElement.offsetWidth / 2,
      y: clockElement.offsetHeight / 2
    };

    this.basePoint = {
      x: this.center.x,
      y: 0
    };
  },

  handleUp: function handleUp(e) {
    e.preventDefault();
    this.setClock(e.nativeEvent, true);
  },

  handleMove: function handleMove(e) {
    e.preventDefault();
    if (this.isMousePressed(e) !== 1) return;
    this.setClock(e.nativeEvent, false);
  },

  handleTouchMove: function handleTouchMove(e) {
    e.preventDefault();
    this.setClock(e.changedTouches[0], false);
  },

  handleTouchEnd: function handleTouchEnd(e) {
    e.preventDefault();
    this.setClock(e.changedTouches[0], true);
  },

  setClock: function setClock(e, finish) {
    if (typeof e.offsetX === 'undefined') {
      var offset = getTouchEventOffsetValues(e);

      e.offsetX = offset.offsetX;
      e.offsetY = offset.offsetY;
    }

    var hours = this.getHours(e.offsetX, e.offsetY);

    this.props.onChange(hours, finish);
  },

  getHours: function getHours(offsetX, offsetY) {
    var step = 30;
    var x = offsetX - this.center.x;
    var y = offsetY - this.center.y;
    var cx = this.basePoint.x - this.center.x;
    var cy = this.basePoint.y - this.center.y;

    var atan = Math.atan2(cx, cy) - Math.atan2(x, y);

    var deg = rad2deg(atan);
    deg = Math.round(deg / step) * step;
    deg %= 360;

    var value = Math.floor(deg / step) || 0;

    var delta = Math.pow(x, 2) + Math.pow(y, 2);
    var distance = Math.sqrt(delta);

    value = value || 12;
    if (this.props.format === "24hr") {
      if (distance < 90) {
        value += 12;
        value %= 24;
      }
    } else {
      value %= 12;
    }

    return value;
  },

  _getSelected: function _getSelected() {
    var hour = this.props.initialHours;

    if (this.props.format === "ampm") {
      hour %= 12;
      hour = hour || 12;
    }

    return hour;
  },

  _getHourNumbers: function _getHourNumbers() {
    var _this = this;

    var style = {
      pointerEvents: "none"
    };
    var hourSize = this.props.format === 'ampm' ? 12 : 24;

    var hours = [];
    for (var i = 1; i <= hourSize; i++) {
      hours.push(i % 24);
    }

    return hours.map(function (hour) {
      var isSelected = _this._getSelected() === hour;
      return React.createElement(ClockNumber, { key: hour, style: style, isSelected: isSelected, type: 'hour',
        value: hour });
    });
  },

  render: function render() {
    var styles = {
      root: {
        height: "100%",
        width: "100%",
        borderRadius: "100%",
        position: "relative",
        pointerEvents: "none",
        boxSizing: "border-box"
      },

      hitMask: {
        height: "100%",
        width: "100%",
        pointerEvents: "auto"
      }
    };

    var hours = this._getSelected();
    var numbers = this._getHourNumbers();

    return React.createElement(
      'div',
      { ref: 'clock', style: this.mergeAndPrefix(styles.root) },
      React.createElement(ClockPointer, { hasSelected: true, value: hours, type: 'hour' }),
      numbers,
      React.createElement('div', { ref: 'mask', style: this.mergeAndPrefix(styles.hitMask), onTouchMove: this.handleTouchMove,
        onTouchEnd: this.handleTouchEnd, onMouseUp: this.handleUp, onMouseMove: this.handleMove })
    );
  }
});

module.exports = ClockHours;
},{"../mixins/style-propable":57,"./clock-number":111,"./clock-pointer":112,"react":326}],110:[function(require,module,exports){
'use strict';

var React = require('react');
var StylePropable = require('../mixins/style-propable');
var ClockNumber = require("./clock-number");
var ClockPointer = require("./clock-pointer");

function rad2deg(rad) {
  return rad * 57.29577951308232;
}

function getTouchEventOffsetValues(e) {
  var el = e.target;
  var boundingRect = el.getBoundingClientRect();

  var offset = {
    offsetX: e.clientX - boundingRect.left,
    offsetY: e.clientY - boundingRect.top
  };

  return offset;
}

var ClockMinutes = React.createClass({
  displayName: 'ClockMinutes',

  mixins: [StylePropable],

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  propTypes: {
    initialMinutes: React.PropTypes.number,
    onChange: React.PropTypes.func
  },

  center: { x: 0, y: 0 },
  basePoint: { x: 0, y: 0 },

  isMousePressed: function isMousePressed(e) {

    if (typeof e.buttons === "undefined") {
      return e.nativeEvent.which;
    }
    return e.buttons;
  },

  getDefaultProps: function getDefaultProps() {
    return {
      initialMinutes: new Date().getMinutes(),
      onChange: function onChange() {}
    };
  },

  componentDidMount: function componentDidMount() {
    var clockElement = React.findDOMNode(this.refs.mask);

    this.center = {
      x: clockElement.offsetWidth / 2,
      y: clockElement.offsetHeight / 2
    };

    this.basePoint = {
      x: this.center.x,
      y: 0
    };
  },

  handleUp: function handleUp(e) {
    e.preventDefault();
    this.setClock(e.nativeEvent, true);
  },

  handleMove: function handleMove(e) {
    e.preventDefault();
    if (this.isMousePressed(e) !== 1) return;
    this.setClock(e.nativeEvent, false);
  },

  handleTouch: function handleTouch(e) {
    e.preventDefault();
    this.setClock(e.changedTouches[0], false);
  },

  setClock: function setClock(e, finish) {
    if (typeof e.offsetX === 'undefined') {
      var offset = getTouchEventOffsetValues(e);

      e.offsetX = offset.offsetX;
      e.offsetY = offset.offsetY;
    }

    var minutes = this.getMinutes(e.offsetX, e.offsetY);

    this.props.onChange(minutes, finish);
  },

  getMinutes: function getMinutes(offsetX, offsetY) {
    var step = 6;
    var x = offsetX - this.center.x;
    var y = offsetY - this.center.y;
    var cx = this.basePoint.x - this.center.x;
    var cy = this.basePoint.y - this.center.y;

    var atan = Math.atan2(cx, cy) - Math.atan2(x, y);

    var deg = rad2deg(atan);
    deg = Math.round(deg / step) * step;
    deg %= 360;

    var value = Math.floor(deg / step) || 0;

    return value;
  },

  _getMinuteNumbers: function _getMinuteNumbers() {
    var minutes = [];
    for (var i = 0; i < 12; i++) {
      minutes.push(i * 5);
    }
    var selectedMinutes = this.props.initialMinutes;
    var hasSelected = false;

    var numbers = minutes.map(function (minute) {
      var isSelected = selectedMinutes === minute;
      if (isSelected) hasSelected = true;
      return React.createElement(ClockNumber, { key: minute, isSelected: isSelected, type: 'minute', value: minute });
    });

    return {
      numbers: numbers,
      hasSelected: hasSelected,
      selected: selectedMinutes
    };
  },

  render: function render() {
    var styles = {
      root: {
        height: "100%",
        width: "100%",
        borderRadius: "100%",
        position: "relative",
        pointerEvents: "none",
        boxSizing: "border-box"
      },

      hitMask: {
        height: "100%",
        width: "100%",
        pointerEvents: "auto"
      }
    };

    var minutes = this._getMinuteNumbers();

    return React.createElement(
      'div',
      { ref: 'clock', style: this.mergeAndPrefix(styles.root) },
      React.createElement(ClockPointer, { value: minutes.selected, type: 'minute' }),
      minutes.numbers,
      React.createElement('div', { ref: 'mask', style: this.mergeAndPrefix(styles.hitMask), hasSelected: minutes.hasSelected,
        onTouchMove: this.handleTouch, onTouchEnd: this.handleTouch,
        onMouseUp: this.handleUp, onMouseMove: this.handleMove })
    );
  }
});

module.exports = ClockMinutes;
},{"../mixins/style-propable":57,"./clock-number":111,"./clock-pointer":112,"react":326}],111:[function(require,module,exports){
'use strict';

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

var React = require('react');
var StylePropable = require('../mixins/style-propable');

var ClockNumber = React.createClass({
  displayName: 'ClockNumber',

  mixins: [StylePropable],

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  propTypes: {
    value: React.PropTypes.number,
    type: React.PropTypes.oneOf(['hour', 'minute']),
    onSelected: React.PropTypes.func,
    isSelected: React.PropTypes.bool
  },

  getDefaultProps: function getDefaultProps() {
    return {
      value: 0,
      type: 'minute',
      isSelected: false
    };
  },

  getTheme: function getTheme() {
    return this.context.muiTheme.component.timePicker;
  },

  render: function render() {
    var pos = this.props.value;
    var inner = false;

    if (this.props.type === "hour") {
      inner = pos < 1 || pos > 12;
      pos %= 12;
    } else {
      pos = pos / 5;
    }

    var positions = [[0, 5], [54.5, 16.6], [94.4, 59.5], [109, 114], [94.4, 168.5], [54.5, 208.4], [0, 223], [-54.5, 208.4], [-94.4, 168.5], [-109, 114], [-94.4, 59.5], [-54.5, 19.6]];

    var innerPositions = [[0, 40], [36.9, 49.9], [64, 77], [74, 114], [64, 151], [37, 178], [0, 188], [-37, 178], [-64, 151], [-74, 114], [-64, 77], [-37, 50]];

    var styles = {
      root: {
        display: "inline-block",
        position: "absolute",
        width: 32,
        height: 32,
        borderRadius: "100%",
        left: 'calc(50% - 16px)',
        top: 10,
        textAlign: "center",
        paddingTop: 5,
        userSelect: "none", /* Chrome all / Safari all */
        fontSize: "1.1em",
        pointerEvents: "none",
        boxSizing: "border-box"
      }
    };

    if (this.props.isSelected) {
      styles.root.backgroundColor = this.getTheme().accentColor;
      styles.root.color = this.getTheme().selectTextColor;
    }

    var transformPos = positions[pos];

    if (inner) {
      styles.root.width = "28px";
      styles.root.height = "28px";
      styles.root.left = 'calc(50% - 14px)';
      transformPos = innerPositions[pos];
    }

    var _transformPos = transformPos;

    var _transformPos2 = _slicedToArray(_transformPos, 2);

    var x = _transformPos2[0];
    var y = _transformPos2[1];

    styles.root.transform = "translate(" + x + "px, " + y + "px)";

    return React.createElement(
      'span',
      { style: this.mergeAndPrefix(styles.root) },
      this.props.value
    );
  }
});

module.exports = ClockNumber;
},{"../mixins/style-propable":57,"react":326}],112:[function(require,module,exports){
'use strict';

var React = require('react');
var StylePropable = require('../mixins/style-propable');

var ClockPointer = React.createClass({
  displayName: 'ClockPointer',

  mixins: [StylePropable],

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  propTypes: {
    value: React.PropTypes.number,
    type: React.PropTypes.oneOf(['hour', 'minute'])
  },

  getInitialState: function getInitialState() {
    return {
      inner: this.isInner(this.props.value)
    };
  },

  getDefaultProps: function getDefaultProps() {
    return {
      value: null,
      type: 'minute',
      hasSelected: false
    };
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    this.setState({
      inner: this.isInner(nextProps.value)
    });
  },

  isInner: function isInner(value) {
    if (this.props.type !== "hour") {
      return false;
    }
    return value < 1 || value > 12;
  },

  getAngle: function getAngle() {
    if (this.props.type === "hour") {
      return this.calcAngle(this.props.value, 12);
    }

    return this.calcAngle(this.props.value, 60);
  },

  calcAngle: function calcAngle(value, base) {
    value %= base;
    var angle = 360 / base * value;
    return angle;
  },

  getTheme: function getTheme() {
    return this.context.muiTheme.component.timePicker;
  },

  render: function render() {
    if (this.props.value === null) {
      return React.createElement('span', null);
    }

    var angle = this.getAngle();

    var styles = {
      root: {
        height: "30%",
        background: this.getTheme().accentColor,
        width: 2,
        left: 'calc(50% - 1px)',
        position: "absolute",
        bottom: "50%",
        transformOrigin: "bottom",
        pointerEvents: "none",
        transform: "rotateZ(" + angle + "deg)"
      },
      mark: {
        background: this.getTheme().selectTextColor,
        border: "4px solid " + this.getTheme().accentColor,
        width: 7,
        height: 7,
        position: "absolute",
        top: -5,
        left: -6,
        borderRadius: "100%"
      }
    };

    if (!this.state.inner) {
      styles.root.height = "40%";
    }

    if (this.props.hasSelected) {
      styles.mark.display = "none";
    }

    return React.createElement(
      'div',
      { style: this.mergeAndPrefix(styles.root) },
      React.createElement('div', { style: styles.mark })
    );
  }
});

module.exports = ClockPointer;
},{"../mixins/style-propable":57,"react":326}],113:[function(require,module,exports){
'use strict';

var React = require('react');
var StylePropable = require('../mixins/style-propable');
var TimeDisplay = require("./time-display");
var ClockButton = require("./clock-button");
var ClockHours = require("./clock-hours");
var ClockMinutes = require("./clock-minutes");

var Clock = React.createClass({
  displayName: 'Clock',

  mixins: [StylePropable],

  propTypes: {
    initialTime: React.PropTypes.object,
    mode: React.PropTypes.oneOf(['hour', 'minute']),
    format: React.PropTypes.oneOf(['ampm', '24hr']),
    isActive: React.PropTypes.bool
  },

  getDefaultProps: function getDefaultProps() {
    return {
      initialTime: new Date()
    };
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    this.setState({
      selectedTime: nextProps.initialTime
    });
  },

  getInitialState: function getInitialState() {
    return {
      selectedTime: this.props.initialTime,
      mode: 'hour'
    };
  },

  _setMode: function _setMode(mode) {
    var _this = this;

    setTimeout(function () {
      _this.setState({
        mode: mode
      });
    }, 100);
  },

  _setAffix: function _setAffix(affix) {
    if (affix === this._getAffix()) return;

    var hours = this.state.selectedTime.getHours();

    if (affix === "am") {
      this.handleChangeHours(hours - 12, affix);
      return;
    }

    this.handleChangeHours(hours + 12, affix);
  },

  _getAffix: function _getAffix() {
    if (this.props.format !== "ampm") return "";

    var hours = this.state.selectedTime.getHours();
    if (hours < 12) {
      return "am";
    }

    return "pm";
  },

  _getButtons: function _getButtons() {
    var buttons = [];
    var isAM = this._getIsAM();

    if (this.props.format === 'ampm') {
      buttons = [React.createElement(
        ClockButton,
        { position: 'left', onTouchTap: this._setAffix.bind(this, "am"), selected: isAM },
        "AM"
      ), React.createElement(
        ClockButton,
        { position: 'right', onTouchTap: this._setAffix.bind(this, "pm"), selected: !isAM },
        "PM"
      )];
    }
    return buttons;
  },

  _getIsAM: function _getIsAM() {
    return this._getAffix() === "am";
  },

  render: function render() {
    var clock = null;
    var buttons = this._getButtons();

    var styles = {
      root: {},

      container: {
        height: 280,
        padding: 10
      }
    };

    if (this.state.mode === "hour") {
      clock = React.createElement(ClockHours, { key: 'hours',
        format: this.props.format,
        onChange: this.handleChangeHours,
        initialHours: this.state.selectedTime.getHours() });
    } else {
      clock = React.createElement(ClockMinutes, { key: 'minutes',
        onChange: this.handleChangeMinutes,
        initialMinutes: this.state.selectedTime.getMinutes() });
    }

    return React.createElement(
      'div',
      { style: styles.root },
      React.createElement(TimeDisplay, {
        selectedTime: this.state.selectedTime,
        mode: this.state.mode,
        format: this.props.format,
        affix: this._getAffix(),
        onSelectHour: this._setMode.bind(this, 'hour'),
        onSelectMin: this._setMode.bind(this, 'minute') }),
      React.createElement(
        'div',
        { style: styles.container },
        clock
      ),
      buttons
    );
  },

  handleChangeHours: function handleChangeHours(hours, finished) {
    var _this2 = this;

    var time = new Date(this.state.selectedTime);
    var affix = undefined;

    if (typeof finished === 'string') {
      affix = finished;
      finished = undefined;
    }
    if (!affix) {
      affix = this._getAffix();
    }
    if (affix === 'pm' && hours < 12) {
      hours += 12;
    }

    time.setHours(hours);
    this.setState({
      selectedTime: time
    });

    if (finished) {
      setTimeout(function () {
        _this2.setState({
          mode: 'minute'
        });
      }, 100);
    }
  },

  handleChangeMinutes: function handleChangeMinutes(minutes) {
    var time = new Date(this.state.selectedTime);
    time.setMinutes(minutes);
    this.setState({
      selectedTime: time
    });
  },

  getSelectedTime: function getSelectedTime() {
    return this.state.selectedTime;
  }
});

module.exports = Clock;
},{"../mixins/style-propable":57,"./clock-button":108,"./clock-hours":109,"./clock-minutes":110,"./time-display":115,"react":326}],114:[function(require,module,exports){
'use strict';

module.exports = require('./time-picker');
},{"./time-picker":117}],115:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react');
var StylePropable = require('../mixins/style-propable');

var TimeDisplay = React.createClass({
  displayName: 'TimeDisplay',

  mixins: [StylePropable],

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  propTypes: {
    selectedTime: React.PropTypes.object.isRequired,
    format: React.PropTypes.oneOf(['ampm', '24hr']),
    mode: React.PropTypes.oneOf(['hour', 'minute']),
    affix: React.PropTypes.oneOf(['', 'pm', 'am'])
  },

  getInitialState: function getInitialState() {
    return {
      transitionDirection: 'up'
    };
  },

  getDefaultProps: function getDefaultProps() {
    return {
      mode: 'hour',
      affix: ''
    };
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    var direction = undefined;

    if (nextProps.selectedTime !== this.props.selectedTime) {
      direction = nextProps.selectedTime > this.props.selectedTime ? 'up' : 'down';

      this.setState({
        transitionDirection: direction
      });
    }
  },

  sanitizeTime: function sanitizeTime() {
    var hour = this.props.selectedTime.getHours();
    var min = this.props.selectedTime.getMinutes().toString();

    if (this.props.format === "ampm") {
      hour %= 12;
      hour = hour || 12;
    }

    hour = hour.toString();
    if (hour.length < 2) hour = "0" + hour;
    if (min.length < 2) min = "0" + min;

    return [hour, min];
  },

  getTheme: function getTheme() {
    return this.context.muiTheme.component.timePicker;
  },

  render: function render() {
    var _props = this.props;
    var selectedTime = _props.selectedTime;
    var mode = _props.mode;

    var other = _objectWithoutProperties(_props, ['selectedTime', 'mode']);

    var styles = {
      root: {
        textAlign: "center",
        position: "relative",
        width: 280,
        height: "100%"
      },

      time: {
        margin: "6px 0",
        lineHeight: "58px",
        height: 58,
        fontSize: "58px"
      },

      box: {
        padding: "16px 0",
        backgroundColor: this.getTheme().color,
        color: this.getTheme().textColor
      },

      hour: {},

      minute: {}
    };

    var _sanitizeTime = this.sanitizeTime();

    var _sanitizeTime2 = _slicedToArray(_sanitizeTime, 2);

    var hour = _sanitizeTime2[0];
    var min = _sanitizeTime2[1];

    styles[mode].color = this.getTheme().accentColor;

    return React.createElement(
      'div',
      _extends({}, other, { style: this.mergeAndPrefix(styles.root) }),
      React.createElement(
        'div',
        { style: this.mergeAndPrefix(styles.box) },
        React.createElement(
          'div',
          { style: this.mergeAndPrefix(styles.time) },
          React.createElement(
            'span',
            { style: this.mergeAndPrefix(styles.hour), onTouchTap: this.props.onSelectHour },
            hour
          ),
          React.createElement(
            'span',
            null,
            ':'
          ),
          React.createElement(
            'span',
            { style: this.mergeAndPrefix(styles.minute), onTouchTap: this.props.onSelectMin },
            min
          )
        ),
        React.createElement(
          'span',
          { key: "affix" },
          this.props.affix.toUpperCase()
        )
      )
    );
  }

});

module.exports = TimeDisplay;
},{"../mixins/style-propable":57,"react":326}],116:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react');
var StylePropable = require('../mixins/style-propable');
var WindowListenable = require('../mixins/window-listenable');
var KeyCode = require('../utils/key-code');
var Clock = require('./clock');
var Dialog = require('../dialog');
var FlatButton = require('../flat-button');

var TimePickerDialog = React.createClass({
  displayName: 'TimePickerDialog',

  mixins: [StylePropable, WindowListenable],

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  propTypes: {
    initialTime: React.PropTypes.object,
    onAccept: React.PropTypes.func,
    onShow: React.PropTypes.func,
    onDismiss: React.PropTypes.func
  },

  windowListeners: {
    keyup: '_handleWindowKeyUp'
  },

  getTheme: function getTheme() {
    return this.context.muiTheme.component.timePicker;
  },

  render: function render() {
    var _props = this.props;
    var initialTime = _props.initialTime;
    var onAccept = _props.onAccept;
    var format = _props.format;

    var other = _objectWithoutProperties(_props, ['initialTime', 'onAccept', 'format']);

    var styles = {
      root: {
        fontSize: 14,
        color: this.getTheme().clockColor
      },
      dialogContent: {
        width: 280
      },
      body: {
        padding: 0
      }
    };

    var actions = [React.createElement(FlatButton, {
      key: 0,
      label: 'Cancel',
      secondary: true,
      onTouchTap: this._handleCancelTouchTap }), React.createElement(FlatButton, {
      key: 1,
      label: 'OK',
      secondary: true,
      onTouchTap: this._handleOKTouchTap })];

    return React.createElement(
      Dialog,
      _extends({}, other, {
        ref: 'dialogWindow',
        style: this.mergeAndPrefix(styles.root),
        bodyStyle: this.mergeAndPrefix(styles.body),
        actions: actions,
        contentStyle: styles.dialogContent,
        onDismiss: this._handleDialogDismiss,
        onShow: this._handleDialogShow,
        repositionOnUpdate: false }),
      React.createElement(Clock, {
        ref: 'clock',
        format: format,
        initialTime: initialTime })
    );
  },

  show: function show() {
    this.refs.dialogWindow.show();
  },

  dismiss: function dismiss() {
    this.refs.dialogWindow.dismiss();
  },

  _handleCancelTouchTap: function _handleCancelTouchTap() {
    this.dismiss();
  },

  _handleOKTouchTap: function _handleOKTouchTap() {
    this.dismiss();
    if (this.props.onAccept) {
      this.props.onAccept(this.refs.clock.getSelectedTime());
    }
  },

  _handleDialogShow: function _handleDialogShow() {
    if (this.props.onShow) {
      this.props.onShow();
    }
  },

  _handleDialogDismiss: function _handleDialogDismiss() {
    if (this.props.onDismiss) {
      this.props.onDismiss();
    }
  },

  _handleWindowKeyUp: function _handleWindowKeyUp(e) {
    if (this.refs.dialogWindow.isOpen()) {
      switch (e.keyCode) {
        case KeyCode.ENTER:
          this._handleOKTouchTap();
          break;
      }
    }
  }

});

module.exports = TimePickerDialog;
},{"../dialog":30,"../flat-button":36,"../mixins/style-propable":57,"../mixins/window-listenable":59,"../utils/key-code":137,"./clock":113,"react":326}],117:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react');
var StylePropable = require('../mixins/style-propable');
var WindowListenable = require('../mixins/window-listenable');
var TimePickerDialog = require('./time-picker-dialog');
var TextField = require('../text-field');

var emptyTime = new Date();
emptyTime.setHours(0);
emptyTime.setMinutes(0);

var TimePicker = React.createClass({
  displayName: 'TimePicker',

  mixins: [StylePropable, WindowListenable],

  propTypes: {
    defaultTime: React.PropTypes.object,
    format: React.PropTypes.oneOf(['ampm', '24hr']),
    pedantic: React.PropTypes.bool,
    onFocus: React.PropTypes.func,
    onTouchTap: React.PropTypes.func,
    onChange: React.PropTypes.func,
    onShow: React.PropTypes.func,
    onDismiss: React.PropTypes.func
  },

  windowListeners: {
    'keyup': '_handleWindowKeyUp'
  },

  getDefaultProps: function getDefaultProps() {
    return {
      defaultTime: null,
      format: 'ampm',
      pedantic: false
    };
  },

  getInitialState: function getInitialState() {
    return {
      time: this.props.defaultTime || emptyTime,
      dialogTime: new Date()
    };
  },

  formatTime: function formatTime(date) {
    var hours = date.getHours();
    var mins = date.getMinutes().toString();

    if (this.props.format === "ampm") {
      var isAM = hours < 12;
      hours = hours % 12;
      var additional = isAM ? " am" : " pm";
      hours = (hours || 12).toString();

      if (mins.length < 2) mins = "0" + mins;

      if (this.props.pedantic) {
        // Treat midday/midnight specially http://www.nist.gov/pml/div688/times.cfm
        if (hours === "12" && mins === "00") {
          return additional === " pm" ? "12 noon" : "12 midnight";
        }
      }

      return hours + (mins === "00" ? "" : ":" + mins) + additional;
    }

    hours = hours.toString();

    if (hours.length < 2) hours = "0" + hours;
    if (mins.length < 2) mins = "0" + mins;

    return hours + ":" + mins;
  },

  render: function render() {
    var _props = this.props;
    var format = _props.format;
    var onFocus = _props.onFocus;
    var onTouchTap = _props.onTouchTap;
    var onShow = _props.onShow;
    var onDismiss = _props.onDismiss;

    var other = _objectWithoutProperties(_props, ['format', 'onFocus', 'onTouchTap', 'onShow', 'onDismiss']);

    var defaultInputValue = undefined;

    if (this.props.defaultTime) {
      defaultInputValue = this.formatTime(this.props.defaultTime);
    }

    return React.createElement(
      'div',
      null,
      React.createElement(TextField, _extends({}, other, {
        ref: 'input',
        defaultValue: defaultInputValue,
        onFocus: this._handleInputFocus,
        onTouchTap: this._handleInputTouchTap })),
      React.createElement(TimePickerDialog, {
        ref: 'dialogWindow',
        initialTime: this.state.dialogTime,
        onAccept: this._handleDialogAccept,
        onShow: onShow,
        onDismiss: onDismiss,
        format: format })
    );
  },

  getTime: function getTime() {
    return this.state.time;
  },

  setTime: function setTime(t) {
    this.setState({
      time: t
    });
    this.refs.input.setValue(this.formatTime(t));
  },

  _handleDialogAccept: function _handleDialogAccept(t) {
    this.setTime(t);
    if (this.props.onChange) this.props.onChange(null, t);
  },

  _handleInputFocus: function _handleInputFocus(e) {
    e.target.blur();
    if (this.props.onFocus) this.props.onFocus(e);
  },

  _handleInputTouchTap: function _handleInputTouchTap(e) {
    e.preventDefault();

    this.setState({
      dialogTime: this.getTime()
    });

    this.refs.dialogWindow.show();
    if (this.props.onTouchTap) this.props.onTouchTap(e);
  }
});

module.exports = TimePicker;
},{"../mixins/style-propable":57,"../mixins/window-listenable":59,"../text-field":106,"./time-picker-dialog":116,"react":326}],118:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react');
var StylePropable = require('./mixins/style-propable');
var Transitions = require('./styles/transitions');
var Paper = require('./paper');
var EnhancedSwitch = require('./enhanced-switch');

var Toggle = React.createClass({
  displayName: 'Toggle',

  mixins: [StylePropable],

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  propTypes: {
    elementStyle: React.PropTypes.object,
    labelStyle: React.PropTypes.object,
    onToggle: React.PropTypes.func,
    toggled: React.PropTypes.bool,
    defaultToggled: React.PropTypes.bool
  },

  getInitialState: function getInitialState() {
    return {
      switched: this.props.toggled || this.props.defaultToggled || this.props.valueLink && this.props.valueLink.value || false
    };
  },

  getTheme: function getTheme() {
    return this.context.muiTheme.component.toggle;
  },

  getStyles: function getStyles() {
    var toggleSize = 20;
    var toggleTrackWidth = 36;
    var styles = {
      icon: {
        width: 36,
        padding: '4px 0px 6px 2px'
      },
      toggleElement: {
        width: toggleTrackWidth
      },
      track: {
        transition: Transitions.easeOut(),
        width: '100%',
        height: 14,
        borderRadius: 30,
        backgroundColor: this.getTheme().trackOffColor
      },
      thumb: {
        transition: Transitions.easeOut(),
        position: 'absolute',
        top: 1,
        left: 0,
        width: toggleSize,
        height: toggleSize,
        lineHeight: '24px',
        borderRadius: '50%',
        backgroundColor: this.getTheme().thumbOffColor
      },
      trackWhenSwitched: {
        backgroundColor: this.getTheme().trackOnColor
      },
      thumbWhenSwitched: {
        backgroundColor: this.getTheme().thumbOnColor,
        left: '100%'
      },
      trackWhenDisabled: {
        backgroundColor: this.getTheme().trackDisabledColor
      },
      thumbWhenDisabled: {
        backgroundColor: this.getTheme().thumbDisabledColor
      },
      label: {
        color: this.props.disabled ? this.getTheme().labelDisabledColor : this.getTheme().labelColor
      }
    };

    return styles;
  },

  render: function render() {
    var _props = this.props;
    var onToggle = _props.onToggle;

    var other = _objectWithoutProperties(_props, ['onToggle']);

    var styles = this.getStyles();

    var trackStyles = this.mergeAndPrefix(styles.track, this.props.trackStyle, this.state.switched && styles.trackWhenSwitched, this.props.disabled && styles.trackWhenDisabled);

    var thumbStyles = this.mergeAndPrefix(styles.thumb, this.props.thumbStyle, this.state.switched && styles.thumbWhenSwitched, this.props.disabled && styles.thumbWhenDisabled);

    if (this.state.switched) {
      thumbStyles.marginLeft = '-' + thumbStyles.width;
    }

    var toggleElementStyles = this.mergeAndPrefix(styles.toggleElement, this.props.elementStyle);

    var toggleElement = React.createElement(
      'div',
      { style: toggleElementStyles },
      React.createElement('div', { style: trackStyles }),
      React.createElement(Paper, { style: thumbStyles, circle: true, zDepth: 1 })
    );

    var customRippleStyle = this.mergeAndPrefix({
      top: -10,
      left: -10
    }, this.props.rippleStyle);

    var rippleColor = this.state.switched ? this.getTheme().thumbOnColor : this.context.muiTheme.component.textColor;

    var iconStyle = this.mergeAndPrefix(styles.icon, this.props.iconStyle);

    var labelStyle = this.mergeAndPrefix(styles.label, this.props.labelStyle);

    var enhancedSwitchProps = {
      ref: "enhancedSwitch",
      inputType: "checkbox",
      switchElement: toggleElement,
      rippleStyle: customRippleStyle,
      rippleColor: rippleColor,
      iconStyle: iconStyle,
      trackStyle: trackStyles,
      thumbStyle: thumbStyles,
      labelStyle: labelStyle,
      switched: this.state.switched,
      onSwitch: this._handleToggle,
      onParentShouldUpdate: this._handleStateChange,
      defaultSwitched: this.props.defaultToggled,
      labelPosition: this.props.labelPosition ? this.props.labelPosition : "left"
    };

    if (this.props.hasOwnProperty('toggled')) enhancedSwitchProps.checked = this.props.toggled;

    return React.createElement(EnhancedSwitch, _extends({}, other, enhancedSwitchProps));
  },

  isToggled: function isToggled() {
    return this.refs.enhancedSwitch.isSwitched();
  },

  setToggled: function setToggled(newToggledValue) {
    this.refs.enhancedSwitch.setSwitched(newToggledValue);
  },

  _handleToggle: function _handleToggle(e, isInputChecked) {
    if (this.props.onToggle) this.props.onToggle(e, isInputChecked);
  },

  _handleStateChange: function _handleStateChange(newSwitched) {
    this.setState({ switched: newSwitched });
  }

});

module.exports = Toggle;
},{"./enhanced-switch":34,"./mixins/style-propable":57,"./paper":61,"./styles/transitions":80,"react":326}],119:[function(require,module,exports){
'use strict';

var React = require('react');
var Colors = require('../styles/colors');
var StylePropable = require('../mixins/style-propable');

var ToolbarGroup = React.createClass({
  displayName: 'ToolbarGroup',

  mixins: [StylePropable],

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  propTypes: {
    className: React.PropTypes.string,
    float: React.PropTypes.string
  },

  getDefaultProps: function getDefaultProps() {
    return {
      float: 'left'
    };
  },

  getTheme: function getTheme() {
    return this.context.muiTheme.component.toolbar;
  },

  getSpacing: function getSpacing() {
    return this.context.muiTheme.spacing.desktopGutter;
  },

  getStyles: function getStyles() {
    var marginHorizontal = this.getSpacing();
    var marginVertical = (this.getTheme().height - this.context.muiTheme.component.button.height) / 2;
    var styles = {
      root: {
        position: 'relative',
        float: this.props.float
      },
      dropDownMenu: {
        root: {
          float: 'left',
          color: Colors.lightBlack, // removes hover color change, we want to keep it
          display: 'inline-block',
          marginRight: this.getSpacing()
        },
        controlBg: {
          backgroundColor: this.getTheme().menuHoverColor,
          borderRadius: 0
        },
        underline: {
          display: 'none'
        }
      },
      button: {
        float: 'left',
        margin: marginVertical + 'px ' + marginHorizontal + 'px',
        position: 'relative'
      },
      icon: {
        root: {
          float: 'left',
          cursor: 'pointer',
          color: this.getTheme().iconColor,
          lineHeight: this.getTheme().height + 'px',
          paddingLeft: this.getSpacing()
        },
        hover: {
          color: Colors.darkBlack
        }
      },
      span: {
        float: 'left',
        color: this.getTheme().iconColor,
        lineHeight: this.getTheme().height + 'px'
      }
    };

    return styles;
  },

  render: function render() {
    var _this = this;

    var styles = this.getStyles();

    if (this.props.firstChild) styles.marginLeft = -24;
    if (this.props.lastChild) styles.marginRight = -24;

    var newChildren = React.Children.map(this.props.children, function (currentChild) {
      if (!currentChild) {
        return null;
      }
      switch (currentChild.type.displayName) {
        case 'DropDownMenu':
          return React.cloneElement(currentChild, {
            style: _this.mergeStyles(styles.dropDownMenu.root, currentChild.props.style),
            styleControlBg: styles.dropDownMenu.controlBg,
            styleUnderline: styles.dropDownMenu.underline
          });
        case 'DropDownIcon':
          return React.cloneElement(currentChild, {
            style: _this.mergeStyles({ float: 'left' }, currentChild.props.style),
            iconStyle: styles.icon.root,
            onMouseEnter: _this._handleMouseEnterDropDownMenu,
            onMouseLeave: _this._handleMouseLeaveDropDownMenu
          });
        case 'RaisedButton':case 'FlatButton':
          return React.cloneElement(currentChild, {
            style: _this.mergeStyles(styles.button, currentChild.props.style)
          });
        case 'FontIcon':
          return React.cloneElement(currentChild, {
            style: _this.mergeStyles(styles.icon.root, currentChild.props.style),
            onMouseEnter: _this._handleMouseEnterFontIcon,
            onMouseLeave: _this._handleMouseLeaveFontIcon
          });
        case 'ToolbarSeparator':case 'ToolbarTitle':
          return React.cloneElement(currentChild, {
            style: _this.mergeStyles(styles.span, currentChild.props.style)
          });
        default:
          return currentChild;
      }
    }, this);

    return React.createElement(
      'div',
      { className: this.props.className, style: this.mergeAndPrefix(styles.root, this.props.style) },
      newChildren
    );
  },

  _handleMouseEnterDropDownMenu: function _handleMouseEnterDropDownMenu(e) {
    e.target.style.zIndex = this.getStyles().icon.hover.zIndex;
    e.target.style.color = this.getStyles().icon.hover.color;
  },

  _handleMouseLeaveDropDownMenu: function _handleMouseLeaveDropDownMenu(e) {
    e.target.style.zIndex = 'auto';
    e.target.style.color = this.getStyles().icon.root.color;
  },

  _handleMouseEnterFontIcon: function _handleMouseEnterFontIcon(e) {
    e.target.style.zIndex = this.getStyles().icon.hover.zIndex;
    e.target.style.color = this.getStyles().icon.hover.color;
  },

  _handleMouseLeaveFontIcon: function _handleMouseLeaveFontIcon(e) {
    e.target.style.zIndex = 'auto';
    e.target.style.color = this.getStyles().icon.root.color;
  }
});

module.exports = ToolbarGroup;
},{"../mixins/style-propable":57,"../styles/colors":74,"react":326}],120:[function(require,module,exports){
'use strict';

var React = require('react');
var StylePropable = require('../mixins/style-propable');

var ToolbarSeparator = React.createClass({
  displayName: 'ToolbarSeparator',

  mixins: [StylePropable],

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  getTheme: function getTheme() {
    return this.context.muiTheme.component.toolbar;
  },

  getSpacing: function getSpacing() {
    return this.context.muiTheme.spacing;
  },

  render: function render() {
    var styles = this.mergeAndPrefix({
      backgroundColor: this.getTheme().separatorColor,
      display: 'inline-block',
      height: this.getSpacing().desktopGutterMore,
      marginLeft: this.getSpacing().desktopGutter,
      position: 'relative',
      top: (this.getTheme().height - this.getSpacing().desktopGutterMore) / 2,
      width: 1
    }, this.props.style);

    return React.createElement('span', { className: this.props.className, style: styles });
  }

});

module.exports = ToolbarSeparator;
},{"../mixins/style-propable":57,"react":326}],121:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react');
var StylePropable = require('../mixins/style-propable');

var ToolbarTitle = React.createClass({
  displayName: 'ToolbarTitle',

  mixins: [StylePropable],

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  propTypes: {
    text: React.PropTypes.string
  },

  getTheme: function getTheme() {
    return this.context.muiTheme.component.toolbar;
  },

  render: function render() {
    var _props = this.props;
    var style = _props.style;
    var text = _props.text;

    var other = _objectWithoutProperties(_props, ['style', 'text']);

    var styles = this.mergeAndPrefix({
      paddingRight: this.context.muiTheme.spacing.desktopGutterLess,
      lineHeight: this.getTheme().height + 'px',
      fontSize: this.getTheme().titleFontSize + 'px',
      display: 'inline-block',
      position: 'relative'
    }, style);

    return React.createElement(
      'span',
      _extends({ style: styles }, other),
      text
    );
  }

});

module.exports = ToolbarTitle;
},{"../mixins/style-propable":57,"react":326}],122:[function(require,module,exports){
'use strict';

var React = require('react');
var StylePropable = require('../mixins/style-propable');

var Toolbar = React.createClass({
  displayName: 'Toolbar',

  mixins: [StylePropable],

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  propTypes: {
    className: React.PropTypes.string,
    style: React.PropTypes.object
  },

  getTheme: function getTheme() {
    return this.context.muiTheme.component.toolbar;
  },

  getStyles: function getStyles() {
    return this.mergeAndPrefix({
      boxSizing: 'border-box',
      WebkitTapHighlightColor: 'rgba(0,0,0,0)',
      backgroundColor: this.getTheme().backgroundColor,
      height: this.getTheme().height,
      width: '100%',
      padding: this.props.noGutter ? 0 : '0px ' + this.context.muiTheme.spacing.desktopGutter + 'px'
    }, this.props.style);
  },

  render: function render() {
    return React.createElement(
      'div',
      { className: this.props.className, style: this.getStyles() },
      this.props.children
    );
  }

});

module.exports = Toolbar;
},{"../mixins/style-propable":57,"react":326}],123:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react');
var StylePropable = require('./mixins/style-propable');
var Transitions = require('./styles/transitions');
var Colors = require('./styles/colors');

var Tooltip = React.createClass({
  displayName: 'Tooltip',

  mixins: [StylePropable],

  contextTypes: {
    muiTheme: React.PropTypes.object
  },

  propTypes: {
    className: React.PropTypes.string,
    label: React.PropTypes.string.isRequired,
    show: React.PropTypes.bool,
    touch: React.PropTypes.bool,
    verticalPosition: React.PropTypes.oneOf(['top', 'bottom']),
    horizontalPosition: React.PropTypes.oneOf(['left', 'right', 'center'])
  },

  componentDidMount: function componentDidMount() {
    this._setRippleSize();
    this._setTooltipPosition();
  },

  componentWillReceiveProps: function componentWillReceiveProps() {
    this._setTooltipPosition();
  },

  componentDidUpdate: function componentDidUpdate() {
    this._setRippleSize();
  },

  getInitialState: function getInitialState() {
    return {
      offsetWidth: null
    };
  },

  getStyles: function getStyles() {
    var verticalPosition = this.props.verticalPosition;
    var horizontalPosition = this.props.horizontalPosition;
    var touchMarginOffset = this.props.touch ? 10 : 0;
    var touchOffsetTop = this.props.touch ? -20 : -10;
    var offset = verticalPosition === 'bottom' ? 14 + touchMarginOffset : -14 - touchMarginOffset;

    var styles = {
      root: {
        position: 'absolute',
        fontFamily: this.context.muiTheme.contentFontFamily,
        fontSize: '10px',
        lineHeight: '22px',
        padding: '0 8px',
        color: Colors.white,
        overflow: 'hidden',
        top: -10000,
        borderRadius: 2,
        userSelect: 'none',
        opacity: 0,
        right: horizontalPosition === 'left' ? 12 : null,
        left: horizontalPosition === 'center' ? (this.state.offsetWidth - 48) / 2 * -1 : null,
        transition: Transitions.easeOut('0ms', 'top', '450ms') + ',' + Transitions.easeOut('450ms', 'transform', '0ms') + ',' + Transitions.easeOut('450ms', 'opacity', '0ms')
      },
      label: {
        position: 'relative',
        whiteSpace: 'nowrap'
      },
      ripple: {
        position: 'absolute',
        left: horizontalPosition === 'center' ? '50%' : horizontalPosition === 'left' ? '100%' : '0%',
        top: verticalPosition === 'bottom' ? 0 : '100%',
        transform: 'translate(-50%, -50%)',
        borderRadius: '50%',
        backgroundColor: 'transparent',
        transition: Transitions.easeOut('0ms', 'width', '450ms') + ',' + Transitions.easeOut('0ms', 'height', '450ms') + ',' + Transitions.easeOut('450ms', 'backgroundColor', '0ms')
      },
      rootWhenShown: {
        top: verticalPosition === 'top' ? touchOffsetTop : 36,
        opacity: 0.9,
        transform: 'translate3d(0px, ' + offset + 'px, 0px)',
        transition: Transitions.easeOut('0ms', 'top', '0ms') + ',' + Transitions.easeOut('450ms', 'transform', '0ms') + ',' + Transitions.easeOut('450ms', 'opacity', '0ms')
      },
      rootWhenTouched: {
        fontSize: '14px',
        lineHeight: '32px',
        padding: '0 16px'
      },
      rippleWhenShown: {
        backgroundColor: Colors.grey700,
        transition: Transitions.easeOut('450ms', 'width', '0ms') + ',' + Transitions.easeOut('450ms', 'height', '0ms') + ',' + Transitions.easeOut('450ms', 'backgroundColor', '0ms')
      }
    };

    return styles;
  },

  render: function render() {
    var _props = this.props;
    var label = _props.label;

    var other = _objectWithoutProperties(_props, ['label']);

    var styles = this.getStyles();
    return React.createElement(
      'div',
      _extends({}, other, {
        style: this.mergeAndPrefix(styles.root, this.props.show && styles.rootWhenShown, this.props.touch && styles.rootWhenTouched, this.props.style) }),
      React.createElement('div', {
        ref: 'ripple',
        style: this.mergeAndPrefix(styles.ripple, this.props.show && styles.rippleWhenShown) }),
      React.createElement(
        'span',
        { style: this.mergeAndPrefix(styles.label) },
        this.props.label
      )
    );
  },

  _setRippleSize: function _setRippleSize() {
    var ripple = React.findDOMNode(this.refs.ripple);
    var tooltip = window.getComputedStyle(React.findDOMNode(this));
    var tooltipWidth = parseInt(tooltip.getPropertyValue("width"), 10) / (this.props.horizontalPosition === 'center' ? 2 : 1);
    var tooltipHeight = parseInt(tooltip.getPropertyValue("height"), 10);

    var rippleDiameter = Math.ceil(Math.sqrt(Math.pow(tooltipHeight, 2) + Math.pow(tooltipWidth, 2)) * 2);
    if (this.props.show) {
      ripple.style.height = rippleDiameter + 'px';
      ripple.style.width = rippleDiameter + 'px';
    } else {
      ripple.style.width = '0px';
      ripple.style.height = '0px';
    }
  },

  _setTooltipPosition: function _setTooltipPosition() {
    var tooltip = React.findDOMNode(this);
    this.setState({ offsetWidth: tooltip.offsetWidth });
  }

});

module.exports = Tooltip;
},{"./mixins/style-propable":57,"./styles/colors":74,"./styles/transitions":80,"react":326}],124:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react/addons');
var PureRenderMixin = React.addons.PureRenderMixin;
var StylePropable = require('../mixins/style-propable');
var AutoPrefix = require('../styles/auto-prefix');
var Transitions = require('../styles/transitions');

var ScaleInChild = React.createClass({
  displayName: 'ScaleInChild',

  mixins: [PureRenderMixin, StylePropable],

  propTypes: {
    enterDelay: React.PropTypes.number,
    maxScale: React.PropTypes.number,
    minScale: React.PropTypes.number
  },

  getDefaultProps: function getDefaultProps() {
    return {
      enterDelay: 0,
      maxScale: 1,
      minScale: 0
    };
  },

  componentWillAppear: function componentWillAppear(callback) {
    this._initializeAnimation(callback);
  },

  componentWillEnter: function componentWillEnter(callback) {
    this._initializeAnimation(callback);
  },

  componentDidAppear: function componentDidAppear() {
    this._animate();
  },

  componentDidEnter: function componentDidEnter() {
    this._animate();
  },

  componentWillLeave: function componentWillLeave(callback) {
    var _this = this;

    var style = React.findDOMNode(this).style;

    style.opacity = '0';
    AutoPrefix.set(style, 'transform', 'scale(' + this.props.minScale + ')');

    setTimeout((function () {
      if (_this.isMounted()) callback();
    }).bind(this), 450);
  },

  render: function render() {
    var _props = this.props;
    var children = _props.children;
    var enterDelay = _props.enterDelay;
    var style = _props.style;

    var other = _objectWithoutProperties(_props, ['children', 'enterDelay', 'style']);

    var mergedRootStyles = this.mergeAndPrefix({
      position: 'absolute',
      height: '100%',
      width: '100%',
      top: 0,
      left: 0,
      transition: Transitions.easeOut(null, ['transform', 'opacity'])
    }, style);

    return React.createElement(
      'div',
      _extends({}, other, { style: mergedRootStyles }),
      children
    );
  },

  _animate: function _animate() {
    var style = React.findDOMNode(this).style;

    style.opacity = '1';
    AutoPrefix.set(style, 'transform', 'scale(' + this.props.maxScale + ')');
  },

  _initializeAnimation: function _initializeAnimation(callback) {
    var _this2 = this;

    var style = React.findDOMNode(this).style;

    style.opacity = '0';
    AutoPrefix.set(style, 'transform', 'scale(0)');

    setTimeout((function () {
      if (_this2.isMounted()) callback();
    }).bind(this), this.props.enterDelay);
  }

});

module.exports = ScaleInChild;
},{"../mixins/style-propable":57,"../styles/auto-prefix":73,"../styles/transitions":80,"react/addons":154}],125:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react/addons');
var PureRenderMixin = React.addons.PureRenderMixin;
var ReactTransitionGroup = React.addons.TransitionGroup;
var StylePropable = require('../mixins/style-propable');
var ScaleInChild = require('./scale-in-child');

var ScaleIn = React.createClass({
  displayName: 'ScaleIn',

  mixins: [PureRenderMixin, StylePropable],

  propTypes: {
    childStyle: React.PropTypes.object,
    enterDelay: React.PropTypes.number,
    maxScale: React.PropTypes.number,
    minScale: React.PropTypes.number
  },

  getDefaultProps: function getDefaultProps() {
    return {
      enterDelay: 0
    };
  },

  render: function render() {
    var _props = this.props;
    var children = _props.children;
    var childStyle = _props.childStyle;
    var enterDelay = _props.enterDelay;
    var maxScale = _props.maxScale;
    var minScale = _props.minScale;
    var style = _props.style;

    var other = _objectWithoutProperties(_props, ['children', 'childStyle', 'enterDelay', 'maxScale', 'minScale', 'style']);

    var mergedRootStyles = this.mergeAndPrefix({
      position: 'relative',
      overflow: 'hidden',
      height: '100%'
    }, style);

    var newChildren = React.Children.map(children, function (child) {
      return React.createElement(
        ScaleInChild,
        {
          key: child.key,
          enterDelay: enterDelay,
          maxScale: maxScale,
          minScale: minScale,
          style: childStyle },
        child
      );
    });

    return React.createElement(
      ReactTransitionGroup,
      _extends({}, other, {
        style: mergedRootStyles,
        component: 'div' }),
      newChildren
    );
  }

});

module.exports = ScaleIn;
},{"../mixins/style-propable":57,"./scale-in-child":124,"react/addons":154}],126:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react/addons');
var StylePropable = require('../mixins/style-propable');
var AutoPrefix = require('../styles/auto-prefix');
var Transitions = require('../styles/transitions');

var SlideInChild = React.createClass({
  displayName: 'SlideInChild',

  mixins: [StylePropable],

  propTypes: {
    enterDelay: React.PropTypes.number,
    //This callback is needed bacause
    //the direction could change when leaving the dom
    getLeaveDirection: React.PropTypes.func.isRequired
  },

  getDefaultProps: function getDefaultProps() {
    return {
      enterDelay: 0
    };
  },

  componentWillEnter: function componentWillEnter(callback) {
    var _this = this;

    var style = React.findDOMNode(this).style;
    var x = this.props.direction === 'left' ? '100%' : this.props.direction === 'right' ? '-100%' : '0';
    var y = this.props.direction === 'up' ? '100%' : this.props.direction === 'down' ? '-100%' : '0';

    style.opacity = '0';
    AutoPrefix.set(style, 'transform', 'translate3d(' + x + ',' + y + ',0)');

    setTimeout((function () {
      if (_this.isMounted()) callback();
    }).bind(this), this.props.enterDelay);
  },

  componentDidEnter: function componentDidEnter() {
    var style = React.findDOMNode(this).style;
    style.opacity = '1';
    AutoPrefix.set(style, 'transform', 'translate3d(0,0,0)');
  },

  componentWillLeave: function componentWillLeave(callback) {
    var _this2 = this;

    var style = React.findDOMNode(this).style;
    var direction = this.props.getLeaveDirection();
    var x = direction === 'left' ? '-100%' : direction === 'right' ? '100%' : '0';
    var y = direction === 'up' ? '-100%' : direction === 'down' ? '100%' : '0';

    style.opacity = '0';
    AutoPrefix.set(style, 'transform', 'translate3d(' + x + ',' + y + ',0)');

    setTimeout((function () {
      if (_this2.isMounted()) callback();
    }).bind(this), 450);
  },

  render: function render() {
    var _props = this.props;
    var children = _props.children;
    var enterDelay = _props.enterDelay;
    var getLeaveDirection = _props.getLeaveDirection;
    var style = _props.style;

    var other = _objectWithoutProperties(_props, ['children', 'enterDelay', 'getLeaveDirection', 'style']);

    var mergedRootStyles = this.mergeAndPrefix({
      position: 'absolute',
      height: '100%',
      width: '100%',
      top: 0,
      left: 0,
      transition: Transitions.easeOut(null, ['transform', 'opacity'])
    }, style);

    return React.createElement(
      'div',
      _extends({}, other, { style: mergedRootStyles }),
      children
    );
  }

});

module.exports = SlideInChild;
},{"../mixins/style-propable":57,"../styles/auto-prefix":73,"../styles/transitions":80,"react/addons":154}],127:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react/addons');
var ReactTransitionGroup = React.addons.TransitionGroup;
var StylePropable = require('../mixins/style-propable');
var SlideInChild = require('./slide-in-child');

var SlideIn = React.createClass({
  displayName: 'SlideIn',

  mixins: [StylePropable],

  propTypes: {
    enterDelay: React.PropTypes.number,
    childStyle: React.PropTypes.object,
    direction: React.PropTypes.oneOf(['left', 'right', 'up', 'down'])
  },

  getDefaultProps: function getDefaultProps() {
    return {
      enterDelay: 0,
      direction: 'left'
    };
  },

  render: function render() {
    var _this = this;

    var _props = this.props;
    var enterDelay = _props.enterDelay;
    var children = _props.children;
    var childStyle = _props.childStyle;
    var direction = _props.direction;
    var style = _props.style;

    var other = _objectWithoutProperties(_props, ['enterDelay', 'children', 'childStyle', 'direction', 'style']);

    var mergedRootStyles = this.mergeAndPrefix({
      position: 'relative',
      overflow: 'hidden',
      height: '100%'
    }, style);

    var newChildren = React.Children.map(children, function (child) {
      return React.createElement(
        SlideInChild,
        {
          key: child.key,
          direction: direction,
          enterDelay: enterDelay,
          getLeaveDirection: _this._getLeaveDirection,
          style: childStyle },
        child
      );
    }, this);

    return React.createElement(
      ReactTransitionGroup,
      _extends({}, other, {
        style: mergedRootStyles,
        component: 'div' }),
      newChildren
    );
  },

  _getLeaveDirection: function _getLeaveDirection() {
    return this.props.direction;
  }

});

module.exports = SlideIn;
},{"../mixins/style-propable":57,"./slide-in-child":126,"react/addons":154}],128:[function(require,module,exports){
'use strict';

var React = require('react/addons');
var createFragment = React.addons.createFragment;

module.exports = {

  create: function create(fragments) {
    var newFragments = {};
    var validChildrenCount = 0;
    var firstKey = undefined;

    //Only create non-empty key fragments
    for (var key in fragments) {
      var currentChild = fragments[key];

      if (currentChild) {
        if (validChildrenCount === 0) firstKey = key;
        newFragments[key] = currentChild;
        validChildrenCount++;
      }
    }

    if (validChildrenCount === 0) return undefined;
    if (validChildrenCount === 1) return newFragments[firstKey];
    return createFragment(newFragments);
  },

  extend: function extend(children, extendedProps, extendedChildren) {

    return React.isValidElement(children) ? React.Children.map(children, function (child) {

      var newProps = typeof extendedProps === 'function' ? extendedProps(child) : extendedProps;

      var newChildren = typeof extendedChildren === 'function' ? extendedChildren(child) : extendedChildren ? extendedChildren : child.props.children;

      return React.cloneElement(child, newProps, newChildren);
    }) : children;
  }

};
},{"react/addons":154}],129:[function(require,module,exports){
'use strict';

module.exports = {

  /**
   * The relative brightness of any point in a colorspace, normalized to 0 for
   * darkest black and 1 for lightest white. RGB colors only. Does not take
   * into account alpha values.
   *
   * TODO:
   * - Take into account alpha values.
   * - Identify why there are minor discrepancies for some use cases
   *   (i.e. #F0F & #FFF). Note that these cases rarely occur.
   *
   * Formula: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
   */
  _luminance: function _luminance(color) {
    color = this._decomposeColor(color);

    if (color.type.indexOf('rgb') > -1) {
      var rgb = color.values.map(function (val) {
        val /= 255; // normalized
        return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);
      });

      return 0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2];
    } else {
      var message = 'Calculating the relative luminance is not available for ' + 'HSL and HSLA.';
      console.error(message);
      return -1;
    }
  },

  /**
   * @params:
   * additionalValue = An extra value that has been calculated but not included
   *                   with the original color object, such as an alpha value.
   */
  _convertColorToString: function _convertColorToString(color, additonalValue) {
    var str = color.type + '(' + parseInt(color.values[0]) + ',' + parseInt(color.values[1]) + ',' + parseInt(color.values[2]);

    if (additonalValue !== undefined) {
      str += ',' + additonalValue + ')';
    } else if (color.values.length === 4) {
      str += ',' + color.values[3] + ')';
    } else {
      str += ')';
    }

    return str;
  },

  // Converts a color from hex format to rgb format.
  _convertHexToRGB: function _convertHexToRGB(color) {
    if (color.length === 4) {
      var extendedColor = '#';
      for (var i = 1; i < color.length; i++) {
        extendedColor += color.charAt(i) + color.charAt(i);
      }
      color = extendedColor;
    }

    var values = {
      r: parseInt(color.substr(1, 2), 16),
      g: parseInt(color.substr(3, 2), 16),
      b: parseInt(color.substr(5, 2), 16)
    };

    return 'rgb(' + values.r + ',' + values.g + ',' + values.b + ')';
  },

  // Returns the type and values of a color of any given type.
  _decomposeColor: function _decomposeColor(color) {
    if (color.charAt(0) === '#') {
      return this._decomposeColor(this._convertHexToRGB(color));
    }

    var marker = color.indexOf('(');
    var type = color.substring(0, marker);
    var values = color.substring(marker + 1, color.length - 1).split(',');

    return { type: type, values: values };
  },

  // Set the absolute transparency of a color.
  // Any existing alpha values are overwritten.
  fade: function fade(color, amount) {
    color = this._decomposeColor(color);
    if (color.type === 'rgb' || color.type === 'hsl') color.type += 'a';
    return this._convertColorToString(color, amount);
  },

  // Desaturates rgb and sets opacity to 0.15
  lighten: function lighten(color, amount) {
    color = this._decomposeColor(color);

    if (color.type.indexOf('hsl') > -1) {
      color.values[2] += amount;
      return this._decomposeColor(this._convertColorToString(color));
    } else if (color.type.indexOf('rgb') > -1) {
      for (var i = 0; i < 3; i++) {
        color.values[i] *= 1 + amount;
        if (color.values[i] > 255) color.values[i] = 255;
      }
    }

    if (color.type.indexOf('a') <= -1) color.type += 'a';

    return this._convertColorToString(color, '0.15');
  },

  darken: function darken(color, amount) {
    color = this._decomposeColor(color);

    if (color.type.indexOf('hsl') > -1) {
      color.values[2] += amount;
      return this._decomposeColor(this._convertColorToString(color));
    } else if (color.type.indexOf('rgb') > -1) {
      for (var i = 0; i < 3; i++) {
        color.values[i] *= 1 - amount;
        if (color.values[i] < 0) color.values[i] = 0;
      }
    }

    return this._convertColorToString(color);
  },

  // Calculates the contrast ratio between two colors.
  //
  // Formula: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef
  contrastRatio: function contrastRatio(background, foreground) {
    var lumA = this._luminance(background);
    var lumB = this._luminance(foreground);

    if (lumA >= lumB) {
      return ((lumA + 0.05) / (lumB + 0.05)).toFixed(2);
    } else {
      return ((lumB + 0.05) / (lumA + 0.05)).toFixed(2);
    }
  },

  /**
   * Determines how readable a color combination is based on its level.
   * Levels are defined from @LeaVerou:
   * https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/contrast-ratio.js
   */
  contrastRatioLevel: function contrastRatioLevel(background, foreground) {
    var levels = {
      'fail': {
        range: [0, 3],
        color: 'hsl(0, 100%, 40%)'
      },
      'aa-large': {
        range: [3, 4.5],
        color: 'hsl(40, 100%, 45%)'
      },
      'aa': {
        range: [4.5, 7],
        color: 'hsl(80, 60%, 45%)'
      },
      'aaa': {
        range: [7, 22],
        color: 'hsl(95, 60%, 41%)'
      }
    };

    var ratio = this.contrastRatio(background, foreground);

    for (var level in levels) {
      var range = levels[level].range;
      if (ratio >= range[0] && ratio <= range[1]) return level;
    }
  }
};
},{}],130:[function(require,module,exports){
'use strict';

var Events = require('./events');

module.exports = {

  _testSupportedProps: function _testSupportedProps(props) {
    var i = undefined,
        el = document.createElement('div');

    for (i in props) {
      if (props.hasOwnProperty(i) && el.style[i] !== undefined) {
        return props[i];
      }
    }
  },

  //Returns the correct event name to use
  transitionEndEventName: function transitionEndEventName() {
    return this._testSupportedProps({
      'transition': 'transitionend',
      'OTransition': 'otransitionend',
      'MozTransition': 'transitionend',
      'WebkitTransition': 'webkitTransitionEnd'
    });
  },

  animationEndEventName: function animationEndEventName() {
    return this._testSupportedProps({
      'animation': 'animationend',
      '-o-animation': 'oAnimationEnd',
      '-moz-animation': 'animationend',
      '-webkit-animation': 'webkitAnimationEnd'
    });
  },

  onTransitionEnd: function onTransitionEnd(el, callback) {
    var transitionEnd = this.transitionEndEventName();

    Events.once(el, transitionEnd, function () {
      return callback();
    });
  },

  onAnimationEnd: function onAnimationEnd(el, callback) {
    var animationEnd = this.animationEndEventName();

    Events.once(el, animationEnd, function () {
      return callback();
    });
  }
};
},{"./events":133}],131:[function(require,module,exports){
'use strict';

module.exports = {

  addDays: function addDays(d, days) {
    var newDate = this.clone(d);
    newDate.setDate(d.getDate() + days);
    return newDate;
  },

  addMonths: function addMonths(d, months) {
    var newDate = this.clone(d);
    newDate.setMonth(d.getMonth() + months);
    return newDate;
  },

  addYears: function addYears(d, years) {
    var newDate = this.clone(d);
    newDate.setFullYear(d.getFullYear() + years);
    return newDate;
  },

  clone: function clone(d) {
    return new Date(d.getTime());
  },

  cloneAsDate: function cloneAsDate(d) {
    var clonedDate = this.clone(d);
    clonedDate.setHours(0, 0, 0, 0);
    return clonedDate;
  },

  getDaysInMonth: function getDaysInMonth(d) {
    var resultDate = this.getFirstDayOfMonth(d);

    resultDate.setMonth(resultDate.getMonth() + 1);
    resultDate.setDate(resultDate.getDate() - 1);

    return resultDate.getDate();
  },

  getFirstDayOfMonth: function getFirstDayOfMonth(d) {
    return new Date(d.getFullYear(), d.getMonth(), 1);
  },

  getFullMonth: function getFullMonth(d) {
    var month = d.getMonth();
    switch (month) {
      case 0:
        return 'January';
      case 1:
        return 'February';
      case 2:
        return 'March';
      case 3:
        return 'April';
      case 4:
        return 'May';
      case 5:
        return 'June';
      case 6:
        return 'July';
      case 7:
        return 'August';
      case 8:
        return 'September';
      case 9:
        return 'October';
      case 10:
        return 'November';
      case 11:
        return 'December';
    }
  },

  getShortMonth: function getShortMonth(d) {
    var month = d.getMonth();
    switch (month) {
      case 0:
        return 'Jan';
      case 1:
        return 'Feb';
      case 2:
        return 'Mar';
      case 3:
        return 'Apr';
      case 4:
        return 'May';
      case 5:
        return 'Jun';
      case 6:
        return 'Jul';
      case 7:
        return 'Aug';
      case 8:
        return 'Sep';
      case 9:
        return 'Oct';
      case 10:
        return 'Nov';
      case 11:
        return 'Dec';
    }
  },

  getDayOfWeek: function getDayOfWeek(d) {
    var dow = d.getDay();
    switch (dow) {
      case 0:
        return 'Sunday';
      case 1:
        return 'Monday';
      case 2:
        return 'Tuesday';
      case 3:
        return 'Wednesday';
      case 4:
        return 'Thursday';
      case 5:
        return 'Friday';
      case 6:
        return 'Saturday';
    }
  },

  getWeekArray: function getWeekArray(d) {
    var dayArray = [];
    var daysInMonth = this.getDaysInMonth(d);
    var daysInWeek = undefined;
    var emptyDays = undefined;
    var firstDayOfWeek = undefined;
    var week = undefined;
    var weekArray = [];

    for (var i = 1; i <= daysInMonth; i++) {
      dayArray.push(new Date(d.getFullYear(), d.getMonth(), i));
    }

    while (dayArray.length) {
      firstDayOfWeek = dayArray[0].getDay();
      daysInWeek = 7 - firstDayOfWeek;
      emptyDays = 7 - daysInWeek;
      week = dayArray.splice(0, daysInWeek);

      for (var i = 0; i < emptyDays; i++) {
        week.unshift(null);
      }

      weekArray.push(week);
    }

    return weekArray;
  },

  format: function format(date) {
    var m = date.getMonth() + 1;
    var d = date.getDate();
    var y = date.getFullYear();
    return m + '/' + d + '/' + y;
  },

  isEqualDate: function isEqualDate(d1, d2) {
    return d1 && d2 && d1.getFullYear() === d2.getFullYear() && d1.getMonth() === d2.getMonth() && d1.getDate() === d2.getDate();
  },

  isBeforeDate: function isBeforeDate(d1, d2) {
    var date1 = this.cloneAsDate(d1);
    var date2 = this.cloneAsDate(d2);

    return date1.getTime() < date2.getTime();
  },

  isAfterDate: function isAfterDate(d1, d2) {
    var date1 = this.cloneAsDate(d1);
    var date2 = this.cloneAsDate(d2);

    return date1.getTime() > date2.getTime();
  },

  isBetweenDates: function isBetweenDates(dateToCheck, startDate, endDate) {
    return !this.isBeforeDate(dateToCheck, startDate) && !this.isAfterDate(dateToCheck, endDate);
  },

  isDateObject: function isDateObject(d) {
    return d instanceof Date;
  },

  monthDiff: function monthDiff(d1, d2) {
    var m = undefined;
    m = (d1.getFullYear() - d2.getFullYear()) * 12;
    m += d1.getMonth();
    m -= d2.getMonth();
    return m;
  },

  yearDiff: function yearDiff(d1, d2) {
    return ~ ~(this.monthDiff(d1, d2) / 12);
  }

};
},{}],132:[function(require,module,exports){
'use strict';

module.exports = {

  isDescendant: function isDescendant(parent, child) {
    var node = child.parentNode;

    while (node !== null) {
      if (node === parent) return true;
      node = node.parentNode;
    }

    return false;
  },

  offset: function offset(el) {
    var rect = el.getBoundingClientRect();
    return {
      top: rect.top + document.body.scrollTop,
      left: rect.left + document.body.scrollLeft
    };
  },

  getStyleAttributeAsNumber: function getStyleAttributeAsNumber(el, attr) {
    var attrStyle = el.style[attr];
    var attrNum = 0;
    if (attrStyle && attrStyle.length) {
      attrNum = parseInt(attrStyle);
    }

    return attrNum;
  },

  addClass: function addClass(el, className) {
    if (el.classList) el.classList.add(className);else el.className += ' ' + className;
  },

  removeClass: function removeClass(el, className) {
    if (el.classList) el.classList.remove(className);else el.className = el.className.replace(new RegExp('(^|\\b)' + className.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
  },

  hasClass: function hasClass(el, className) {
    if (el.classList) return el.classList.contains(className);else return new RegExp('(^| )' + className + '( |$)', 'gi').test(el.className);
  },

  toggleClass: function toggleClass(el, className) {
    if (this.hasClass(el, className)) this.removeClass(el, className);else this.addClass(el, className);
  },

  forceRedraw: function forceRedraw(el) {
    var originalDisplay = el.style.display;

    el.style.display = 'none';
    el.style.display = originalDisplay;
  },

  withoutTransition: function withoutTransition(el, callback) {
    var originalTransition = el.style.transition;

    //turn off transition
    el.style.transition = null;

    callback();

    //force a redraw
    this.forceRedraw(el);

    //put the transition back
    el.style.transition = originalTransition;
  }

};
},{}],133:[function(require,module,exports){
'use strict';

module.exports = {

  once: function once(el, type, callback) {
    var typeArray = type.split(' ');
    var recursiveFunction = function recursiveFunction(e) {
      e.target.removeEventListener(e.type, recursiveFunction);
      return callback(e);
    };

    for (var i = typeArray.length - 1; i >= 0; i--) {
      this.on(el, typeArray[i], recursiveFunction);
    }
  },

  on: function on(el, type, callback) {
    if (el.addEventListener) {
      el.addEventListener(type, callback);
    } else {
      // IE8+ Support
      el.attachEvent('on' + type, function () {
        callback.call(el);
      });
    }
  },

  off: function off(el, type, callback) {
    if (el.removeEventListener) {
      el.removeEventListener(type, callback);
    } else {
      // IE8+ Support
      el.detachEvent('on' + type, callback);
    }
  },

  isKeyboard: function isKeyboard(e) {
    return ['keydown', 'keypress', 'keyup'].indexOf(e.type) !== -1;
  }
};
},{}],134:[function(require,module,exports){
'use strict';

function isObject(obj) {
  return typeof obj === 'object' && obj !== null;
}

/**
*  A recursive merge between two objects.
*
*  @param base     - the object whose properties are to be overwritten. It
*                    should be either the root level or some nested level.
*  @param override - an object containing properties to be overwritten. It
*                    should have the same structure as the object object.
*/
var extend = function extend(base, override) {

  var mergedObject = {};

  //Loop through each key in the base object
  Object.keys(base).forEach(function (key) {

    var baseProp = base[key];
    var overrideProp = undefined;

    if (isObject(override)) overrideProp = override[key];

    //Recursive call extend if the prop is another object, else just copy it over
    mergedObject[key] = isObject(baseProp) && !Array.isArray(baseProp) ? extend(baseProp, overrideProp) : baseProp;
  });

  //Loop through each override key and override the props in the
  //base object
  if (isObject(override)) {

    Object.keys(override).forEach(function (overrideKey) {

      var overrideProp = override[overrideKey];

      //Only copy over props that are not objects
      if (!isObject(overrideProp) || Array.isArray(overrideProp)) {
        mergedObject[overrideKey] = overrideProp;
      }
    });
  }

  return mergedObject;
};

module.exports = extend;
},{}],135:[function(require,module,exports){
'use strict';

var React = require('react/addons');
var update = React.addons.update;

function mergeSingle(objA, objB) {
  if (!objA) return objB;
  if (!objB) return objA;
  return update(objA, { $merge: objB });
}

module.exports = {

  merge: function merge() {
    var args = Array.prototype.slice.call(arguments, 0);
    var base = args[0];

    for (var i = 1; i < args.length; i++) {
      if (args[i]) {
        base = mergeSingle(base, args[i]);
      }
    }
    return base;
  },

  mergeItem: function mergeItem(obj, key, newValueObject) {
    var command = {};
    command[key] = { $merge: newValueObject };
    return update(obj, command);
  },

  push: function push(array, obj) {
    var newObj = Array.isArray(obj) ? obj : [obj];
    return update(array, { $push: newObj });
  },

  shift: function shift(array) {
    return update(array, { $splice: [[0, 1]] });
  }

};
},{"react/addons":154}],136:[function(require,module,exports){
'use strict';

module.exports = {
  ColorManipulator: require('./color-manipulator'),
  CssEvent: require('./css-event'),
  Dom: require('./dom'),
  Events: require('./events'),
  Extend: require('./extend'),
  ImmutabilityHelper: require('./immutability-helper'),
  KeyCode: require('./key-code'),
  KeyLine: require('./key-line'),
  UniqueId: require('./unique-id'),
  Styles: require('./styles')
};
},{"./color-manipulator":129,"./css-event":130,"./dom":132,"./events":133,"./extend":134,"./immutability-helper":135,"./key-code":137,"./key-line":138,"./styles":141,"./unique-id":142}],137:[function(require,module,exports){
"use strict";

module.exports = {
  DOWN: 40,
  ESC: 27,
  ENTER: 13,
  LEFT: 37,
  RIGHT: 39,
  SPACE: 32,
  TAB: 9,
  UP: 38
};
},{}],138:[function(require,module,exports){
"use strict";

module.exports = {

  Desktop: {
    GUTTER: 24,
    GUTTER_LESS: 16,
    INCREMENT: 64,
    MENU_ITEM_HEIGHT: 32
  },

  getIncrementalDim: function getIncrementalDim(dim) {
    return Math.ceil(dim / this.Desktop.INCREMENT) * this.Desktop.INCREMENT;
  }
};
},{}],139:[function(require,module,exports){
/* Modernizr 2.8.3 (Custom Build) | MIT & BSD
 * Build: http://modernizr.com/download/#-borderradius-boxshadow-opacity-csstransforms-csstransforms3d-csstransitions-prefixed-teststyles-testprop-testallprops-prefixes-domprefixes
 */

'use strict';

module.exports = (function (window, document, undefined) {

    var version = '2.8.3',
        Modernizr = {},
        docElement = document.documentElement,
        mod = 'modernizr',
        modElem = document.createElement(mod),
        mStyle = modElem.style,
        prefixes = ' -webkit- -moz- -o- -ms- '.split(' '),
        omPrefixes = 'Webkit Moz O ms',
        cssomPrefixes = omPrefixes.split(' '),
        domPrefixes = omPrefixes.toLowerCase().split(' '),
        tests = {},
        classes = [],
        slice = classes.slice,
        featureName = undefined,
        injectElementWithStyles = function injectElementWithStyles(rule, callback, nodes, testnames) {

        var style = undefined,
            ret = undefined,
            node = undefined,
            docOverflow = undefined,
            div = document.createElement('div'),
            body = document.body,
            fakeBody = body || document.createElement('body');

        if (parseInt(nodes, 10)) {
            while (nodes--) {
                node = document.createElement('div');
                node.id = testnames ? testnames[nodes] : mod + (nodes + 1);
                div.appendChild(node);
            }
        }

        style = ['&#173;', '<style id="s', mod, '">', rule, '</style>'].join('');
        div.id = mod;
        (body ? div : fakeBody).innerHTML += style;
        fakeBody.appendChild(div);
        if (!body) {
            fakeBody.style.background = '';
            fakeBody.style.overflow = 'hidden';
            docOverflow = docElement.style.overflow;
            docElement.style.overflow = 'hidden';
            docElement.appendChild(fakeBody);
        }

        ret = callback(div, rule);
        if (!body) {
            fakeBody.parentNode.removeChild(fakeBody);
            docElement.style.overflow = docOverflow;
        } else {
            div.parentNode.removeChild(div);
        }

        return !!ret;
    },
        _hasOwnProperty = ({}).hasOwnProperty,
        hasOwnProp = undefined;

    function is(obj, type) {
        return typeof obj === type;
    }

    if (!is(_hasOwnProperty, 'undefined') && !is(_hasOwnProperty.call, 'undefined')) {
        hasOwnProp = function (object, property) {
            return _hasOwnProperty.call(object, property);
        };
    } else {
        hasOwnProp = function (object, property) {
            return property in object && is(object.constructor.prototype[property], 'undefined');
        };
    }

    if (!Function.prototype.bind) {
        Function.prototype.bind = function bind(that) {

            var target = this;

            if (typeof target != "function") {
                throw new TypeError();
            }

            var args = slice.call(arguments, 1),
                bound = function bound() {

                if (this instanceof bound) {

                    var F = function F() {};
                    F.prototype = target.prototype;
                    var _self = new F();

                    var result = target.apply(_self, args.concat(slice.call(arguments)));
                    if (Object(result) === result) {
                        return result;
                    }
                    return _self;
                } else {

                    return target.apply(that, args.concat(slice.call(arguments)));
                }
            };

            return bound;
        };
    }

    function setCss(str) {
        mStyle.cssText = str;
    }

    function setCssAll(str1, str2) {
        return setCss(prefixes.join(str1 + ';') + (str2 || ''));
    }

    function contains(str, substr) {
        return !! ~('' + str).indexOf(substr);
    }

    function testProps(props, prefixed) {
        for (var i in props) {
            var prop = props[i];
            if (!contains(prop, "-") && mStyle[prop] !== undefined) {
                return prefixed == 'pfx' ? prop : true;
            }
        }
        return false;
    }

    function testDOMProps(props, obj, elem) {
        for (var i in props) {
            var item = obj[props[i]];
            if (item !== undefined) {

                if (elem === false) return props[i];

                if (is(item, 'function')) {
                    return item.bind(elem || obj);
                }

                return item;
            }
        }
        return false;
    }

    function testPropsAll(prop, prefixed, elem) {

        var ucProp = prop.charAt(0).toUpperCase() + prop.slice(1),
            props = (prop + ' ' + cssomPrefixes.join(ucProp + ' ') + ucProp).split(' ');

        if (is(prefixed, "string") || is(prefixed, "undefined")) {
            return testProps(props, prefixed);
        } else {
            props = (prop + ' ' + domPrefixes.join(ucProp + ' ') + ucProp).split(' ');
            return testDOMProps(props, prefixed, elem);
        }
    }

    tests.borderradius = function () {
        return testPropsAll('borderRadius');
    };

    tests.boxshadow = function () {
        return testPropsAll('boxShadow');
    };

    tests.opacity = function () {
        setCssAll('opacity:.55');

        return (/^0.55$/.test(mStyle.opacity)
        );
    };
    tests.csstransforms = function () {
        return !!testPropsAll('transform');
    };

    tests.csstransforms3d = function () {

        var ret = !!testPropsAll('perspective');

        if (ret && 'webkitPerspective' in docElement.style) {

            injectElementWithStyles('@media (transform-3d),(-webkit-transform-3d){#modernizr{left:9px;position:absolute;height:3px;}}', function (node) {
                ret = node.offsetLeft === 9 && node.offsetHeight === 3;
            });
        }
        return ret;
    };

    tests.csstransitions = function () {
        return testPropsAll('transition');
    };

    for (var feature in tests) {
        if (hasOwnProp(tests, feature)) {
            featureName = feature.toLowerCase();
            Modernizr[featureName] = tests[feature]();

            classes.push((Modernizr[featureName] ? '' : 'no-') + featureName);
        }
    }

    Modernizr.addTest = function (feature, test) {
        if (typeof feature == 'object') {
            for (var key in feature) {
                if (hasOwnProp(feature, key)) {
                    Modernizr.addTest(key, feature[key]);
                }
            }
        } else {

            feature = feature.toLowerCase();

            if (Modernizr[feature] !== undefined) {
                return Modernizr;
            }

            test = typeof test == 'function' ? test() : test;

            if (typeof enableClasses !== "undefined" && enableClasses) {
                docElement.className += ' ' + (test ? '' : 'no-') + feature;
            }
            Modernizr[feature] = test;
        }

        return Modernizr;
    };

    setCss('');

    Modernizr._version = version;

    Modernizr._prefixes = prefixes;
    Modernizr._domPrefixes = domPrefixes;
    Modernizr._cssomPrefixes = cssomPrefixes;

    Modernizr.testProp = function (prop) {
        return testProps([prop]);
    };

    Modernizr.testAllProps = testPropsAll;

    Modernizr.testStyles = injectElementWithStyles;
    Modernizr.prefixed = function (prop, obj, elem) {
        if (!obj) {
            return testPropsAll(prop, 'pfx');
        } else {
            return testPropsAll(prop, obj, elem);
        }
    };

    return Modernizr;
})(window, window.document);
},{}],140:[function(require,module,exports){
'use strict';

var React = require('react');

module.exports = {

  corners: React.PropTypes.oneOf(['bottom-left', 'bottom-right', 'top-left', 'top-right']),

  cornersAndCenter: React.PropTypes.oneOf(['bottom-center', 'bottom-left', 'bottom-right', 'top-center', 'top-left', 'top-right']),

  stringOrNumber: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.number]),

  zDepth: React.PropTypes.oneOf([0, 1, 2, 3, 4, 5])

};
},{"react":326}],141:[function(require,module,exports){
'use strict';

var AutoPrefix = require('../styles/auto-prefix');
var ImmutabilityHelper = require('../utils/immutability-helper');

module.exports = {

  mergeAndPrefix: function mergeAndPrefix() {
    var mergedStyles = ImmutabilityHelper.merge.apply(this, arguments);
    return AutoPrefix.all(mergedStyles);
  }

};
},{"../styles/auto-prefix":73,"../utils/immutability-helper":135}],142:[function(require,module,exports){
"use strict";

var index = 0;

module.exports = {
  generate: function generate() {
    return "mui-id-" + index++;
  }
};
},{}],143:[function(require,module,exports){
'use strict';

var React = require('react/addons');
var emptyFunction = function () {};

// for accessing browser globals
var root = typeof window !== 'undefined' ? window : this;
var bodyElement;
if (typeof document !== 'undefined' && 'body' in document) {
  bodyElement = document.body;
}

function updateBoundState (state, bound) {
  if (!bound) return state;
  bound = String(bound);
  var boundTop = !!~bound.indexOf('top');
  var boundRight = !!~bound.indexOf('right');
  var boundBottom = !!~bound.indexOf('bottom');
  var boundLeft = !!~bound.indexOf('left');
  var boundAll = !!~bound.indexOf('all') ||
    !(boundTop || boundRight || boundBottom || boundLeft);
  var boundBox = !~bound.indexOf('point');
  state.boundTop = boundAll || boundTop;
  state.boundRight = boundAll || boundRight;
  state.boundBottom = boundAll || boundBottom;
  state.boundLeft = boundAll || boundLeft;
  state.boundBox = boundBox;
  return state;
};

function createUIEvent(draggable) {
  return {
    position: {
      top: draggable.state.offsetTop,
      left: draggable.state.offsetLeft
    }
  };
}

function canDragY(draggable) {
  return draggable.props.axis === 'both' ||
      draggable.props.axis === 'y';
}

function canDragX(draggable) {
  return draggable.props.axis === 'both' ||
      draggable.props.axis === 'x';
}

function isFunction(func) {
  return typeof func === 'function' || Object.prototype.toString.call(func) === '[object Function]'
}

// @credits https://gist.github.com/rogozhnikoff/a43cfed27c41e4e68cdc
function findInArray(array, callback) {
  for (var i = 0, length = array.length, element = null; i < length, element = array[i]; i++) {
    if (callback.apply(callback, [element, i, array])) return element;
  }
}

function matchesSelector(el, selector) {
  var method = findInArray([
    'matches',
    'webkitMatchesSelector',
    'mozMatchesSelector',
    'msMatchesSelector',
    'oMatchesSelector'
  ], function(method){
    return isFunction(el[method]);
  });

  return el[method].call(el, selector);
}

// @credits: http://stackoverflow.com/questions/4817029/whats-the-best-way-to-detect-a-touch-screen-device-using-javascript/4819886#4819886
var isTouchDevice = 'ontouchstart' in root // works on most browsers
                 || 'onmsgesturechange' in root; // works on ie10 on ms surface

// look ::handleDragStart
//function isMultiTouch(e) {
//  return e.touches && Array.isArray(e.touches) && e.touches.length > 1
//}

/**
 * simple abstraction for dragging events names
 * */
var dragEventFor = (function () {
  var eventsFor = {
    touch: {
      start: 'touchstart',
      move: 'touchmove',
      end: 'touchend'
    },
    mouse: {
      start: 'mousedown',
      move: 'mousemove',
      end: 'mouseup'
    }
  };
  return eventsFor[isTouchDevice ? 'touch' : 'mouse'];
})();

/**
 * get {clientX, clientY} positions of control
 * */
function getControlPosition(e) {
  var position = (e.touches && e.touches[0]) || e;
  return {
    clientX: position.clientX,
    clientY: position.clientY
  }
}

function addEvent(el, event, handler) {
  if (!el) { return; }
  if (el.attachEvent) {
    el.attachEvent('on' + event, handler);
  } else if (el.addEventListener) {
    el.addEventListener(event, handler, true);
  } else {
    el['on' + event] = handler;
  }
}

function removeEvent(el, event, handler) {
  if (!el) { return; }
  if (el.detachEvent) {
    el.detachEvent('on' + event, handler);
  } else if (el.removeEventListener) {
    el.removeEventListener(event, handler, true);
  } else {
    el['on' + event] = null;
  }
}

module.exports = React.createClass({
  displayName: 'Draggable',
  mixins: [React.addons.PureRenderMixin],

  propTypes: {
    /**
     * `axis` determines which axis the draggable can move.
     *
     * 'both' allows movement horizontally and vertically.
     * 'x' limits movement to horizontal axis.
     * 'y' limits movement to vertical axis.
     *
     * Defaults to 'both'.
     */
    axis: React.PropTypes.oneOf(['both', 'x', 'y']),

    /**
     * `handle` specifies a selector to be used as the handle that initiates drag.
     *
     * Example:
     *
     * ```jsx
     *  var App = React.createClass({
     *      render: function () {
     *        return (
     *          <Draggable handle=".handle">
     *            <div>
     *                <div className="handle">Click me to drag</div>
     *                <div>This is some other content</div>
     *            </div>
     *          </Draggable>
     *        );
     *      }
     *  });
     * ```
     */
    handle: React.PropTypes.string,

    /**
     * `cancel` specifies a selector to be used to prevent drag initialization.
     *
     * Example:
     *
     * ```jsx
     *  var App = React.createClass({
     *      render: function () {
     *          return(
     *              <Draggable cancel=".cancel">
     *                  <div>
     *                    <div className="cancel">You can't drag from here</div>
     *            <div>Dragging here works fine</div>
     *                  </div>
     *              </Draggable>
     *          );
     *      }
     *  });
     * ```
     */
    cancel: React.PropTypes.string,

    /**
     * `bound` determines whether to bound the movement to the parent box.
     *
     * The property takes a list of space-separated strings. The Draggable
     * is bounded by the nearest DOMNode.offsetParent. To set the offset
     * parent, give it a position value other than 'static'.
     *
     * Optionally choose one or more bounds from:
     * 'top' bounds movement to the top edge of the parent box.
     * 'right' bounds movement to the right edge of the parent box.
     * 'bottom' bounds movement to the bottom edge of the parent box.
     * 'left' bounds movement to the left edge of the parent box.
     * 'all' bounds movement to all edges (default if not specified).
     *
     * Optionally choose one anchor from:
     * 'point' to constrain only the top-left corner.
     * 'box' to constrain the entire box (default if not specified).
     *
     * You may use more than one bound, e.g. 'top left point'. Set to a
     * falsy value to disable.
     *
     * Defaults to 'all box'.
     */
    bound: React.PropTypes.string,

    /**
     * `grid` specifies the x and y that dragging should snap to.
     *
     * Example:
     *
     * ```jsx
     *   var App = React.createClass({
     *       render: function () {
     *           return (
     *              <Draggable grid={[25, 25]}>
     *                   <div>I snap to a 25 x 25 grid</div>
     *               </Draggable>
     *           );
     *      }
     *   });
     * ```
     */
    grid: React.PropTypes.arrayOf(React.PropTypes.number),

    /**
     * `constrain` takes a function to constrain the dragging.
     *
     * Example:
     *
     * ```jsx
     *   function constrain (snap) {
     *         function constrainOffset (offset, prev) {
     *               var delta = offset - prev;
     *               if (Math.abs(delta) >= snap) {
     *                     return prev + (delta < 0 ? -snap : snap);
     *               }
     *               return prev;
     *         }
     *         return function (pos) {
     *               return {
     *                     top: constrainOffset(pos.top, pos.prevTop),
     *                     left: constrainOffset(pos.left, pos.prevLeft)
     *               };
     *         };
     *   }
     *   var App = React.createClass({
     *       render: function () {
     *           return (
     *               <Draggable constrain={constrain}>
     *                   <div>I snap to a 25 x 25 grid</div>
     *               </Draggable>
     *           );
     *       }
     *   });
     * ```
     */
    constrain: React.PropTypes.func,

    /**
     * `start` specifies the x and y that the dragged item should start at
     *
     * Example:
     *
     * ```jsx
     *  var App = React.createClass({
     *      render: function () {
     *          return (
     *              <Draggable start={{x: 25, y: 25}}>
     *                  <div>I start with left: 25px; top: 25px;</div>
     *              </Draggable>
     *          );
     *      }
     *  });
     * ```
     */
    start: React.PropTypes.object,

    /**
     * `zIndex` specifies the zIndex to use while dragging.
     *
     * Example:
     *
     * ```jsx
     *  var App = React.createClass({
     *      render: function () {
     *          return (
     *              <Draggable zIndex={100}>
     *                  <div>I have a zIndex</div>
     *              </Draggable>
     *          );
     *      }
     *  });
     * ```
     */
    zIndex: React.PropTypes.number,

    /**
     * `useChild` determines whether to use the first child as root.
     *
     * If false, a div is created. This option is required if any children
     * have a ref.
     *
     * Defaults to true.
     */
    useChild: React.PropTypes.bool,

    /**
     * Called when dragging starts.
     *
     * Example:
     *
     * ```js
     *  function (event, ui) {}
     * ```
     *
     * `event` is the Event that was triggered.
     * `ui` is an object:
     *
     * ```js
     *  {
     *    position: {top: 0, left: 0}
     *  }
     * ```
     */
    onStart: React.PropTypes.func,

    /**
     * Called while dragging.
     *
     * Example:
     *
     * ```js
     *  function (event, ui) {}
     * ```
     *
     * `event` is the Event that was triggered.
     * `ui` is an object:
     *
     * ```js
     *  {
     *    position: {top: 0, left: 0}
     *  }
     * ```
     */
    onDrag: React.PropTypes.func,

    /**
     * Called when dragging stops.
     *
     * Example:
     *
     * ```js
     *  function (event, ui) {}
     * ```
     *
     * `event` is the Event that was triggered.
     * `ui` is an object:
     *
     * ```js
     *  {
     *    position: {top: 0, left: 0}
     *  }
     * ```
     */
    onStop: React.PropTypes.func,

    /**
     * A workaround option which can be passed if onMouseDown needs to be accessed, since it'll always be blocked (due to that there's internal use of onMouseDown)
     *
     */
    onMouseDown: React.PropTypes.func
  },

  getDefaultProps: function () {
    return {
      axis: 'both',
      bound: null,
      handle: null,
      cancel: null,
      grid: null,
      start: {},
      zIndex: NaN,
      useChild: true,
      onStart: emptyFunction,
      onDrag: emptyFunction,
      onStop: emptyFunction,
      onMouseDown: emptyFunction
    };
  },

  getInitialState: function () {
    var state = {
      // Whether or not currently dragging
      dragging: false,

      // Pointer offset on screen
      clientX: 0, clientY: 0,

      // DOMNode offset relative to parent
      offsetLeft: this.props.start.x || 0, offsetTop: this.props.start.y || 0
    };

    updateBoundState(state, this.props.bound);

    return state;
  },

  componentWillReceiveProps: function (nextProps) {
    var state = updateBoundState({}, nextProps.bound);
    if (nextProps.start) {
      if (nextProps.start.x != null) {
        state.offsetLeft = nextProps.start.x || 0;
      }
      if (nextProps.start.y != null) {
        state.offsetTop = nextProps.start.y || 0;
      }
    }
    this.setState(state);
  },

  componentWillUnmount: function() {
    // Remove any leftover event handlers
    removeEvent(root, dragEventFor['move'], this.handleDrag);
    removeEvent(root, dragEventFor['end'], this.handleDragEnd);
  },

  handleDragStart: function (e) {
    // todo: write right implementation to prevent multitouch drag
    // prevent multi-touch events
    // if (isMultiTouch(e)) {
    //     this.handleDragEnd.apply(e, arguments);
    //     return
    // }

    // Make it possible to attach event handlers on top of this one
    this.props.onMouseDown(e);

    // Short circuit if handle or cancel prop was provided and selector doesn't match
    if ((this.props.handle && !matchesSelector(e.target, this.props.handle)) ||
      (this.props.cancel && matchesSelector(e.target, this.props.cancel))) {
      return;
    }

    var dragPoint = getControlPosition(e);

    // Initiate dragging
    this.setState({
      dragging: true,
      clientX: dragPoint.clientX,
      clientY: dragPoint.clientY
    });

    // Call event handler
    this.props.onStart(e, createUIEvent(this));

    // Add event handlers
    addEvent(root, dragEventFor['move'], this.handleDrag);
    addEvent(root, dragEventFor['end'], this.handleDragEnd);

    // Add dragging class to body element
    if (bodyElement) bodyElement.className += ' react-draggable-dragging';
  },

  handleDragEnd: function (e) {
    // Short circuit if not currently dragging
    if (!this.state.dragging) {
      return;
    }

    // Turn off dragging
    this.setState({
      dragging: false
    });

    // Call event handler
    this.props.onStop(e, createUIEvent(this));

    // Remove event handlers
    removeEvent(root, dragEventFor['move'], this.handleDrag);
    removeEvent(root, dragEventFor['end'], this.handleDragEnd);

    // Remove dragging class from body element
    if (bodyElement) {
      var className = bodyElement.className;
      bodyElement.className =
        className.replace(/(?:^|\s+)react-draggable-dragging\b/, ' ');
    }
  },

  handleDrag: function (e) {
    var dragPoint = getControlPosition(e);
    var offsetLeft = this._toPixels(this.state.offsetLeft);
    var offsetTop = this._toPixels(this.state.offsetTop);

    var state = {
      offsetLeft: offsetLeft,
      offsetTop: offsetTop
    };

    // Get parent DOM node
    var node = this.getDOMNode();
    var offsetParent = node.offsetParent;
    var offset, boundingValue;

    if (canDragX(this)) {
      // Calculate updated position
      offset = offsetLeft + dragPoint.clientX - this.state.clientX;

      // Bound movement to parent box
      if (this.state.boundLeft) {
        boundingValue = state.offsetLeft - node.offsetLeft;
        if (offset < boundingValue) {
          offset = boundingValue;
        }
      }
      if (this.state.boundRight) {
        boundingValue += offsetParent.clientWidth;
        if (this.state.boundBox) {
          boundingValue -= node.offsetWidth;
        }
        if (offset > boundingValue) {
          offset = boundingValue;
        }
      }
      // Update left
      state.offsetLeft = offset;
    }

    if (canDragY(this)) {
      // Calculate updated position
      offset = offsetTop + dragPoint.clientY - this.state.clientY;
      // Bound movement to parent box
      if (this.state.boundTop) {
        boundingValue = state.offsetTop - node.offsetTop;
        if (offset < boundingValue) {
          offset = boundingValue;
        }
      }
      if (this.state.boundBottom) {
        boundingValue += offsetParent.clientHeight;
        if (this.state.boundBox) {
          boundingValue -= node.offsetHeight;
        }
        if (offset > boundingValue) {
          offset = boundingValue;
        }
      }
      // Update top
      state.offsetTop = offset;
    }

    var constrain = this.props.constrain;
    var grid = this.props.grid;

    // Backwards-compatibility for snap to grid
    if (!constrain && Array.isArray(grid)) {
      var constrainOffset = function (offset, prev, snap) {
        var delta = offset - prev;
        if (Math.abs(delta) >= snap) {
          return prev + parseInt(delta / snap, 10) * snap;
        }
        return prev;
      };
      constrain = function (pos) {
        return {
          left: constrainOffset(pos.left, pos.prevLeft, grid[0]),
          top: constrainOffset(pos.top, pos.prevTop, grid[1])
        };
      };
    }

    // Constrain if function has been provided
    var positions;
    if (constrain) {
      // Constrain positions
      positions = constrain({
        prevLeft: this.state.offsetLeft,
        prevTop: this.state.offsetTop,
        left: state.offsetLeft,
        top: state.offsetTop
      });
      if (positions) {
        // Update left
        if ('left' in positions && !isNaN(positions.left)) {
          state.offsetLeft = positions.left;
        }
        // Update top
        if ('top' in positions && !isNaN(positions.top)) {
          state.offsetTop = positions.top;
        }
      }
    }

    // Save new state
    state.clientX = this.state.clientX + (state.offsetLeft - offsetLeft);
    state.clientY = this.state.clientY + (state.offsetTop - offsetTop);
    this.setState(state);

    // Call event handler
    this.props.onDrag(e, createUIEvent(this));
  },

  onTouchStart: function (e) {
    e.preventDefault(); // prevent for scroll
    return this.handleDragStart.apply(this, arguments);
  },

  render: function () {
    var style = {
      top: this.state.offsetTop,
      left: this.state.offsetLeft
    };

    // Set zIndex if currently dragging and prop has been provided
    if (this.state.dragging && !isNaN(this.props.zIndex)) {
      style.zIndex = this.props.zIndex;
    }

    var props = {
      style: style,
      className: 'react-draggable',

      onMouseDown: this.handleDragStart,
      onTouchStart: this.onTouchStart,

      onMouseUp: this.handleDragEnd,
      onTouchEnd: this.handleDragEnd
    };

    // Reuse the child provided
    // This makes it flexible to use whatever element is wanted (div, ul, etc)
    if (this.props.useChild) {
      return React.addons.cloneWithProps(React.Children.only(this.props.children), props);
    }

    return React.DOM.div(props, this.props.children);
  },

  _toPixels: function (value) {

    // Support percentages
    if (typeof value == 'string' && value.slice(-1) == '%') {
      return parseInt((+value.replace('%', '') / 100) *
        this.getDOMNode().offsetParent.clientWidth, 10) || 0;
    }

    // Invalid values become zero
    var i = parseInt(value, 10);
    if (isNaN(i) || !isFinite(i)) return 0;

    return i;
  }

});

},{"react/addons":154}],144:[function(require,module,exports){
module.exports={
	"version": "2015d",
	"zones": [
		"Africa/Abidjan|LMT GMT|g.8 0|01|-2ldXH.Q",
		"Africa/Accra|LMT GMT GHST|.Q 0 -k|012121212121212121212121212121212121212121212121|-26BbX.8 6tzX.8 MnE 1BAk MnE 1BAk MnE 1BAk MnE 1C0k MnE 1BAk MnE 1BAk MnE 1BAk MnE 1C0k MnE 1BAk MnE 1BAk MnE 1BAk MnE 1C0k MnE 1BAk MnE 1BAk MnE 1BAk MnE 1C0k MnE 1BAk MnE 1BAk MnE 1BAk MnE 1C0k MnE 1BAk MnE 1BAk MnE",
		"Africa/Addis_Ababa|LMT EAT BEAT BEAUT|-2r.g -30 -2u -2J|01231|-1F3Cr.g 3Dzr.g okMu MFXJ",
		"Africa/Algiers|PMT WET WEST CET CEST|-9.l 0 -10 -10 -20|0121212121212121343431312123431213|-2nco9.l cNb9.l HA0 19A0 1iM0 11c0 1oo0 Wo0 1rc0 QM0 1EM0 UM0 DA0 Imo0 rd0 De0 9Xz0 1fb0 1ap0 16K0 2yo0 mEp0 hwL0 jxA0 11A0 dDd0 17b0 11B0 1cN0 2Dy0 1cN0 1fB0 1cL0",
		"Africa/Bangui|LMT WAT|-d.A -10|01|-22y0d.A",
		"Africa/Bissau|LMT WAT GMT|12.k 10 0|012|-2ldWV.E 2xonV.E",
		"Africa/Blantyre|LMT CAT|-2a.k -20|01|-2GJea.k",
		"Africa/Cairo|EET EEST|-20 -30|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-1bIO0 vb0 1ip0 11z0 1iN0 1nz0 12p0 1pz0 10N0 1pz0 16p0 1jz0 s3d0 Vz0 1oN0 11b0 1oO0 10N0 1pz0 10N0 1pb0 10N0 1pb0 10N0 1pb0 10N0 1pz0 10N0 1pb0 10N0 1pb0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1WL0 rd0 1Rz0 wp0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1qL0 Xd0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1ny0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 WL0 1qN0 Rb0 1wp0 On0 1zd0 Lz0 1EN0 Fb0 c10 8n0 8Nd0 gL0 e10 mn0",
		"Africa/Casablanca|LMT WET WEST CET|u.k 0 -10 -10|012121212121212121312121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2gMnt.E 130Lt.E rb0 Dd0 dVb0 b6p0 TX0 EoB0 LL0 gnd0 rz0 43d0 AL0 1Nd0 XX0 1Cp0 pz0 dEp0 4mn0 SyN0 AL0 1Nd0 wn0 1FB0 Db0 1zd0 Lz0 1Nf0 wM0 co0 go0 1o00 s00 dA0 vc0 11A0 A00 e00 y00 11A0 uo0 e00 DA0 11A0 rA0 e00 Jc0 WM0 m00 gM0 M00 WM0 jc0 e00 RA0 11A0 dA0 e00 Uo0 11A0 800 gM0 Xc0 11A0 5c0 e00 17A0 WM0 2o0 e00 1ao0 19A0 1g00 16M0 1iM0 1400 1lA0 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qo0 1200 1kM0 14M0 1i00",
		"Africa/Ceuta|WET WEST CET CEST|0 -10 -10 -20|010101010101010101010232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-25KN0 11z0 drd0 18o0 3I00 17c0 1fA0 1a00 1io0 1a00 1y7p0 LL0 gnd0 rz0 43d0 AL0 1Nd0 XX0 1Cp0 pz0 dEp0 4VB0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Africa/El_Aaiun|LMT WAT WET WEST|Q.M 10 0 -10|0123232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1rDz7.c 1GVA7.c 6L0 AL0 1Nd0 XX0 1Cp0 pz0 1cBB0 AL0 1Nd0 wn0 1FB0 Db0 1zd0 Lz0 1Nf0 wM0 co0 go0 1o00 s00 dA0 vc0 11A0 A00 e00 y00 11A0 uo0 e00 DA0 11A0 rA0 e00 Jc0 WM0 m00 gM0 M00 WM0 jc0 e00 RA0 11A0 dA0 e00 Uo0 11A0 800 gM0 Xc0 11A0 5c0 e00 17A0 WM0 2o0 e00 1ao0 19A0 1g00 16M0 1iM0 1400 1lA0 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qo0 1200 1kM0 14M0 1i00",
		"Africa/Johannesburg|SAST SAST SAST|-1u -20 -30|012121|-2GJdu 1Ajdu 1cL0 1cN0 1cL0",
		"Africa/Juba|LMT CAT CAST EAT|-2a.8 -20 -30 -30|01212121212121212121212121212121213|-1yW2a.8 1zK0a.8 16L0 1iN0 17b0 1jd0 17b0 1ip0 17z0 1i10 17X0 1hB0 18n0 1hd0 19b0 1gp0 19z0 1iN0 17b0 1ip0 17z0 1i10 18n0 1hd0 18L0 1gN0 19b0 1gp0 19z0 1iN0 17z0 1i10 17X0 yGd0",
		"Africa/Monrovia|MMT LRT GMT|H.8 I.u 0|012|-23Lzg.Q 29s01.m",
		"Africa/Ndjamena|LMT WAT WAST|-10.c -10 -20|0121|-2le10.c 2J3c0.c Wn0",
		"Africa/Tripoli|LMT CET CEST EET|-Q.I -10 -20 -20|012121213121212121212121213123123|-21JcQ.I 1hnBQ.I vx0 4iP0 xx0 4eN0 Bb0 7ip0 U0n0 A10 1db0 1cN0 1db0 1dd0 1db0 1eN0 1bb0 1e10 1cL0 1c10 1db0 1dd0 1db0 1cN0 1db0 1q10 fAn0 1ep0 1db0 AKq0 TA0 1o00",
		"Africa/Tunis|PMT CET CEST|-9.l -10 -20|0121212121212121212121212121212121|-2nco9.l 18pa9.l 1qM0 DA0 3Tc0 11B0 1ze0 WM0 7z0 3d0 14L0 1cN0 1f90 1ar0 16J0 1gXB0 WM0 1rA0 11c0 nwo0 Ko0 1cM0 1cM0 1rA0 10M0 zuM0 10N0 1aN0 1qM0 WM0 1qM0 11A0 1o00",
		"Africa/Windhoek|SWAT SAST SAST CAT WAT WAST|-1u -20 -30 -20 -10 -20|012134545454545454545454545454545454545454545454545454545454545454545454545454545454545454545|-2GJdu 1Ajdu 1cL0 1SqL0 9NA0 11D0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 11B0 1nX0 11B0",
		"America/Adak|NST NWT NPT BST BDT AHST HST HDT|b0 a0 a0 b0 a0 a0 a0 90|012034343434343434343434343434343456767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17SX0 8wW0 iB0 Qlb0 52O0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cm0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Anchorage|CAT CAWT CAPT AHST AHDT YST AKST AKDT|a0 90 90 a0 90 90 90 80|012034343434343434343434343434343456767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17T00 8wX0 iA0 Qlb0 52O0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cm0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Anguilla|LMT AST|46.4 40|01|-2kNvR.U",
		"America/Araguaina|LMT BRT BRST|3c.M 30 20|0121212121212121212121212121212121212121212121212121|-2glwL.c HdKL.c 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 dMN0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 ny10 Lz0",
		"America/Argentina/Buenos_Aires|CMT ART ARST ART ARST|4g.M 40 30 30 20|0121212121212121212121212121212121212121213434343434343234343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wp0 Rb0 1wp0 TX0 g0p0 10M0 j3c0 uL0 1qN0 WL0",
		"America/Argentina/Catamarca|CMT ART ARST ART ARST WART|4g.M 40 30 30 20 40|0121212121212121212121212121212121212121213434343454343235343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 g0p0 10M0 ako0 7B0 8zb0 uL0",
		"America/Argentina/Cordoba|CMT ART ARST ART ARST WART|4g.M 40 30 30 20 40|0121212121212121212121212121212121212121213434343454343234343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 g0p0 10M0 j3c0 uL0 1qN0 WL0",
		"America/Argentina/Jujuy|CMT ART ARST ART ARST WART WARST|4g.M 40 30 30 20 40 30|01212121212121212121212121212121212121212134343456543432343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1ze0 TX0 1ld0 WK0 1wp0 TX0 g0p0 10M0 j3c0 uL0",
		"America/Argentina/La_Rioja|CMT ART ARST ART ARST WART|4g.M 40 30 30 20 40|01212121212121212121212121212121212121212134343434534343235343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Qn0 qO0 16n0 Rb0 1wp0 TX0 g0p0 10M0 ako0 7B0 8zb0 uL0",
		"America/Argentina/Mendoza|CMT ART ARST ART ARST WART WARST|4g.M 40 30 30 20 40 30|0121212121212121212121212121212121212121213434345656543235343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1u20 SL0 1vd0 Tb0 1wp0 TW0 g0p0 10M0 agM0 Op0 7TX0 uL0",
		"America/Argentina/Rio_Gallegos|CMT ART ARST ART ARST WART|4g.M 40 30 30 20 40|0121212121212121212121212121212121212121213434343434343235343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wp0 Rb0 1wp0 TX0 g0p0 10M0 ako0 7B0 8zb0 uL0",
		"America/Argentina/Salta|CMT ART ARST ART ARST WART|4g.M 40 30 30 20 40|01212121212121212121212121212121212121212134343434543432343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 g0p0 10M0 j3c0 uL0",
		"America/Argentina/San_Juan|CMT ART ARST ART ARST WART|4g.M 40 30 30 20 40|01212121212121212121212121212121212121212134343434534343235343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Qn0 qO0 16n0 Rb0 1wp0 TX0 g0p0 10M0 ak00 m10 8lb0 uL0",
		"America/Argentina/San_Luis|CMT ART ARST ART ARST WART WARST|4g.M 40 30 30 20 40 30|01212121212121212121212121212121212121212134343456536353465653|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 XX0 1q20 SL0 AN0 kin0 10M0 ak00 m10 8lb0 8L0 jd0 1qN0 WL0 1qN0",
		"America/Argentina/Tucuman|CMT ART ARST ART ARST WART|4g.M 40 30 30 20 40|012121212121212121212121212121212121212121343434345434323534343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 g0p0 10M0 ako0 4N0 8BX0 uL0 1qN0 WL0",
		"America/Argentina/Ushuaia|CMT ART ARST ART ARST WART|4g.M 40 30 30 20 40|0121212121212121212121212121212121212121213434343434343235343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wp0 Rb0 1wp0 TX0 g0p0 10M0 ajA0 8p0 8zb0 uL0",
		"America/Aruba|LMT ANT AST|4z.L 4u 40|012|-2kV7o.d 28KLS.d",
		"America/Asuncion|AMT PYT PYT PYST|3O.E 40 30 30|012131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313|-1x589.k 1DKM9.k 3CL0 3Dd0 10L0 1pB0 10n0 1pB0 10n0 1pB0 1cL0 1dd0 1db0 1dd0 1cL0 1dd0 1cL0 1dd0 1cL0 1dd0 1db0 1dd0 1cL0 1dd0 1cL0 1dd0 1cL0 1dd0 1db0 1dd0 1cL0 1lB0 14n0 1dd0 1cL0 1fd0 WL0 1rd0 1aL0 1dB0 Xz0 1qp0 Xb0 1qN0 10L0 1rB0 TX0 1tB0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 1cL0 WN0 1qL0 11B0 1nX0 1ip0 WL0 1qN0 WL0 1qN0 WL0 1tB0 TX0 1tB0 TX0 1tB0 19X0 1a10 1fz0 1a10 1fz0 1cN0 17b0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0",
		"America/Atikokan|CST CDT CWT CPT EST|60 50 50 50 50|0101234|-25TQ0 1in0 Rnb0 3je0 8x30 iw0",
		"America/Bahia|LMT BRT BRST|2y.4 30 20|01212121212121212121212121212121212121212121212121212121212121|-2glxp.U HdLp.U 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 l5B0 Rb0",
		"America/Bahia_Banderas|LMT MST CST PST MDT CDT|71 70 60 80 60 50|0121212131414141414141414141414141414152525252525252525252525252525252525252525252525252525252|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 otX0 gmN0 P2N0 13Vd0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nW0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0",
		"America/Barbados|LMT BMT AST ADT|3W.t 3W.t 40 30|01232323232|-1Q0I1.v jsM0 1ODC1.v IL0 1ip0 17b0 1ip0 17b0 1ld0 13b0",
		"America/Belem|LMT BRT BRST|3d.U 30 20|012121212121212121212121212121|-2glwK.4 HdKK.4 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0",
		"America/Belize|LMT CST CHDT CDT|5Q.M 60 5u 50|01212121212121212121212121212121212121212121212121213131|-2kBu7.c fPA7.c Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1f0Mu qn0 lxB0 mn0",
		"America/Blanc-Sablon|AST ADT AWT APT|40 30 30 30|010230|-25TS0 1in0 UGp0 8x50 iu0",
		"America/Boa_Vista|LMT AMT AMST|42.E 40 30|0121212121212121212121212121212121|-2glvV.k HdKV.k 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 smp0 WL0 1tB0 2L0",
		"America/Bogota|BMT COT COST|4U.g 50 40|0121|-2eb73.I 38yo3.I 2en0",
		"America/Boise|PST PDT MST MWT MPT MDT|80 70 70 60 60 60|0101023425252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252|-261q0 1nX0 11B0 1nX0 8C10 JCL0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 Dd0 1Kn0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Cambridge_Bay|zzz MST MWT MPT MDDT MDT CST CDT EST|0 70 60 60 50 60 60 50 50|0123141515151515151515151515151515151515151515678651515151515151515151515151515151515151515151515151515151515151515151515151|-21Jc0 RO90 8x20 ix0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11A0 1nX0 2K0 WQ0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Campo_Grande|LMT AMT AMST|3C.s 40 30|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212|-2glwl.w HdLl.w 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 1C10 Lz0 1Ip0 HX0 1zd0 On0 1HB0 IL0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1C10 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1C10 Lz0 1C10 Lz0 1C10 Lz0 1C10 On0 1zd0 Rb0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0",
		"America/Cancun|LMT CST EST EDT CDT|5L.4 60 50 40 50|0123232341414141414141414141414141414141412|-1UQG0 2q2o0 yLB0 1lb0 14p0 1lb0 14p0 Lz0 xB0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 Dd0",
		"America/Caracas|CMT VET VET|4r.E 4u 40|0121|-2kV7w.k 28KM2.k 1IwOu",
		"America/Cayenne|LMT GFT GFT|3t.k 40 30|012|-2mrwu.E 2gWou.E",
		"America/Cayman|CMT EST|5j.A 50|01|-2uduE.o",
		"America/Chicago|CST CDT EST CWT CPT|60 50 50 50 50|01010101010101010101010101010101010102010101010103401010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 1wp0 TX0 WN0 1qL0 1cN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 11B0 1Hz0 14p0 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 RB0 8x30 iw0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Chihuahua|LMT MST CST CDT MDT|74.k 70 60 50 60|0121212323241414141414141414141414141414141414141414141414141414141414141414141414141414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 2zQN0 1lb0 14p0 1lb0 14q0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0",
		"America/Costa_Rica|SJMT CST CDT|5A.d 60 50|0121212121|-1Xd6n.L 2lu0n.L Db0 1Kp0 Db0 pRB0 15b0 1kp0 mL0",
		"America/Creston|MST PST|70 80|010|-29DR0 43B0",
		"America/Cuiaba|LMT AMT AMST|3I.k 40 30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212|-2glwf.E HdLf.E 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 4a10 HX0 1zd0 On0 1HB0 IL0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1C10 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1C10 Lz0 1C10 Lz0 1C10 Lz0 1C10 On0 1zd0 Rb0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0",
		"America/Danmarkshavn|LMT WGT WGST GMT|1e.E 30 20 0|01212121212121212121212121212121213|-2a5WJ.k 2z5fJ.k 19U0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 DC0",
		"America/Dawson|YST YDT YWT YPT YDDT PST PDT|90 80 80 80 70 80 70|0101023040565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565|-25TN0 1in0 1o10 13V0 Ser0 8x00 iz0 LCL0 1fA0 jrA0 fNd0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Dawson_Creek|PST PDT PWT PPT MST|80 70 70 70 70|0102301010101010101010101010101010101010101010101010101014|-25TO0 1in0 UGp0 8x10 iy0 3NB0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 ML0",
		"America/Denver|MST MDT MWT MPT|70 60 60 60|01010101023010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261r0 1nX0 11B0 1nX0 11B0 1qL0 WN0 mn0 Ord0 8x20 ix0 LCN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Detroit|LMT CST EST EWT EPT EDT|5w.b 60 50 40 40 40|01234252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252|-2Cgir.N peqr.N 156L0 8x40 iv0 6fd0 11z0 Jy10 SL0 dnB0 1cL0 s10 1Vz0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Edmonton|LMT MST MDT MWT MPT|7x.Q 70 60 60 60|01212121212121341212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2yd4q.8 shdq.8 1in0 17d0 hz0 2dB0 1fz0 1a10 11z0 1qN0 WL0 1qN0 11z0 IGN0 8x20 ix0 3NB0 11z0 LFB0 1cL0 3Cp0 1cL0 66N0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Eirunepe|LMT ACT ACST AMT|4D.s 50 40 40|0121212121212121212121212121212131|-2glvk.w HdLk.w 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 dPB0 On0 yTd0 d5X0",
		"America/El_Salvador|LMT CST CDT|5U.M 60 50|012121|-1XiG3.c 2Fvc3.c WL0 1qN0 WL0",
		"America/Ensenada|LMT MST PST PDT PWT PPT|7M.4 70 80 70 70 70|012123245232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1UQE0 4PX0 8mM0 8lc0 SN0 1cL0 pHB0 83r0 zI0 5O10 1Rz0 cOP0 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 BUp0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 U10 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Fort_Wayne|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|010101023010101010101010101040454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 QI10 Db0 RB0 8x30 iw0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 5Tz0 1o10 qLb0 1cL0 1cN0 1cL0 1qhd0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Fortaleza|LMT BRT BRST|2y 30 20|0121212121212121212121212121212121212121|-2glxq HdLq 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 nsp0 WL0 1tB0 5z0 2mN0 On0",
		"America/Glace_Bay|LMT AST ADT AWT APT|3X.M 40 30 30 30|012134121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2IsI0.c CwO0.c 1in0 UGp0 8x50 iu0 iq10 11z0 Jg10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Godthab|LMT WGT WGST|3q.U 30 20|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2a5Ux.4 2z5dx.4 19U0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"America/Goose_Bay|NST NDT NST NDT NWT NPT AST ADT ADDT|3u.Q 2u.Q 3u 2u 2u 2u 40 30 20|010232323232323245232323232323232323232323232323232323232326767676767676767676767676767676767676767676768676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-25TSt.8 1in0 DXb0 2HbX.8 WL0 1qN0 WL0 1qN0 WL0 1tB0 TX0 1tB0 WL0 1qN0 WL0 1qN0 7UHu itu 1tB0 WL0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1tB0 WL0 1ld0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 S10 g0u 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14n1 1lb0 14p0 1nW0 11C0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zcX Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Grand_Turk|KMT EST EDT AST|57.b 50 40 40|0121212121212121212121212121212121212121212121212121212121212121212121212123|-2l1uQ.N 2HHBQ.N 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Guatemala|LMT CST CDT|62.4 60 50|0121212121|-24KhV.U 2efXV.U An0 mtd0 Nz0 ifB0 17b0 zDB0 11z0",
		"America/Guayaquil|QMT ECT|5e 50|01|-1yVSK",
		"America/Guyana|LMT GBGT GYT GYT GYT|3Q.E 3J 3J 30 40|01234|-2dvU7.k 24JzQ.k mlc0 Bxbf",
		"America/Halifax|LMT AST ADT AWT APT|4e.o 40 30 30 30|0121212121212121212121212121212121212121212121212134121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2IsHJ.A xzzJ.A 1db0 3I30 1in0 3HX0 IL0 1E10 ML0 1yN0 Pb0 1Bd0 Mn0 1Bd0 Rz0 1w10 Xb0 1w10 LX0 1w10 Xb0 1w10 Lz0 1C10 Jz0 1E10 OL0 1yN0 Un0 1qp0 Xb0 1qp0 11X0 1w10 Lz0 1HB0 LX0 1C10 FX0 1w10 Xb0 1qp0 Xb0 1BB0 LX0 1td0 Xb0 1qp0 Xb0 Rf0 8x50 iu0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 3Qp0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 3Qp0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 6i10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Havana|HMT CST CDT|5t.A 50 40|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1Meuu.o 72zu.o ML0 sld0 An0 1Nd0 Db0 1Nd0 An0 6Ep0 An0 1Nd0 An0 JDd0 Mn0 1Ap0 On0 1fd0 11X0 1qN0 WL0 1wp0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 14n0 1ld0 14L0 1kN0 15b0 1kp0 1cL0 1cN0 1fz0 1a10 1fz0 1fB0 11z0 14p0 1nX0 11B0 1nX0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 14n0 1ld0 14n0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 1a10 1in0 1a10 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 17c0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 11A0 6i00 Rc0 1wo0 U00 1tA0 Rc0 1wo0 U00 1wo0 U00 1zc0 U00 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0",
		"America/Hermosillo|LMT MST CST PST MDT|7n.Q 70 60 80 60|0121212131414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 otX0 gmN0 P2N0 13Vd0 1lb0 14p0 1lb0 14p0 1lb0",
		"America/Indiana/Knox|CST CDT CWT CPT EST|60 50 50 50 50|0101023010101010101010101010101010101040101010101010101010101010101010101010101010101010141010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 3NB0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 11z0 1o10 11z0 1o10 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 3Cn0 8wp0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 z8o0 1o00 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Indiana/Marengo|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|0101023010101010101010104545454545414545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 dyN0 11z0 6fd0 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 jrz0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1VA0 LA0 1BX0 1e6p0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Indiana/Petersburg|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010104010101010101010101010141014545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 njX0 WN0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 3Fb0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 19co0 1o00 Rd0 1zb0 Oo0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Indiana/Tell_City|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010101010454541010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 1o10 11z0 g0p0 11z0 1o10 11z0 1qL0 WN0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 caL0 1cL0 1cN0 1cL0 1qhd0 1o00 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Indiana/Vevay|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|010102304545454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 kPB0 Awn0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1lnd0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Indiana/Vincennes|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010101010454541014545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 1o10 11z0 g0p0 11z0 1o10 11z0 1qL0 WN0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 caL0 1cL0 1cN0 1cL0 1qhd0 1o00 Rd0 1zb0 Oo0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Indiana/Winamac|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010101010101010454541054545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 jrz0 1cL0 1cN0 1cL0 1qhd0 1o00 Rd0 1za0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Inuvik|zzz PST PDDT MST MDT|0 80 60 70 60|0121343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343|-FnA0 tWU0 1fA0 wPe0 2pz0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Iqaluit|zzz EWT EPT EST EDDT EDT CST CDT|0 40 40 50 30 40 60 50|01234353535353535353535353535353535353535353567353535353535353535353535353535353535353535353535353535353535353535353535353|-16K00 7nX0 iv0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11C0 1nX0 11A0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Jamaica|KMT EST EDT|57.b 50 40|0121212121212121212121|-2l1uQ.N 2uM1Q.N 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0",
		"America/Juneau|PST PWT PPT PDT YDT YST AKST AKDT|80 70 70 70 80 90 90 80|01203030303030303030303030403030356767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17T20 8x10 iy0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cM0 1cM0 1cL0 1cN0 1fz0 1a10 1fz0 co0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Kentucky/Louisville|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|0101010102301010101010101010101010101454545454545414545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 3Fd0 Nb0 LPd0 11z0 RB0 8x30 iw0 Bb0 10N0 2bB0 8in0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 xz0 gso0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1VA0 LA0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Kentucky/Monticello|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|0101023010101010101010101010101010101010101010101010101010101010101010101454545454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 SWp0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11A0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/La_Paz|CMT BOST BOT|4w.A 3w.A 40|012|-1x37r.o 13b0",
		"America/Lima|LMT PET PEST|58.A 50 40|0121212121212121|-2tyGP.o 1bDzP.o zX0 1aN0 1cL0 1cN0 1cL0 1PrB0 zX0 1O10 zX0 6Gp0 zX0 98p0 zX0",
		"America/Los_Angeles|PST PDT PWT PPT|80 70 70 70|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261q0 1nX0 11B0 1nX0 SgN0 8x10 iy0 5Wp0 1Vb0 3dB0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Maceio|LMT BRT BRST|2m.Q 30 20|012121212121212121212121212121212121212121|-2glxB.8 HdLB.8 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 dMN0 Lz0 8Q10 WL0 1tB0 5z0 2mN0 On0",
		"America/Managua|MMT CST EST CDT|5J.c 60 50 50|0121313121213131|-1quie.M 1yAMe.M 4mn0 9Up0 Dz0 1K10 Dz0 s3F0 1KH0 DB0 9In0 k8p0 19X0 1o30 11y0",
		"America/Manaus|LMT AMT AMST|40.4 40 30|01212121212121212121212121212121|-2glvX.U HdKX.U 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 dPB0 On0",
		"America/Martinique|FFMT AST ADT|44.k 40 30|0121|-2mPTT.E 2LPbT.E 19X0",
		"America/Matamoros|LMT CST CDT|6E 60 50|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1UQG0 2FjC0 1nX0 i6p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 U10 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Mazatlan|LMT MST CST PST MDT|75.E 70 60 80 60|0121212131414141414141414141414141414141414141414141414141414141414141414141414141414141414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 otX0 gmN0 P2N0 13Vd0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0",
		"America/Menominee|CST CDT CWT CPT EST|60 50 50 50 50|01010230101041010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 1o10 11z0 LCN0 1fz0 6410 9Jb0 1cM0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Merida|LMT CST EST CDT|5W.s 60 50 50|0121313131313131313131313131313131313131313131313131313131313131313131313131313131313131|-1UQG0 2q2o0 2hz0 wu30 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0",
		"America/Metlakatla|PST PWT PPT PDT|80 70 70 70|0120303030303030303030303030303030|-17T20 8x10 iy0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0",
		"America/Mexico_City|LMT MST CST CDT CWT|6A.A 70 60 50 50|012121232324232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 gEn0 TX0 3xd0 Jb0 6zB0 SL0 e5d0 17b0 1Pff0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0",
		"America/Miquelon|LMT AST PMST PMDT|3I.E 40 30 20|012323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-2mKkf.k 2LTAf.k gQ10 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Moncton|EST AST ADT AWT APT|50 40 30 30 30|012121212121212121212134121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2IsH0 CwN0 1in0 zAo0 An0 1Nd0 An0 1Nd0 An0 1Nd0 An0 1Nd0 An0 1Nd0 An0 1K10 Lz0 1zB0 NX0 1u10 Wn0 S20 8x50 iu0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 3Cp0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14n1 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 ReX 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Monterrey|LMT CST CDT|6F.g 60 50|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1UQG0 2FjC0 1nX0 i6p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0",
		"America/Montevideo|MMT UYT UYHST UYST UYT UYHST|3I.I 3u 30 20 30 2u|012121212121212121212121213434343434345454543453434343434343434343434343434343434343434343434343434343434343434343434343434343434343|-20UIf.g 8jzJ.g 1cLu 1dcu 1cLu 1dcu 1cLu ircu 11zu 1o0u 11zu 1o0u 11zu 1qMu WLu 1qMu WLu 1qMu WLu 1qMu 11zu 1o0u 11zu NAu 11bu 2iMu zWu Dq10 19X0 pd0 jz0 cm10 19X0 1fB0 1on0 11d0 1oL0 1nB0 1fzu 1aou 1fzu 1aou 1fzu 3nAu Jb0 3MN0 1SLu 4jzu 2PB0 Lb0 3Dd0 1pb0 ixd0 An0 1MN0 An0 1wp0 On0 1wp0 Rb0 1zd0 On0 1wp0 Rb0 s8p0 1fB0 1ip0 11z0 1ld0 14n0 1o10 11z0 1o10 11z0 1o10 14n0 1ld0 14n0 1ld0 14n0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 14n0 1ld0 14n0 1ld0 14n0 1o10 11z0 1o10 11z0 1o10 14n0 1ld0 14n0 1ld0 14n0 1ld0 14n0 1o10 11z0 1o10 11z0 1o10 14n0 1ld0 14n0 1ld0 14n0 1o10 11z0 1o10 11z0 1o10 14n0 1ld0 14n0 1ld0 14n0 1ld0 14n0 1o10 11z0 1o10 11z0 1o10",
		"America/Montreal|EST EDT EWT EPT|50 40 40 40|01010101010101010101010101010101010101010101012301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TR0 1in0 11Wu 1nzu 1fD0 WJ0 1wr0 Nb0 1Ap0 On0 1zd0 On0 1wp0 TX0 1tB0 TX0 1tB0 TX0 1tB0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 4kM0 8x40 iv0 1o10 11z0 1nX0 11z0 1o10 11z0 1o10 1qL0 11D0 1nX0 11B0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Nassau|LMT EST EDT|59.u 50 40|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2kNuO.u 26XdO.u 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/New_York|EST EDT EWT EPT|50 40 40 40|01010101010101010101010101010101010101010101010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261t0 1nX0 11B0 1nX0 11B0 1qL0 1a10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 RB0 8x40 iv0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Nipigon|EST EDT EWT EPT|50 40 40 40|010123010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TR0 1in0 Rnb0 3je0 8x40 iv0 19yN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Nome|NST NWT NPT BST BDT YST AKST AKDT|b0 a0 a0 b0 a0 90 90 80|012034343434343434343434343434343456767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17SX0 8wW0 iB0 Qlb0 52O0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cl0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Noronha|LMT FNT FNST|29.E 20 10|0121212121212121212121212121212121212121|-2glxO.k HdKO.k 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 nsp0 WL0 1tB0 2L0 2pB0 On0",
		"America/North_Dakota/Beulah|MST MDT MWT MPT CST CDT|70 60 60 60 60 50|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101014545454545454545454545454545454545454545454545454545454|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Oo0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/North_Dakota/Center|MST MDT MWT MPT CST CDT|70 60 60 60 60 50|010102301010101010101010101010101010101010101010101010101014545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14o0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/North_Dakota/New_Salem|MST MDT MWT MPT CST CDT|70 60 60 60 60 50|010102301010101010101010101010101010101010101010101010101010101010101010101010101454545454545454545454545454545454545454545454545454545454545454545454|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14o0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Ojinaga|LMT MST CST CDT MDT|6V.E 70 60 50 60|0121212323241414141414141414141414141414141414141414141414141414141414141414141414141414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 2zQN0 1lb0 14p0 1lb0 14q0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 U10 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Pangnirtung|zzz AST AWT APT ADDT ADT EDT EST CST CDT|0 40 30 30 20 30 40 50 60 50|012314151515151515151515151515151515167676767689767676767676767676767676767676767676767676767676767676767676767676767676767|-1XiM0 PnG0 8x50 iu0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1o00 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11C0 1nX0 11A0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Paramaribo|LMT PMT PMT NEGT SRT SRT|3E.E 3E.Q 3E.A 3u 3u 30|012345|-2nDUj.k Wqo0.c qanX.I 1dmLN.o lzc0",
		"America/Phoenix|MST MDT MWT|70 60 60|01010202010|-261r0 1nX0 11B0 1nX0 SgN0 4Al1 Ap0 1db0 SWqX 1cL0",
		"America/Port-au-Prince|PPMT EST EDT|4N 50 40|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-28RHb 2FnMb 19X0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14q0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 i6n0 1nX0 11B0 1nX0 d430 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Porto_Acre|LMT ACT ACST AMT|4v.c 50 40 40|01212121212121212121212121212131|-2glvs.M HdLs.M 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 NBd0 d5X0",
		"America/Porto_Velho|LMT AMT AMST|4f.A 40 30|012121212121212121212121212121|-2glvI.o HdKI.o 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0",
		"America/Puerto_Rico|AST AWT APT|40 30 30|0120|-17lU0 7XT0 iu0",
		"America/Rainy_River|CST CDT CWT CPT|60 50 50 50|010123010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TQ0 1in0 Rnb0 3je0 8x30 iw0 19yN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Rankin_Inlet|zzz CST CDDT CDT EST|0 60 40 50 50|012131313131313131313131313131313131313131313431313131313131313131313131313131313131313131313131313131313131313131313131|-vDc0 keu0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Recife|LMT BRT BRST|2j.A 30 20|0121212121212121212121212121212121212121|-2glxE.o HdLE.o 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 nsp0 WL0 1tB0 2L0 2pB0 On0",
		"America/Regina|LMT MST MDT MWT MPT CST|6W.A 70 60 60 60 60|012121212121212121212121341212121212121212121212121215|-2AD51.o uHe1.o 1in0 s2L0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 66N0 1cL0 1cN0 19X0 1fB0 1cL0 1fB0 1cL0 1cN0 1cL0 M30 8x20 ix0 1ip0 1cL0 1ip0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 3NB0 1cL0 1cN0",
		"America/Resolute|zzz CST CDDT CDT EST|0 60 40 50 50|012131313131313131313131313131313131313131313431313131313431313131313131313131313131313131313131313131313131313131313131|-SnA0 GWS0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Santa_Isabel|LMT MST PST PDT PWT PPT|7D.s 70 80 70 70 70|012123245232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1UQE0 4PX0 8mM0 8lc0 SN0 1cL0 pHB0 83r0 zI0 5O10 1Rz0 cOP0 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 BUp0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0",
		"America/Santarem|LMT AMT AMST BRT|3C.M 40 30 30|0121212121212121212121212121213|-2glwl.c HdLl.c 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 NBd0",
		"America/Santiago|SMT CLT CLT CLST CLST CLT|4G.K 50 40 40 30 30|01020313131313121242124242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424245|-2q2jh.e fJAh.e 5knG.K 1Vzh.e jRAG.K 1pbh.e 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 nHX0 op0 9Bz0 jb0 1oN0 ko0 Qeo0 WL0 1zd0 On0 1ip0 11z0 1o10 11z0 1qN0 WL0 1ld0 14n0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 1cL0 1cN0 11z0 1o10 11z0 1qN0 WL0 1fB0 19X0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1ip0 1fz0 1fB0 11z0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1o10 19X0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 1wn0",
		"America/Santo_Domingo|SDMT EST EDT EHDT AST|4E 50 40 4u 40|01213131313131414|-1ttjk 1lJMk Mn0 6sp0 Lbu 1Cou yLu 1RAu wLu 1QMu xzu 1Q0u xXu 1PAu 13jB0 e00",
		"America/Sao_Paulo|LMT BRT BRST|36.s 30 20|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212|-2glwR.w HdKR.w 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 pTd0 PX0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 1C10 Lz0 1Ip0 HX0 1zd0 On0 1HB0 IL0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1C10 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1C10 Lz0 1C10 Lz0 1C10 Lz0 1C10 On0 1zd0 Rb0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0",
		"America/Scoresbysund|LMT CGT CGST EGST EGT|1r.Q 20 10 0 10|0121343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434|-2a5Ww.8 2z5ew.8 1a00 1cK0 1cL0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"America/Sitka|PST PWT PPT PDT YST AKST AKDT|80 70 70 70 90 90 80|01203030303030303030303030303030345656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565|-17T20 8x10 iy0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 co0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/St_Johns|NST NDT NST NDT NWT NPT NDDT|3u.Q 2u.Q 3u 2u 2u 2u 1u|01010101010101010101010101010101010102323232323232324523232323232323232323232323232323232323232323232323232323232323232323232323232323232326232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-28oit.8 14L0 1nB0 1in0 1gm0 Dz0 1JB0 1cL0 1cN0 1cL0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 1cL0 1cN0 1cL0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 1cL0 1fB0 19X0 1fB0 19X0 10O0 eKX.8 19X0 1iq0 WL0 1qN0 WL0 1qN0 WL0 1tB0 TX0 1tB0 WL0 1qN0 WL0 1qN0 7UHu itu 1tB0 WL0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1tB0 WL0 1ld0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14n1 1lb0 14p0 1nW0 11C0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zcX Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Swift_Current|LMT MST MDT MWT MPT CST|7b.k 70 60 60 60 60|012134121212121212121215|-2AD4M.E uHdM.E 1in0 UGp0 8x20 ix0 1o10 17b0 1ip0 11z0 1o10 11z0 1o10 11z0 isN0 1cL0 3Cp0 1cL0 1cN0 11z0 1qN0 WL0 pMp0",
		"America/Tegucigalpa|LMT CST CDT|5M.Q 60 50|01212121|-1WGGb.8 2ETcb.8 WL0 1qN0 WL0 GRd0 AL0",
		"America/Thule|LMT AST ADT|4z.8 40 30|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2a5To.Q 31NBo.Q 1cL0 1cN0 1cL0 1fB0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Thunder_Bay|CST EST EWT EPT EDT|60 50 40 40 40|0123141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141|-2q5S0 1iaN0 8x40 iv0 XNB0 1cL0 1cN0 1fz0 1cN0 1cL0 3Cp0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Vancouver|PST PDT PWT PPT|80 70 70 70|0102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TO0 1in0 UGp0 8x10 iy0 1o10 17b0 1ip0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Whitehorse|YST YDT YWT YPT YDDT PST PDT|90 80 80 80 70 80 70|0101023040565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565|-25TN0 1in0 1o10 13V0 Ser0 8x00 iz0 LCL0 1fA0 3NA0 vrd0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Winnipeg|CST CDT CWT CPT|60 50 50 50|010101023010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aIi0 WL0 3ND0 1in0 Jap0 Rb0 aCN0 8x30 iw0 1tB0 11z0 1ip0 11z0 1o10 11z0 1o10 11z0 1rd0 10L0 1op0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 1cL0 1cN0 11z0 6i10 WL0 6i10 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1a00 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1a00 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Yakutat|YST YWT YPT YDT AKST AKDT|90 80 80 80 90 80|01203030303030303030303030303030304545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-17T10 8x00 iz0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cn0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Yellowknife|zzz MST MWT MPT MDDT MDT|0 70 60 60 50 60|012314151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151|-1pdA0 hix0 8x20 ix0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"Antarctica/Casey|zzz AWST CAST|0 -80 -b0|012121|-2q00 1DjS0 T90 40P0 KL0",
		"Antarctica/Davis|zzz DAVT DAVT|0 -70 -50|01012121|-vyo0 iXt0 alj0 1D7v0 VB0 3Wn0 KN0",
		"Antarctica/DumontDUrville|zzz PMT DDUT|0 -a0 -a0|0102|-U0o0 cfq0 bFm0",
		"Antarctica/Macquarie|AEST AEDT zzz MIST|-a0 -b0 0 -b0|0102010101010101010101010101010101010101010101010101010101010101010101010101010101010101013|-29E80 19X0 4SL0 1ayy0 Lvs0 1cM0 1o00 Rc0 1wo0 Rc0 1wo0 U00 1wo0 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1qM0 WM0 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1wo0 WM0 1tA0 WM0 1tA0 U00 1tA0 U00 1tA0 11A0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 11A0 1o00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1cM0 1cM0 1cM0",
		"Antarctica/Mawson|zzz MAWT MAWT|0 -60 -50|012|-CEo0 2fyk0",
		"Antarctica/McMurdo|NZMT NZST NZST NZDT|-bu -cu -c0 -d0|01020202020202020202020202023232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323|-1GCVu Lz0 1tB0 11zu 1o0u 11zu 1o0u 11zu 1o0u 14nu 1lcu 14nu 1lcu 1lbu 11Au 1nXu 11Au 1nXu 11Au 1nXu 11Au 1nXu 11Au 1qLu WMu 1qLu 11Au 1n1bu IM0 1C00 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1qM0 14o0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1io0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00",
		"Antarctica/Palmer|zzz ARST ART ART ARST CLT CLST CLT|0 30 40 30 20 40 30 30|012121212123435656565656565656565656565656565656565656565656565656565656565656567|-cao0 nD0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 jsN0 14N0 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 1cL0 1cN0 11z0 1o10 11z0 1qN0 WL0 1fB0 19X0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1ip0 1fz0 1fB0 11z0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1o10 19X0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 1wn0",
		"Antarctica/Rothera|zzz ROTT|0 30|01|gOo0",
		"Antarctica/Syowa|zzz SYOT|0 -30|01|-vs00",
		"Antarctica/Troll|zzz UTC CEST|0 0 -20|01212121212121212121212121212121212121212121212121212121212121212121|1puo0 hd0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Antarctica/Vostok|zzz VOST|0 -60|01|-tjA0",
		"Arctic/Longyearbyen|CET CEST|-10 -20|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2awM0 Qm0 W6o0 5pf0 WM0 1fA0 1cM0 1cM0 1cM0 1cM0 wJc0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1qM0 WM0 zpc0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Asia/Aden|LMT AST|-36.Q -30|01|-TvD6.Q",
		"Asia/Almaty|LMT ALMT ALMT ALMST|-57.M -50 -60 -70|0123232323232323232323232323232323232323232323232|-1Pc57.M eUo7.M 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 3Cl0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0",
		"Asia/Amman|LMT EET EEST|-2n.I -20 -30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1yW2n.I 1HiMn.I KL0 1oN0 11b0 1oN0 11b0 1pd0 1dz0 1cp0 11b0 1op0 11b0 fO10 1db0 1e10 1cL0 1cN0 1cL0 1cN0 1fz0 1pd0 10n0 1ld0 14n0 1hB0 15b0 1ip0 19X0 1cN0 1cL0 1cN0 17b0 1ld0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1So0 y00 1fc0 1dc0 1co0 1dc0 1cM0 1cM0 1cM0 1o00 11A0 1lc0 17c0 1cM0 1cM0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 4bX0 Dd0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0",
		"Asia/Anadyr|LMT ANAT ANAT ANAST ANAST ANAST ANAT|-bN.U -c0 -d0 -e0 -d0 -c0 -b0|01232414141414141414141561414141414141414141414141414141414141561|-1PcbN.U eUnN.U 23CL0 1db0 1cN0 1dc0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qN0 WM0",
		"Asia/Aqtau|LMT FORT FORT SHET SHET SHEST AQTT AQTST AQTST AQTT|-3l.4 -40 -50 -50 -60 -60 -50 -60 -50 -40|012345353535353535353536767676898989898989898989896|-1Pc3l.4 eUnl.4 1jcL0 JDc0 1cL0 1dc0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2UK0 Fz0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cN0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 RW0",
		"Asia/Aqtobe|LMT AKTT AKTT AKTST AKTT AQTT AQTST|-3M.E -40 -50 -60 -60 -50 -60|01234323232323232323232565656565656565656565656565|-1Pc3M.E eUnM.E 23CL0 1db0 1cM0 1dc0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2UK0 Fz0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0",
		"Asia/Ashgabat|LMT ASHT ASHT ASHST ASHST TMT TMT|-3R.w -40 -50 -60 -50 -40 -50|012323232323232323232324156|-1Pc3R.w eUnR.w 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 ba0 xC0",
		"Asia/Baghdad|BMT AST ADT|-2V.A -30 -40|012121212121212121212121212121212121212121212121212121|-26BeV.A 2ACnV.A 11b0 1cp0 1dz0 1dd0 1db0 1cN0 1cp0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1de0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0",
		"Asia/Bahrain|LMT GST AST|-3q.8 -40 -30|012|-21Jfq.8 27BXq.8",
		"Asia/Baku|LMT BAKT BAKT BAKST BAKST AZST AZT AZT AZST|-3j.o -30 -40 -50 -40 -40 -30 -40 -50|0123232323232323232323245657878787878787878787878787878787878787878787878787878787878787878787878787878787878787|-1Pc3j.o 1jUoj.o WCL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 10K0 c30 1cJ0 1cL0 8wu0 1o00 11z0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Asia/Bangkok|BMT ICT|-6G.4 -70|01|-218SG.4",
		"Asia/Beirut|EET EEST|-20 -30|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-21aq0 1on0 1410 1db0 19B0 1in0 1ip0 WL0 1lQp0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 11b0 q6N0 En0 1oN0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 11b0 1op0 11b0 dA10 17b0 1iN0 17b0 1iN0 17b0 1iN0 17b0 1vB0 SL0 1mp0 13z0 1iN0 17b0 1iN0 17b0 1jd0 12n0 1a10 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0",
		"Asia/Bishkek|LMT FRUT FRUT FRUST FRUST KGT KGST KGT|-4W.o -50 -60 -70 -60 -50 -60 -60|01232323232323232323232456565656565656565656565656567|-1Pc4W.o eUnW.o 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 11c0 1tX0 17b0 1ip0 17b0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1cPu 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 T8u",
		"Asia/Brunei|LMT BNT BNT|-7D.E -7u -80|012|-1KITD.E gDc9.E",
		"Asia/Calcutta|HMT BURT IST IST|-5R.k -6u -5u -6u|01232|-18LFR.k 1unn.k HB0 7zX0",
		"Asia/Chita|LMT YAKT YAKT YAKST YAKST YAKT IRKT|-7x.Q -80 -90 -a0 -90 -a0 -80|012323232323232323232324123232323232323232323232323232323232323256|-21Q7x.Q pAnx.Q 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0",
		"Asia/Choibalsan|LMT ULAT ULAT CHOST CHOT CHOT CHOST|-7C -70 -80 -a0 -90 -80 -90|0123434343434343434343434343434343434343434343456565656565656565656565656565656565656565656565|-2APHC 2UkoC cKn0 1da0 1dd0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 6hD0 11z0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 3Db0 h1f0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0",
		"Asia/Chongqing|CST CDT|-80 -90|01010101010101010|-1c1I0 LX0 16p0 1jz0 1Myp0 Rb0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0",
		"Asia/Colombo|MMT IST IHST IST LKT LKT|-5j.w -5u -60 -6u -6u -60|01231451|-2zOtj.w 1rFbN.w 1zzu 7Apu 23dz0 11zu n3cu",
		"Asia/Dacca|HMT BURT IST DACT BDT BDST|-5R.k -6u -5u -60 -60 -70|01213454|-18LFR.k 1unn.k HB0 m6n0 LqMu 1x6n0 1i00",
		"Asia/Damascus|LMT EET EEST|-2p.c -20 -30|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-21Jep.c Hep.c 17b0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1xRB0 11X0 1oN0 10L0 1pB0 11b0 1oN0 10L0 1mp0 13X0 1oN0 11b0 1pd0 11b0 1oN0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 Nb0 1AN0 Nb0 bcp0 19X0 1gp0 19X0 3ld0 1xX0 Vd0 1Bz0 Sp0 1vX0 10p0 1dz0 1cN0 1cL0 1db0 1db0 1g10 1an0 1ap0 1db0 1fd0 1db0 1cN0 1db0 1dd0 1db0 1cp0 1dz0 1c10 1dX0 1cN0 1db0 1dd0 1db0 1cN0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1db0 1cN0 1db0 1cN0 19z0 1fB0 1qL0 11B0 1on0 Wp0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0",
		"Asia/Dili|LMT TLT JST TLT WITA|-8m.k -80 -90 -90 -80|012343|-2le8m.k 1dnXm.k 8HA0 1ew00 Xld0",
		"Asia/Dubai|LMT GST|-3F.c -40|01|-21JfF.c",
		"Asia/Dushanbe|LMT DUST DUST DUSST DUSST TJT|-4z.c -50 -60 -70 -60 -50|0123232323232323232323245|-1Pc4z.c eUnz.c 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 14N0",
		"Asia/Gaza|EET EET EEST IST IDT|-20 -30 -30 -20 -30|010101010102020202020202020202023434343434343434343434343430202020202020202020202020202020202020202020202020202020202020202020202020202020202020|-1c2q0 5Rb0 10r0 1px0 10N0 1pz0 16p0 1jB0 16p0 1jx0 pBd0 Vz0 1oN0 11b0 1oO0 10N0 1pz0 10N0 1pb0 10N0 1pb0 10N0 1pb0 10N0 1pz0 10N0 1pb0 10N0 1pb0 11d0 1oL0 dW0 hfB0 Db0 1fB0 Rb0 npB0 11z0 1C10 IL0 1s10 10n0 1o10 WL0 1zd0 On0 1ld0 11z0 1o10 14n0 1o10 14n0 1nd0 12n0 1nd0 Xz0 1q10 12n0 M10 C00 17c0 1io0 17c0 1io0 17c0 1o00 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 17c0 1io0 18N0 1bz0 19z0 1gp0 1610 1iL0 11z0 1o10 14o0 1lA1 SKX 1xd1 MKX 1AN0 1a00 1fA0 1cL0 1cN0 1nX0 1210 1nz0 1210 1nz0 14N0 1nz0 1210 1nz0 1210 1nz0 1210 1nz0 1210 1nz0 1210 1nz0 14N0 1nz0 1210 1nz0 1210 1nz0 1210 1nz0 1210 1nz0 14N0 1nz0 1210 1nz0 1210 1nz0 1210 1nz0 1210 1nz0 1210 1nz0 14N0 1nz0 1210 1nz0 1210 1nz0 1210 1nz0",
		"Asia/Hebron|EET EET EEST IST IDT|-20 -30 -30 -20 -30|01010101010202020202020202020202343434343434343434343434343020202020202020202020202020202020202020202020202020202020202020202020202020202020202020|-1c2q0 5Rb0 10r0 1px0 10N0 1pz0 16p0 1jB0 16p0 1jx0 pBd0 Vz0 1oN0 11b0 1oO0 10N0 1pz0 10N0 1pb0 10N0 1pb0 10N0 1pb0 10N0 1pz0 10N0 1pb0 10N0 1pb0 11d0 1oL0 dW0 hfB0 Db0 1fB0 Rb0 npB0 11z0 1C10 IL0 1s10 10n0 1o10 WL0 1zd0 On0 1ld0 11z0 1o10 14n0 1o10 14n0 1nd0 12n0 1nd0 Xz0 1q10 12n0 M10 C00 17c0 1io0 17c0 1io0 17c0 1o00 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 17c0 1io0 18N0 1bz0 19z0 1gp0 1610 1iL0 12L0 1mN0 14o0 1lc0 Tb0 1xd1 MKX bB0 cn0 1cN0 1a00 1fA0 1cL0 1cN0 1nX0 1210 1nz0 1210 1nz0 14N0 1nz0 1210 1nz0 1210 1nz0 1210 1nz0 1210 1nz0 1210 1nz0 14N0 1nz0 1210 1nz0 1210 1nz0 1210 1nz0 1210 1nz0 14N0 1nz0 1210 1nz0 1210 1nz0 1210 1nz0 1210 1nz0 1210 1nz0 14N0 1nz0 1210 1nz0 1210 1nz0 1210 1nz0",
		"Asia/Ho_Chi_Minh|LMT PLMT ICT IDT JST|-76.E -76.u -70 -80 -90|0123423232|-2yC76.E bK00.a 1h7b6.u 5lz0 18o0 3Oq0 k5b0 aW00 BAM0",
		"Asia/Hong_Kong|LMT HKT HKST JST|-7A.G -80 -90 -90|0121312121212121212121212121212121212121212121212121212121212121212121|-2CFHA.G 1sEP6.G 1cL0 ylu 93X0 1qQu 1tX0 Rd0 1In0 NB0 1cL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1kL0 14N0 1nX0 U10 1tz0 U10 1wn0 Rd0 1wn0 U10 1tz0 U10 1tz0 U10 1tz0 U10 1wn0 Rd0 1wn0 Rd0 1wn0 U10 1tz0 U10 1tz0 17d0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 s10 1Vz0 1cN0 1cL0 1cN0 1cL0 6fd0 14n0",
		"Asia/Hovd|LMT HOVT HOVT HOVST|-66.A -60 -70 -80|012323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-2APG6.A 2Uko6.A cKn0 1db0 1dd0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 6hD0 11z0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 kEp0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0",
		"Asia/Irkutsk|IMT IRKT IRKT IRKST IRKST IRKT|-6V.5 -70 -80 -90 -80 -90|012323232323232323232324123232323232323232323232323232323232323252|-21zGV.5 pjXV.5 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0",
		"Asia/Istanbul|IMT EET EEST TRST TRT|-1U.U -20 -30 -40 -30|012121212121212121212121212121212121212121212121212121234343434342121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2ogNU.U dzzU.U 11b0 8tB0 1on0 1410 1db0 19B0 1in0 3Rd0 Un0 1oN0 11b0 zSp0 CL0 mN0 1Vz0 1gN0 1pz0 5Rd0 1fz0 1yp0 ML0 1kp0 17b0 1ip0 17b0 1fB0 19X0 1jB0 18L0 1ip0 17z0 qdd0 xX0 3S10 Tz0 dA10 11z0 1o10 11z0 1qN0 11z0 1ze0 11B0 WM0 1qO0 WI0 1nX0 1rB0 10L0 11B0 1in0 17d0 1in0 2pX0 19E0 1fU0 16Q0 1iI0 16Q0 1iI0 1Vd0 pb0 3Kp0 14o0 1df0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cL0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WO0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 Xc0 1qo0 WM0 1qM0 11A0 1o00 1200 1nA0 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Asia/Jakarta|BMT JAVT WIB JST WIB WIB|-77.c -7k -7u -90 -80 -70|01232425|-1Q0Tk luM0 mPzO 8vWu 6kpu 4PXu xhcu",
		"Asia/Jayapura|LMT WIT ACST|-9m.M -90 -9u|0121|-1uu9m.M sMMm.M L4nu",
		"Asia/Jerusalem|JMT IST IDT IDDT|-2k.E -20 -30 -40|01212121212132121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-26Bek.E SyMk.E 5Rb0 10r0 1px0 10N0 1pz0 16p0 1jB0 16p0 1jx0 3LB0 Em0 or0 1cn0 1dB0 16n0 10O0 1ja0 1tC0 14o0 1cM0 1a00 11A0 1Na0 An0 1MP0 AJ0 1Kp0 LC0 1oo0 Wl0 EQN0 Db0 1fB0 Rb0 npB0 11z0 1C10 IL0 1s10 10n0 1o10 WL0 1zd0 On0 1ld0 11z0 1o10 14n0 1o10 14n0 1nd0 12n0 1nd0 Xz0 1q10 12n0 1hB0 1dX0 1ep0 1aL0 1eN0 17X0 1nf0 11z0 1tB0 19W0 1e10 17b0 1ep0 1gL0 18N0 1fz0 1eN0 17b0 1gq0 1gn0 19d0 1dz0 1c10 17X0 1hB0 1gn0 19d0 1dz0 1c10 17X0 1kp0 1dz0 1c10 1aL0 1eN0 1oL0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0",
		"Asia/Kabul|AFT AFT|-40 -4u|01|-10Qs0",
		"Asia/Kamchatka|LMT PETT PETT PETST PETST|-ay.A -b0 -c0 -d0 -c0|01232323232323232323232412323232323232323232323232323232323232412|-1SLKy.A ivXy.A 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qN0 WM0",
		"Asia/Karachi|LMT IST IST KART PKT PKST|-4s.c -5u -6u -50 -50 -60|012134545454|-2xoss.c 1qOKW.c 7zX0 eup0 LqMu 1fy01 1cL0 dK0X 11b0 1610 1jX0",
		"Asia/Kashgar|LMT XJT|-5O.k -60|01|-1GgtO.k",
		"Asia/Kathmandu|LMT IST NPT|-5F.g -5u -5J|012|-21JhF.g 2EGMb.g",
		"Asia/Khandyga|LMT YAKT YAKT YAKST YAKST VLAT VLAST VLAT YAKT|-92.d -80 -90 -a0 -90 -a0 -b0 -b0 -a0|01232323232323232323232412323232323232323232323232565656565656565782|-21Q92.d pAp2.d 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 qK0 yN0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 17V0 7zD0",
		"Asia/Krasnoyarsk|LMT KRAT KRAT KRAST KRAST KRAT|-6b.q -60 -70 -80 -70 -80|012323232323232323232324123232323232323232323232323232323232323252|-21Hib.q prAb.q 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0",
		"Asia/Kuala_Lumpur|SMT MALT MALST MALT MALT JST MYT|-6T.p -70 -7k -7k -7u -90 -80|01234546|-2Bg6T.p 17anT.p 7hXE dM00 17bO 8Fyu 1so1u",
		"Asia/Kuching|LMT BORT BORT BORTST JST MYT|-7l.k -7u -80 -8k -90 -80|01232323232323232425|-1KITl.k gDbP.k 6ynu AnE 1O0k AnE 1NAk AnE 1NAk AnE 1NAk AnE 1O0k AnE 1NAk AnE pAk 8Fz0 1so10",
		"Asia/Macao|LMT MOT MOST CST|-7y.k -80 -90 -80|0121212121212121212121212121212121212121213|-2le7y.k 1XO34.k 1wn0 Rd0 1wn0 R9u 1wqu U10 1tz0 TVu 1tz0 17gu 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cJu 1cL0 1cN0 1fz0 1cN0 1cOu 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cJu 1cL0 1cN0 1fz0 1cN0 1cL0 KEp0",
		"Asia/Magadan|LMT MAGT MAGT MAGST MAGST MAGT|-a3.c -a0 -b0 -c0 -b0 -c0|012323232323232323232324123232323232323232323232323232323232323251|-1Pca3.c eUo3.c 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0",
		"Asia/Makassar|LMT MMT WITA JST|-7V.A -7V.A -80 -90|01232|-21JjV.A vfc0 myLV.A 8ML0",
		"Asia/Manila|PHT PHST JST|-80 -90 -90|010201010|-1kJI0 AL0 cK10 65X0 mXB0 vX0 VK10 1db0",
		"Asia/Nicosia|LMT EET EEST|-2d.s -20 -30|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1Vc2d.s 2a3cd.s 1cL0 1qp0 Xz0 19B0 19X0 1fB0 1db0 1cp0 1cL0 1fB0 19X0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1o30 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Asia/Novokuznetsk|LMT KRAT KRAT KRAST KRAST NOVST NOVT NOVT|-5M.M -60 -70 -80 -70 -70 -60 -70|012323232323232323232324123232323232323232323232323232323232325672|-1PctM.M eULM.M 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qN0 WM0 8Hz0",
		"Asia/Novosibirsk|LMT NOVT NOVT NOVST NOVST|-5v.E -60 -70 -80 -70|0123232323232323232323241232341414141414141414141414141414141414121|-21Qnv.E pAFv.E 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 ml0 Os0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0",
		"Asia/Omsk|LMT OMST OMST OMSST OMSST OMST|-4R.u -50 -60 -70 -60 -70|012323232323232323232324123232323232323232323232323232323232323252|-224sR.u pMLR.u 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0",
		"Asia/Oral|LMT URAT URAT URAST URAT URAST ORAT ORAST ORAT|-3p.o -40 -50 -60 -60 -50 -40 -50 -50|012343232323232323251516767676767676767676767676768|-1Pc3p.o eUnp.o 23CL0 1db0 1cM0 1dc0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 2UK0 Fz0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 RW0",
		"Asia/Pontianak|LMT PMT WIB JST WIB WITA WIB|-7h.k -7h.k -7u -90 -80 -80 -70|012324256|-2ua7h.k XE00 munL.k 8Rau 6kpu 4PXu xhcu Wqnu",
		"Asia/Pyongyang|LMT KST JCST JST KST|-8n -8u -90 -90 -90|01234|-2um8n 97XR 12FXu jdA0",
		"Asia/Qyzylorda|LMT KIZT KIZT KIZST KIZT QYZT QYZT QYZST|-4l.Q -40 -50 -60 -60 -50 -60 -70|012343232323232323232325676767676767676767676767676|-1Pc4l.Q eUol.Q 23CL0 1db0 1cM0 1dc0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2UK0 dC0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0",
		"Asia/Rangoon|RMT BURT JST MMT|-6o.E -6u -90 -6u|0123|-21Jio.E SmnS.E 7j9u",
		"Asia/Sakhalin|LMT JCST JST SAKT SAKST SAKST SAKT|-9u.M -90 -90 -b0 -c0 -b0 -a0|0123434343434343434343435634343434343565656565656565656565656565636|-2AGVu.M 1iaMu.M je00 1qFa0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o10 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0",
		"Asia/Samarkand|LMT SAMT SAMT SAMST TAST UZST UZT|-4r.R -40 -50 -60 -60 -60 -50|01234323232323232323232356|-1Pc4r.R eUor.R 23CL0 1db0 1cM0 1dc0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 11x0 bf0",
		"Asia/Seoul|LMT KST JCST JST KST KDT KDT|-8r.Q -8u -90 -90 -90 -9u -a0|01234151515151515146464|-2um8r.Q 97XV.Q 12FXu jjA0 kKo0 2I0u OL0 1FB0 Rb0 1qN0 TX0 1tB0 TX0 1tB0 TX0 1tB0 TX0 2ap0 12FBu 11A0 1o00 11A0",
		"Asia/Singapore|SMT MALT MALST MALT MALT JST SGT SGT|-6T.p -70 -7k -7k -7u -90 -7u -80|012345467|-2Bg6T.p 17anT.p 7hXE dM00 17bO 8Fyu Mspu DTA0",
		"Asia/Srednekolymsk|LMT MAGT MAGT MAGST MAGST MAGT SRET|-ae.Q -a0 -b0 -c0 -b0 -c0 -b0|012323232323232323232324123232323232323232323232323232323232323256|-1Pcae.Q eUoe.Q 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0",
		"Asia/Taipei|JWST JST CST CDT|-80 -90 -80 -90|01232323232323232323232323232323232323232|-1iw80 joM0 1yo0 Tz0 1ip0 1jX0 1cN0 11b0 1oN0 11b0 1oN0 11b0 1oN0 11b0 10N0 1BX0 10p0 1pz0 10p0 1pz0 10p0 1db0 1dd0 1db0 1cN0 1db0 1cN0 1db0 1cN0 1db0 1BB0 ML0 1Bd0 ML0 uq10 1db0 1cN0 1db0 97B0 AL0",
		"Asia/Tashkent|LMT TAST TAST TASST TASST UZST UZT|-4B.b -50 -60 -70 -60 -60 -50|01232323232323232323232456|-1Pc4B.b eUnB.b 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 11y0 bf0",
		"Asia/Tbilisi|TBMT TBIT TBIT TBIST TBIST GEST GET GET GEST|-2X.b -30 -40 -50 -40 -40 -30 -40 -50|0123232323232323232323245656565787878787878787878567|-1Pc2X.b 1jUnX.b WCL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 3y0 19f0 1cK0 1cL0 1cN0 1cL0 1cN0 1cL0 1cM0 1cL0 1fB0 3Nz0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 An0 Os0 WM0",
		"Asia/Tehran|LMT TMT IRST IRST IRDT IRDT|-3p.I -3p.I -3u -40 -50 -4u|01234325252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252|-2btDp.I 1d3c0 1huLT.I TXu 1pz0 sN0 vAu 1cL0 1dB0 1en0 pNB0 UL0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 64p0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0",
		"Asia/Thimbu|LMT IST BTT|-5W.A -5u -60|012|-Su5W.A 1BGMs.A",
		"Asia/Tokyo|JCST JST JDT|-90 -90 -a0|0121212121|-1iw90 pKq0 QL0 1lB0 13X0 1zB0 NX0 1zB0 NX0",
		"Asia/Ulaanbaatar|LMT ULAT ULAT ULAST|-77.w -70 -80 -90|012323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-2APH7.w 2Uko7.w cKn0 1db0 1dd0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 6hD0 11z0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 kEp0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0",
		"Asia/Ust-Nera|LMT YAKT YAKT MAGST MAGT MAGST MAGT MAGT VLAT VLAT|-9w.S -80 -90 -c0 -b0 -b0 -a0 -c0 -b0 -a0|0123434343434343434343456434343434343434343434343434343434343434789|-21Q9w.S pApw.S 23CL0 1d90 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 17V0 7zD0",
		"Asia/Vladivostok|LMT VLAT VLAT VLAST VLAST VLAT|-8L.v -90 -a0 -b0 -a0 -b0|012323232323232323232324123232323232323232323232323232323232323252|-1SJIL.v itXL.v 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0",
		"Asia/Yakutsk|LMT YAKT YAKT YAKST YAKST YAKT|-8C.W -80 -90 -a0 -90 -a0|012323232323232323232324123232323232323232323232323232323232323252|-21Q8C.W pAoC.W 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0",
		"Asia/Yekaterinburg|LMT PMT SVET SVET SVEST SVEST YEKT YEKST YEKT|-42.x -3J.5 -40 -50 -60 -50 -50 -60 -60|0123434343434343434343435267676767676767676767676767676767676767686|-2ag42.x 7mQh.s qBvJ.5 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0",
		"Asia/Yerevan|LMT YERT YERT YERST YERST AMST AMT AMT AMST|-2W -30 -40 -50 -40 -40 -30 -40 -50|0123232323232323232323245656565657878787878787878787878787878787|-1Pc2W 1jUnW WCL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1am0 2r0 1cJ0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 3Fb0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0",
		"Atlantic/Azores|HMT AZOT AZOST AZOMT AZOT AZOST WET|1S.w 20 10 0 10 0 0|01212121212121212121212121212121212121212121232123212321232121212121212121212121212121212121212121454545454545454545454545454545456545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-2ldW5.s aPX5.s Sp0 LX0 1vc0 Tc0 1uM0 SM0 1vc0 Tc0 1vc0 SM0 1vc0 6600 1co0 3E00 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 3I00 17c0 1cM0 1cM0 3Fc0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 1tA0 1cM0 1dc0 1400 gL0 IM0 s10 U00 dX0 Rc0 pd0 Rc0 gL0 Oo0 pd0 Rc0 gL0 Oo0 pd0 14o0 1cM0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 3Co0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 qIl0 1cM0 1fA0 1cM0 1cM0 1cN0 1cL0 1cN0 1cM0 1cM0 1cM0 1cM0 1cN0 1cL0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cL0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Atlantic/Bermuda|LMT AST ADT|4j.i 40 30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1BnRE.G 1LTbE.G 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"Atlantic/Canary|LMT CANT WET WEST|11.A 10 0 -10|01232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1UtaW.o XPAW.o 1lAK0 1a10 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Atlantic/Cape_Verde|LMT CVT CVST CVT|1y.4 20 10 10|01213|-2xomp.U 1qOMp.U 7zX0 1djf0",
		"Atlantic/Faeroe|LMT WET WEST|r.4 0 -10|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2uSnw.U 2Wgow.U 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Atlantic/Madeira|FMT MADT MADST MADMT WET WEST|17.A 10 0 -10 0 -10|01212121212121212121212121212121212121212121232123212321232121212121212121212121212121212121212121454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-2ldWQ.o aPWQ.o Sp0 LX0 1vc0 Tc0 1uM0 SM0 1vc0 Tc0 1vc0 SM0 1vc0 6600 1co0 3E00 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 3I00 17c0 1cM0 1cM0 3Fc0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 1tA0 1cM0 1dc0 1400 gL0 IM0 s10 U00 dX0 Rc0 pd0 Rc0 gL0 Oo0 pd0 Rc0 gL0 Oo0 pd0 14o0 1cM0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 3Co0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 qIl0 1cM0 1fA0 1cM0 1cM0 1cN0 1cL0 1cN0 1cM0 1cM0 1cM0 1cM0 1cN0 1cL0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Atlantic/Reykjavik|LMT IST ISST GMT|1s 10 0 0|012121212121212121212121212121212121212121212121212121212121212121213|-2uWmw mfaw 1Bd0 ML0 1LB0 Cn0 1LB0 3fX0 C10 HrX0 1cO0 LB0 1EL0 LA0 1C00 Oo0 1wo0 Rc0 1wo0 Rc0 1wo0 Rc0 1zc0 Oo0 1zc0 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1lc0 14o0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 14o0",
		"Atlantic/South_Georgia|GST|20|0|",
		"Atlantic/Stanley|SMT FKT FKST FKT FKST|3P.o 40 30 30 20|0121212121212134343212121212121212121212121212121212121212121212121212|-2kJw8.A 12bA8.A 19X0 1fB0 19X0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1fB0 Cn0 1Cc10 WL0 1qL0 U10 1tz0 U10 1qM0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1tz0 U10 1tz0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1tz0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qN0 U10 1wn0 Rd0 1wn0 U10 1tz0 U10 1tz0 U10 1tz0 U10 1tz0 U10 1wn0 U10 1tz0 U10 1tz0 U10",
		"Australia/ACT|AEST AEDT|-a0 -b0|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293lX xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 14o0 1o00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1tA0 WM0 1tA0 U00 1tA0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 11A0 1o00 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0",
		"Australia/Adelaide|ACST ACDT|-9u -au|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293lt xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1tA0 WM0 1tA0 U00 1tA0 U00 1tA0 Oo0 1zc0 WM0 1qM0 Rc0 1zc0 U00 1tA0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0",
		"Australia/Brisbane|AEST AEDT|-a0 -b0|01010101010101010|-293lX xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 H1A0 Oo0 1zc0 Oo0 1zc0 Oo0",
		"Australia/Broken_Hill|ACST ACDT|-9u -au|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293lt xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 14o0 1o00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1tA0 WM0 1tA0 U00 1tA0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0",
		"Australia/Currie|AEST AEDT|-a0 -b0|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-29E80 19X0 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1qM0 WM0 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1wo0 WM0 1tA0 WM0 1tA0 U00 1tA0 U00 1tA0 11A0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 11A0 1o00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0",
		"Australia/Darwin|ACST ACDT|-9u -au|010101010|-293lt xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0",
		"Australia/Eucla|ACWST ACWDT|-8J -9J|0101010101010101010|-293kI xcX 10jd0 yL0 1cN0 1cL0 1gSp0 Oo0 l5A0 Oo0 iJA0 G00 zU00 IM0 1qM0 11A0 1o00 11A0",
		"Australia/Hobart|AEST AEDT|-a0 -b0|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-29E80 19X0 10jd0 yL0 1cN0 1cL0 1fB0 19X0 VfB0 1cM0 1o00 Rc0 1wo0 Rc0 1wo0 U00 1wo0 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1qM0 WM0 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1wo0 WM0 1tA0 WM0 1tA0 U00 1tA0 U00 1tA0 11A0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 11A0 1o00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0",
		"Australia/LHI|AEST LHST LHDT LHDT|-a0 -au -bu -b0|0121212121313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313|raC0 1zdu Rb0 1zd0 On0 1zd0 On0 1zd0 On0 1zd0 TXu 1qMu WLu 1tAu WLu 1tAu TXu 1tAu Onu 1zcu Onu 1zcu Onu 1zcu Rbu 1zcu Onu 1zcu Onu 1zcu 11zu 1o0u 11zu 1o0u 11zu 1o0u 11zu 1qMu WLu 11Au 1nXu 1qMu 11zu 1o0u 11zu 1o0u 11zu 1qMu WLu 1qMu 11zu 1o0u WLu 1qMu 14nu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1fzu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu",
		"Australia/Lindeman|AEST AEDT|-a0 -b0|010101010101010101010|-293lX xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 H1A0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0",
		"Australia/Melbourne|AEST AEDT|-a0 -b0|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293lX xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1qM0 11A0 1tA0 U00 1tA0 U00 1tA0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 11A0 1o00 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0",
		"Australia/Perth|AWST AWDT|-80 -90|0101010101010101010|-293jX xcX 10jd0 yL0 1cN0 1cL0 1gSp0 Oo0 l5A0 Oo0 iJA0 G00 zU00 IM0 1qM0 11A0 1o00 11A0",
		"CET|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 16M0 1gMM0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"CST6CDT|CST CDT CWT CPT|60 50 50 50|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"Chile/EasterIsland|EMT EAST EASST EAST EASST EAST|7h.s 70 60 60 50 50|012121212121212121212121212123434343434343434343434343434343434343434343434343434343434343434345|-1uSgG.w 1s4IG.w WL0 1zd0 On0 1ip0 11z0 1o10 11z0 1qN0 WL0 1ld0 14n0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 1cL0 1cN0 11z0 1o10 11z0 1qN0 WL0 1fB0 19X0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1ip0 1fz0 1fB0 11z0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1o10 19X0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 1wn0",
		"EET|EET EEST|-20 -30|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|hDB0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"EST|EST|50|0|",
		"EST5EDT|EST EDT EWT EPT|50 40 40 40|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261t0 1nX0 11B0 1nX0 SgN0 8x40 iv0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"Eire|DMT IST GMT BST IST|p.l -y.D 0 -10 -10|01232323232324242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242|-2ax9y.D Rc0 1fzy.D 14M0 1fc0 1g00 1co0 1dc0 1co0 1oo0 1400 1dc0 19A0 1io0 1io0 WM0 1o00 14o0 1o00 17c0 1io0 17c0 1fA0 1a00 1lc0 17c0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1cM0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1io0 1qM0 Dc0 g5X0 14p0 1wn0 17d0 1io0 11A0 1o00 17c0 1fA0 1a00 1fA0 1cM0 1fA0 1a00 17c0 1fA0 1a00 1io0 17c0 1lc0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1a00 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1tA0 IM0 90o0 U00 1tA0 U00 1tA0 U00 1tA0 U00 1tA0 WM0 1qM0 WM0 1qM0 WM0 1tA0 U00 1tA0 U00 1tA0 11z0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 14o0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Etc/GMT+0|GMT|0|0|",
		"Etc/GMT+1|GMT+1|10|0|",
		"Etc/GMT+10|GMT+10|a0|0|",
		"Etc/GMT+11|GMT+11|b0|0|",
		"Etc/GMT+12|GMT+12|c0|0|",
		"Etc/GMT+2|GMT+2|20|0|",
		"Etc/GMT+3|GMT+3|30|0|",
		"Etc/GMT+4|GMT+4|40|0|",
		"Etc/GMT+5|GMT+5|50|0|",
		"Etc/GMT+6|GMT+6|60|0|",
		"Etc/GMT+7|GMT+7|70|0|",
		"Etc/GMT+8|GMT+8|80|0|",
		"Etc/GMT+9|GMT+9|90|0|",
		"Etc/GMT-1|GMT-1|-10|0|",
		"Etc/GMT-10|GMT-10|-a0|0|",
		"Etc/GMT-11|GMT-11|-b0|0|",
		"Etc/GMT-12|GMT-12|-c0|0|",
		"Etc/GMT-13|GMT-13|-d0|0|",
		"Etc/GMT-14|GMT-14|-e0|0|",
		"Etc/GMT-2|GMT-2|-20|0|",
		"Etc/GMT-3|GMT-3|-30|0|",
		"Etc/GMT-4|GMT-4|-40|0|",
		"Etc/GMT-5|GMT-5|-50|0|",
		"Etc/GMT-6|GMT-6|-60|0|",
		"Etc/GMT-7|GMT-7|-70|0|",
		"Etc/GMT-8|GMT-8|-80|0|",
		"Etc/GMT-9|GMT-9|-90|0|",
		"Etc/UCT|UCT|0|0|",
		"Etc/UTC|UTC|0|0|",
		"Europe/Amsterdam|AMT NST NEST NET CEST CET|-j.w -1j.w -1k -k -20 -10|010101010101010101010101010101010101010101012323234545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545|-2aFcj.w 11b0 1iP0 11A0 1io0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1co0 1io0 1yo0 Pc0 1a00 1fA0 1Bc0 Mo0 1tc0 Uo0 1tA0 U00 1uo0 W00 1s00 VA0 1so0 Vc0 1sM0 UM0 1wo0 Rc0 1u00 Wo0 1rA0 W00 1s00 VA0 1sM0 UM0 1w00 fV0 BCX.w 1tA0 U00 1u00 Wo0 1sm0 601k WM0 1fA0 1cM0 1cM0 1cM0 16M0 1gMM0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Andorra|WET CET CEST|0 -10 -20|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-UBA0 1xIN0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Athens|AMT EET EEST CEST CET|-1y.Q -20 -30 -20 -10|012123434121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2a61x.Q CNbx.Q mn0 kU10 9b0 3Es0 Xa0 1fb0 1dd0 k3X0 Nz0 SCp0 1vc0 SO0 1cM0 1a00 1ao0 1fc0 1a10 1fG0 1cg0 1dX0 1bX0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Belfast|GMT BST BDST|0 -10 -20|0101010101010101010101010101010101010101010101010121212121210101210101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2axa0 Rc0 1fA0 14M0 1fc0 1g00 1co0 1dc0 1co0 1oo0 1400 1dc0 19A0 1io0 1io0 WM0 1o00 14o0 1o00 17c0 1io0 17c0 1fA0 1a00 1lc0 17c0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1cM0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1io0 1qM0 Dc0 2Rz0 Dc0 1zc0 Oo0 1zc0 Rc0 1wo0 17c0 1iM0 FA0 xB0 1fA0 1a00 14o0 bb0 LA0 xB0 Rc0 1wo0 11A0 1o00 17c0 1fA0 1a00 1fA0 1cM0 1fA0 1a00 17c0 1fA0 1a00 1io0 17c0 1lc0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1a00 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1tA0 IM0 90o0 U00 1tA0 U00 1tA0 U00 1tA0 U00 1tA0 WM0 1qM0 WM0 1qM0 WM0 1tA0 U00 1tA0 U00 1tA0 11z0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 14o0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Belgrade|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-19RC0 3IP0 WM0 1fA0 1cM0 1cM0 1rc0 Qo0 1vmo0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Berlin|CET CEST CEMT|-10 -20 -30|01010101010101210101210101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 kL0 Nc0 m10 WM0 1ao0 1cp0 dX0 jz0 Dd0 1io0 17c0 1fA0 1a00 1ehA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Bratislava|CET CEST|-10 -20|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 16M0 1lc0 1tA0 17A0 11c0 1io0 17c0 1io0 17c0 1fc0 1ao0 1bNc0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Brussels|WET CET CEST WEST|0 -10 -20 -10|0121212103030303030303030303030303030303030303030303212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2ehc0 3zX0 11c0 1iO0 11A0 1o00 11A0 my0 Ic0 1qM0 Rc0 1EM0 UM0 1u00 10o0 1io0 1io0 17c0 1a00 1fA0 1cM0 1cM0 1io0 17c0 1fA0 1a00 1io0 1a30 1io0 17c0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 y00 5Wn0 WM0 1fA0 1cM0 16M0 1iM0 16M0 1C00 Uo0 1eeo0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Bucharest|BMT EET EEST|-1I.o -20 -30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1xApI.o 20LI.o RA0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1Axc0 On0 1fA0 1a10 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cK0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cL0 1cN0 1cL0 1fB0 1nX0 11E0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Budapest|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1ip0 17b0 1op0 1tb0 Q2m0 3Ne0 WM0 1fA0 1cM0 1cM0 1oJ0 1dc0 1030 1fA0 1cM0 1cM0 1cM0 1cM0 1fA0 1a00 1iM0 1fA0 8Ha0 Rb0 1wN0 Rb0 1BB0 Lz0 1C20 LB0 SNX0 1a10 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Busingen|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-19Lc0 11A0 1o00 11A0 1xG10 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Chisinau|CMT BMT EET EEST CEST CET MSK MSD|-1T -1I.o -20 -30 -20 -10 -30 -40|0123232323232323232345454676767676767676767623232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-26jdT wGMa.A 20LI.o RA0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 27A0 2en0 39g0 WM0 1fA0 1cM0 V90 1t7z0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1ty0 2bD0 1cM0 1cK0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1nX0 11E0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Copenhagen|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2azC0 Tz0 VuO0 60q0 WM0 1fA0 1cM0 1cM0 1cM0 S00 1HA0 Nc0 1C00 Dc0 1Nc0 Ao0 1h5A0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Gibraltar|GMT BST BDST CET CEST|0 -10 -20 -10 -20|010101010101010101010101010101010101010101010101012121212121010121010101010101010101034343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343|-2axa0 Rc0 1fA0 14M0 1fc0 1g00 1co0 1dc0 1co0 1oo0 1400 1dc0 19A0 1io0 1io0 WM0 1o00 14o0 1o00 17c0 1io0 17c0 1fA0 1a00 1lc0 17c0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1cM0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1io0 1qM0 Dc0 2Rz0 Dc0 1zc0 Oo0 1zc0 Rc0 1wo0 17c0 1iM0 FA0 xB0 1fA0 1a00 14o0 bb0 LA0 xB0 Rc0 1wo0 11A0 1o00 17c0 1fA0 1a00 1fA0 1cM0 1fA0 1a00 17c0 1fA0 1a00 1io0 17c0 1lc0 17c0 1fA0 10Jz0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Helsinki|HMT EET EEST|-1D.N -20 -30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1WuND.N OULD.N 1dA0 1xGq0 1cM0 1cM0 1cM0 1cN0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Kaliningrad|CET CEST CET CEST MSK MSD EEST EET FET|-10 -20 -20 -30 -30 -40 -30 -20 -30|0101010101010232454545454545454545454676767676767676767676767676767676767676787|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 Am0 Lb0 1en0 op0 1pNz0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 1cJ0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0",
		"Europe/Kiev|KMT EET MSK CEST CET MSD EEST|-22.4 -20 -30 -20 -10 -40 -30|0123434252525252525252525256161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161|-1Pc22.4 eUo2.4 rnz0 2Hg0 WM0 1fA0 da0 1v4m0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 Db0 3220 1cK0 1cL0 1cN0 1cL0 1cN0 1cL0 1cQ0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Lisbon|LMT WET WEST WEMT CET CEST|A.J 0 -10 -20 -10 -20|012121212121212121212121212121212121212121212321232123212321212121212121212121212121212121212121214121212121212121212121212121212124545454212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2ldXn.f aPWn.f Sp0 LX0 1vc0 Tc0 1uM0 SM0 1vc0 Tc0 1vc0 SM0 1vc0 6600 1co0 3E00 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 3I00 17c0 1cM0 1cM0 3Fc0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 1tA0 1cM0 1dc0 1400 gL0 IM0 s10 U00 dX0 Rc0 pd0 Rc0 gL0 Oo0 pd0 Rc0 gL0 Oo0 pd0 14o0 1cM0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 3Co0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 pvy0 1cM0 1cM0 1fA0 1cM0 1cM0 1cN0 1cL0 1cN0 1cM0 1cM0 1cM0 1cM0 1cN0 1cL0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Luxembourg|LMT CET CEST WET WEST WEST WET|-o.A -10 -20 0 -10 -20 -10|0121212134343434343434343434343434343434343434343434565651212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2DG0o.A t6mo.A TB0 1nX0 Up0 1o20 11A0 rW0 CM0 1qP0 R90 1EO0 UK0 1u20 10m0 1ip0 1in0 17e0 19W0 1fB0 1db0 1cp0 1in0 17d0 1fz0 1a10 1in0 1a10 1in0 17f0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 vA0 60L0 WM0 1fA0 1cM0 17c0 1io0 16M0 1C00 Uo0 1eeo0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Madrid|WET WEST WEMT CET CEST|0 -10 -20 -10 -20|01010101010101010101010121212121234343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343|-28dd0 11A0 1go0 19A0 1co0 1dA0 b1A0 18o0 3I00 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 iyo0 Rc0 18o0 1hc0 1io0 1a00 14o0 5aL0 MM0 1vc0 17A0 1i00 1bc0 1eo0 17d0 1in0 17A0 6hA0 10N0 XIL0 1a10 1in0 17d0 19X0 1cN0 1fz0 1a10 1fX0 1cp0 1cO0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Malta|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2as10 M00 1cM0 1cM0 14o0 1o00 WM0 1qM0 17c0 1cM0 M3A0 5M20 WM0 1fA0 1cM0 1cM0 1cM0 16m0 1de0 1lc0 14m0 1lc0 WO0 1qM0 GTW0 On0 1C10 Lz0 1C10 Lz0 1EN0 Lz0 1C10 Lz0 1zd0 Oo0 1C00 On0 1cp0 1cM0 1lA0 Xc0 1qq0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1iN0 19z0 1fB0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Minsk|MMT EET MSK CEST CET MSD EEST FET|-1O -20 -30 -20 -10 -40 -30 -30|012343432525252525252525252616161616161616161616161616161616161616172|-1Pc1O eUnO qNX0 3gQ0 WM0 1fA0 1cM0 Al0 1tsn0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 3Fc0 1cN0 1cK0 1cM0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hy0",
		"Europe/Monaco|PMT WET WEST WEMT CET CEST|-9.l 0 -10 -20 -10 -20|01212121212121212121212121212121212121212121212121232323232345454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-2nco9.l cNb9.l HA0 19A0 1iM0 11c0 1oo0 Wo0 1rc0 QM0 1EM0 UM0 1u00 10o0 1io0 1wo0 Rc0 1a00 1fA0 1cM0 1cM0 1io0 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Df0 2RV0 11z0 11B0 1ze0 WM0 1fA0 1cM0 1fa0 1aq0 16M0 1ekn0 1cL0 1fC0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Moscow|MMT MMT MST MDST MSD MSK MSM EET EEST MSK|-2u.h -2v.j -3v.j -4v.j -40 -30 -50 -20 -30 -40|012132345464575454545454545454545458754545454545454545454545454545454545454595|-2ag2u.h 2pyW.W 1bA0 11X0 GN0 1Hb0 c20 imv.j 3DA0 dz0 15A0 c10 2q10 iM10 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0",
		"Europe/Paris|PMT WET WEST CEST CET WEMT|-9.l 0 -10 -20 -10 -20|0121212121212121212121212121212121212121212121212123434352543434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434|-2nco8.l cNb8.l HA0 19A0 1iM0 11c0 1oo0 Wo0 1rc0 QM0 1EM0 UM0 1u00 10o0 1io0 1wo0 Rc0 1a00 1fA0 1cM0 1cM0 1io0 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Df0 Ik0 5M30 WM0 1fA0 1cM0 Vx0 hB0 1aq0 16M0 1ekn0 1cL0 1fC0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Riga|RMT LST EET MSK CEST CET MSD EEST|-1A.y -2A.y -20 -30 -20 -10 -40 -30|010102345454536363636363636363727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272|-25TzA.y 11A0 1iM0 ko0 gWm0 yDXA.y 2bX0 3fE0 WM0 1fA0 1cM0 1cM0 4m0 1sLy0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 1o00 11A0 1o00 11A0 1qM0 3oo0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Rome|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2as10 M00 1cM0 1cM0 14o0 1o00 WM0 1qM0 17c0 1cM0 M3A0 5M20 WM0 1fA0 1cM0 16K0 1iO0 16m0 1de0 1lc0 14m0 1lc0 WO0 1qM0 GTW0 On0 1C10 Lz0 1C10 Lz0 1EN0 Lz0 1C10 Lz0 1zd0 Oo0 1C00 On0 1C10 Lz0 1zd0 On0 1C10 LA0 1C00 LA0 1zc0 Oo0 1C00 Oo0 1zc0 Oo0 1fC0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Samara|LMT SAMT SAMT KUYT KUYST MSD MSK EEST KUYT SAMST SAMST|-3k.k -30 -40 -40 -50 -40 -30 -30 -30 -50 -40|012343434343434343435656782929292929292929292929292929292929292a12|-22WNk.k qHak.k bcn0 1Qqo0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 1cN0 8o0 14j0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qN0 WM0",
		"Europe/Simferopol|SMT EET MSK CEST CET MSD EEST MSK|-2g -20 -30 -20 -10 -40 -30 -40|012343432525252525252525252161616525252616161616161616161616161616161616172|-1Pc2g eUog rEn0 2qs0 WM0 1fA0 1cM0 3V0 1u0L0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1Q00 4eL0 1cL0 1cN0 1cL0 1cN0 dX0 WL0 1cN0 1cL0 1fB0 1o30 11B0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11z0 1nW0",
		"Europe/Sofia|EET CET CEST EEST|-20 -10 -20 -30|01212103030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030|-168L0 WM0 1fA0 1cM0 1cM0 1cN0 1mKH0 1dd0 1fb0 1ap0 1fb0 1a20 1fy0 1a30 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cK0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1nX0 11E0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Stockholm|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2azC0 TB0 2yDe0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Tallinn|TMT CET CEST EET MSK MSD EEST|-1D -10 -20 -20 -30 -40 -30|012103421212454545454545454546363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363|-26oND teD 11A0 1Ta0 4rXl KSLD 2FX0 2Jg0 WM0 1fA0 1cM0 18J0 1sTX0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o10 11A0 1qM0 5QM0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Tirane|LMT CET CEST|-1j.k -10 -20|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2glBj.k 14pcj.k 5LC0 WM0 4M0 1fCK0 10n0 1op0 11z0 1pd0 11z0 1qN0 WL0 1qp0 Xb0 1qp0 Xb0 1qp0 11z0 1lB0 11z0 1qN0 11z0 1iN0 16n0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Uzhgorod|CET CEST MSK MSD EET EEST|-10 -20 -30 -40 -20 -30|010101023232323232323232320454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-1cqL0 6i00 WM0 1fA0 1cM0 1ml0 1Cp0 1r3W0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1Q00 1Nf0 2pw0 1cL0 1cN0 1cL0 1cN0 1cL0 1cQ0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Vienna|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 3KM0 14o0 LA00 6i00 WM0 1fA0 1cM0 1cM0 1cM0 400 2qM0 1a00 1cM0 1cM0 1io0 17c0 1gHa0 19X0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Vilnius|WMT KMT CET EET MSK CEST MSD EEST|-1o -1z.A -10 -20 -30 -20 -40 -30|012324525254646464646464646464647373737373737352537373737373737373737373737373737373737373737373737373737373737373737373|-293do 6ILM.o 1Ooz.A zz0 Mfd0 29W0 3is0 WM0 1fA0 1cM0 LV0 1tgL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11B0 1o00 11A0 1qM0 8io0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Volgograd|LMT TSAT STAT STAT VOLT VOLST VOLST VOLT MSD MSK MSK|-2V.E -30 -30 -40 -40 -50 -40 -30 -40 -30 -40|0123454545454545454546767489898989898989898989898989898989898989a9|-21IqV.E cLXV.E cEM0 1gqn0 Lco0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 2pz0 1cJ0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0",
		"Europe/Warsaw|WMT CET CEST EET EEST|-1o -10 -20 -20 -30|012121234312121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2ctdo 1LXo 11d0 1iO0 11A0 1o00 11A0 1on0 11A0 6zy0 HWP0 5IM0 WM0 1fA0 1cM0 1dz0 1mL0 1en0 15B0 1aq0 1nA0 11A0 1io0 17c0 1fA0 1a00 iDX0 LA0 1cM0 1cM0 1C00 Oo0 1cM0 1cM0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1C00 LA0 uso0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Zaporozhye|CUT EET MSK CEST CET MSD EEST|-2k -20 -30 -20 -10 -40 -30|01234342525252525252525252526161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161|-1Pc2k eUok rdb0 2RE0 WM0 1fA0 8m0 1v9a0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cK0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cQ0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"HST|HST|a0|0|",
		"Indian/Chagos|LMT IOT IOT|-4N.E -50 -60|012|-2xosN.E 3AGLN.E",
		"Indian/Christmas|CXT|-70|0|",
		"Indian/Cocos|CCT|-6u|0|",
		"Indian/Kerguelen|zzz TFT|0 -50|01|-MG00",
		"Indian/Mahe|LMT SCT|-3F.M -40|01|-2yO3F.M",
		"Indian/Maldives|MMT MVT|-4S -50|01|-olgS",
		"Indian/Mauritius|LMT MUT MUST|-3O -40 -50|012121|-2xorO 34unO 14L0 12kr0 11z0",
		"Indian/Reunion|LMT RET|-3F.Q -40|01|-2mDDF.Q",
		"Kwajalein|MHT KWAT MHT|-b0 c0 -c0|012|-AX0 W9X0",
		"MET|MET MEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 16M0 1gMM0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"MST|MST|70|0|",
		"MST7MDT|MST MDT MWT MPT|70 60 60 60|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"NZ-CHAT|CHAST CHAST CHADT|-cf -cJ -dJ|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212|-WqAf 1adef IM0 1C00 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1qM0 14o0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1io0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00",
		"PST8PDT|PST PDT PWT PPT|80 70 70 70|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261q0 1nX0 11B0 1nX0 SgN0 8x10 iy0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"Pacific/Apia|LMT WSST SST SDT WSDT WSST|bq.U bu b0 a0 -e0 -d0|01232345454545454545454545454545454545454545454545454545454|-2nDMx.4 1yW03.4 2rRbu 1ff0 1a00 CI0 AQ0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00",
		"Pacific/Bougainville|PGT JST BST|-a0 -90 -b0|0102|-16Wy0 7CN0 2MQp0",
		"Pacific/Chuuk|CHUT|-a0|0|",
		"Pacific/Efate|LMT VUT VUST|-bd.g -b0 -c0|0121212121212121212121|-2l9nd.g 2Szcd.g 1cL0 1oN0 10L0 1fB0 19X0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 Lz0 1Nd0 An0",
		"Pacific/Enderbury|PHOT PHOT PHOT|c0 b0 -d0|012|nIc0 B8n0",
		"Pacific/Fakaofo|TKT TKT|b0 -d0|01|1Gfn0",
		"Pacific/Fiji|LMT FJT FJST|-bT.I -c0 -d0|012121212121212121212121212121212121212121212121212121212121212|-2bUzT.I 3m8NT.I LA0 1EM0 IM0 nJc0 LA0 1o00 Rc0 1wo0 Ao0 1Nc0 Ao0 1Q00 xz0 1SN0 uM0 1SM0 xA0 1SM0 uM0 1SM0 uM0 1SM0 uM0 1SM0 uM0 1SM0 xA0 1SM0 uM0 1SM0 uM0 1SM0 uM0 1SM0 uM0 1SM0 uM0 1SM0 xA0 1SM0 uM0 1SM0 uM0 1SM0 uM0 1SM0 uM0 1SM0 uM0 1VA0 uM0 1SM0 uM0 1SM0 uM0 1SM0 uM0 1SM0 uM0 1SM0",
		"Pacific/Funafuti|TVT|-c0|0|",
		"Pacific/Galapagos|LMT ECT GALT|5W.o 50 60|012|-1yVS1.A 2dTz1.A",
		"Pacific/Gambier|LMT GAMT|8X.M 90|01|-2jof0.c",
		"Pacific/Guadalcanal|LMT SBT|-aD.M -b0|01|-2joyD.M",
		"Pacific/Guam|GST ChST|-a0 -a0|01|1fpq0",
		"Pacific/Honolulu|HST HDT HST|au 9u a0|010102|-1thLu 8x0 lef0 8Pz0 46p0",
		"Pacific/Kiritimati|LINT LINT LINT|aE a0 -e0|012|nIaE B8nk",
		"Pacific/Kosrae|KOST KOST|-b0 -c0|010|-AX0 1bdz0",
		"Pacific/Majuro|MHT MHT|-b0 -c0|01|-AX0",
		"Pacific/Marquesas|LMT MART|9i 9u|01|-2joeG",
		"Pacific/Midway|LMT NST BST SST|bm.M b0 b0 b0|0123|-2nDMB.c 2gVzB.c EyM0",
		"Pacific/Nauru|LMT NRT JST NRT|-b7.E -bu -90 -c0|01213|-1Xdn7.E PvzB.E 5RCu 1ouJu",
		"Pacific/Niue|NUT NUT NUT|bk bu b0|012|-KfME 17y0a",
		"Pacific/Norfolk|NMT NFT|-bc -bu|01|-Kgbc",
		"Pacific/Noumea|LMT NCT NCST|-b5.M -b0 -c0|01212121|-2l9n5.M 2EqM5.M xX0 1PB0 yn0 HeP0 Ao0",
		"Pacific/Palau|PWT|-90|0|",
		"Pacific/Pitcairn|PNT PST|8u 80|01|18Vku",
		"Pacific/Pohnpei|PONT|-b0|0|",
		"Pacific/Port_Moresby|PGT|-a0|0|",
		"Pacific/Rarotonga|CKT CKHST CKT|au 9u a0|012121212121212121212121212|lyWu IL0 1zcu Onu 1zcu Onu 1zcu Rbu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Rbu 1zcu Onu 1zcu Onu 1zcu Onu",
		"Pacific/Tahiti|LMT TAHT|9W.g a0|01|-2joe1.I",
		"Pacific/Tarawa|GILT|-c0|0|",
		"Pacific/Tongatapu|TOT TOT TOST|-ck -d0 -e0|01212121|-1aB0k 2n5dk 15A0 1wo0 xz0 1Q10 xz0",
		"Pacific/Wake|WAKT|-c0|0|",
		"Pacific/Wallis|WFT|-c0|0|",
		"WET|WET WEST|0 -10|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|hDB0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00"
	],
	"links": [
		"Africa/Abidjan|Africa/Bamako",
		"Africa/Abidjan|Africa/Banjul",
		"Africa/Abidjan|Africa/Conakry",
		"Africa/Abidjan|Africa/Dakar",
		"Africa/Abidjan|Africa/Freetown",
		"Africa/Abidjan|Africa/Lome",
		"Africa/Abidjan|Africa/Nouakchott",
		"Africa/Abidjan|Africa/Ouagadougou",
		"Africa/Abidjan|Africa/Sao_Tome",
		"Africa/Abidjan|Africa/Timbuktu",
		"Africa/Abidjan|Atlantic/St_Helena",
		"Africa/Addis_Ababa|Africa/Asmara",
		"Africa/Addis_Ababa|Africa/Asmera",
		"Africa/Addis_Ababa|Africa/Dar_es_Salaam",
		"Africa/Addis_Ababa|Africa/Djibouti",
		"Africa/Addis_Ababa|Africa/Kampala",
		"Africa/Addis_Ababa|Africa/Mogadishu",
		"Africa/Addis_Ababa|Africa/Nairobi",
		"Africa/Addis_Ababa|Indian/Antananarivo",
		"Africa/Addis_Ababa|Indian/Comoro",
		"Africa/Addis_Ababa|Indian/Mayotte",
		"Africa/Bangui|Africa/Brazzaville",
		"Africa/Bangui|Africa/Douala",
		"Africa/Bangui|Africa/Kinshasa",
		"Africa/Bangui|Africa/Lagos",
		"Africa/Bangui|Africa/Libreville",
		"Africa/Bangui|Africa/Luanda",
		"Africa/Bangui|Africa/Malabo",
		"Africa/Bangui|Africa/Niamey",
		"Africa/Bangui|Africa/Porto-Novo",
		"Africa/Blantyre|Africa/Bujumbura",
		"Africa/Blantyre|Africa/Gaborone",
		"Africa/Blantyre|Africa/Harare",
		"Africa/Blantyre|Africa/Kigali",
		"Africa/Blantyre|Africa/Lubumbashi",
		"Africa/Blantyre|Africa/Lusaka",
		"Africa/Blantyre|Africa/Maputo",
		"Africa/Cairo|Egypt",
		"Africa/Johannesburg|Africa/Maseru",
		"Africa/Johannesburg|Africa/Mbabane",
		"Africa/Juba|Africa/Khartoum",
		"Africa/Tripoli|Libya",
		"America/Adak|America/Atka",
		"America/Adak|US/Aleutian",
		"America/Anchorage|US/Alaska",
		"America/Anguilla|America/Antigua",
		"America/Anguilla|America/Dominica",
		"America/Anguilla|America/Grenada",
		"America/Anguilla|America/Guadeloupe",
		"America/Anguilla|America/Marigot",
		"America/Anguilla|America/Montserrat",
		"America/Anguilla|America/Port_of_Spain",
		"America/Anguilla|America/St_Barthelemy",
		"America/Anguilla|America/St_Kitts",
		"America/Anguilla|America/St_Lucia",
		"America/Anguilla|America/St_Thomas",
		"America/Anguilla|America/St_Vincent",
		"America/Anguilla|America/Tortola",
		"America/Anguilla|America/Virgin",
		"America/Argentina/Buenos_Aires|America/Buenos_Aires",
		"America/Argentina/Catamarca|America/Argentina/ComodRivadavia",
		"America/Argentina/Catamarca|America/Catamarca",
		"America/Argentina/Cordoba|America/Cordoba",
		"America/Argentina/Cordoba|America/Rosario",
		"America/Argentina/Jujuy|America/Jujuy",
		"America/Argentina/Mendoza|America/Mendoza",
		"America/Aruba|America/Curacao",
		"America/Aruba|America/Kralendijk",
		"America/Aruba|America/Lower_Princes",
		"America/Atikokan|America/Coral_Harbour",
		"America/Cayman|America/Panama",
		"America/Chicago|US/Central",
		"America/Denver|America/Shiprock",
		"America/Denver|Navajo",
		"America/Denver|US/Mountain",
		"America/Detroit|US/Michigan",
		"America/Edmonton|Canada/Mountain",
		"America/Ensenada|America/Tijuana",
		"America/Ensenada|Mexico/BajaNorte",
		"America/Fort_Wayne|America/Indiana/Indianapolis",
		"America/Fort_Wayne|America/Indianapolis",
		"America/Fort_Wayne|US/East-Indiana",
		"America/Halifax|Canada/Atlantic",
		"America/Havana|Cuba",
		"America/Indiana/Knox|America/Knox_IN",
		"America/Indiana/Knox|US/Indiana-Starke",
		"America/Jamaica|Jamaica",
		"America/Kentucky/Louisville|America/Louisville",
		"America/Los_Angeles|US/Pacific",
		"America/Los_Angeles|US/Pacific-New",
		"America/Manaus|Brazil/West",
		"America/Mazatlan|Mexico/BajaSur",
		"America/Mexico_City|Mexico/General",
		"America/Montreal|America/Toronto",
		"America/Montreal|Canada/Eastern",
		"America/New_York|US/Eastern",
		"America/Noronha|Brazil/DeNoronha",
		"America/Phoenix|US/Arizona",
		"America/Porto_Acre|America/Rio_Branco",
		"America/Porto_Acre|Brazil/Acre",
		"America/Regina|Canada/East-Saskatchewan",
		"America/Regina|Canada/Saskatchewan",
		"America/Santiago|Chile/Continental",
		"America/Sao_Paulo|Brazil/East",
		"America/St_Johns|Canada/Newfoundland",
		"America/Vancouver|Canada/Pacific",
		"America/Whitehorse|Canada/Yukon",
		"America/Winnipeg|Canada/Central",
		"Antarctica/McMurdo|Antarctica/South_Pole",
		"Antarctica/McMurdo|NZ",
		"Antarctica/McMurdo|Pacific/Auckland",
		"Arctic/Longyearbyen|Atlantic/Jan_Mayen",
		"Arctic/Longyearbyen|Europe/Oslo",
		"Asia/Aden|Asia/Kuwait",
		"Asia/Aden|Asia/Riyadh",
		"Asia/Ashgabat|Asia/Ashkhabad",
		"Asia/Bahrain|Asia/Qatar",
		"Asia/Bangkok|Asia/Phnom_Penh",
		"Asia/Bangkok|Asia/Vientiane",
		"Asia/Calcutta|Asia/Kolkata",
		"Asia/Chongqing|Asia/Chungking",
		"Asia/Chongqing|Asia/Harbin",
		"Asia/Chongqing|Asia/Shanghai",
		"Asia/Chongqing|PRC",
		"Asia/Dacca|Asia/Dhaka",
		"Asia/Dubai|Asia/Muscat",
		"Asia/Ho_Chi_Minh|Asia/Saigon",
		"Asia/Hong_Kong|Hongkong",
		"Asia/Istanbul|Europe/Istanbul",
		"Asia/Istanbul|Turkey",
		"Asia/Jerusalem|Asia/Tel_Aviv",
		"Asia/Jerusalem|Israel",
		"Asia/Kashgar|Asia/Urumqi",
		"Asia/Kathmandu|Asia/Katmandu",
		"Asia/Macao|Asia/Macau",
		"Asia/Makassar|Asia/Ujung_Pandang",
		"Asia/Nicosia|Europe/Nicosia",
		"Asia/Seoul|ROK",
		"Asia/Singapore|Singapore",
		"Asia/Taipei|ROC",
		"Asia/Tehran|Iran",
		"Asia/Thimbu|Asia/Thimphu",
		"Asia/Tokyo|Japan",
		"Asia/Ulaanbaatar|Asia/Ulan_Bator",
		"Atlantic/Faeroe|Atlantic/Faroe",
		"Atlantic/Reykjavik|Iceland",
		"Australia/ACT|Australia/Canberra",
		"Australia/ACT|Australia/NSW",
		"Australia/ACT|Australia/Sydney",
		"Australia/Adelaide|Australia/South",
		"Australia/Brisbane|Australia/Queensland",
		"Australia/Broken_Hill|Australia/Yancowinna",
		"Australia/Darwin|Australia/North",
		"Australia/Hobart|Australia/Tasmania",
		"Australia/LHI|Australia/Lord_Howe",
		"Australia/Melbourne|Australia/Victoria",
		"Australia/Perth|Australia/West",
		"Chile/EasterIsland|Pacific/Easter",
		"Eire|Europe/Dublin",
		"Etc/GMT+0|Etc/GMT",
		"Etc/GMT+0|Etc/GMT-0",
		"Etc/GMT+0|Etc/GMT0",
		"Etc/GMT+0|Etc/Greenwich",
		"Etc/GMT+0|GMT",
		"Etc/GMT+0|GMT+0",
		"Etc/GMT+0|GMT-0",
		"Etc/GMT+0|GMT0",
		"Etc/GMT+0|Greenwich",
		"Etc/UCT|UCT",
		"Etc/UTC|Etc/Universal",
		"Etc/UTC|Etc/Zulu",
		"Etc/UTC|UTC",
		"Etc/UTC|Universal",
		"Etc/UTC|Zulu",
		"Europe/Belfast|Europe/Guernsey",
		"Europe/Belfast|Europe/Isle_of_Man",
		"Europe/Belfast|Europe/Jersey",
		"Europe/Belfast|Europe/London",
		"Europe/Belfast|GB",
		"Europe/Belfast|GB-Eire",
		"Europe/Belgrade|Europe/Ljubljana",
		"Europe/Belgrade|Europe/Podgorica",
		"Europe/Belgrade|Europe/Sarajevo",
		"Europe/Belgrade|Europe/Skopje",
		"Europe/Belgrade|Europe/Zagreb",
		"Europe/Bratislava|Europe/Prague",
		"Europe/Busingen|Europe/Vaduz",
		"Europe/Busingen|Europe/Zurich",
		"Europe/Chisinau|Europe/Tiraspol",
		"Europe/Helsinki|Europe/Mariehamn",
		"Europe/Lisbon|Portugal",
		"Europe/Moscow|W-SU",
		"Europe/Rome|Europe/San_Marino",
		"Europe/Rome|Europe/Vatican",
		"Europe/Warsaw|Poland",
		"Kwajalein|Pacific/Kwajalein",
		"NZ-CHAT|Pacific/Chatham",
		"Pacific/Chuuk|Pacific/Truk",
		"Pacific/Chuuk|Pacific/Yap",
		"Pacific/Guam|Pacific/Saipan",
		"Pacific/Honolulu|Pacific/Johnston",
		"Pacific/Honolulu|US/Hawaii",
		"Pacific/Midway|Pacific/Pago_Pago",
		"Pacific/Midway|Pacific/Samoa",
		"Pacific/Midway|US/Samoa",
		"Pacific/Pohnpei|Pacific/Ponape"
	]
}
},{}],145:[function(require,module,exports){
module.exports={
  "version": "2015d",
  "zones": [
    {
      "name": "Africa/Abidjan",
      "abbrs": [
        "LMT",
        "GMT"
      ],
      "untils": [
        -1830383032000,
        null
      ],
      "offsets": [
        16.1333,
        0
      ]
    },
    {
      "name": "Africa/Accra",
      "abbrs": [
        "LMT",
        "GMT",
        "GHST",
        "GMT",
        "GHST",
        "GMT",
        "GHST",
        "GMT",
        "GHST",
        "GMT",
        "GHST",
        "GMT",
        "GHST",
        "GMT",
        "GHST",
        "GMT",
        "GHST",
        "GMT",
        "GHST",
        "GMT",
        "GHST",
        "GMT",
        "GHST",
        "GMT",
        "GHST",
        "GMT",
        "GHST",
        "GMT",
        "GHST",
        "GMT",
        "GHST",
        "GMT",
        "GHST",
        "GMT",
        "GHST",
        "GMT",
        "GHST",
        "GMT",
        "GHST",
        "GMT",
        "GHST",
        "GMT",
        "GHST",
        "GMT",
        "GHST",
        "GMT",
        "GHST",
        "GMT"
      ],
      "untils": [
        -1640995148000,
        -1556841600000,
        -1546388400000,
        -1525305600000,
        -1514852400000,
        -1493769600000,
        -1483316400000,
        -1462233600000,
        -1451780400000,
        -1430611200000,
        -1420158000000,
        -1399075200000,
        -1388622000000,
        -1367539200000,
        -1357086000000,
        -1336003200000,
        -1325550000000,
        -1304380800000,
        -1293927600000,
        -1272844800000,
        -1262391600000,
        -1241308800000,
        -1230855600000,
        -1209772800000,
        -1199319600000,
        -1178150400000,
        -1167697200000,
        -1146614400000,
        -1136161200000,
        -1115078400000,
        -1104625200000,
        -1083542400000,
        -1073089200000,
        -1051920000000,
        -1041466800000,
        -1020384000000,
        -1009930800000,
        -988848000000,
        -978394800000,
        -957312000000,
        -946858800000,
        -925689600000,
        -915236400000,
        -894153600000,
        -883700400000,
        -862617600000,
        -852164400000,
        null
      ],
      "offsets": [
        0.8667,
        0,
        -20,
        0,
        -20,
        0,
        -20,
        0,
        -20,
        0,
        -20,
        0,
        -20,
        0,
        -20,
        0,
        -20,
        0,
        -20,
        0,
        -20,
        0,
        -20,
        0,
        -20,
        0,
        -20,
        0,
        -20,
        0,
        -20,
        0,
        -20,
        0,
        -20,
        0,
        -20,
        0,
        -20,
        0,
        -20,
        0,
        -20,
        0,
        -20,
        0,
        -20,
        0
      ]
    },
    {
      "name": "Africa/Addis_Ababa",
      "abbrs": [
        "LMT",
        "EAT",
        "BEAT",
        "BEAUT",
        "EAT"
      ],
      "untils": [
        -1309746436000,
        -1262314800000,
        -946780200000,
        -315629100000,
        null
      ],
      "offsets": [
        -147.2667,
        -180,
        -150,
        -165,
        -180
      ]
    },
    {
      "name": "Africa/Algiers",
      "abbrs": [
        "PMT",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "WET",
        "CET",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "CET",
        "CEST",
        "CET",
        "WET",
        "WEST",
        "WET",
        "CET"
      ],
      "untils": [
        -1855958961000,
        -1689814800000,
        -1680397200000,
        -1665363600000,
        -1648342800000,
        -1635123600000,
        -1616893200000,
        -1604278800000,
        -1585443600000,
        -1574038800000,
        -1552266000000,
        -1539997200000,
        -1531443600000,
        -956365200000,
        -950486400000,
        -942012000000,
        -812502000000,
        -796262400000,
        -781052400000,
        -766630800000,
        -733280400000,
        -439430400000,
        -212029200000,
        41468400000,
        54774000000,
        231724800000,
        246236400000,
        259545600000,
        275274000000,
        309740400000,
        325468800000,
        341802000000,
        357523200000,
        null
      ],
      "offsets": [
        -9.35,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        -120,
        -60,
        -120,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        -60,
        -120,
        -60,
        0,
        -60,
        0,
        -60
      ]
    },
    {
      "name": "Africa/Asmara",
      "abbrs": [
        "LMT",
        "EAT",
        "BEAT",
        "BEAUT",
        "EAT"
      ],
      "untils": [
        -1309746436000,
        -1262314800000,
        -946780200000,
        -315629100000,
        null
      ],
      "offsets": [
        -147.2667,
        -180,
        -150,
        -165,
        -180
      ]
    },
    {
      "name": "Africa/Asmera",
      "abbrs": [
        "LMT",
        "EAT",
        "BEAT",
        "BEAUT",
        "EAT"
      ],
      "untils": [
        -1309746436000,
        -1262314800000,
        -946780200000,
        -315629100000,
        null
      ],
      "offsets": [
        -147.2667,
        -180,
        -150,
        -165,
        -180
      ]
    },
    {
      "name": "Africa/Bamako",
      "abbrs": [
        "LMT",
        "GMT"
      ],
      "untils": [
        -1830383032000,
        null
      ],
      "offsets": [
        16.1333,
        0
      ]
    },
    {
      "name": "Africa/Bangui",
      "abbrs": [
        "LMT",
        "WAT"
      ],
      "untils": [
        -1588464816000,
        null
      ],
      "offsets": [
        -13.6,
        -60
      ]
    },
    {
      "name": "Africa/Banjul",
      "abbrs": [
        "LMT",
        "GMT"
      ],
      "untils": [
        -1830383032000,
        null
      ],
      "offsets": [
        16.1333,
        0
      ]
    },
    {
      "name": "Africa/Bissau",
      "abbrs": [
        "LMT",
        "WAT",
        "GMT"
      ],
      "untils": [
        -1830380260000,
        157770000000,
        null
      ],
      "offsets": [
        62.3333,
        60,
        0
      ]
    },
    {
      "name": "Africa/Blantyre",
      "abbrs": [
        "LMT",
        "CAT"
      ],
      "untils": [
        -2109291020000,
        null
      ],
      "offsets": [
        -130.3333,
        -120
      ]
    },
    {
      "name": "Africa/Brazzaville",
      "abbrs": [
        "LMT",
        "WAT"
      ],
      "untils": [
        -1588464816000,
        null
      ],
      "offsets": [
        -13.6,
        -60
      ]
    },
    {
      "name": "Africa/Bujumbura",
      "abbrs": [
        "LMT",
        "CAT"
      ],
      "untils": [
        -2109291020000,
        null
      ],
      "offsets": [
        -130.3333,
        -120
      ]
    },
    {
      "name": "Africa/Cairo",
      "abbrs": [
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET"
      ],
      "untils": [
        -929844000000,
        -923108400000,
        -906170400000,
        -892868400000,
        -875844000000,
        -857790000000,
        -844308000000,
        -825822000000,
        -812685600000,
        -794199600000,
        -779853600000,
        -762663600000,
        -399088800000,
        -386650800000,
        -368330400000,
        -355114800000,
        -336790800000,
        -323654400000,
        -305168400000,
        -292032000000,
        -273632400000,
        -260496000000,
        -242096400000,
        -228960000000,
        -210560400000,
        -197424000000,
        -178938000000,
        -165801600000,
        -147402000000,
        -134265600000,
        -115866000000,
        -102643200000,
        -84330000000,
        -71107200000,
        -52707600000,
        -39484800000,
        -21171600000,
        -7948800000,
        10364400000,
        23587200000,
        41900400000,
        55123200000,
        73522800000,
        86745600000,
        105058800000,
        118281600000,
        136594800000,
        149817600000,
        168130800000,
        181353600000,
        199753200000,
        212976000000,
        231289200000,
        244512000000,
        262825200000,
        276048000000,
        294361200000,
        307584000000,
        325983600000,
        339206400000,
        357519600000,
        370742400000,
        396399600000,
        402278400000,
        426812400000,
        433814400000,
        452214000000,
        465436800000,
        483750000000,
        496972800000,
        515286000000,
        528508800000,
        546822000000,
        560044800000,
        578444400000,
        591667200000,
        610412400000,
        623203200000,
        641516400000,
        654739200000,
        673052400000,
        686275200000,
        704674800000,
        717897600000,
        736210800000,
        749433600000,
        767746800000,
        780969600000,
        799020000000,
        812322000000,
        830469600000,
        843771600000,
        861919200000,
        875221200000,
        893368800000,
        906670800000,
        925423200000,
        938725200000,
        956872800000,
        970174800000,
        988322400000,
        1001624400000,
        1019772000000,
        1033074000000,
        1051221600000,
        1064523600000,
        1083276000000,
        1096578000000,
        1114725600000,
        1128027600000,
        1146175200000,
        1158872400000,
        1177624800000,
        1189112400000,
        1209074400000,
        1219957200000,
        1240524000000,
        1250802000000,
        1272578400000,
        1281474000000,
        1284069600000,
        1285880400000,
        1400191200000,
        1403816400000,
        1406844000000,
        1411678800000,
        null
      ],
      "offsets": [
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120
      ]
    },
    {
      "name": "Africa/Casablanca",
      "abbrs": [
        "LMT",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "CET",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET"
      ],
      "untils": [
        -1773012580000,
        -956361600000,
        -950490000000,
        -942019200000,
        -761187600000,
        -617241600000,
        -605149200000,
        -81432000000,
        -71110800000,
        141264000000,
        147222000000,
        199756800000,
        207702000000,
        231292800000,
        244249200000,
        265507200000,
        271033200000,
        448243200000,
        504918000000,
        1212278400000,
        1220223600000,
        1243814400000,
        1250809200000,
        1272758400000,
        1281222000000,
        1301788800000,
        1312066800000,
        1335664800000,
        1342749600000,
        1345428000000,
        1348970400000,
        1367114400000,
        1373162400000,
        1376100000000,
        1382839200000,
        1396144800000,
        1403920800000,
        1406944800000,
        1414288800000,
        1427594400000,
        1434160800000,
        1437184800000,
        1445738400000,
        1459044000000,
        1465005600000,
        1468029600000,
        1477792800000,
        1490493600000,
        1495245600000,
        1498874400000,
        1509242400000,
        1521943200000,
        1526090400000,
        1529114400000,
        1540692000000,
        1553997600000,
        1556935200000,
        1559959200000,
        1572141600000,
        1585447200000,
        1587175200000,
        1590804000000,
        1603591200000,
        1616896800000,
        1618020000000,
        1621044000000,
        1635645600000,
        1648346400000,
        1648864800000,
        1651888800000,
        1667095200000,
        1682128800000,
        1698544800000,
        1712973600000,
        1729994400000,
        1743818400000,
        1761444000000,
        1774749600000,
        1792893600000,
        1806199200000,
        1824948000000,
        1837648800000,
        1856397600000,
        1869098400000,
        1887847200000,
        1901152800000,
        1919296800000,
        1932602400000,
        1950746400000,
        1964052000000,
        1982800800000,
        1995501600000,
        2014250400000,
        2026951200000,
        2045700000000,
        2058400800000,
        2077063200000,
        2090455200000,
        2107908000000,
        2121904800000,
        2138752800000,
        null
      ],
      "offsets": [
        30.3333,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0
      ]
    },
    {
      "name": "Africa/Ceuta",
      "abbrs": [
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET"
      ],
      "untils": [
        -1630112400000,
        -1616810400000,
        -1442451600000,
        -1427677200000,
        -1379293200000,
        -1364778000000,
        -1348448400000,
        -1333328400000,
        -1316394000000,
        -1301274000000,
        -81432000000,
        -71110800000,
        141264000000,
        147222000000,
        199756800000,
        207702000000,
        231292800000,
        244249200000,
        265507200000,
        271033200000,
        448243200000,
        512528400000,
        528253200000,
        543978000000,
        559702800000,
        575427600000,
        591152400000,
        606877200000,
        622602000000,
        638326800000,
        654656400000,
        670381200000,
        686106000000,
        701830800000,
        717555600000,
        733280400000,
        749005200000,
        764730000000,
        780454800000,
        796179600000,
        811904400000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60
      ]
    },
    {
      "name": "Africa/Conakry",
      "abbrs": [
        "LMT",
        "GMT"
      ],
      "untils": [
        -1830383032000,
        null
      ],
      "offsets": [
        16.1333,
        0
      ]
    },
    {
      "name": "Africa/Dakar",
      "abbrs": [
        "LMT",
        "GMT"
      ],
      "untils": [
        -1830383032000,
        null
      ],
      "offsets": [
        16.1333,
        0
      ]
    },
    {
      "name": "Africa/Dar_es_Salaam",
      "abbrs": [
        "LMT",
        "EAT",
        "BEAT",
        "BEAUT",
        "EAT"
      ],
      "untils": [
        -1309746436000,
        -1262314800000,
        -946780200000,
        -315629100000,
        null
      ],
      "offsets": [
        -147.2667,
        -180,
        -150,
        -165,
        -180
      ]
    },
    {
      "name": "Africa/Djibouti",
      "abbrs": [
        "LMT",
        "EAT",
        "BEAT",
        "BEAUT",
        "EAT"
      ],
      "untils": [
        -1309746436000,
        -1262314800000,
        -946780200000,
        -315629100000,
        null
      ],
      "offsets": [
        -147.2667,
        -180,
        -150,
        -165,
        -180
      ]
    },
    {
      "name": "Africa/Douala",
      "abbrs": [
        "LMT",
        "WAT"
      ],
      "untils": [
        -1588464816000,
        null
      ],
      "offsets": [
        -13.6,
        -60
      ]
    },
    {
      "name": "Africa/El_Aaiun",
      "abbrs": [
        "LMT",
        "WAT",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET"
      ],
      "untils": [
        -1136070432000,
        198291600000,
        199756800000,
        207702000000,
        231292800000,
        244249200000,
        265507200000,
        271033200000,
        1212278400000,
        1220223600000,
        1243814400000,
        1250809200000,
        1272758400000,
        1281222000000,
        1301788800000,
        1312066800000,
        1335664800000,
        1342749600000,
        1345428000000,
        1348970400000,
        1367114400000,
        1373162400000,
        1376100000000,
        1382839200000,
        1396144800000,
        1403920800000,
        1406944800000,
        1414288800000,
        1427594400000,
        1434160800000,
        1437184800000,
        1445738400000,
        1459044000000,
        1465005600000,
        1468029600000,
        1477792800000,
        1490493600000,
        1495245600000,
        1498874400000,
        1509242400000,
        1521943200000,
        1526090400000,
        1529114400000,
        1540692000000,
        1553997600000,
        1556935200000,
        1559959200000,
        1572141600000,
        1585447200000,
        1587175200000,
        1590804000000,
        1603591200000,
        1616896800000,
        1618020000000,
        1621044000000,
        1635645600000,
        1648346400000,
        1648864800000,
        1651888800000,
        1667095200000,
        1682128800000,
        1698544800000,
        1712973600000,
        1729994400000,
        1743818400000,
        1761444000000,
        1774749600000,
        1792893600000,
        1806199200000,
        1824948000000,
        1837648800000,
        1856397600000,
        1869098400000,
        1887847200000,
        1901152800000,
        1919296800000,
        1932602400000,
        1950746400000,
        1964052000000,
        1982800800000,
        1995501600000,
        2014250400000,
        2026951200000,
        2045700000000,
        2058400800000,
        2077063200000,
        2090455200000,
        2107908000000,
        2121904800000,
        2138752800000,
        null
      ],
      "offsets": [
        52.8,
        60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0
      ]
    },
    {
      "name": "Africa/Freetown",
      "abbrs": [
        "LMT",
        "GMT"
      ],
      "untils": [
        -1830383032000,
        null
      ],
      "offsets": [
        16.1333,
        0
      ]
    },
    {
      "name": "Africa/Gaborone",
      "abbrs": [
        "LMT",
        "CAT"
      ],
      "untils": [
        -2109291020000,
        null
      ],
      "offsets": [
        -130.3333,
        -120
      ]
    },
    {
      "name": "Africa/Harare",
      "abbrs": [
        "LMT",
        "CAT"
      ],
      "untils": [
        -2109291020000,
        null
      ],
      "offsets": [
        -130.3333,
        -120
      ]
    },
    {
      "name": "Africa/Johannesburg",
      "abbrs": [
        "SAST",
        "SAST",
        "SAST",
        "SAST",
        "SAST",
        "SAST"
      ],
      "untils": [
        -2109288600000,
        -860976000000,
        -845254800000,
        -829526400000,
        -813805200000,
        null
      ],
      "offsets": [
        -90,
        -120,
        -180,
        -120,
        -180,
        -120
      ]
    },
    {
      "name": "Africa/Juba",
      "abbrs": [
        "LMT",
        "CAT",
        "CAST",
        "CAT",
        "CAST",
        "CAT",
        "CAST",
        "CAT",
        "CAST",
        "CAT",
        "CAST",
        "CAT",
        "CAST",
        "CAT",
        "CAST",
        "CAT",
        "CAST",
        "CAT",
        "CAST",
        "CAT",
        "CAST",
        "CAT",
        "CAST",
        "CAT",
        "CAST",
        "CAT",
        "CAST",
        "CAT",
        "CAST",
        "CAT",
        "CAST",
        "CAT",
        "CAST",
        "CAT",
        "EAT"
      ],
      "untils": [
        -1230775808000,
        10360800000,
        24786000000,
        41810400000,
        56322000000,
        73432800000,
        87944400000,
        104882400000,
        119480400000,
        136332000000,
        151016400000,
        167781600000,
        182552400000,
        199231200000,
        214174800000,
        230680800000,
        245710800000,
        262735200000,
        277246800000,
        294184800000,
        308782800000,
        325634400000,
        340405200000,
        357084000000,
        371941200000,
        388533600000,
        403477200000,
        419983200000,
        435013200000,
        452037600000,
        466635600000,
        483487200000,
        498171600000,
        947930400000,
        null
      ],
      "offsets": [
        -130.1333,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180
      ]
    },
    {
      "name": "Africa/Kampala",
      "abbrs": [
        "LMT",
        "EAT",
        "BEAT",
        "BEAUT",
        "EAT"
      ],
      "untils": [
        -1309746436000,
        -1262314800000,
        -946780200000,
        -315629100000,
        null
      ],
      "offsets": [
        -147.2667,
        -180,
        -150,
        -165,
        -180
      ]
    },
    {
      "name": "Africa/Khartoum",
      "abbrs": [
        "LMT",
        "CAT",
        "CAST",
        "CAT",
        "CAST",
        "CAT",
        "CAST",
        "CAT",
        "CAST",
        "CAT",
        "CAST",
        "CAT",
        "CAST",
        "CAT",
        "CAST",
        "CAT",
        "CAST",
        "CAT",
        "CAST",
        "CAT",
        "CAST",
        "CAT",
        "CAST",
        "CAT",
        "CAST",
        "CAT",
        "CAST",
        "CAT",
        "CAST",
        "CAT",
        "CAST",
        "CAT",
        "CAST",
        "CAT",
        "EAT"
      ],
      "untils": [
        -1230775808000,
        10360800000,
        24786000000,
        41810400000,
        56322000000,
        73432800000,
        87944400000,
        104882400000,
        119480400000,
        136332000000,
        151016400000,
        167781600000,
        182552400000,
        199231200000,
        214174800000,
        230680800000,
        245710800000,
        262735200000,
        277246800000,
        294184800000,
        308782800000,
        325634400000,
        340405200000,
        357084000000,
        371941200000,
        388533600000,
        403477200000,
        419983200000,
        435013200000,
        452037600000,
        466635600000,
        483487200000,
        498171600000,
        947930400000,
        null
      ],
      "offsets": [
        -130.1333,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180
      ]
    },
    {
      "name": "Africa/Kigali",
      "abbrs": [
        "LMT",
        "CAT"
      ],
      "untils": [
        -2109291020000,
        null
      ],
      "offsets": [
        -130.3333,
        -120
      ]
    },
    {
      "name": "Africa/Kinshasa",
      "abbrs": [
        "LMT",
        "WAT"
      ],
      "untils": [
        -1588464816000,
        null
      ],
      "offsets": [
        -13.6,
        -60
      ]
    },
    {
      "name": "Africa/Lagos",
      "abbrs": [
        "LMT",
        "WAT"
      ],
      "untils": [
        -1588464816000,
        null
      ],
      "offsets": [
        -13.6,
        -60
      ]
    },
    {
      "name": "Africa/Libreville",
      "abbrs": [
        "LMT",
        "WAT"
      ],
      "untils": [
        -1588464816000,
        null
      ],
      "offsets": [
        -13.6,
        -60
      ]
    },
    {
      "name": "Africa/Lome",
      "abbrs": [
        "LMT",
        "GMT"
      ],
      "untils": [
        -1830383032000,
        null
      ],
      "offsets": [
        16.1333,
        0
      ]
    },
    {
      "name": "Africa/Luanda",
      "abbrs": [
        "LMT",
        "WAT"
      ],
      "untils": [
        -1588464816000,
        null
      ],
      "offsets": [
        -13.6,
        -60
      ]
    },
    {
      "name": "Africa/Lubumbashi",
      "abbrs": [
        "LMT",
        "CAT"
      ],
      "untils": [
        -2109291020000,
        null
      ],
      "offsets": [
        -130.3333,
        -120
      ]
    },
    {
      "name": "Africa/Lusaka",
      "abbrs": [
        "LMT",
        "CAT"
      ],
      "untils": [
        -2109291020000,
        null
      ],
      "offsets": [
        -130.3333,
        -120
      ]
    },
    {
      "name": "Africa/Malabo",
      "abbrs": [
        "LMT",
        "WAT"
      ],
      "untils": [
        -1588464816000,
        null
      ],
      "offsets": [
        -13.6,
        -60
      ]
    },
    {
      "name": "Africa/Maputo",
      "abbrs": [
        "LMT",
        "CAT"
      ],
      "untils": [
        -2109291020000,
        null
      ],
      "offsets": [
        -130.3333,
        -120
      ]
    },
    {
      "name": "Africa/Maseru",
      "abbrs": [
        "SAST",
        "SAST",
        "SAST",
        "SAST",
        "SAST",
        "SAST"
      ],
      "untils": [
        -2109288600000,
        -860976000000,
        -845254800000,
        -829526400000,
        -813805200000,
        null
      ],
      "offsets": [
        -90,
        -120,
        -180,
        -120,
        -180,
        -120
      ]
    },
    {
      "name": "Africa/Mbabane",
      "abbrs": [
        "SAST",
        "SAST",
        "SAST",
        "SAST",
        "SAST",
        "SAST"
      ],
      "untils": [
        -2109288600000,
        -860976000000,
        -845254800000,
        -829526400000,
        -813805200000,
        null
      ],
      "offsets": [
        -90,
        -120,
        -180,
        -120,
        -180,
        -120
      ]
    },
    {
      "name": "Africa/Mogadishu",
      "abbrs": [
        "LMT",
        "EAT",
        "BEAT",
        "BEAUT",
        "EAT"
      ],
      "untils": [
        -1309746436000,
        -1262314800000,
        -946780200000,
        -315629100000,
        null
      ],
      "offsets": [
        -147.2667,
        -180,
        -150,
        -165,
        -180
      ]
    },
    {
      "name": "Africa/Monrovia",
      "abbrs": [
        "MMT",
        "LRT",
        "GMT"
      ],
      "untils": [
        -1604359012000,
        73529070000,
        null
      ],
      "offsets": [
        43.1333,
        44.5,
        0
      ]
    },
    {
      "name": "Africa/Nairobi",
      "abbrs": [
        "LMT",
        "EAT",
        "BEAT",
        "BEAUT",
        "EAT"
      ],
      "untils": [
        -1309746436000,
        -1262314800000,
        -946780200000,
        -315629100000,
        null
      ],
      "offsets": [
        -147.2667,
        -180,
        -150,
        -165,
        -180
      ]
    },
    {
      "name": "Africa/Ndjamena",
      "abbrs": [
        "LMT",
        "WAT",
        "WAST",
        "WAT"
      ],
      "untils": [
        -1830387612000,
        308703600000,
        321314400000,
        null
      ],
      "offsets": [
        -60.2,
        -60,
        -120,
        -60
      ]
    },
    {
      "name": "Africa/Niamey",
      "abbrs": [
        "LMT",
        "WAT"
      ],
      "untils": [
        -1588464816000,
        null
      ],
      "offsets": [
        -13.6,
        -60
      ]
    },
    {
      "name": "Africa/Nouakchott",
      "abbrs": [
        "LMT",
        "GMT"
      ],
      "untils": [
        -1830383032000,
        null
      ],
      "offsets": [
        16.1333,
        0
      ]
    },
    {
      "name": "Africa/Ouagadougou",
      "abbrs": [
        "LMT",
        "GMT"
      ],
      "untils": [
        -1830383032000,
        null
      ],
      "offsets": [
        16.1333,
        0
      ]
    },
    {
      "name": "Africa/Porto-Novo",
      "abbrs": [
        "LMT",
        "WAT"
      ],
      "untils": [
        -1588464816000,
        null
      ],
      "offsets": [
        -13.6,
        -60
      ]
    },
    {
      "name": "Africa/Sao_Tome",
      "abbrs": [
        "LMT",
        "GMT"
      ],
      "untils": [
        -1830383032000,
        null
      ],
      "offsets": [
        16.1333,
        0
      ]
    },
    {
      "name": "Africa/Timbuktu",
      "abbrs": [
        "LMT",
        "GMT"
      ],
      "untils": [
        -1830383032000,
        null
      ],
      "offsets": [
        16.1333,
        0
      ]
    },
    {
      "name": "Africa/Tripoli",
      "abbrs": [
        "LMT",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "EET",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "EET",
        "CET",
        "CEST",
        "EET",
        "CET",
        "CEST",
        "EET"
      ],
      "untils": [
        -1577926364000,
        -574902000000,
        -568087200000,
        -512175600000,
        -504928800000,
        -449888400000,
        -441856800000,
        -347158800000,
        378684000000,
        386463600000,
        402271200000,
        417999600000,
        433807200000,
        449622000000,
        465429600000,
        481590000000,
        496965600000,
        512953200000,
        528674400000,
        544230000000,
        560037600000,
        575852400000,
        591660000000,
        607388400000,
        623196000000,
        641775600000,
        844034400000,
        860108400000,
        875916000000,
        1352505600000,
        1364515200000,
        1382659200000,
        null
      ],
      "offsets": [
        -52.7333,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -120,
        -60,
        -120,
        -120
      ]
    },
    {
      "name": "Africa/Tunis",
      "abbrs": [
        "PMT",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET"
      ],
      "untils": [
        -1855958961000,
        -969242400000,
        -950493600000,
        -941940000000,
        -891136800000,
        -877827600000,
        -857257200000,
        -844556400000,
        -842918400000,
        -842223600000,
        -828230400000,
        -812502000000,
        -796269600000,
        -781052400000,
        -766634400000,
        231202800000,
        243903600000,
        262825200000,
        276044400000,
        581122800000,
        591145200000,
        606870000000,
        622594800000,
        641516400000,
        654649200000,
        1114902000000,
        1128038400000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        null
      ],
      "offsets": [
        -9.35,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60
      ]
    },
    {
      "name": "Africa/Windhoek",
      "abbrs": [
        "SWAT",
        "SAST",
        "SAST",
        "SAST",
        "CAT",
        "WAT",
        "WAST",
        "WAT",
        "WAST",
        "WAT",
        "WAST",
        "WAT",
        "WAST",
        "WAT",
        "WAST",
        "WAT",
        "WAST",
        "WAT",
        "WAST",
        "WAT",
        "WAST",
        "WAT",
        "WAST",
        "WAT",
        "WAST",
        "WAT",
        "WAST",
        "WAT",
        "WAST",
        "WAT",
        "WAST",
        "WAT",
        "WAST",
        "WAT",
        "WAST",
        "WAT",
        "WAST",
        "WAT",
        "WAST",
        "WAT",
        "WAST",
        "WAT",
        "WAST",
        "WAT",
        "WAST",
        "WAT",
        "WAST",
        "WAT",
        "WAST",
        "WAT",
        "WAST",
        "WAT",
        "WAST",
        "WAT",
        "WAST",
        "WAT",
        "WAST",
        "WAT",
        "WAST",
        "WAT",
        "WAST",
        "WAT",
        "WAST",
        "WAT",
        "WAST",
        "WAT",
        "WAST",
        "WAT",
        "WAST",
        "WAT",
        "WAST",
        "WAT",
        "WAST",
        "WAT",
        "WAST",
        "WAT",
        "WAST",
        "WAT",
        "WAST",
        "WAT",
        "WAST",
        "WAT",
        "WAST",
        "WAT",
        "WAST",
        "WAT",
        "WAST",
        "WAT",
        "WAST",
        "WAT",
        "WAST",
        "WAT",
        "WAST"
      ],
      "untils": [
        -2109288600000,
        -860976000000,
        -845254800000,
        637970400000,
        765324000000,
        778640400000,
        796780800000,
        810090000000,
        828835200000,
        841539600000,
        860284800000,
        873594000000,
        891734400000,
        905043600000,
        923184000000,
        936493200000,
        954633600000,
        967942800000,
        986083200000,
        999392400000,
        1018137600000,
        1030842000000,
        1049587200000,
        1062896400000,
        1081036800000,
        1094346000000,
        1112486400000,
        1125795600000,
        1143936000000,
        1157245200000,
        1175385600000,
        1188694800000,
        1207440000000,
        1220749200000,
        1238889600000,
        1252198800000,
        1270339200000,
        1283648400000,
        1301788800000,
        1315098000000,
        1333238400000,
        1346547600000,
        1365292800000,
        1377997200000,
        1396742400000,
        1410051600000,
        1428192000000,
        1441501200000,
        1459641600000,
        1472950800000,
        1491091200000,
        1504400400000,
        1522540800000,
        1535850000000,
        1554595200000,
        1567299600000,
        1586044800000,
        1599354000000,
        1617494400000,
        1630803600000,
        1648944000000,
        1662253200000,
        1680393600000,
        1693702800000,
        1712448000000,
        1725152400000,
        1743897600000,
        1757206800000,
        1775347200000,
        1788656400000,
        1806796800000,
        1820106000000,
        1838246400000,
        1851555600000,
        1869696000000,
        1883005200000,
        1901750400000,
        1914454800000,
        1933200000000,
        1946509200000,
        1964649600000,
        1977958800000,
        1996099200000,
        2009408400000,
        2027548800000,
        2040858000000,
        2058998400000,
        2072307600000,
        2091052800000,
        2104362000000,
        2122502400000,
        2135811600000,
        null
      ],
      "offsets": [
        -90,
        -120,
        -180,
        -120,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120
      ]
    },
    {
      "name": "America/Adak",
      "abbrs": [
        "NST",
        "NWT",
        "NPT",
        "NST",
        "BST",
        "BDT",
        "BST",
        "BDT",
        "BST",
        "BDT",
        "BST",
        "BDT",
        "BST",
        "BDT",
        "BST",
        "BDT",
        "BST",
        "BDT",
        "BST",
        "BDT",
        "BST",
        "BDT",
        "BST",
        "BDT",
        "BST",
        "BDT",
        "BST",
        "BDT",
        "BST",
        "BDT",
        "BST",
        "BDT",
        "BST",
        "BDT",
        "AHST",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST"
      ],
      "untils": [
        -880196400000,
        -769395600000,
        -765374400000,
        -86878800000,
        -21466800000,
        -5745600000,
        9982800000,
        25704000000,
        41432400000,
        57758400000,
        73486800000,
        89208000000,
        104936400000,
        120657600000,
        126709200000,
        152107200000,
        162392400000,
        183556800000,
        199285200000,
        215611200000,
        230734800000,
        247060800000,
        262789200000,
        278510400000,
        294238800000,
        309960000000,
        325688400000,
        341409600000,
        357138000000,
        372859200000,
        388587600000,
        404913600000,
        420037200000,
        436363200000,
        439034400000,
        452088000000,
        467809200000,
        483537600000,
        499258800000,
        514987200000,
        530708400000,
        544622400000,
        562158000000,
        576072000000,
        594212400000,
        607521600000,
        625662000000,
        638971200000,
        657111600000,
        671025600000,
        688561200000,
        702475200000,
        720010800000,
        733924800000,
        752065200000,
        765374400000,
        783514800000,
        796824000000,
        814964400000,
        828878400000,
        846414000000,
        860328000000,
        877863600000,
        891777600000,
        909313200000,
        923227200000,
        941367600000,
        954676800000,
        972817200000,
        986126400000,
        1004266800000,
        1018180800000,
        1035716400000,
        1049630400000,
        1067166000000,
        1081080000000,
        1099220400000,
        1112529600000,
        1130670000000,
        1143979200000,
        1162119600000,
        1173614400000,
        1194174000000,
        1205064000000,
        1225623600000,
        1236513600000,
        1257073200000,
        1268568000000,
        1289127600000,
        1300017600000,
        1320577200000,
        1331467200000,
        1352026800000,
        1362916800000,
        1383476400000,
        1394366400000,
        1414926000000,
        1425816000000,
        1446375600000,
        1457870400000,
        1478430000000,
        1489320000000,
        1509879600000,
        1520769600000,
        1541329200000,
        1552219200000,
        1572778800000,
        1583668800000,
        1604228400000,
        1615723200000,
        1636282800000,
        1647172800000,
        1667732400000,
        1678622400000,
        1699182000000,
        1710072000000,
        1730631600000,
        1741521600000,
        1762081200000,
        1772971200000,
        1793530800000,
        1805025600000,
        1825585200000,
        1836475200000,
        1857034800000,
        1867924800000,
        1888484400000,
        1899374400000,
        1919934000000,
        1930824000000,
        1951383600000,
        1962878400000,
        1983438000000,
        1994328000000,
        2014887600000,
        2025777600000,
        2046337200000,
        2057227200000,
        2077786800000,
        2088676800000,
        2109236400000,
        2120126400000,
        2140686000000,
        null
      ],
      "offsets": [
        660,
        600,
        600,
        660,
        660,
        600,
        660,
        600,
        660,
        600,
        660,
        600,
        660,
        600,
        660,
        600,
        660,
        600,
        660,
        600,
        660,
        600,
        660,
        600,
        660,
        600,
        660,
        600,
        660,
        600,
        660,
        600,
        660,
        600,
        600,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600
      ]
    },
    {
      "name": "America/Anchorage",
      "abbrs": [
        "CAT",
        "CAWT",
        "CAPT",
        "CAT",
        "AHST",
        "AHDT",
        "AHST",
        "AHDT",
        "AHST",
        "AHDT",
        "AHST",
        "AHDT",
        "AHST",
        "AHDT",
        "AHST",
        "AHDT",
        "AHST",
        "AHDT",
        "AHST",
        "AHDT",
        "AHST",
        "AHDT",
        "AHST",
        "AHDT",
        "AHST",
        "AHDT",
        "AHST",
        "AHDT",
        "AHST",
        "AHDT",
        "AHST",
        "AHDT",
        "AHST",
        "AHDT",
        "YST",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST"
      ],
      "untils": [
        -880200000000,
        -769395600000,
        -765378000000,
        -86882400000,
        -21470400000,
        -5749200000,
        9979200000,
        25700400000,
        41428800000,
        57754800000,
        73483200000,
        89204400000,
        104932800000,
        120654000000,
        126705600000,
        152103600000,
        162388800000,
        183553200000,
        199281600000,
        215607600000,
        230731200000,
        247057200000,
        262785600000,
        278506800000,
        294235200000,
        309956400000,
        325684800000,
        341406000000,
        357134400000,
        372855600000,
        388584000000,
        404910000000,
        420033600000,
        436359600000,
        439030800000,
        452084400000,
        467805600000,
        483534000000,
        499255200000,
        514983600000,
        530704800000,
        544618800000,
        562154400000,
        576068400000,
        594208800000,
        607518000000,
        625658400000,
        638967600000,
        657108000000,
        671022000000,
        688557600000,
        702471600000,
        720007200000,
        733921200000,
        752061600000,
        765370800000,
        783511200000,
        796820400000,
        814960800000,
        828874800000,
        846410400000,
        860324400000,
        877860000000,
        891774000000,
        909309600000,
        923223600000,
        941364000000,
        954673200000,
        972813600000,
        986122800000,
        1004263200000,
        1018177200000,
        1035712800000,
        1049626800000,
        1067162400000,
        1081076400000,
        1099216800000,
        1112526000000,
        1130666400000,
        1143975600000,
        1162116000000,
        1173610800000,
        1194170400000,
        1205060400000,
        1225620000000,
        1236510000000,
        1257069600000,
        1268564400000,
        1289124000000,
        1300014000000,
        1320573600000,
        1331463600000,
        1352023200000,
        1362913200000,
        1383472800000,
        1394362800000,
        1414922400000,
        1425812400000,
        1446372000000,
        1457866800000,
        1478426400000,
        1489316400000,
        1509876000000,
        1520766000000,
        1541325600000,
        1552215600000,
        1572775200000,
        1583665200000,
        1604224800000,
        1615719600000,
        1636279200000,
        1647169200000,
        1667728800000,
        1678618800000,
        1699178400000,
        1710068400000,
        1730628000000,
        1741518000000,
        1762077600000,
        1772967600000,
        1793527200000,
        1805022000000,
        1825581600000,
        1836471600000,
        1857031200000,
        1867921200000,
        1888480800000,
        1899370800000,
        1919930400000,
        1930820400000,
        1951380000000,
        1962874800000,
        1983434400000,
        1994324400000,
        2014884000000,
        2025774000000,
        2046333600000,
        2057223600000,
        2077783200000,
        2088673200000,
        2109232800000,
        2120122800000,
        2140682400000,
        null
      ],
      "offsets": [
        600,
        540,
        540,
        600,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        540,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540
      ]
    },
    {
      "name": "America/Anguilla",
      "abbrs": [
        "LMT",
        "AST"
      ],
      "untils": [
        -1825098836000,
        null
      ],
      "offsets": [
        246.0667,
        240
      ]
    },
    {
      "name": "America/Antigua",
      "abbrs": [
        "LMT",
        "AST"
      ],
      "untils": [
        -1825098836000,
        null
      ],
      "offsets": [
        246.0667,
        240
      ]
    },
    {
      "name": "America/Araguaina",
      "abbrs": [
        "LMT",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT"
      ],
      "untils": [
        -1767214032000,
        -1206957600000,
        -1191362400000,
        -1175374800000,
        -1159826400000,
        -633819600000,
        -622069200000,
        -602283600000,
        -591832800000,
        -570747600000,
        -560210400000,
        -539125200000,
        -531352800000,
        -191365200000,
        -184197600000,
        -155163600000,
        -150069600000,
        -128898000000,
        -121125600000,
        -99954000000,
        -89589600000,
        -68418000000,
        -57967200000,
        499748400000,
        511236000000,
        530593200000,
        540266400000,
        562129200000,
        571197600000,
        592974000000,
        602042400000,
        624423600000,
        634701600000,
        813726000000,
        824004000000,
        844570800000,
        856058400000,
        876106800000,
        888717600000,
        908074800000,
        919562400000,
        938919600000,
        951616800000,
        970974000000,
        982461600000,
        1003028400000,
        1013911200000,
        1036292400000,
        1045360800000,
        1350788400000,
        1361066400000,
        null
      ],
      "offsets": [
        192.8,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180
      ]
    },
    {
      "name": "America/Argentina/Buenos_Aires",
      "abbrs": [
        "CMT",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART"
      ],
      "untils": [
        -1567453392000,
        -1233432000000,
        -1222981200000,
        -1205956800000,
        -1194037200000,
        -1172865600000,
        -1162501200000,
        -1141329600000,
        -1130965200000,
        -1109793600000,
        -1099429200000,
        -1078257600000,
        -1067806800000,
        -1046635200000,
        -1036270800000,
        -1015099200000,
        -1004734800000,
        -983563200000,
        -973198800000,
        -952027200000,
        -941576400000,
        -931032000000,
        -900882000000,
        -890337600000,
        -833749200000,
        -827265600000,
        -752274000000,
        -733780800000,
        -197326800000,
        -190843200000,
        -184194000000,
        -164491200000,
        -152658000000,
        -132955200000,
        -121122000000,
        -101419200000,
        -86821200000,
        -71092800000,
        -54766800000,
        -39038400000,
        -23317200000,
        -7588800000,
        128142000000,
        136605600000,
        596948400000,
        605066400000,
        624423600000,
        636516000000,
        656478000000,
        667965600000,
        687927600000,
        699415200000,
        719377200000,
        731469600000,
        938919600000,
        952052400000,
        1198983600000,
        1205632800000,
        1224385200000,
        1237082400000,
        null
      ],
      "offsets": [
        256.8,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        180,
        180,
        120,
        180,
        120,
        180
      ]
    },
    {
      "name": "America/Argentina/Catamarca",
      "abbrs": [
        "CMT",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "WART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "WART",
        "ART",
        "ARST",
        "ART"
      ],
      "untils": [
        -1567453392000,
        -1233432000000,
        -1222981200000,
        -1205956800000,
        -1194037200000,
        -1172865600000,
        -1162501200000,
        -1141329600000,
        -1130965200000,
        -1109793600000,
        -1099429200000,
        -1078257600000,
        -1067806800000,
        -1046635200000,
        -1036270800000,
        -1015099200000,
        -1004734800000,
        -983563200000,
        -973198800000,
        -952027200000,
        -941576400000,
        -931032000000,
        -900882000000,
        -890337600000,
        -833749200000,
        -827265600000,
        -752274000000,
        -733780800000,
        -197326800000,
        -190843200000,
        -184194000000,
        -164491200000,
        -152658000000,
        -132955200000,
        -121122000000,
        -101419200000,
        -86821200000,
        -71092800000,
        -54766800000,
        -39038400000,
        -23317200000,
        -7588800000,
        128142000000,
        136605600000,
        596948400000,
        605066400000,
        624423600000,
        636516000000,
        656478000000,
        667965600000,
        687931200000,
        699415200000,
        719377200000,
        731469600000,
        938919600000,
        952052400000,
        1086058800000,
        1087704000000,
        1198983600000,
        1205632800000,
        null
      ],
      "offsets": [
        256.8,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        240,
        120,
        180,
        120,
        180,
        180,
        180,
        240,
        180,
        120,
        180
      ]
    },
    {
      "name": "America/Argentina/ComodRivadavia",
      "abbrs": [
        "CMT",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "WART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "WART",
        "ART",
        "ARST",
        "ART"
      ],
      "untils": [
        -1567453392000,
        -1233432000000,
        -1222981200000,
        -1205956800000,
        -1194037200000,
        -1172865600000,
        -1162501200000,
        -1141329600000,
        -1130965200000,
        -1109793600000,
        -1099429200000,
        -1078257600000,
        -1067806800000,
        -1046635200000,
        -1036270800000,
        -1015099200000,
        -1004734800000,
        -983563200000,
        -973198800000,
        -952027200000,
        -941576400000,
        -931032000000,
        -900882000000,
        -890337600000,
        -833749200000,
        -827265600000,
        -752274000000,
        -733780800000,
        -197326800000,
        -190843200000,
        -184194000000,
        -164491200000,
        -152658000000,
        -132955200000,
        -121122000000,
        -101419200000,
        -86821200000,
        -71092800000,
        -54766800000,
        -39038400000,
        -23317200000,
        -7588800000,
        128142000000,
        136605600000,
        596948400000,
        605066400000,
        624423600000,
        636516000000,
        656478000000,
        667965600000,
        687931200000,
        699415200000,
        719377200000,
        731469600000,
        938919600000,
        952052400000,
        1086058800000,
        1087704000000,
        1198983600000,
        1205632800000,
        null
      ],
      "offsets": [
        256.8,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        240,
        120,
        180,
        120,
        180,
        180,
        180,
        240,
        180,
        120,
        180
      ]
    },
    {
      "name": "America/Argentina/Cordoba",
      "abbrs": [
        "CMT",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "WART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART"
      ],
      "untils": [
        -1567453392000,
        -1233432000000,
        -1222981200000,
        -1205956800000,
        -1194037200000,
        -1172865600000,
        -1162501200000,
        -1141329600000,
        -1130965200000,
        -1109793600000,
        -1099429200000,
        -1078257600000,
        -1067806800000,
        -1046635200000,
        -1036270800000,
        -1015099200000,
        -1004734800000,
        -983563200000,
        -973198800000,
        -952027200000,
        -941576400000,
        -931032000000,
        -900882000000,
        -890337600000,
        -833749200000,
        -827265600000,
        -752274000000,
        -733780800000,
        -197326800000,
        -190843200000,
        -184194000000,
        -164491200000,
        -152658000000,
        -132955200000,
        -121122000000,
        -101419200000,
        -86821200000,
        -71092800000,
        -54766800000,
        -39038400000,
        -23317200000,
        -7588800000,
        128142000000,
        136605600000,
        596948400000,
        605066400000,
        624423600000,
        636516000000,
        656478000000,
        667965600000,
        687931200000,
        699415200000,
        719377200000,
        731469600000,
        938919600000,
        952052400000,
        1198983600000,
        1205632800000,
        1224385200000,
        1237082400000,
        null
      ],
      "offsets": [
        256.8,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        240,
        120,
        180,
        120,
        180,
        180,
        180,
        120,
        180,
        120,
        180
      ]
    },
    {
      "name": "America/Argentina/Jujuy",
      "abbrs": [
        "CMT",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "WART",
        "WARST",
        "WART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART"
      ],
      "untils": [
        -1567453392000,
        -1233432000000,
        -1222981200000,
        -1205956800000,
        -1194037200000,
        -1172865600000,
        -1162501200000,
        -1141329600000,
        -1130965200000,
        -1109793600000,
        -1099429200000,
        -1078257600000,
        -1067806800000,
        -1046635200000,
        -1036270800000,
        -1015099200000,
        -1004734800000,
        -983563200000,
        -973198800000,
        -952027200000,
        -941576400000,
        -931032000000,
        -900882000000,
        -890337600000,
        -833749200000,
        -827265600000,
        -752274000000,
        -733780800000,
        -197326800000,
        -190843200000,
        -184194000000,
        -164491200000,
        -152658000000,
        -132955200000,
        -121122000000,
        -101419200000,
        -86821200000,
        -71092800000,
        -54766800000,
        -39038400000,
        -23317200000,
        -7588800000,
        128142000000,
        136605600000,
        596948400000,
        605066400000,
        624423600000,
        636516000000,
        657086400000,
        669178800000,
        686721600000,
        699415200000,
        719377200000,
        731469600000,
        938919600000,
        952052400000,
        1198983600000,
        1205632800000,
        null
      ],
      "offsets": [
        256.8,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        120,
        180,
        120,
        180,
        120,
        240,
        180,
        240,
        120,
        180,
        120,
        180,
        180,
        180,
        120,
        180
      ]
    },
    {
      "name": "America/Argentina/La_Rioja",
      "abbrs": [
        "CMT",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "WART",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "WART",
        "ART",
        "ARST",
        "ART"
      ],
      "untils": [
        -1567453392000,
        -1233432000000,
        -1222981200000,
        -1205956800000,
        -1194037200000,
        -1172865600000,
        -1162501200000,
        -1141329600000,
        -1130965200000,
        -1109793600000,
        -1099429200000,
        -1078257600000,
        -1067806800000,
        -1046635200000,
        -1036270800000,
        -1015099200000,
        -1004734800000,
        -983563200000,
        -973198800000,
        -952027200000,
        -941576400000,
        -931032000000,
        -900882000000,
        -890337600000,
        -833749200000,
        -827265600000,
        -752274000000,
        -733780800000,
        -197326800000,
        -190843200000,
        -184194000000,
        -164491200000,
        -152658000000,
        -132955200000,
        -121122000000,
        -101419200000,
        -86821200000,
        -71092800000,
        -54766800000,
        -39038400000,
        -23317200000,
        -7588800000,
        128142000000,
        136605600000,
        596948400000,
        605066400000,
        624423600000,
        636516000000,
        656478000000,
        667792800000,
        673588800000,
        687927600000,
        699415200000,
        719377200000,
        731469600000,
        938919600000,
        952052400000,
        1086058800000,
        1087704000000,
        1198983600000,
        1205632800000,
        null
      ],
      "offsets": [
        256.8,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        240,
        180,
        120,
        180,
        120,
        180,
        180,
        180,
        240,
        180,
        120,
        180
      ]
    },
    {
      "name": "America/Argentina/Mendoza",
      "abbrs": [
        "CMT",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "WART",
        "WARST",
        "WART",
        "WARST",
        "WART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "WART",
        "ART",
        "ARST",
        "ART"
      ],
      "untils": [
        -1567453392000,
        -1233432000000,
        -1222981200000,
        -1205956800000,
        -1194037200000,
        -1172865600000,
        -1162501200000,
        -1141329600000,
        -1130965200000,
        -1109793600000,
        -1099429200000,
        -1078257600000,
        -1067806800000,
        -1046635200000,
        -1036270800000,
        -1015099200000,
        -1004734800000,
        -983563200000,
        -973198800000,
        -952027200000,
        -941576400000,
        -931032000000,
        -900882000000,
        -890337600000,
        -833749200000,
        -827265600000,
        -752274000000,
        -733780800000,
        -197326800000,
        -190843200000,
        -184194000000,
        -164491200000,
        -152658000000,
        -132955200000,
        -121122000000,
        -101419200000,
        -86821200000,
        -71092800000,
        -54766800000,
        -39038400000,
        -23317200000,
        -7588800000,
        128142000000,
        136605600000,
        596948400000,
        605066400000,
        624423600000,
        636516000000,
        655963200000,
        667796400000,
        687499200000,
        699418800000,
        719380800000,
        731469600000,
        938919600000,
        952052400000,
        1085281200000,
        1096171200000,
        1198983600000,
        1205632800000,
        null
      ],
      "offsets": [
        256.8,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        120,
        180,
        120,
        180,
        120,
        240,
        180,
        240,
        180,
        240,
        120,
        180,
        180,
        180,
        240,
        180,
        120,
        180
      ]
    },
    {
      "name": "America/Argentina/Rio_Gallegos",
      "abbrs": [
        "CMT",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "WART",
        "ART",
        "ARST",
        "ART"
      ],
      "untils": [
        -1567453392000,
        -1233432000000,
        -1222981200000,
        -1205956800000,
        -1194037200000,
        -1172865600000,
        -1162501200000,
        -1141329600000,
        -1130965200000,
        -1109793600000,
        -1099429200000,
        -1078257600000,
        -1067806800000,
        -1046635200000,
        -1036270800000,
        -1015099200000,
        -1004734800000,
        -983563200000,
        -973198800000,
        -952027200000,
        -941576400000,
        -931032000000,
        -900882000000,
        -890337600000,
        -833749200000,
        -827265600000,
        -752274000000,
        -733780800000,
        -197326800000,
        -190843200000,
        -184194000000,
        -164491200000,
        -152658000000,
        -132955200000,
        -121122000000,
        -101419200000,
        -86821200000,
        -71092800000,
        -54766800000,
        -39038400000,
        -23317200000,
        -7588800000,
        128142000000,
        136605600000,
        596948400000,
        605066400000,
        624423600000,
        636516000000,
        656478000000,
        667965600000,
        687927600000,
        699415200000,
        719377200000,
        731469600000,
        938919600000,
        952052400000,
        1086058800000,
        1087704000000,
        1198983600000,
        1205632800000,
        null
      ],
      "offsets": [
        256.8,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        180,
        180,
        240,
        180,
        120,
        180
      ]
    },
    {
      "name": "America/Argentina/Salta",
      "abbrs": [
        "CMT",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "WART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART"
      ],
      "untils": [
        -1567453392000,
        -1233432000000,
        -1222981200000,
        -1205956800000,
        -1194037200000,
        -1172865600000,
        -1162501200000,
        -1141329600000,
        -1130965200000,
        -1109793600000,
        -1099429200000,
        -1078257600000,
        -1067806800000,
        -1046635200000,
        -1036270800000,
        -1015099200000,
        -1004734800000,
        -983563200000,
        -973198800000,
        -952027200000,
        -941576400000,
        -931032000000,
        -900882000000,
        -890337600000,
        -833749200000,
        -827265600000,
        -752274000000,
        -733780800000,
        -197326800000,
        -190843200000,
        -184194000000,
        -164491200000,
        -152658000000,
        -132955200000,
        -121122000000,
        -101419200000,
        -86821200000,
        -71092800000,
        -54766800000,
        -39038400000,
        -23317200000,
        -7588800000,
        128142000000,
        136605600000,
        596948400000,
        605066400000,
        624423600000,
        636516000000,
        656478000000,
        667965600000,
        687931200000,
        699415200000,
        719377200000,
        731469600000,
        938919600000,
        952052400000,
        1198983600000,
        1205632800000,
        null
      ],
      "offsets": [
        256.8,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        240,
        120,
        180,
        120,
        180,
        180,
        180,
        120,
        180
      ]
    },
    {
      "name": "America/Argentina/San_Juan",
      "abbrs": [
        "CMT",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "WART",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "WART",
        "ART",
        "ARST",
        "ART"
      ],
      "untils": [
        -1567453392000,
        -1233432000000,
        -1222981200000,
        -1205956800000,
        -1194037200000,
        -1172865600000,
        -1162501200000,
        -1141329600000,
        -1130965200000,
        -1109793600000,
        -1099429200000,
        -1078257600000,
        -1067806800000,
        -1046635200000,
        -1036270800000,
        -1015099200000,
        -1004734800000,
        -983563200000,
        -973198800000,
        -952027200000,
        -941576400000,
        -931032000000,
        -900882000000,
        -890337600000,
        -833749200000,
        -827265600000,
        -752274000000,
        -733780800000,
        -197326800000,
        -190843200000,
        -184194000000,
        -164491200000,
        -152658000000,
        -132955200000,
        -121122000000,
        -101419200000,
        -86821200000,
        -71092800000,
        -54766800000,
        -39038400000,
        -23317200000,
        -7588800000,
        128142000000,
        136605600000,
        596948400000,
        605066400000,
        624423600000,
        636516000000,
        656478000000,
        667792800000,
        673588800000,
        687927600000,
        699415200000,
        719377200000,
        731469600000,
        938919600000,
        952052400000,
        1085972400000,
        1090728000000,
        1198983600000,
        1205632800000,
        null
      ],
      "offsets": [
        256.8,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        240,
        180,
        120,
        180,
        120,
        180,
        180,
        180,
        240,
        180,
        120,
        180
      ]
    },
    {
      "name": "America/Argentina/San_Luis",
      "abbrs": [
        "CMT",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "WART",
        "WARST",
        "WART",
        "ART",
        "WARST",
        "ART",
        "WART",
        "ART",
        "ARST",
        "WARST",
        "WART",
        "WARST",
        "WART",
        "ART"
      ],
      "untils": [
        -1567453392000,
        -1233432000000,
        -1222981200000,
        -1205956800000,
        -1194037200000,
        -1172865600000,
        -1162501200000,
        -1141329600000,
        -1130965200000,
        -1109793600000,
        -1099429200000,
        -1078257600000,
        -1067806800000,
        -1046635200000,
        -1036270800000,
        -1015099200000,
        -1004734800000,
        -983563200000,
        -973198800000,
        -952027200000,
        -941576400000,
        -931032000000,
        -900882000000,
        -890337600000,
        -833749200000,
        -827265600000,
        -752274000000,
        -733780800000,
        -197326800000,
        -190843200000,
        -184194000000,
        -164491200000,
        -152658000000,
        -132955200000,
        -121122000000,
        -101419200000,
        -86821200000,
        -71092800000,
        -54766800000,
        -39038400000,
        -23317200000,
        -7588800000,
        128142000000,
        136605600000,
        596948400000,
        605066400000,
        624423600000,
        637380000000,
        655963200000,
        667796400000,
        675748800000,
        938919600000,
        952052400000,
        1085972400000,
        1090728000000,
        1198983600000,
        1200880800000,
        1205031600000,
        1223784000000,
        1236481200000,
        1255233600000,
        null
      ],
      "offsets": [
        256.8,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        120,
        180,
        120,
        180,
        120,
        240,
        180,
        240,
        180,
        180,
        180,
        240,
        180,
        120,
        180,
        240,
        180,
        240,
        180
      ]
    },
    {
      "name": "America/Argentina/Tucuman",
      "abbrs": [
        "CMT",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "WART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "WART",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART"
      ],
      "untils": [
        -1567453392000,
        -1233432000000,
        -1222981200000,
        -1205956800000,
        -1194037200000,
        -1172865600000,
        -1162501200000,
        -1141329600000,
        -1130965200000,
        -1109793600000,
        -1099429200000,
        -1078257600000,
        -1067806800000,
        -1046635200000,
        -1036270800000,
        -1015099200000,
        -1004734800000,
        -983563200000,
        -973198800000,
        -952027200000,
        -941576400000,
        -931032000000,
        -900882000000,
        -890337600000,
        -833749200000,
        -827265600000,
        -752274000000,
        -733780800000,
        -197326800000,
        -190843200000,
        -184194000000,
        -164491200000,
        -152658000000,
        -132955200000,
        -121122000000,
        -101419200000,
        -86821200000,
        -71092800000,
        -54766800000,
        -39038400000,
        -23317200000,
        -7588800000,
        128142000000,
        136605600000,
        596948400000,
        605066400000,
        624423600000,
        636516000000,
        656478000000,
        667965600000,
        687931200000,
        699415200000,
        719377200000,
        731469600000,
        938919600000,
        952052400000,
        1086058800000,
        1087099200000,
        1198983600000,
        1205632800000,
        1224385200000,
        1237082400000,
        null
      ],
      "offsets": [
        256.8,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        240,
        120,
        180,
        120,
        180,
        180,
        180,
        240,
        180,
        120,
        180,
        120,
        180
      ]
    },
    {
      "name": "America/Argentina/Ushuaia",
      "abbrs": [
        "CMT",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "WART",
        "ART",
        "ARST",
        "ART"
      ],
      "untils": [
        -1567453392000,
        -1233432000000,
        -1222981200000,
        -1205956800000,
        -1194037200000,
        -1172865600000,
        -1162501200000,
        -1141329600000,
        -1130965200000,
        -1109793600000,
        -1099429200000,
        -1078257600000,
        -1067806800000,
        -1046635200000,
        -1036270800000,
        -1015099200000,
        -1004734800000,
        -983563200000,
        -973198800000,
        -952027200000,
        -941576400000,
        -931032000000,
        -900882000000,
        -890337600000,
        -833749200000,
        -827265600000,
        -752274000000,
        -733780800000,
        -197326800000,
        -190843200000,
        -184194000000,
        -164491200000,
        -152658000000,
        -132955200000,
        -121122000000,
        -101419200000,
        -86821200000,
        -71092800000,
        -54766800000,
        -39038400000,
        -23317200000,
        -7588800000,
        128142000000,
        136605600000,
        596948400000,
        605066400000,
        624423600000,
        636516000000,
        656478000000,
        667965600000,
        687927600000,
        699415200000,
        719377200000,
        731469600000,
        938919600000,
        952052400000,
        1085886000000,
        1087704000000,
        1198983600000,
        1205632800000,
        null
      ],
      "offsets": [
        256.8,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        180,
        180,
        240,
        180,
        120,
        180
      ]
    },
    {
      "name": "America/Aruba",
      "abbrs": [
        "LMT",
        "ANT",
        "AST"
      ],
      "untils": [
        -1826738653000,
        -157750200000,
        null
      ],
      "offsets": [
        275.7833,
        270,
        240
      ]
    },
    {
      "name": "America/Asuncion",
      "abbrs": [
        "AMT",
        "PYT",
        "PYT",
        "PYT",
        "PYST",
        "PYT",
        "PYST",
        "PYT",
        "PYST",
        "PYT",
        "PYST",
        "PYT",
        "PYST",
        "PYT",
        "PYST",
        "PYT",
        "PYST",
        "PYT",
        "PYST",
        "PYT",
        "PYST",
        "PYT",
        "PYST",
        "PYT",
        "PYST",
        "PYT",
        "PYST",
        "PYT",
        "PYST",
        "PYT",
        "PYST",
        "PYT",
        "PYST",
        "PYT",
        "PYST",
        "PYT",
        "PYST",
        "PYT",
        "PYST",
        "PYT",
        "PYST",
        "PYT",
        "PYST",
        "PYT",
        "PYST",
        "PYT",
        "PYST",
        "PYT",
        "PYST",
        "PYT",
        "PYST",
        "PYT",
        "PYST",
        "PYT",
        "PYST",
        "PYT",
        "PYST",
        "PYT",
        "PYST",
        "PYT",
        "PYST",
        "PYT",
        "PYST",
        "PYT",
        "PYST",
        "PYT",
        "PYST",
        "PYT",
        "PYST",
        "PYT",
        "PYST",
        "PYT",
        "PYST",
        "PYT",
        "PYST",
        "PYT",
        "PYST",
        "PYT",
        "PYST",
        "PYT",
        "PYST",
        "PYT",
        "PYST",
        "PYT",
        "PYST",
        "PYT",
        "PYST",
        "PYT",
        "PYST",
        "PYT",
        "PYST",
        "PYT",
        "PYST",
        "PYT",
        "PYST",
        "PYT",
        "PYST",
        "PYT",
        "PYST",
        "PYT",
        "PYST",
        "PYT",
        "PYST",
        "PYT",
        "PYST",
        "PYT",
        "PYST",
        "PYT",
        "PYST",
        "PYT",
        "PYST",
        "PYT",
        "PYST",
        "PYT",
        "PYST",
        "PYT",
        "PYST",
        "PYT",
        "PYST",
        "PYT",
        "PYST",
        "PYT",
        "PYST",
        "PYT",
        "PYST",
        "PYT",
        "PYST",
        "PYT",
        "PYST"
      ],
      "untils": [
        -1206389360000,
        86760000000,
        134017200000,
        181368000000,
        194497200000,
        212990400000,
        226033200000,
        244526400000,
        257569200000,
        276062400000,
        291783600000,
        307598400000,
        323406000000,
        339220800000,
        354942000000,
        370756800000,
        386478000000,
        402292800000,
        418014000000,
        433828800000,
        449636400000,
        465451200000,
        481172400000,
        496987200000,
        512708400000,
        528523200000,
        544244400000,
        560059200000,
        575866800000,
        591681600000,
        607402800000,
        625032000000,
        638938800000,
        654753600000,
        670474800000,
        686721600000,
        699418800000,
        718257600000,
        733546800000,
        749448000000,
        762318000000,
        780984000000,
        793767600000,
        812520000000,
        825649200000,
        844574400000,
        856666800000,
        876024000000,
        888721200000,
        907473600000,
        920775600000,
        938923200000,
        952225200000,
        970372800000,
        983674800000,
        1002427200000,
        1018148400000,
        1030852800000,
        1049598000000,
        1062907200000,
        1081047600000,
        1097985600000,
        1110682800000,
        1129435200000,
        1142132400000,
        1160884800000,
        1173582000000,
        1192939200000,
        1205031600000,
        1224388800000,
        1236481200000,
        1255838400000,
        1270954800000,
        1286078400000,
        1302404400000,
        1317528000000,
        1333854000000,
        1349582400000,
        1364094000000,
        1381032000000,
        1395543600000,
        1412481600000,
        1426993200000,
        1443931200000,
        1459047600000,
        1475380800000,
        1490497200000,
        1506830400000,
        1521946800000,
        1538884800000,
        1553396400000,
        1570334400000,
        1584846000000,
        1601784000000,
        1616900400000,
        1633233600000,
        1648350000000,
        1664683200000,
        1679799600000,
        1696132800000,
        1711249200000,
        1728187200000,
        1742698800000,
        1759636800000,
        1774148400000,
        1791086400000,
        1806202800000,
        1822536000000,
        1837652400000,
        1853985600000,
        1869102000000,
        1886040000000,
        1900551600000,
        1917489600000,
        1932001200000,
        1948939200000,
        1964055600000,
        1980388800000,
        1995505200000,
        2011838400000,
        2026954800000,
        2043288000000,
        2058404400000,
        2075342400000,
        2089854000000,
        2106792000000,
        2121303600000,
        2138241600000,
        null
      ],
      "offsets": [
        230.6667,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180
      ]
    },
    {
      "name": "America/Atikokan",
      "abbrs": [
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CWT",
        "CPT",
        "EST"
      ],
      "untils": [
        -1632067200000,
        -1615136400000,
        -923248800000,
        -880214400000,
        -769395600000,
        -765392400000,
        null
      ],
      "offsets": [
        360,
        300,
        360,
        300,
        300,
        300,
        300
      ]
    },
    {
      "name": "America/Atka",
      "abbrs": [
        "NST",
        "NWT",
        "NPT",
        "NST",
        "BST",
        "BDT",
        "BST",
        "BDT",
        "BST",
        "BDT",
        "BST",
        "BDT",
        "BST",
        "BDT",
        "BST",
        "BDT",
        "BST",
        "BDT",
        "BST",
        "BDT",
        "BST",
        "BDT",
        "BST",
        "BDT",
        "BST",
        "BDT",
        "BST",
        "BDT",
        "BST",
        "BDT",
        "BST",
        "BDT",
        "BST",
        "BDT",
        "AHST",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST"
      ],
      "untils": [
        -880196400000,
        -769395600000,
        -765374400000,
        -86878800000,
        -21466800000,
        -5745600000,
        9982800000,
        25704000000,
        41432400000,
        57758400000,
        73486800000,
        89208000000,
        104936400000,
        120657600000,
        126709200000,
        152107200000,
        162392400000,
        183556800000,
        199285200000,
        215611200000,
        230734800000,
        247060800000,
        262789200000,
        278510400000,
        294238800000,
        309960000000,
        325688400000,
        341409600000,
        357138000000,
        372859200000,
        388587600000,
        404913600000,
        420037200000,
        436363200000,
        439034400000,
        452088000000,
        467809200000,
        483537600000,
        499258800000,
        514987200000,
        530708400000,
        544622400000,
        562158000000,
        576072000000,
        594212400000,
        607521600000,
        625662000000,
        638971200000,
        657111600000,
        671025600000,
        688561200000,
        702475200000,
        720010800000,
        733924800000,
        752065200000,
        765374400000,
        783514800000,
        796824000000,
        814964400000,
        828878400000,
        846414000000,
        860328000000,
        877863600000,
        891777600000,
        909313200000,
        923227200000,
        941367600000,
        954676800000,
        972817200000,
        986126400000,
        1004266800000,
        1018180800000,
        1035716400000,
        1049630400000,
        1067166000000,
        1081080000000,
        1099220400000,
        1112529600000,
        1130670000000,
        1143979200000,
        1162119600000,
        1173614400000,
        1194174000000,
        1205064000000,
        1225623600000,
        1236513600000,
        1257073200000,
        1268568000000,
        1289127600000,
        1300017600000,
        1320577200000,
        1331467200000,
        1352026800000,
        1362916800000,
        1383476400000,
        1394366400000,
        1414926000000,
        1425816000000,
        1446375600000,
        1457870400000,
        1478430000000,
        1489320000000,
        1509879600000,
        1520769600000,
        1541329200000,
        1552219200000,
        1572778800000,
        1583668800000,
        1604228400000,
        1615723200000,
        1636282800000,
        1647172800000,
        1667732400000,
        1678622400000,
        1699182000000,
        1710072000000,
        1730631600000,
        1741521600000,
        1762081200000,
        1772971200000,
        1793530800000,
        1805025600000,
        1825585200000,
        1836475200000,
        1857034800000,
        1867924800000,
        1888484400000,
        1899374400000,
        1919934000000,
        1930824000000,
        1951383600000,
        1962878400000,
        1983438000000,
        1994328000000,
        2014887600000,
        2025777600000,
        2046337200000,
        2057227200000,
        2077786800000,
        2088676800000,
        2109236400000,
        2120126400000,
        2140686000000,
        null
      ],
      "offsets": [
        660,
        600,
        600,
        660,
        660,
        600,
        660,
        600,
        660,
        600,
        660,
        600,
        660,
        600,
        660,
        600,
        660,
        600,
        660,
        600,
        660,
        600,
        660,
        600,
        660,
        600,
        660,
        600,
        660,
        600,
        660,
        600,
        660,
        600,
        600,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600
      ]
    },
    {
      "name": "America/Bahia",
      "abbrs": [
        "LMT",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT"
      ],
      "untils": [
        -1767216356000,
        -1206957600000,
        -1191362400000,
        -1175374800000,
        -1159826400000,
        -633819600000,
        -622069200000,
        -602283600000,
        -591832800000,
        -570747600000,
        -560210400000,
        -539125200000,
        -531352800000,
        -191365200000,
        -184197600000,
        -155163600000,
        -150069600000,
        -128898000000,
        -121125600000,
        -99954000000,
        -89589600000,
        -68418000000,
        -57967200000,
        499748400000,
        511236000000,
        530593200000,
        540266400000,
        562129200000,
        571197600000,
        592974000000,
        602042400000,
        624423600000,
        634701600000,
        656478000000,
        666756000000,
        687927600000,
        697600800000,
        719982000000,
        728445600000,
        750826800000,
        761709600000,
        782276400000,
        793159200000,
        813726000000,
        824004000000,
        844570800000,
        856058400000,
        876106800000,
        888717600000,
        908074800000,
        919562400000,
        938919600000,
        951616800000,
        970974000000,
        982461600000,
        1003028400000,
        1013911200000,
        1036292400000,
        1045360800000,
        1318734000000,
        1330221600000,
        null
      ],
      "offsets": [
        154.0667,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180
      ]
    },
    {
      "name": "America/Bahia_Banderas",
      "abbrs": [
        "LMT",
        "MST",
        "CST",
        "MST",
        "CST",
        "MST",
        "CST",
        "MST",
        "PST",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST"
      ],
      "untils": [
        -1514739600000,
        -1343066400000,
        -1234807200000,
        -1220292000000,
        -1207159200000,
        -1191344400000,
        -873828000000,
        -661539600000,
        28800000,
        828867600000,
        846403200000,
        860317200000,
        877852800000,
        891766800000,
        909302400000,
        923216400000,
        941356800000,
        954666000000,
        972806400000,
        989139600000,
        1001836800000,
        1018170000000,
        1035705600000,
        1049619600000,
        1067155200000,
        1081069200000,
        1099209600000,
        1112518800000,
        1130659200000,
        1143968400000,
        1162108800000,
        1175418000000,
        1193558400000,
        1207472400000,
        1225008000000,
        1238922000000,
        1256457600000,
        1270371600000,
        1288508400000,
        1301817600000,
        1319958000000,
        1333267200000,
        1351407600000,
        1365321600000,
        1382857200000,
        1396771200000,
        1414306800000,
        1428220800000,
        1445756400000,
        1459670400000,
        1477810800000,
        1491120000000,
        1509260400000,
        1522569600000,
        1540710000000,
        1554624000000,
        1572159600000,
        1586073600000,
        1603609200000,
        1617523200000,
        1635663600000,
        1648972800000,
        1667113200000,
        1680422400000,
        1698562800000,
        1712476800000,
        1730012400000,
        1743926400000,
        1761462000000,
        1775376000000,
        1792911600000,
        1806825600000,
        1824966000000,
        1838275200000,
        1856415600000,
        1869724800000,
        1887865200000,
        1901779200000,
        1919314800000,
        1933228800000,
        1950764400000,
        1964678400000,
        1982818800000,
        1996128000000,
        2014268400000,
        2027577600000,
        2045718000000,
        2059027200000,
        2077167600000,
        2091081600000,
        2108617200000,
        2122531200000,
        2140066800000,
        null
      ],
      "offsets": [
        421,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        480,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360
      ]
    },
    {
      "name": "America/Barbados",
      "abbrs": [
        "LMT",
        "BMT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST"
      ],
      "untils": [
        -1451678491000,
        -1199217691000,
        234943200000,
        244616400000,
        261554400000,
        276066000000,
        293004000000,
        307515600000,
        325058400000,
        338706000000,
        null
      ],
      "offsets": [
        238.4833,
        238.4833,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240
      ]
    },
    {
      "name": "America/Belem",
      "abbrs": [
        "LMT",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT"
      ],
      "untils": [
        -1767213964000,
        -1206957600000,
        -1191362400000,
        -1175374800000,
        -1159826400000,
        -633819600000,
        -622069200000,
        -602283600000,
        -591832800000,
        -570747600000,
        -560210400000,
        -539125200000,
        -531352800000,
        -191365200000,
        -184197600000,
        -155163600000,
        -150069600000,
        -128898000000,
        -121125600000,
        -99954000000,
        -89589600000,
        -68418000000,
        -57967200000,
        499748400000,
        511236000000,
        530593200000,
        540266400000,
        562129200000,
        571197600000,
        null
      ],
      "offsets": [
        193.9333,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180
      ]
    },
    {
      "name": "America/Belize",
      "abbrs": [
        "LMT",
        "CST",
        "CHDT",
        "CST",
        "CHDT",
        "CST",
        "CHDT",
        "CST",
        "CHDT",
        "CST",
        "CHDT",
        "CST",
        "CHDT",
        "CST",
        "CHDT",
        "CST",
        "CHDT",
        "CST",
        "CHDT",
        "CST",
        "CHDT",
        "CST",
        "CHDT",
        "CST",
        "CHDT",
        "CST",
        "CHDT",
        "CST",
        "CHDT",
        "CST",
        "CHDT",
        "CST",
        "CHDT",
        "CST",
        "CHDT",
        "CST",
        "CHDT",
        "CST",
        "CHDT",
        "CST",
        "CHDT",
        "CST",
        "CHDT",
        "CST",
        "CHDT",
        "CST",
        "CHDT",
        "CST",
        "CHDT",
        "CST",
        "CHDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST"
      ],
      "untils": [
        -1822500432000,
        -1616954400000,
        -1606069800000,
        -1585504800000,
        -1574015400000,
        -1554055200000,
        -1542565800000,
        -1522605600000,
        -1511116200000,
        -1490551200000,
        -1479666600000,
        -1459101600000,
        -1448217000000,
        -1427652000000,
        -1416162600000,
        -1396202400000,
        -1384713000000,
        -1364752800000,
        -1353263400000,
        -1333303200000,
        -1321813800000,
        -1301248800000,
        -1290364200000,
        -1269799200000,
        -1258914600000,
        -1238349600000,
        -1226860200000,
        -1206900000000,
        -1195410600000,
        -1175450400000,
        -1163961000000,
        -1143396000000,
        -1132511400000,
        -1111946400000,
        -1101061800000,
        -1080496800000,
        -1069612200000,
        -1049047200000,
        -1037557800000,
        -1017597600000,
        -1006108200000,
        -986148000000,
        -974658600000,
        -954093600000,
        -943209000000,
        -922644000000,
        -911759400000,
        -891194400000,
        -879705000000,
        -859744800000,
        -848255400000,
        123919200000,
        129618000000,
        409039200000,
        413874000000,
        null
      ],
      "offsets": [
        352.8,
        360,
        330,
        360,
        330,
        360,
        330,
        360,
        330,
        360,
        330,
        360,
        330,
        360,
        330,
        360,
        330,
        360,
        330,
        360,
        330,
        360,
        330,
        360,
        330,
        360,
        330,
        360,
        330,
        360,
        330,
        360,
        330,
        360,
        330,
        360,
        330,
        360,
        330,
        360,
        330,
        360,
        330,
        360,
        330,
        360,
        330,
        360,
        330,
        360,
        330,
        360,
        300,
        360,
        300,
        360
      ]
    },
    {
      "name": "America/Blanc-Sablon",
      "abbrs": [
        "AST",
        "ADT",
        "AST",
        "AWT",
        "APT",
        "AST"
      ],
      "untils": [
        -1632074400000,
        -1615143600000,
        -880221600000,
        -769395600000,
        -765399600000,
        null
      ],
      "offsets": [
        240,
        180,
        240,
        180,
        180,
        240
      ]
    },
    {
      "name": "America/Boa_Vista",
      "abbrs": [
        "LMT",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT"
      ],
      "untils": [
        -1767211040000,
        -1206954000000,
        -1191358800000,
        -1175371200000,
        -1159822800000,
        -633816000000,
        -622065600000,
        -602280000000,
        -591829200000,
        -570744000000,
        -560206800000,
        -539121600000,
        -531349200000,
        -191361600000,
        -184194000000,
        -155160000000,
        -150066000000,
        -128894400000,
        -121122000000,
        -99950400000,
        -89586000000,
        -68414400000,
        -57963600000,
        499752000000,
        511239600000,
        530596800000,
        540270000000,
        562132800000,
        571201200000,
        938923200000,
        951620400000,
        970977600000,
        971578800000,
        null
      ],
      "offsets": [
        242.6667,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240
      ]
    },
    {
      "name": "America/Bogota",
      "abbrs": [
        "BMT",
        "COT",
        "COST",
        "COT"
      ],
      "untils": [
        -1739041424000,
        704869200000,
        733896000000,
        null
      ],
      "offsets": [
        296.2667,
        300,
        240,
        300
      ]
    },
    {
      "name": "America/Boise",
      "abbrs": [
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "MST",
        "MWT",
        "MPT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST"
      ],
      "untils": [
        -1633269600000,
        -1615129200000,
        -1601820000000,
        -1583679600000,
        -1471788000000,
        -880210800000,
        -769395600000,
        -765388800000,
        -84380400000,
        -68659200000,
        -52930800000,
        -37209600000,
        -21481200000,
        -5760000000,
        9968400000,
        25689600000,
        41418000000,
        57744000000,
        73472400000,
        89193600000,
        104922000000,
        120643200000,
        129114000000,
        152092800000,
        162378000000,
        183542400000,
        199270800000,
        215596800000,
        230720400000,
        247046400000,
        262774800000,
        278496000000,
        294224400000,
        309945600000,
        325674000000,
        341395200000,
        357123600000,
        372844800000,
        388573200000,
        404899200000,
        420022800000,
        436348800000,
        452077200000,
        467798400000,
        483526800000,
        499248000000,
        514976400000,
        530697600000,
        544611600000,
        562147200000,
        576061200000,
        594201600000,
        607510800000,
        625651200000,
        638960400000,
        657100800000,
        671014800000,
        688550400000,
        702464400000,
        720000000000,
        733914000000,
        752054400000,
        765363600000,
        783504000000,
        796813200000,
        814953600000,
        828867600000,
        846403200000,
        860317200000,
        877852800000,
        891766800000,
        909302400000,
        923216400000,
        941356800000,
        954666000000,
        972806400000,
        986115600000,
        1004256000000,
        1018170000000,
        1035705600000,
        1049619600000,
        1067155200000,
        1081069200000,
        1099209600000,
        1112518800000,
        1130659200000,
        1143968400000,
        1162108800000,
        1173603600000,
        1194163200000,
        1205053200000,
        1225612800000,
        1236502800000,
        1257062400000,
        1268557200000,
        1289116800000,
        1300006800000,
        1320566400000,
        1331456400000,
        1352016000000,
        1362906000000,
        1383465600000,
        1394355600000,
        1414915200000,
        1425805200000,
        1446364800000,
        1457859600000,
        1478419200000,
        1489309200000,
        1509868800000,
        1520758800000,
        1541318400000,
        1552208400000,
        1572768000000,
        1583658000000,
        1604217600000,
        1615712400000,
        1636272000000,
        1647162000000,
        1667721600000,
        1678611600000,
        1699171200000,
        1710061200000,
        1730620800000,
        1741510800000,
        1762070400000,
        1772960400000,
        1793520000000,
        1805014800000,
        1825574400000,
        1836464400000,
        1857024000000,
        1867914000000,
        1888473600000,
        1899363600000,
        1919923200000,
        1930813200000,
        1951372800000,
        1962867600000,
        1983427200000,
        1994317200000,
        2014876800000,
        2025766800000,
        2046326400000,
        2057216400000,
        2077776000000,
        2088666000000,
        2109225600000,
        2120115600000,
        2140675200000,
        null
      ],
      "offsets": [
        480,
        420,
        480,
        420,
        480,
        420,
        360,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420
      ]
    },
    {
      "name": "America/Buenos_Aires",
      "abbrs": [
        "CMT",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART"
      ],
      "untils": [
        -1567453392000,
        -1233432000000,
        -1222981200000,
        -1205956800000,
        -1194037200000,
        -1172865600000,
        -1162501200000,
        -1141329600000,
        -1130965200000,
        -1109793600000,
        -1099429200000,
        -1078257600000,
        -1067806800000,
        -1046635200000,
        -1036270800000,
        -1015099200000,
        -1004734800000,
        -983563200000,
        -973198800000,
        -952027200000,
        -941576400000,
        -931032000000,
        -900882000000,
        -890337600000,
        -833749200000,
        -827265600000,
        -752274000000,
        -733780800000,
        -197326800000,
        -190843200000,
        -184194000000,
        -164491200000,
        -152658000000,
        -132955200000,
        -121122000000,
        -101419200000,
        -86821200000,
        -71092800000,
        -54766800000,
        -39038400000,
        -23317200000,
        -7588800000,
        128142000000,
        136605600000,
        596948400000,
        605066400000,
        624423600000,
        636516000000,
        656478000000,
        667965600000,
        687927600000,
        699415200000,
        719377200000,
        731469600000,
        938919600000,
        952052400000,
        1198983600000,
        1205632800000,
        1224385200000,
        1237082400000,
        null
      ],
      "offsets": [
        256.8,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        180,
        180,
        120,
        180,
        120,
        180
      ]
    },
    {
      "name": "America/Cambridge_Bay",
      "abbrs": [
        "zzz",
        "MST",
        "MWT",
        "MPT",
        "MST",
        "MDDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "CST",
        "CDT",
        "EST",
        "CST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST"
      ],
      "untils": [
        -1577923200000,
        -880210800000,
        -769395600000,
        -765388800000,
        -147891600000,
        -131562000000,
        325674000000,
        341395200000,
        357123600000,
        372844800000,
        388573200000,
        404899200000,
        420022800000,
        436348800000,
        452077200000,
        467798400000,
        483526800000,
        499248000000,
        514976400000,
        530697600000,
        544611600000,
        562147200000,
        576061200000,
        594201600000,
        607510800000,
        625651200000,
        638960400000,
        657100800000,
        671014800000,
        688550400000,
        702464400000,
        720000000000,
        733914000000,
        752054400000,
        765363600000,
        783504000000,
        796813200000,
        814953600000,
        828867600000,
        846403200000,
        860317200000,
        877852800000,
        891766800000,
        909302400000,
        923216400000,
        941356800000,
        954662400000,
        972802800000,
        973400400000,
        986115600000,
        1004256000000,
        1018170000000,
        1035705600000,
        1049619600000,
        1067155200000,
        1081069200000,
        1099209600000,
        1112518800000,
        1130659200000,
        1143968400000,
        1162108800000,
        1173603600000,
        1194163200000,
        1205053200000,
        1225612800000,
        1236502800000,
        1257062400000,
        1268557200000,
        1289116800000,
        1300006800000,
        1320566400000,
        1331456400000,
        1352016000000,
        1362906000000,
        1383465600000,
        1394355600000,
        1414915200000,
        1425805200000,
        1446364800000,
        1457859600000,
        1478419200000,
        1489309200000,
        1509868800000,
        1520758800000,
        1541318400000,
        1552208400000,
        1572768000000,
        1583658000000,
        1604217600000,
        1615712400000,
        1636272000000,
        1647162000000,
        1667721600000,
        1678611600000,
        1699171200000,
        1710061200000,
        1730620800000,
        1741510800000,
        1762070400000,
        1772960400000,
        1793520000000,
        1805014800000,
        1825574400000,
        1836464400000,
        1857024000000,
        1867914000000,
        1888473600000,
        1899363600000,
        1919923200000,
        1930813200000,
        1951372800000,
        1962867600000,
        1983427200000,
        1994317200000,
        2014876800000,
        2025766800000,
        2046326400000,
        2057216400000,
        2077776000000,
        2088666000000,
        2109225600000,
        2120115600000,
        2140675200000,
        null
      ],
      "offsets": [
        0,
        420,
        360,
        360,
        420,
        300,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        360,
        300,
        300,
        360,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420
      ]
    },
    {
      "name": "America/Campo_Grande",
      "abbrs": [
        "LMT",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST"
      ],
      "untils": [
        -1767212492000,
        -1206954000000,
        -1191358800000,
        -1175371200000,
        -1159822800000,
        -633816000000,
        -622065600000,
        -602280000000,
        -591829200000,
        -570744000000,
        -560206800000,
        -539121600000,
        -531349200000,
        -191361600000,
        -184194000000,
        -155160000000,
        -150066000000,
        -128894400000,
        -121122000000,
        -99950400000,
        -89586000000,
        -68414400000,
        -57963600000,
        499752000000,
        511239600000,
        530596800000,
        540270000000,
        562132800000,
        571201200000,
        592977600000,
        602046000000,
        624427200000,
        634705200000,
        656481600000,
        666759600000,
        687931200000,
        697604400000,
        719985600000,
        728449200000,
        750830400000,
        761713200000,
        782280000000,
        793162800000,
        813729600000,
        824007600000,
        844574400000,
        856062000000,
        876110400000,
        888721200000,
        908078400000,
        919566000000,
        938923200000,
        951620400000,
        970977600000,
        982465200000,
        1003032000000,
        1013914800000,
        1036296000000,
        1045364400000,
        1066536000000,
        1076814000000,
        1099368000000,
        1108868400000,
        1129435200000,
        1140318000000,
        1162699200000,
        1172372400000,
        1192334400000,
        1203217200000,
        1224388800000,
        1234666800000,
        1255838400000,
        1266721200000,
        1287288000000,
        1298170800000,
        1318737600000,
        1330225200000,
        1350792000000,
        1361070000000,
        1382241600000,
        1392519600000,
        1413691200000,
        1424574000000,
        1445140800000,
        1456023600000,
        1476590400000,
        1487473200000,
        1508040000000,
        1518922800000,
        1540094400000,
        1550372400000,
        1571544000000,
        1581822000000,
        1602993600000,
        1613876400000,
        1634443200000,
        1645326000000,
        1665892800000,
        1677380400000,
        1697342400000,
        1708225200000,
        1729396800000,
        1739674800000,
        1760846400000,
        1771729200000,
        1792296000000,
        1803178800000,
        1823745600000,
        1834628400000,
        1855195200000,
        1866078000000,
        1887249600000,
        1897527600000,
        1918699200000,
        1928977200000,
        1950148800000,
        1960426800000,
        1981598400000,
        1992481200000,
        2013048000000,
        2024535600000,
        2044497600000,
        2055380400000,
        2076552000000,
        2086830000000,
        2108001600000,
        2118884400000,
        2139451200000,
        null
      ],
      "offsets": [
        218.4667,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180
      ]
    },
    {
      "name": "America/Cancun",
      "abbrs": [
        "LMT",
        "CST",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "EST"
      ],
      "untils": [
        -1514743200000,
        377935200000,
        828860400000,
        846396000000,
        860310000000,
        877845600000,
        891759600000,
        902037600000,
        909298800000,
        923212800000,
        941353200000,
        954662400000,
        972802800000,
        989136000000,
        1001833200000,
        1018166400000,
        1035702000000,
        1049616000000,
        1067151600000,
        1081065600000,
        1099206000000,
        1112515200000,
        1130655600000,
        1143964800000,
        1162105200000,
        1175414400000,
        1193554800000,
        1207468800000,
        1225004400000,
        1238918400000,
        1256454000000,
        1270368000000,
        1288508400000,
        1301817600000,
        1319958000000,
        1333267200000,
        1351407600000,
        1365321600000,
        1382857200000,
        1396771200000,
        1414306800000,
        1422777600000,
        null
      ],
      "offsets": [
        347.0667,
        360,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300
      ]
    },
    {
      "name": "America/Caracas",
      "abbrs": [
        "CMT",
        "VET",
        "VET",
        "VET"
      ],
      "untils": [
        -1826739140000,
        -157750200000,
        1197183600000,
        null
      ],
      "offsets": [
        267.6667,
        270,
        240,
        270
      ]
    },
    {
      "name": "America/Catamarca",
      "abbrs": [
        "CMT",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "WART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "WART",
        "ART",
        "ARST",
        "ART"
      ],
      "untils": [
        -1567453392000,
        -1233432000000,
        -1222981200000,
        -1205956800000,
        -1194037200000,
        -1172865600000,
        -1162501200000,
        -1141329600000,
        -1130965200000,
        -1109793600000,
        -1099429200000,
        -1078257600000,
        -1067806800000,
        -1046635200000,
        -1036270800000,
        -1015099200000,
        -1004734800000,
        -983563200000,
        -973198800000,
        -952027200000,
        -941576400000,
        -931032000000,
        -900882000000,
        -890337600000,
        -833749200000,
        -827265600000,
        -752274000000,
        -733780800000,
        -197326800000,
        -190843200000,
        -184194000000,
        -164491200000,
        -152658000000,
        -132955200000,
        -121122000000,
        -101419200000,
        -86821200000,
        -71092800000,
        -54766800000,
        -39038400000,
        -23317200000,
        -7588800000,
        128142000000,
        136605600000,
        596948400000,
        605066400000,
        624423600000,
        636516000000,
        656478000000,
        667965600000,
        687931200000,
        699415200000,
        719377200000,
        731469600000,
        938919600000,
        952052400000,
        1086058800000,
        1087704000000,
        1198983600000,
        1205632800000,
        null
      ],
      "offsets": [
        256.8,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        240,
        120,
        180,
        120,
        180,
        180,
        180,
        240,
        180,
        120,
        180
      ]
    },
    {
      "name": "America/Cayenne",
      "abbrs": [
        "LMT",
        "GFT",
        "GFT"
      ],
      "untils": [
        -1846269040000,
        -71092800000,
        null
      ],
      "offsets": [
        209.3333,
        240,
        180
      ]
    },
    {
      "name": "America/Cayman",
      "abbrs": [
        "CMT",
        "EST"
      ],
      "untils": [
        -1946918424000,
        null
      ],
      "offsets": [
        319.6,
        300
      ]
    },
    {
      "name": "America/Chicago",
      "abbrs": [
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "EST",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CWT",
        "CPT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST"
      ],
      "untils": [
        -1633276800000,
        -1615136400000,
        -1601827200000,
        -1583686800000,
        -1563724800000,
        -1551632400000,
        -1538928000000,
        -1520182800000,
        -1504454400000,
        -1491757200000,
        -1473004800000,
        -1459702800000,
        -1441555200000,
        -1428253200000,
        -1410105600000,
        -1396803600000,
        -1378656000000,
        -1365354000000,
        -1347206400000,
        -1333904400000,
        -1315152000000,
        -1301850000000,
        -1283702400000,
        -1270400400000,
        -1252252800000,
        -1238950800000,
        -1220803200000,
        -1207501200000,
        -1189353600000,
        -1176051600000,
        -1157299200000,
        -1144602000000,
        -1125849600000,
        -1112547600000,
        -1094400000000,
        -1081098000000,
        -1067788800000,
        -1045414800000,
        -1031500800000,
        -1018198800000,
        -1000051200000,
        -986749200000,
        -967996800000,
        -955299600000,
        -936547200000,
        -923245200000,
        -905097600000,
        -891795600000,
        -880214400000,
        -769395600000,
        -765392400000,
        -747244800000,
        -733942800000,
        -715795200000,
        -702493200000,
        -684345600000,
        -671043600000,
        -652896000000,
        -639594000000,
        -620841600000,
        -608144400000,
        -589392000000,
        -576090000000,
        -557942400000,
        -544640400000,
        -526492800000,
        -513190800000,
        -495043200000,
        -481741200000,
        -463593600000,
        -447267600000,
        -431539200000,
        -415818000000,
        -400089600000,
        -384368400000,
        -368640000000,
        -352918800000,
        -337190400000,
        -321469200000,
        -305740800000,
        -289414800000,
        -273686400000,
        -257965200000,
        -242236800000,
        -226515600000,
        -210787200000,
        -195066000000,
        -179337600000,
        -163616400000,
        -147888000000,
        -131562000000,
        -116438400000,
        -100112400000,
        -84384000000,
        -68662800000,
        -52934400000,
        -37213200000,
        -21484800000,
        -5763600000,
        9964800000,
        25686000000,
        41414400000,
        57740400000,
        73468800000,
        89190000000,
        104918400000,
        120639600000,
        126691200000,
        152089200000,
        162374400000,
        183538800000,
        199267200000,
        215593200000,
        230716800000,
        247042800000,
        262771200000,
        278492400000,
        294220800000,
        309942000000,
        325670400000,
        341391600000,
        357120000000,
        372841200000,
        388569600000,
        404895600000,
        420019200000,
        436345200000,
        452073600000,
        467794800000,
        483523200000,
        499244400000,
        514972800000,
        530694000000,
        544608000000,
        562143600000,
        576057600000,
        594198000000,
        607507200000,
        625647600000,
        638956800000,
        657097200000,
        671011200000,
        688546800000,
        702460800000,
        719996400000,
        733910400000,
        752050800000,
        765360000000,
        783500400000,
        796809600000,
        814950000000,
        828864000000,
        846399600000,
        860313600000,
        877849200000,
        891763200000,
        909298800000,
        923212800000,
        941353200000,
        954662400000,
        972802800000,
        986112000000,
        1004252400000,
        1018166400000,
        1035702000000,
        1049616000000,
        1067151600000,
        1081065600000,
        1099206000000,
        1112515200000,
        1130655600000,
        1143964800000,
        1162105200000,
        1173600000000,
        1194159600000,
        1205049600000,
        1225609200000,
        1236499200000,
        1257058800000,
        1268553600000,
        1289113200000,
        1300003200000,
        1320562800000,
        1331452800000,
        1352012400000,
        1362902400000,
        1383462000000,
        1394352000000,
        1414911600000,
        1425801600000,
        1446361200000,
        1457856000000,
        1478415600000,
        1489305600000,
        1509865200000,
        1520755200000,
        1541314800000,
        1552204800000,
        1572764400000,
        1583654400000,
        1604214000000,
        1615708800000,
        1636268400000,
        1647158400000,
        1667718000000,
        1678608000000,
        1699167600000,
        1710057600000,
        1730617200000,
        1741507200000,
        1762066800000,
        1772956800000,
        1793516400000,
        1805011200000,
        1825570800000,
        1836460800000,
        1857020400000,
        1867910400000,
        1888470000000,
        1899360000000,
        1919919600000,
        1930809600000,
        1951369200000,
        1962864000000,
        1983423600000,
        1994313600000,
        2014873200000,
        2025763200000,
        2046322800000,
        2057212800000,
        2077772400000,
        2088662400000,
        2109222000000,
        2120112000000,
        2140671600000,
        null
      ],
      "offsets": [
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360
      ]
    },
    {
      "name": "America/Chihuahua",
      "abbrs": [
        "LMT",
        "MST",
        "CST",
        "MST",
        "CST",
        "MST",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST"
      ],
      "untils": [
        -1514739600000,
        -1343066400000,
        -1234807200000,
        -1220292000000,
        -1207159200000,
        -1191344400000,
        828864000000,
        846399600000,
        860313600000,
        877849200000,
        891766800000,
        909302400000,
        923216400000,
        941356800000,
        954666000000,
        972806400000,
        989139600000,
        1001836800000,
        1018170000000,
        1035705600000,
        1049619600000,
        1067155200000,
        1081069200000,
        1099209600000,
        1112518800000,
        1130659200000,
        1143968400000,
        1162108800000,
        1175418000000,
        1193558400000,
        1207472400000,
        1225008000000,
        1238922000000,
        1256457600000,
        1270371600000,
        1288512000000,
        1301821200000,
        1319961600000,
        1333270800000,
        1351411200000,
        1365325200000,
        1382860800000,
        1396774800000,
        1414310400000,
        1428224400000,
        1445760000000,
        1459674000000,
        1477814400000,
        1491123600000,
        1509264000000,
        1522573200000,
        1540713600000,
        1554627600000,
        1572163200000,
        1586077200000,
        1603612800000,
        1617526800000,
        1635667200000,
        1648976400000,
        1667116800000,
        1680426000000,
        1698566400000,
        1712480400000,
        1730016000000,
        1743930000000,
        1761465600000,
        1775379600000,
        1792915200000,
        1806829200000,
        1824969600000,
        1838278800000,
        1856419200000,
        1869728400000,
        1887868800000,
        1901782800000,
        1919318400000,
        1933232400000,
        1950768000000,
        1964682000000,
        1982822400000,
        1996131600000,
        2014272000000,
        2027581200000,
        2045721600000,
        2059030800000,
        2077171200000,
        2091085200000,
        2108620800000,
        2122534800000,
        2140070400000,
        null
      ],
      "offsets": [
        424.3333,
        420,
        360,
        420,
        360,
        420,
        360,
        300,
        360,
        300,
        360,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420
      ]
    },
    {
      "name": "America/Coral_Harbour",
      "abbrs": [
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CWT",
        "CPT",
        "EST"
      ],
      "untils": [
        -1632067200000,
        -1615136400000,
        -923248800000,
        -880214400000,
        -769395600000,
        -765392400000,
        null
      ],
      "offsets": [
        360,
        300,
        360,
        300,
        300,
        300,
        300
      ]
    },
    {
      "name": "America/Cordoba",
      "abbrs": [
        "CMT",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "WART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART"
      ],
      "untils": [
        -1567453392000,
        -1233432000000,
        -1222981200000,
        -1205956800000,
        -1194037200000,
        -1172865600000,
        -1162501200000,
        -1141329600000,
        -1130965200000,
        -1109793600000,
        -1099429200000,
        -1078257600000,
        -1067806800000,
        -1046635200000,
        -1036270800000,
        -1015099200000,
        -1004734800000,
        -983563200000,
        -973198800000,
        -952027200000,
        -941576400000,
        -931032000000,
        -900882000000,
        -890337600000,
        -833749200000,
        -827265600000,
        -752274000000,
        -733780800000,
        -197326800000,
        -190843200000,
        -184194000000,
        -164491200000,
        -152658000000,
        -132955200000,
        -121122000000,
        -101419200000,
        -86821200000,
        -71092800000,
        -54766800000,
        -39038400000,
        -23317200000,
        -7588800000,
        128142000000,
        136605600000,
        596948400000,
        605066400000,
        624423600000,
        636516000000,
        656478000000,
        667965600000,
        687931200000,
        699415200000,
        719377200000,
        731469600000,
        938919600000,
        952052400000,
        1198983600000,
        1205632800000,
        1224385200000,
        1237082400000,
        null
      ],
      "offsets": [
        256.8,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        240,
        120,
        180,
        120,
        180,
        180,
        180,
        120,
        180,
        120,
        180
      ]
    },
    {
      "name": "America/Costa_Rica",
      "abbrs": [
        "SJMT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST"
      ],
      "untils": [
        -1545071027000,
        288770400000,
        297234000000,
        320220000000,
        328683600000,
        664264800000,
        678344400000,
        695714400000,
        700635600000,
        null
      ],
      "offsets": [
        336.2167,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360
      ]
    },
    {
      "name": "America/Creston",
      "abbrs": [
        "MST",
        "PST",
        "MST"
      ],
      "untils": [
        -1680454800000,
        -1627833600000,
        null
      ],
      "offsets": [
        420,
        480,
        420
      ]
    },
    {
      "name": "America/Cuiaba",
      "abbrs": [
        "LMT",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST"
      ],
      "untils": [
        -1767212140000,
        -1206954000000,
        -1191358800000,
        -1175371200000,
        -1159822800000,
        -633816000000,
        -622065600000,
        -602280000000,
        -591829200000,
        -570744000000,
        -560206800000,
        -539121600000,
        -531349200000,
        -191361600000,
        -184194000000,
        -155160000000,
        -150066000000,
        -128894400000,
        -121122000000,
        -99950400000,
        -89586000000,
        -68414400000,
        -57963600000,
        499752000000,
        511239600000,
        530596800000,
        540270000000,
        562132800000,
        571201200000,
        592977600000,
        602046000000,
        624427200000,
        634705200000,
        656481600000,
        666759600000,
        687931200000,
        697604400000,
        719985600000,
        728449200000,
        750830400000,
        761713200000,
        782280000000,
        793162800000,
        813729600000,
        824007600000,
        844574400000,
        856062000000,
        876110400000,
        888721200000,
        908078400000,
        919566000000,
        938923200000,
        951620400000,
        970977600000,
        982465200000,
        1003032000000,
        1013914800000,
        1036296000000,
        1045364400000,
        1099368000000,
        1108868400000,
        1129435200000,
        1140318000000,
        1162699200000,
        1172372400000,
        1192334400000,
        1203217200000,
        1224388800000,
        1234666800000,
        1255838400000,
        1266721200000,
        1287288000000,
        1298170800000,
        1318737600000,
        1330225200000,
        1350792000000,
        1361070000000,
        1382241600000,
        1392519600000,
        1413691200000,
        1424574000000,
        1445140800000,
        1456023600000,
        1476590400000,
        1487473200000,
        1508040000000,
        1518922800000,
        1540094400000,
        1550372400000,
        1571544000000,
        1581822000000,
        1602993600000,
        1613876400000,
        1634443200000,
        1645326000000,
        1665892800000,
        1677380400000,
        1697342400000,
        1708225200000,
        1729396800000,
        1739674800000,
        1760846400000,
        1771729200000,
        1792296000000,
        1803178800000,
        1823745600000,
        1834628400000,
        1855195200000,
        1866078000000,
        1887249600000,
        1897527600000,
        1918699200000,
        1928977200000,
        1950148800000,
        1960426800000,
        1981598400000,
        1992481200000,
        2013048000000,
        2024535600000,
        2044497600000,
        2055380400000,
        2076552000000,
        2086830000000,
        2108001600000,
        2118884400000,
        2139451200000,
        null
      ],
      "offsets": [
        224.3333,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180
      ]
    },
    {
      "name": "America/Curacao",
      "abbrs": [
        "LMT",
        "ANT",
        "AST"
      ],
      "untils": [
        -1826738653000,
        -157750200000,
        null
      ],
      "offsets": [
        275.7833,
        270,
        240
      ]
    },
    {
      "name": "America/Danmarkshavn",
      "abbrs": [
        "LMT",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "GMT"
      ],
      "untils": [
        -1686091520000,
        323845200000,
        338950800000,
        354675600000,
        370400400000,
        386125200000,
        401850000000,
        417574800000,
        433299600000,
        449024400000,
        465354000000,
        481078800000,
        496803600000,
        512528400000,
        528253200000,
        543978000000,
        559702800000,
        575427600000,
        591152400000,
        606877200000,
        622602000000,
        638326800000,
        654656400000,
        670381200000,
        686106000000,
        701830800000,
        717555600000,
        733280400000,
        749005200000,
        764730000000,
        780454800000,
        796179600000,
        811904400000,
        820465200000,
        null
      ],
      "offsets": [
        74.6667,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        0
      ]
    },
    {
      "name": "America/Dawson",
      "abbrs": [
        "YST",
        "YDT",
        "YST",
        "YDT",
        "YST",
        "YWT",
        "YPT",
        "YST",
        "YDDT",
        "YST",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST"
      ],
      "untils": [
        -1632056400000,
        -1615125600000,
        -1596978000000,
        -1583164800000,
        -880203600000,
        -769395600000,
        -765381600000,
        -147884400000,
        -131554800000,
        120646800000,
        325677600000,
        341398800000,
        357127200000,
        372848400000,
        388576800000,
        404902800000,
        420026400000,
        436352400000,
        452080800000,
        467802000000,
        483530400000,
        499251600000,
        514980000000,
        530701200000,
        544615200000,
        562150800000,
        576064800000,
        594205200000,
        607514400000,
        625654800000,
        638964000000,
        657104400000,
        671018400000,
        688554000000,
        702468000000,
        720003600000,
        733917600000,
        752058000000,
        765367200000,
        783507600000,
        796816800000,
        814957200000,
        828871200000,
        846406800000,
        860320800000,
        877856400000,
        891770400000,
        909306000000,
        923220000000,
        941360400000,
        954669600000,
        972810000000,
        986119200000,
        1004259600000,
        1018173600000,
        1035709200000,
        1049623200000,
        1067158800000,
        1081072800000,
        1099213200000,
        1112522400000,
        1130662800000,
        1143972000000,
        1162112400000,
        1173607200000,
        1194166800000,
        1205056800000,
        1225616400000,
        1236506400000,
        1257066000000,
        1268560800000,
        1289120400000,
        1300010400000,
        1320570000000,
        1331460000000,
        1352019600000,
        1362909600000,
        1383469200000,
        1394359200000,
        1414918800000,
        1425808800000,
        1446368400000,
        1457863200000,
        1478422800000,
        1489312800000,
        1509872400000,
        1520762400000,
        1541322000000,
        1552212000000,
        1572771600000,
        1583661600000,
        1604221200000,
        1615716000000,
        1636275600000,
        1647165600000,
        1667725200000,
        1678615200000,
        1699174800000,
        1710064800000,
        1730624400000,
        1741514400000,
        1762074000000,
        1772964000000,
        1793523600000,
        1805018400000,
        1825578000000,
        1836468000000,
        1857027600000,
        1867917600000,
        1888477200000,
        1899367200000,
        1919926800000,
        1930816800000,
        1951376400000,
        1962871200000,
        1983430800000,
        1994320800000,
        2014880400000,
        2025770400000,
        2046330000000,
        2057220000000,
        2077779600000,
        2088669600000,
        2109229200000,
        2120119200000,
        2140678800000,
        null
      ],
      "offsets": [
        540,
        480,
        540,
        480,
        540,
        480,
        480,
        540,
        420,
        540,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480
      ]
    },
    {
      "name": "America/Dawson_Creek",
      "abbrs": [
        "PST",
        "PDT",
        "PST",
        "PWT",
        "PPT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "MST"
      ],
      "untils": [
        -1632060000000,
        -1615129200000,
        -880207200000,
        -769395600000,
        -765385200000,
        -715788000000,
        -702486000000,
        -684338400000,
        -671036400000,
        -652888800000,
        -639586800000,
        -620834400000,
        -608137200000,
        -589384800000,
        -576082800000,
        -557935200000,
        -544633200000,
        -526485600000,
        -513183600000,
        -495036000000,
        -481734000000,
        -463586400000,
        -450284400000,
        -431532000000,
        -418230000000,
        -400082400000,
        -386780400000,
        -368632800000,
        -355330800000,
        -337183200000,
        -323881200000,
        -305733600000,
        -292431600000,
        -273679200000,
        -260982000000,
        -242229600000,
        -226508400000,
        -210780000000,
        -195058800000,
        -179330400000,
        -163609200000,
        -147880800000,
        -131554800000,
        -116431200000,
        -100105200000,
        -84376800000,
        -68655600000,
        -52927200000,
        -37206000000,
        -21477600000,
        -5756400000,
        9972000000,
        25693200000,
        41421600000,
        57747600000,
        73476000000,
        84013200000,
        null
      ],
      "offsets": [
        480,
        420,
        480,
        420,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        420
      ]
    },
    {
      "name": "America/Denver",
      "abbrs": [
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MWT",
        "MPT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST"
      ],
      "untils": [
        -1633273200000,
        -1615132800000,
        -1601823600000,
        -1583683200000,
        -1570374000000,
        -1551628800000,
        -1538924400000,
        -1534089600000,
        -880210800000,
        -769395600000,
        -765388800000,
        -147884400000,
        -131558400000,
        -116434800000,
        -100108800000,
        -84380400000,
        -68659200000,
        -52930800000,
        -37209600000,
        -21481200000,
        -5760000000,
        9968400000,
        25689600000,
        41418000000,
        57744000000,
        73472400000,
        89193600000,
        104922000000,
        120643200000,
        126694800000,
        152092800000,
        162378000000,
        183542400000,
        199270800000,
        215596800000,
        230720400000,
        247046400000,
        262774800000,
        278496000000,
        294224400000,
        309945600000,
        325674000000,
        341395200000,
        357123600000,
        372844800000,
        388573200000,
        404899200000,
        420022800000,
        436348800000,
        452077200000,
        467798400000,
        483526800000,
        499248000000,
        514976400000,
        530697600000,
        544611600000,
        562147200000,
        576061200000,
        594201600000,
        607510800000,
        625651200000,
        638960400000,
        657100800000,
        671014800000,
        688550400000,
        702464400000,
        720000000000,
        733914000000,
        752054400000,
        765363600000,
        783504000000,
        796813200000,
        814953600000,
        828867600000,
        846403200000,
        860317200000,
        877852800000,
        891766800000,
        909302400000,
        923216400000,
        941356800000,
        954666000000,
        972806400000,
        986115600000,
        1004256000000,
        1018170000000,
        1035705600000,
        1049619600000,
        1067155200000,
        1081069200000,
        1099209600000,
        1112518800000,
        1130659200000,
        1143968400000,
        1162108800000,
        1173603600000,
        1194163200000,
        1205053200000,
        1225612800000,
        1236502800000,
        1257062400000,
        1268557200000,
        1289116800000,
        1300006800000,
        1320566400000,
        1331456400000,
        1352016000000,
        1362906000000,
        1383465600000,
        1394355600000,
        1414915200000,
        1425805200000,
        1446364800000,
        1457859600000,
        1478419200000,
        1489309200000,
        1509868800000,
        1520758800000,
        1541318400000,
        1552208400000,
        1572768000000,
        1583658000000,
        1604217600000,
        1615712400000,
        1636272000000,
        1647162000000,
        1667721600000,
        1678611600000,
        1699171200000,
        1710061200000,
        1730620800000,
        1741510800000,
        1762070400000,
        1772960400000,
        1793520000000,
        1805014800000,
        1825574400000,
        1836464400000,
        1857024000000,
        1867914000000,
        1888473600000,
        1899363600000,
        1919923200000,
        1930813200000,
        1951372800000,
        1962867600000,
        1983427200000,
        1994317200000,
        2014876800000,
        2025766800000,
        2046326400000,
        2057216400000,
        2077776000000,
        2088666000000,
        2109225600000,
        2120115600000,
        2140675200000,
        null
      ],
      "offsets": [
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420
      ]
    },
    {
      "name": "America/Detroit",
      "abbrs": [
        "LMT",
        "CST",
        "EST",
        "EWT",
        "EPT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST"
      ],
      "untils": [
        -2051202469000,
        -1724083200000,
        -880218000000,
        -769395600000,
        -765396000000,
        -684349200000,
        -671047200000,
        -80499600000,
        -68666400000,
        104914800000,
        120636000000,
        126687600000,
        152085600000,
        167814000000,
        183535200000,
        199263600000,
        215589600000,
        230713200000,
        247039200000,
        262767600000,
        278488800000,
        294217200000,
        309938400000,
        325666800000,
        341388000000,
        357116400000,
        372837600000,
        388566000000,
        404892000000,
        420015600000,
        436341600000,
        452070000000,
        467791200000,
        483519600000,
        499240800000,
        514969200000,
        530690400000,
        544604400000,
        562140000000,
        576054000000,
        594194400000,
        607503600000,
        625644000000,
        638953200000,
        657093600000,
        671007600000,
        688543200000,
        702457200000,
        719992800000,
        733906800000,
        752047200000,
        765356400000,
        783496800000,
        796806000000,
        814946400000,
        828860400000,
        846396000000,
        860310000000,
        877845600000,
        891759600000,
        909295200000,
        923209200000,
        941349600000,
        954658800000,
        972799200000,
        986108400000,
        1004248800000,
        1018162800000,
        1035698400000,
        1049612400000,
        1067148000000,
        1081062000000,
        1099202400000,
        1112511600000,
        1130652000000,
        1143961200000,
        1162101600000,
        1173596400000,
        1194156000000,
        1205046000000,
        1225605600000,
        1236495600000,
        1257055200000,
        1268550000000,
        1289109600000,
        1299999600000,
        1320559200000,
        1331449200000,
        1352008800000,
        1362898800000,
        1383458400000,
        1394348400000,
        1414908000000,
        1425798000000,
        1446357600000,
        1457852400000,
        1478412000000,
        1489302000000,
        1509861600000,
        1520751600000,
        1541311200000,
        1552201200000,
        1572760800000,
        1583650800000,
        1604210400000,
        1615705200000,
        1636264800000,
        1647154800000,
        1667714400000,
        1678604400000,
        1699164000000,
        1710054000000,
        1730613600000,
        1741503600000,
        1762063200000,
        1772953200000,
        1793512800000,
        1805007600000,
        1825567200000,
        1836457200000,
        1857016800000,
        1867906800000,
        1888466400000,
        1899356400000,
        1919916000000,
        1930806000000,
        1951365600000,
        1962860400000,
        1983420000000,
        1994310000000,
        2014869600000,
        2025759600000,
        2046319200000,
        2057209200000,
        2077768800000,
        2088658800000,
        2109218400000,
        2120108400000,
        2140668000000,
        null
      ],
      "offsets": [
        332.1833,
        360,
        300,
        240,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300
      ]
    },
    {
      "name": "America/Dominica",
      "abbrs": [
        "LMT",
        "AST"
      ],
      "untils": [
        -1825098836000,
        null
      ],
      "offsets": [
        246.0667,
        240
      ]
    },
    {
      "name": "America/Edmonton",
      "abbrs": [
        "LMT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MWT",
        "MPT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST"
      ],
      "untils": [
        -1998663968000,
        -1632063600000,
        -1615132800000,
        -1600614000000,
        -1596816000000,
        -1567954800000,
        -1551628800000,
        -1536505200000,
        -1523203200000,
        -1504450800000,
        -1491753600000,
        -1473001200000,
        -1459699200000,
        -880210800000,
        -769395600000,
        -765388800000,
        -715791600000,
        -702489600000,
        -84380400000,
        -68659200000,
        -21481200000,
        -5760000000,
        73472400000,
        89193600000,
        104922000000,
        120643200000,
        136371600000,
        152092800000,
        167821200000,
        183542400000,
        199270800000,
        215596800000,
        230720400000,
        247046400000,
        262774800000,
        278496000000,
        294224400000,
        309945600000,
        325674000000,
        341395200000,
        357123600000,
        372844800000,
        388573200000,
        404899200000,
        420022800000,
        436348800000,
        452077200000,
        467798400000,
        483526800000,
        499248000000,
        514976400000,
        530697600000,
        544611600000,
        562147200000,
        576061200000,
        594201600000,
        607510800000,
        625651200000,
        638960400000,
        657100800000,
        671014800000,
        688550400000,
        702464400000,
        720000000000,
        733914000000,
        752054400000,
        765363600000,
        783504000000,
        796813200000,
        814953600000,
        828867600000,
        846403200000,
        860317200000,
        877852800000,
        891766800000,
        909302400000,
        923216400000,
        941356800000,
        954666000000,
        972806400000,
        986115600000,
        1004256000000,
        1018170000000,
        1035705600000,
        1049619600000,
        1067155200000,
        1081069200000,
        1099209600000,
        1112518800000,
        1130659200000,
        1143968400000,
        1162108800000,
        1173603600000,
        1194163200000,
        1205053200000,
        1225612800000,
        1236502800000,
        1257062400000,
        1268557200000,
        1289116800000,
        1300006800000,
        1320566400000,
        1331456400000,
        1352016000000,
        1362906000000,
        1383465600000,
        1394355600000,
        1414915200000,
        1425805200000,
        1446364800000,
        1457859600000,
        1478419200000,
        1489309200000,
        1509868800000,
        1520758800000,
        1541318400000,
        1552208400000,
        1572768000000,
        1583658000000,
        1604217600000,
        1615712400000,
        1636272000000,
        1647162000000,
        1667721600000,
        1678611600000,
        1699171200000,
        1710061200000,
        1730620800000,
        1741510800000,
        1762070400000,
        1772960400000,
        1793520000000,
        1805014800000,
        1825574400000,
        1836464400000,
        1857024000000,
        1867914000000,
        1888473600000,
        1899363600000,
        1919923200000,
        1930813200000,
        1951372800000,
        1962867600000,
        1983427200000,
        1994317200000,
        2014876800000,
        2025766800000,
        2046326400000,
        2057216400000,
        2077776000000,
        2088666000000,
        2109225600000,
        2120115600000,
        2140675200000,
        null
      ],
      "offsets": [
        453.8667,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420
      ]
    },
    {
      "name": "America/Eirunepe",
      "abbrs": [
        "LMT",
        "ACT",
        "ACST",
        "ACT",
        "ACST",
        "ACT",
        "ACST",
        "ACT",
        "ACST",
        "ACT",
        "ACST",
        "ACT",
        "ACST",
        "ACT",
        "ACST",
        "ACT",
        "ACST",
        "ACT",
        "ACST",
        "ACT",
        "ACST",
        "ACT",
        "ACST",
        "ACT",
        "ACST",
        "ACT",
        "ACST",
        "ACT",
        "ACST",
        "ACT",
        "ACST",
        "ACT",
        "AMT",
        "ACT"
      ],
      "untils": [
        -1767208832000,
        -1206950400000,
        -1191355200000,
        -1175367600000,
        -1159819200000,
        -633812400000,
        -622062000000,
        -602276400000,
        -591825600000,
        -570740400000,
        -560203200000,
        -539118000000,
        -531345600000,
        -191358000000,
        -184190400000,
        -155156400000,
        -150062400000,
        -128890800000,
        -121118400000,
        -99946800000,
        -89582400000,
        -68410800000,
        -57960000000,
        499755600000,
        511243200000,
        530600400000,
        540273600000,
        562136400000,
        571204800000,
        750834000000,
        761716800000,
        1214283600000,
        1384056000000,
        null
      ],
      "offsets": [
        279.4667,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300
      ]
    },
    {
      "name": "America/El_Salvador",
      "abbrs": [
        "LMT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST"
      ],
      "untils": [
        -1546279392000,
        547020000000,
        559717200000,
        578469600000,
        591166800000,
        null
      ],
      "offsets": [
        356.8,
        360,
        300,
        360,
        300,
        360
      ]
    },
    {
      "name": "America/Ensenada",
      "abbrs": [
        "LMT",
        "MST",
        "PST",
        "MST",
        "PST",
        "PDT",
        "PST",
        "PWT",
        "PPT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST"
      ],
      "untils": [
        -1514736000000,
        -1451667600000,
        -1343062800000,
        -1234803600000,
        -1222963200000,
        -1207242000000,
        -873820800000,
        -769395600000,
        -761677200000,
        -686073600000,
        -661539600000,
        -495036000000,
        -481734000000,
        -463586400000,
        -450284400000,
        -431532000000,
        -418230000000,
        -400082400000,
        -386780400000,
        -368632800000,
        -355330800000,
        -337183200000,
        -323881200000,
        -305733600000,
        -292431600000,
        199274400000,
        215600400000,
        230724000000,
        247050000000,
        262778400000,
        278499600000,
        294228000000,
        309949200000,
        325677600000,
        341398800000,
        357127200000,
        372848400000,
        388576800000,
        404902800000,
        420026400000,
        436352400000,
        452080800000,
        467802000000,
        483530400000,
        499251600000,
        514980000000,
        530701200000,
        544615200000,
        562150800000,
        576064800000,
        594205200000,
        607514400000,
        625654800000,
        638964000000,
        657104400000,
        671018400000,
        688554000000,
        702468000000,
        720003600000,
        733917600000,
        752058000000,
        765367200000,
        783507600000,
        796816800000,
        814957200000,
        828871200000,
        846406800000,
        860320800000,
        877856400000,
        891770400000,
        909306000000,
        923220000000,
        941360400000,
        954669600000,
        972810000000,
        986119200000,
        1004259600000,
        1018173600000,
        1035709200000,
        1049623200000,
        1067158800000,
        1081072800000,
        1099213200000,
        1112522400000,
        1130662800000,
        1143972000000,
        1162112400000,
        1175421600000,
        1193562000000,
        1207476000000,
        1225011600000,
        1238925600000,
        1256461200000,
        1268560800000,
        1289120400000,
        1300010400000,
        1320570000000,
        1331460000000,
        1352019600000,
        1362909600000,
        1383469200000,
        1394359200000,
        1414918800000,
        1425808800000,
        1446368400000,
        1457863200000,
        1478422800000,
        1489312800000,
        1509872400000,
        1520762400000,
        1541322000000,
        1552212000000,
        1572771600000,
        1583661600000,
        1604221200000,
        1615716000000,
        1636275600000,
        1647165600000,
        1667725200000,
        1678615200000,
        1699174800000,
        1710064800000,
        1730624400000,
        1741514400000,
        1762074000000,
        1772964000000,
        1793523600000,
        1805018400000,
        1825578000000,
        1836468000000,
        1857027600000,
        1867917600000,
        1888477200000,
        1899367200000,
        1919926800000,
        1930816800000,
        1951376400000,
        1962871200000,
        1983430800000,
        1994320800000,
        2014880400000,
        2025770400000,
        2046330000000,
        2057220000000,
        2077779600000,
        2088669600000,
        2109229200000,
        2120119200000,
        2140678800000,
        null
      ],
      "offsets": [
        468.0667,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480
      ]
    },
    {
      "name": "America/Fort_Wayne",
      "abbrs": [
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CWT",
        "CPT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "EST",
        "CST",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST"
      ],
      "untils": [
        -1633276800000,
        -1615136400000,
        -1601827200000,
        -1583686800000,
        -900259200000,
        -891795600000,
        -880214400000,
        -769395600000,
        -765392400000,
        -747244800000,
        -733942800000,
        -715795200000,
        -702493200000,
        -684345600000,
        -671043600000,
        -652896000000,
        -639594000000,
        -620841600000,
        -608144400000,
        -589392000000,
        -576090000000,
        -557942400000,
        -544640400000,
        -526492800000,
        -513190800000,
        -495043200000,
        -481741200000,
        -463593600000,
        -386787600000,
        -368640000000,
        -21488400000,
        -5767200000,
        9961200000,
        25682400000,
        1143961200000,
        1162101600000,
        1173596400000,
        1194156000000,
        1205046000000,
        1225605600000,
        1236495600000,
        1257055200000,
        1268550000000,
        1289109600000,
        1299999600000,
        1320559200000,
        1331449200000,
        1352008800000,
        1362898800000,
        1383458400000,
        1394348400000,
        1414908000000,
        1425798000000,
        1446357600000,
        1457852400000,
        1478412000000,
        1489302000000,
        1509861600000,
        1520751600000,
        1541311200000,
        1552201200000,
        1572760800000,
        1583650800000,
        1604210400000,
        1615705200000,
        1636264800000,
        1647154800000,
        1667714400000,
        1678604400000,
        1699164000000,
        1710054000000,
        1730613600000,
        1741503600000,
        1762063200000,
        1772953200000,
        1793512800000,
        1805007600000,
        1825567200000,
        1836457200000,
        1857016800000,
        1867906800000,
        1888466400000,
        1899356400000,
        1919916000000,
        1930806000000,
        1951365600000,
        1962860400000,
        1983420000000,
        1994310000000,
        2014869600000,
        2025759600000,
        2046319200000,
        2057209200000,
        2077768800000,
        2088658800000,
        2109218400000,
        2120108400000,
        2140668000000,
        null
      ],
      "offsets": [
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300
      ]
    },
    {
      "name": "America/Fortaleza",
      "abbrs": [
        "LMT",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT"
      ],
      "untils": [
        -1767216360000,
        -1206957600000,
        -1191362400000,
        -1175374800000,
        -1159826400000,
        -633819600000,
        -622069200000,
        -602283600000,
        -591832800000,
        -570747600000,
        -560210400000,
        -539125200000,
        -531352800000,
        -191365200000,
        -184197600000,
        -155163600000,
        -150069600000,
        -128898000000,
        -121125600000,
        -99954000000,
        -89589600000,
        -68418000000,
        -57967200000,
        499748400000,
        511236000000,
        530593200000,
        540266400000,
        562129200000,
        571197600000,
        592974000000,
        602042400000,
        624423600000,
        634701600000,
        938919600000,
        951616800000,
        970974000000,
        972180000000,
        1003028400000,
        1013911200000,
        null
      ],
      "offsets": [
        154,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180
      ]
    },
    {
      "name": "America/Glace_Bay",
      "abbrs": [
        "LMT",
        "AST",
        "ADT",
        "AST",
        "AWT",
        "APT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST"
      ],
      "untils": [
        -2131646412000,
        -1632074400000,
        -1615143600000,
        -880221600000,
        -769395600000,
        -765399600000,
        -526500000000,
        -513198000000,
        73461600000,
        89182800000,
        104911200000,
        120632400000,
        136360800000,
        152082000000,
        167810400000,
        183531600000,
        199260000000,
        215586000000,
        230709600000,
        247035600000,
        262764000000,
        278485200000,
        294213600000,
        309934800000,
        325663200000,
        341384400000,
        357112800000,
        372834000000,
        388562400000,
        404888400000,
        420012000000,
        436338000000,
        452066400000,
        467787600000,
        483516000000,
        499237200000,
        514965600000,
        530686800000,
        544600800000,
        562136400000,
        576050400000,
        594190800000,
        607500000000,
        625640400000,
        638949600000,
        657090000000,
        671004000000,
        688539600000,
        702453600000,
        719989200000,
        733903200000,
        752043600000,
        765352800000,
        783493200000,
        796802400000,
        814942800000,
        828856800000,
        846392400000,
        860306400000,
        877842000000,
        891756000000,
        909291600000,
        923205600000,
        941346000000,
        954655200000,
        972795600000,
        986104800000,
        1004245200000,
        1018159200000,
        1035694800000,
        1049608800000,
        1067144400000,
        1081058400000,
        1099198800000,
        1112508000000,
        1130648400000,
        1143957600000,
        1162098000000,
        1173592800000,
        1194152400000,
        1205042400000,
        1225602000000,
        1236492000000,
        1257051600000,
        1268546400000,
        1289106000000,
        1299996000000,
        1320555600000,
        1331445600000,
        1352005200000,
        1362895200000,
        1383454800000,
        1394344800000,
        1414904400000,
        1425794400000,
        1446354000000,
        1457848800000,
        1478408400000,
        1489298400000,
        1509858000000,
        1520748000000,
        1541307600000,
        1552197600000,
        1572757200000,
        1583647200000,
        1604206800000,
        1615701600000,
        1636261200000,
        1647151200000,
        1667710800000,
        1678600800000,
        1699160400000,
        1710050400000,
        1730610000000,
        1741500000000,
        1762059600000,
        1772949600000,
        1793509200000,
        1805004000000,
        1825563600000,
        1836453600000,
        1857013200000,
        1867903200000,
        1888462800000,
        1899352800000,
        1919912400000,
        1930802400000,
        1951362000000,
        1962856800000,
        1983416400000,
        1994306400000,
        2014866000000,
        2025756000000,
        2046315600000,
        2057205600000,
        2077765200000,
        2088655200000,
        2109214800000,
        2120104800000,
        2140664400000,
        null
      ],
      "offsets": [
        239.8,
        240,
        180,
        240,
        180,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240
      ]
    },
    {
      "name": "America/Godthab",
      "abbrs": [
        "LMT",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT",
        "WGST",
        "WGT"
      ],
      "untils": [
        -1686083584000,
        323845200000,
        338950800000,
        354675600000,
        370400400000,
        386125200000,
        401850000000,
        417574800000,
        433299600000,
        449024400000,
        465354000000,
        481078800000,
        496803600000,
        512528400000,
        528253200000,
        543978000000,
        559702800000,
        575427600000,
        591152400000,
        606877200000,
        622602000000,
        638326800000,
        654656400000,
        670381200000,
        686106000000,
        701830800000,
        717555600000,
        733280400000,
        749005200000,
        764730000000,
        780454800000,
        796179600000,
        811904400000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        206.9333,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180
      ]
    },
    {
      "name": "America/Goose_Bay",
      "abbrs": [
        "NST",
        "NDT",
        "NST",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NWT",
        "NPT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADDT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST"
      ],
      "untils": [
        -1632076148000,
        -1615145348000,
        -1096921748000,
        -1061670600000,
        -1048973400000,
        -1030221000000,
        -1017523800000,
        -998771400000,
        -986074200000,
        -966717000000,
        -954624600000,
        -935267400000,
        -922570200000,
        -903817800000,
        -891120600000,
        -872368200000,
        -769395600000,
        -765401400000,
        -746044200000,
        -733347000000,
        -714594600000,
        -701897400000,
        -683145000000,
        -670447800000,
        -651695400000,
        -638998200000,
        -619641000000,
        -606943800000,
        -589401000000,
        -576099000000,
        -557951400000,
        -544649400000,
        -526501800000,
        -513199800000,
        -495052200000,
        -481750200000,
        -463602600000,
        -450300600000,
        -431548200000,
        -418246200000,
        -400098600000,
        -386796600000,
        -368649000000,
        -355347000000,
        -337199400000,
        -323897400000,
        -305749800000,
        -289423800000,
        -273695400000,
        -257974200000,
        -242245800000,
        -226524600000,
        -210796200000,
        -195075000000,
        -179346600000,
        -163625400000,
        -147897000000,
        -131571000000,
        -119903400000,
        -116445600000,
        -100119600000,
        -84391200000,
        -68670000000,
        -52941600000,
        -37220400000,
        -21492000000,
        -5770800000,
        9957600000,
        25678800000,
        41407200000,
        57733200000,
        73461600000,
        89182800000,
        104911200000,
        120632400000,
        136360800000,
        152082000000,
        167810400000,
        183531600000,
        199260000000,
        215586000000,
        230709600000,
        247035600000,
        262764000000,
        278485200000,
        294213600000,
        309934800000,
        325663200000,
        341384400000,
        357112800000,
        372834000000,
        388562400000,
        404888400000,
        420012000000,
        436338000000,
        452066400000,
        467787600000,
        483516000000,
        499237200000,
        514965600000,
        530686800000,
        544593660000,
        562129260000,
        576043260000,
        594180060000,
        607492860000,
        625633260000,
        638942460000,
        657082860000,
        670996860000,
        688532460000,
        702446460000,
        719982060000,
        733896060000,
        752036460000,
        765345660000,
        783486060000,
        796795260000,
        814935660000,
        828849660000,
        846385260000,
        860299260000,
        877834860000,
        891748860000,
        909284460000,
        923198460000,
        941338860000,
        954648060000,
        972788460000,
        986097660000,
        1004238060000,
        1018152060000,
        1035687660000,
        1049601660000,
        1067137260000,
        1081051260000,
        1099191660000,
        1112500860000,
        1130641260000,
        1143950460000,
        1162090860000,
        1173585660000,
        1194145260000,
        1205035260000,
        1225594860000,
        1236484860000,
        1257044460000,
        1268539260000,
        1289098860000,
        1299988860000,
        1320555600000,
        1331445600000,
        1352005200000,
        1362895200000,
        1383454800000,
        1394344800000,
        1414904400000,
        1425794400000,
        1446354000000,
        1457848800000,
        1478408400000,
        1489298400000,
        1509858000000,
        1520748000000,
        1541307600000,
        1552197600000,
        1572757200000,
        1583647200000,
        1604206800000,
        1615701600000,
        1636261200000,
        1647151200000,
        1667710800000,
        1678600800000,
        1699160400000,
        1710050400000,
        1730610000000,
        1741500000000,
        1762059600000,
        1772949600000,
        1793509200000,
        1805004000000,
        1825563600000,
        1836453600000,
        1857013200000,
        1867903200000,
        1888462800000,
        1899352800000,
        1919912400000,
        1930802400000,
        1951362000000,
        1962856800000,
        1983416400000,
        1994306400000,
        2014866000000,
        2025756000000,
        2046315600000,
        2057205600000,
        2077765200000,
        2088655200000,
        2109214800000,
        2120104800000,
        2140664400000,
        null
      ],
      "offsets": [
        210.8667,
        150.8667,
        210.8667,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        120,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240
      ]
    },
    {
      "name": "America/Grand_Turk",
      "abbrs": [
        "KMT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "AST"
      ],
      "untils": [
        -1827687169000,
        294217200000,
        309938400000,
        325666800000,
        341388000000,
        357116400000,
        372837600000,
        388566000000,
        404892000000,
        420015600000,
        436341600000,
        452070000000,
        467791200000,
        483519600000,
        499240800000,
        514969200000,
        530690400000,
        544604400000,
        562140000000,
        576054000000,
        594194400000,
        607503600000,
        625644000000,
        638953200000,
        657093600000,
        671007600000,
        688543200000,
        702457200000,
        719992800000,
        733906800000,
        752047200000,
        765356400000,
        783496800000,
        796806000000,
        814946400000,
        828860400000,
        846396000000,
        860310000000,
        877845600000,
        891759600000,
        909295200000,
        923209200000,
        941349600000,
        954658800000,
        972799200000,
        986108400000,
        1004248800000,
        1018162800000,
        1035698400000,
        1049612400000,
        1067148000000,
        1081062000000,
        1099202400000,
        1112511600000,
        1130652000000,
        1143961200000,
        1162101600000,
        1173596400000,
        1194156000000,
        1205046000000,
        1225605600000,
        1236495600000,
        1257055200000,
        1268550000000,
        1289109600000,
        1299999600000,
        1320559200000,
        1331449200000,
        1352008800000,
        1362898800000,
        1383458400000,
        1394348400000,
        1414908000000,
        1425798000000,
        1446357600000,
        null
      ],
      "offsets": [
        307.1833,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        240
      ]
    },
    {
      "name": "America/Grenada",
      "abbrs": [
        "LMT",
        "AST"
      ],
      "untils": [
        -1825098836000,
        null
      ],
      "offsets": [
        246.0667,
        240
      ]
    },
    {
      "name": "America/Guadeloupe",
      "abbrs": [
        "LMT",
        "AST"
      ],
      "untils": [
        -1825098836000,
        null
      ],
      "offsets": [
        246.0667,
        240
      ]
    },
    {
      "name": "America/Guatemala",
      "abbrs": [
        "LMT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST"
      ],
      "untils": [
        -1617040676000,
        123055200000,
        130914000000,
        422344800000,
        433054800000,
        669708000000,
        684219600000,
        1146376800000,
        1159678800000,
        null
      ],
      "offsets": [
        362.0667,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360
      ]
    },
    {
      "name": "America/Guayaquil",
      "abbrs": [
        "QMT",
        "ECT"
      ],
      "untils": [
        -1230749160000,
        null
      ],
      "offsets": [
        314,
        300
      ]
    },
    {
      "name": "America/Guyana",
      "abbrs": [
        "LMT",
        "GBGT",
        "GYT",
        "GYT",
        "GYT"
      ],
      "untils": [
        -1730578040000,
        -113688900000,
        176010300000,
        662698800000,
        null
      ],
      "offsets": [
        232.6667,
        225,
        225,
        180,
        240
      ]
    },
    {
      "name": "America/Halifax",
      "abbrs": [
        "LMT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "AWT",
        "APT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST"
      ],
      "untils": [
        -2131645536000,
        -1696276800000,
        -1680469200000,
        -1632074400000,
        -1615143600000,
        -1566763200000,
        -1557090000000,
        -1535486400000,
        -1524949200000,
        -1504468800000,
        -1493413200000,
        -1472414400000,
        -1461963600000,
        -1440964800000,
        -1429390800000,
        -1409515200000,
        -1396731600000,
        -1376856000000,
        -1366491600000,
        -1346616000000,
        -1333832400000,
        -1313956800000,
        -1303678800000,
        -1282507200000,
        -1272661200000,
        -1251057600000,
        -1240088400000,
        -1219608000000,
        -1207429200000,
        -1188763200000,
        -1175979600000,
        -1157313600000,
        -1143925200000,
        -1124049600000,
        -1113771600000,
        -1091390400000,
        -1081026000000,
        -1059854400000,
        -1050786000000,
        -1030910400000,
        -1018126800000,
        -999460800000,
        -986677200000,
        -965592000000,
        -955227600000,
        -935956800000,
        -923173200000,
        -904507200000,
        -891723600000,
        -880221600000,
        -769395600000,
        -765399600000,
        -747252000000,
        -733950000000,
        -715802400000,
        -702500400000,
        -684352800000,
        -671050800000,
        -652903200000,
        -639601200000,
        -589399200000,
        -576097200000,
        -557949600000,
        -544647600000,
        -526500000000,
        -513198000000,
        -495050400000,
        -481748400000,
        -431546400000,
        -418244400000,
        -400096800000,
        -386794800000,
        -368647200000,
        -355345200000,
        -337197600000,
        -323895600000,
        -242244000000,
        -226522800000,
        -210794400000,
        -195073200000,
        -179344800000,
        -163623600000,
        -147895200000,
        -131569200000,
        -116445600000,
        -100119600000,
        -84391200000,
        -68670000000,
        -52941600000,
        -37220400000,
        -21492000000,
        -5770800000,
        9957600000,
        25678800000,
        41407200000,
        57733200000,
        73461600000,
        89182800000,
        104911200000,
        120632400000,
        136360800000,
        152082000000,
        167810400000,
        183531600000,
        199260000000,
        215586000000,
        230709600000,
        247035600000,
        262764000000,
        278485200000,
        294213600000,
        309934800000,
        325663200000,
        341384400000,
        357112800000,
        372834000000,
        388562400000,
        404888400000,
        420012000000,
        436338000000,
        452066400000,
        467787600000,
        483516000000,
        499237200000,
        514965600000,
        530686800000,
        544600800000,
        562136400000,
        576050400000,
        594190800000,
        607500000000,
        625640400000,
        638949600000,
        657090000000,
        671004000000,
        688539600000,
        702453600000,
        719989200000,
        733903200000,
        752043600000,
        765352800000,
        783493200000,
        796802400000,
        814942800000,
        828856800000,
        846392400000,
        860306400000,
        877842000000,
        891756000000,
        909291600000,
        923205600000,
        941346000000,
        954655200000,
        972795600000,
        986104800000,
        1004245200000,
        1018159200000,
        1035694800000,
        1049608800000,
        1067144400000,
        1081058400000,
        1099198800000,
        1112508000000,
        1130648400000,
        1143957600000,
        1162098000000,
        1173592800000,
        1194152400000,
        1205042400000,
        1225602000000,
        1236492000000,
        1257051600000,
        1268546400000,
        1289106000000,
        1299996000000,
        1320555600000,
        1331445600000,
        1352005200000,
        1362895200000,
        1383454800000,
        1394344800000,
        1414904400000,
        1425794400000,
        1446354000000,
        1457848800000,
        1478408400000,
        1489298400000,
        1509858000000,
        1520748000000,
        1541307600000,
        1552197600000,
        1572757200000,
        1583647200000,
        1604206800000,
        1615701600000,
        1636261200000,
        1647151200000,
        1667710800000,
        1678600800000,
        1699160400000,
        1710050400000,
        1730610000000,
        1741500000000,
        1762059600000,
        1772949600000,
        1793509200000,
        1805004000000,
        1825563600000,
        1836453600000,
        1857013200000,
        1867903200000,
        1888462800000,
        1899352800000,
        1919912400000,
        1930802400000,
        1951362000000,
        1962856800000,
        1983416400000,
        1994306400000,
        2014866000000,
        2025756000000,
        2046315600000,
        2057205600000,
        2077765200000,
        2088655200000,
        2109214800000,
        2120104800000,
        2140664400000,
        null
      ],
      "offsets": [
        254.4,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240
      ]
    },
    {
      "name": "America/Havana",
      "abbrs": [
        "HMT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST"
      ],
      "untils": [
        -1402813824000,
        -1311534000000,
        -1300996800000,
        -933534000000,
        -925675200000,
        -902084400000,
        -893620800000,
        -870030000000,
        -862171200000,
        -775681200000,
        -767822400000,
        -744231600000,
        -736372800000,
        -144702000000,
        -134251200000,
        -113425200000,
        -102542400000,
        -86295600000,
        -72907200000,
        -54154800000,
        -41457600000,
        -21495600000,
        -5774400000,
        9954000000,
        25675200000,
        41403600000,
        57729600000,
        73458000000,
        87364800000,
        104907600000,
        118900800000,
        136357200000,
        150436800000,
        167806800000,
        183528000000,
        199256400000,
        215582400000,
        230706000000,
        247032000000,
        263365200000,
        276667200000,
        290581200000,
        308721600000,
        322030800000,
        340171200000,
        358318800000,
        371620800000,
        389768400000,
        403070400000,
        421218000000,
        434520000000,
        452667600000,
        466574400000,
        484117200000,
        498024000000,
        511333200000,
        529473600000,
        542782800000,
        560923200000,
        574837200000,
        592372800000,
        606286800000,
        623822400000,
        638946000000,
        655876800000,
        671000400000,
        687330000000,
        702450000000,
        718779600000,
        733899600000,
        750229200000,
        765349200000,
        781678800000,
        796798800000,
        813128400000,
        828853200000,
        844578000000,
        860302800000,
        876632400000,
        891147600000,
        909291600000,
        922597200000,
        941346000000,
        954651600000,
        972795600000,
        986101200000,
        1004245200000,
        1018155600000,
        1035694800000,
        1049605200000,
        1067144400000,
        1080450000000,
        1162098000000,
        1173589200000,
        1193547600000,
        1205643600000,
        1224997200000,
        1236488400000,
        1256446800000,
        1268542800000,
        1288501200000,
        1300597200000,
        1321160400000,
        1333256400000,
        1352005200000,
        1362891600000,
        1383454800000,
        1394341200000,
        1414904400000,
        1425790800000,
        1446354000000,
        1457845200000,
        1478408400000,
        1489294800000,
        1509858000000,
        1520744400000,
        1541307600000,
        1552194000000,
        1572757200000,
        1583643600000,
        1604206800000,
        1615698000000,
        1636261200000,
        1647147600000,
        1667710800000,
        1678597200000,
        1699160400000,
        1710046800000,
        1730610000000,
        1741496400000,
        1762059600000,
        1772946000000,
        1793509200000,
        1805000400000,
        1825563600000,
        1836450000000,
        1857013200000,
        1867899600000,
        1888462800000,
        1899349200000,
        1919912400000,
        1930798800000,
        1951362000000,
        1962853200000,
        1983416400000,
        1994302800000,
        2014866000000,
        2025752400000,
        2046315600000,
        2057202000000,
        2077765200000,
        2088651600000,
        2109214800000,
        2120101200000,
        2140664400000,
        null
      ],
      "offsets": [
        329.6,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300
      ]
    },
    {
      "name": "America/Hermosillo",
      "abbrs": [
        "LMT",
        "MST",
        "CST",
        "MST",
        "CST",
        "MST",
        "CST",
        "MST",
        "PST",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST"
      ],
      "untils": [
        -1514739600000,
        -1343066400000,
        -1234807200000,
        -1220292000000,
        -1207159200000,
        -1191344400000,
        -873828000000,
        -661539600000,
        28800000,
        828867600000,
        846403200000,
        860317200000,
        877852800000,
        891766800000,
        909302400000,
        null
      ],
      "offsets": [
        443.8667,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        480,
        420,
        360,
        420,
        360,
        420,
        360,
        420
      ]
    },
    {
      "name": "America/Indiana/Indianapolis",
      "abbrs": [
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CWT",
        "CPT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "EST",
        "CST",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST"
      ],
      "untils": [
        -1633276800000,
        -1615136400000,
        -1601827200000,
        -1583686800000,
        -900259200000,
        -891795600000,
        -880214400000,
        -769395600000,
        -765392400000,
        -747244800000,
        -733942800000,
        -715795200000,
        -702493200000,
        -684345600000,
        -671043600000,
        -652896000000,
        -639594000000,
        -620841600000,
        -608144400000,
        -589392000000,
        -576090000000,
        -557942400000,
        -544640400000,
        -526492800000,
        -513190800000,
        -495043200000,
        -481741200000,
        -463593600000,
        -386787600000,
        -368640000000,
        -21488400000,
        -5767200000,
        9961200000,
        25682400000,
        1143961200000,
        1162101600000,
        1173596400000,
        1194156000000,
        1205046000000,
        1225605600000,
        1236495600000,
        1257055200000,
        1268550000000,
        1289109600000,
        1299999600000,
        1320559200000,
        1331449200000,
        1352008800000,
        1362898800000,
        1383458400000,
        1394348400000,
        1414908000000,
        1425798000000,
        1446357600000,
        1457852400000,
        1478412000000,
        1489302000000,
        1509861600000,
        1520751600000,
        1541311200000,
        1552201200000,
        1572760800000,
        1583650800000,
        1604210400000,
        1615705200000,
        1636264800000,
        1647154800000,
        1667714400000,
        1678604400000,
        1699164000000,
        1710054000000,
        1730613600000,
        1741503600000,
        1762063200000,
        1772953200000,
        1793512800000,
        1805007600000,
        1825567200000,
        1836457200000,
        1857016800000,
        1867906800000,
        1888466400000,
        1899356400000,
        1919916000000,
        1930806000000,
        1951365600000,
        1962860400000,
        1983420000000,
        1994310000000,
        2014869600000,
        2025759600000,
        2046319200000,
        2057209200000,
        2077768800000,
        2088658800000,
        2109218400000,
        2120108400000,
        2140668000000,
        null
      ],
      "offsets": [
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300
      ]
    },
    {
      "name": "America/Indiana/Knox",
      "abbrs": [
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CWT",
        "CPT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "EST",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "EST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST"
      ],
      "untils": [
        -1633276800000,
        -1615136400000,
        -1601827200000,
        -1583686800000,
        -880214400000,
        -769395600000,
        -765392400000,
        -715795200000,
        -702493200000,
        -684345600000,
        -671043600000,
        -652896000000,
        -639594000000,
        -620841600000,
        -608144400000,
        -589392000000,
        -576090000000,
        -557942400000,
        -544640400000,
        -526492800000,
        -513190800000,
        -495043200000,
        -481741200000,
        -463593600000,
        -447267600000,
        -431539200000,
        -415818000000,
        -400089600000,
        -386787600000,
        -368640000000,
        -355338000000,
        -337190400000,
        -321469200000,
        -305740800000,
        -289414800000,
        -273686400000,
        -257965200000,
        -242236800000,
        -195066000000,
        -84384000000,
        -68662800000,
        -52934400000,
        -37213200000,
        -21484800000,
        -5763600000,
        9964800000,
        25686000000,
        41414400000,
        57740400000,
        73468800000,
        89190000000,
        104918400000,
        120639600000,
        126691200000,
        152089200000,
        162374400000,
        183538800000,
        199267200000,
        215593200000,
        230716800000,
        247042800000,
        262771200000,
        278492400000,
        294220800000,
        309942000000,
        325670400000,
        341391600000,
        357120000000,
        372841200000,
        388569600000,
        404895600000,
        420019200000,
        436345200000,
        452073600000,
        467794800000,
        483523200000,
        499244400000,
        514972800000,
        530694000000,
        544608000000,
        562143600000,
        576057600000,
        594198000000,
        607507200000,
        625647600000,
        638956800000,
        657097200000,
        671011200000,
        688546800000,
        1143961200000,
        1162105200000,
        1173600000000,
        1194159600000,
        1205049600000,
        1225609200000,
        1236499200000,
        1257058800000,
        1268553600000,
        1289113200000,
        1300003200000,
        1320562800000,
        1331452800000,
        1352012400000,
        1362902400000,
        1383462000000,
        1394352000000,
        1414911600000,
        1425801600000,
        1446361200000,
        1457856000000,
        1478415600000,
        1489305600000,
        1509865200000,
        1520755200000,
        1541314800000,
        1552204800000,
        1572764400000,
        1583654400000,
        1604214000000,
        1615708800000,
        1636268400000,
        1647158400000,
        1667718000000,
        1678608000000,
        1699167600000,
        1710057600000,
        1730617200000,
        1741507200000,
        1762066800000,
        1772956800000,
        1793516400000,
        1805011200000,
        1825570800000,
        1836460800000,
        1857020400000,
        1867910400000,
        1888470000000,
        1899360000000,
        1919919600000,
        1930809600000,
        1951369200000,
        1962864000000,
        1983423600000,
        1994313600000,
        2014873200000,
        2025763200000,
        2046322800000,
        2057212800000,
        2077772400000,
        2088662400000,
        2109222000000,
        2120112000000,
        2140671600000,
        null
      ],
      "offsets": [
        360,
        300,
        360,
        300,
        360,
        300,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        300,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360
      ]
    },
    {
      "name": "America/Indiana/Marengo",
      "abbrs": [
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CWT",
        "CPT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "CDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST"
      ],
      "untils": [
        -1633276800000,
        -1615136400000,
        -1601827200000,
        -1583686800000,
        -880214400000,
        -769395600000,
        -765392400000,
        -589392000000,
        -576090000000,
        -495043200000,
        -481741200000,
        -463593600000,
        -450291600000,
        -431539200000,
        -418237200000,
        -400089600000,
        -386787600000,
        -368640000000,
        -355338000000,
        -337190400000,
        -323888400000,
        -305740800000,
        -292438800000,
        -273686400000,
        -21488400000,
        -5767200000,
        9961200000,
        25682400000,
        41410800000,
        57736800000,
        73465200000,
        89186400000,
        104914800000,
        120636000000,
        126687600000,
        152089200000,
        162370800000,
        183535200000,
        1143961200000,
        1162101600000,
        1173596400000,
        1194156000000,
        1205046000000,
        1225605600000,
        1236495600000,
        1257055200000,
        1268550000000,
        1289109600000,
        1299999600000,
        1320559200000,
        1331449200000,
        1352008800000,
        1362898800000,
        1383458400000,
        1394348400000,
        1414908000000,
        1425798000000,
        1446357600000,
        1457852400000,
        1478412000000,
        1489302000000,
        1509861600000,
        1520751600000,
        1541311200000,
        1552201200000,
        1572760800000,
        1583650800000,
        1604210400000,
        1615705200000,
        1636264800000,
        1647154800000,
        1667714400000,
        1678604400000,
        1699164000000,
        1710054000000,
        1730613600000,
        1741503600000,
        1762063200000,
        1772953200000,
        1793512800000,
        1805007600000,
        1825567200000,
        1836457200000,
        1857016800000,
        1867906800000,
        1888466400000,
        1899356400000,
        1919916000000,
        1930806000000,
        1951365600000,
        1962860400000,
        1983420000000,
        1994310000000,
        2014869600000,
        2025759600000,
        2046319200000,
        2057209200000,
        2077768800000,
        2088658800000,
        2109218400000,
        2120108400000,
        2140668000000,
        null
      ],
      "offsets": [
        360,
        300,
        360,
        300,
        360,
        300,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        300,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300
      ]
    },
    {
      "name": "America/Indiana/Petersburg",
      "abbrs": [
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CWT",
        "CPT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "EST",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "EST",
        "CDT",
        "CST",
        "CDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST"
      ],
      "untils": [
        -1633276800000,
        -1615136400000,
        -1601827200000,
        -1583686800000,
        -880214400000,
        -769395600000,
        -765392400000,
        -462996000000,
        -450291600000,
        -431539200000,
        -418237200000,
        -400089600000,
        -386787600000,
        -368640000000,
        -355338000000,
        -337190400000,
        -323888400000,
        -305740800000,
        -292438800000,
        -273686400000,
        -257965200000,
        -242236800000,
        -226515600000,
        -210787200000,
        -195066000000,
        -179337600000,
        -163616400000,
        -147888000000,
        -100112400000,
        -84384000000,
        -68662800000,
        -52934400000,
        -37213200000,
        -21484800000,
        -5763600000,
        9964800000,
        25686000000,
        41414400000,
        57740400000,
        73468800000,
        89190000000,
        104918400000,
        120639600000,
        126691200000,
        152089200000,
        162374400000,
        183538800000,
        199267200000,
        215593200000,
        230716800000,
        247042800000,
        1143961200000,
        1162105200000,
        1173600000000,
        1194159600000,
        1205046000000,
        1225605600000,
        1236495600000,
        1257055200000,
        1268550000000,
        1289109600000,
        1299999600000,
        1320559200000,
        1331449200000,
        1352008800000,
        1362898800000,
        1383458400000,
        1394348400000,
        1414908000000,
        1425798000000,
        1446357600000,
        1457852400000,
        1478412000000,
        1489302000000,
        1509861600000,
        1520751600000,
        1541311200000,
        1552201200000,
        1572760800000,
        1583650800000,
        1604210400000,
        1615705200000,
        1636264800000,
        1647154800000,
        1667714400000,
        1678604400000,
        1699164000000,
        1710054000000,
        1730613600000,
        1741503600000,
        1762063200000,
        1772953200000,
        1793512800000,
        1805007600000,
        1825567200000,
        1836457200000,
        1857016800000,
        1867906800000,
        1888466400000,
        1899356400000,
        1919916000000,
        1930806000000,
        1951365600000,
        1962860400000,
        1983420000000,
        1994310000000,
        2014869600000,
        2025759600000,
        2046319200000,
        2057209200000,
        2077768800000,
        2088658800000,
        2109218400000,
        2120108400000,
        2140668000000,
        null
      ],
      "offsets": [
        360,
        300,
        360,
        300,
        360,
        300,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        300,
        300,
        360,
        300,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300
      ]
    },
    {
      "name": "America/Indiana/Tell_City",
      "abbrs": [
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CWT",
        "CPT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST"
      ],
      "untils": [
        -1633276800000,
        -1615136400000,
        -1601827200000,
        -1583686800000,
        -880214400000,
        -769395600000,
        -765392400000,
        -747244800000,
        -733942800000,
        -526492800000,
        -513190800000,
        -495043200000,
        -481741200000,
        -462996000000,
        -450291600000,
        -431539200000,
        -418237200000,
        -400089600000,
        -386787600000,
        -368640000000,
        -355338000000,
        -337190400000,
        -323888400000,
        -305740800000,
        -289414800000,
        -273686400000,
        -260989200000,
        -242236800000,
        -226515600000,
        -210787200000,
        -195066000000,
        -179337600000,
        -21488400000,
        -5767200000,
        9961200000,
        25682400000,
        1143961200000,
        1162105200000,
        1173600000000,
        1194159600000,
        1205049600000,
        1225609200000,
        1236499200000,
        1257058800000,
        1268553600000,
        1289113200000,
        1300003200000,
        1320562800000,
        1331452800000,
        1352012400000,
        1362902400000,
        1383462000000,
        1394352000000,
        1414911600000,
        1425801600000,
        1446361200000,
        1457856000000,
        1478415600000,
        1489305600000,
        1509865200000,
        1520755200000,
        1541314800000,
        1552204800000,
        1572764400000,
        1583654400000,
        1604214000000,
        1615708800000,
        1636268400000,
        1647158400000,
        1667718000000,
        1678608000000,
        1699167600000,
        1710057600000,
        1730617200000,
        1741507200000,
        1762066800000,
        1772956800000,
        1793516400000,
        1805011200000,
        1825570800000,
        1836460800000,
        1857020400000,
        1867910400000,
        1888470000000,
        1899360000000,
        1919919600000,
        1930809600000,
        1951369200000,
        1962864000000,
        1983423600000,
        1994313600000,
        2014873200000,
        2025763200000,
        2046322800000,
        2057212800000,
        2077772400000,
        2088662400000,
        2109222000000,
        2120112000000,
        2140671600000,
        null
      ],
      "offsets": [
        360,
        300,
        360,
        300,
        360,
        300,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        240,
        300,
        240,
        300,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360
      ]
    },
    {
      "name": "America/Indiana/Vevay",
      "abbrs": [
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CWT",
        "CPT",
        "CST",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST"
      ],
      "untils": [
        -1633276800000,
        -1615136400000,
        -1601827200000,
        -1583686800000,
        -880214400000,
        -769395600000,
        -765392400000,
        -495043200000,
        -21488400000,
        -5767200000,
        9961200000,
        25682400000,
        41410800000,
        57736800000,
        73465200000,
        89186400000,
        1143961200000,
        1162101600000,
        1173596400000,
        1194156000000,
        1205046000000,
        1225605600000,
        1236495600000,
        1257055200000,
        1268550000000,
        1289109600000,
        1299999600000,
        1320559200000,
        1331449200000,
        1352008800000,
        1362898800000,
        1383458400000,
        1394348400000,
        1414908000000,
        1425798000000,
        1446357600000,
        1457852400000,
        1478412000000,
        1489302000000,
        1509861600000,
        1520751600000,
        1541311200000,
        1552201200000,
        1572760800000,
        1583650800000,
        1604210400000,
        1615705200000,
        1636264800000,
        1647154800000,
        1667714400000,
        1678604400000,
        1699164000000,
        1710054000000,
        1730613600000,
        1741503600000,
        1762063200000,
        1772953200000,
        1793512800000,
        1805007600000,
        1825567200000,
        1836457200000,
        1857016800000,
        1867906800000,
        1888466400000,
        1899356400000,
        1919916000000,
        1930806000000,
        1951365600000,
        1962860400000,
        1983420000000,
        1994310000000,
        2014869600000,
        2025759600000,
        2046319200000,
        2057209200000,
        2077768800000,
        2088658800000,
        2109218400000,
        2120108400000,
        2140668000000,
        null
      ],
      "offsets": [
        360,
        300,
        360,
        300,
        360,
        300,
        300,
        360,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300
      ]
    },
    {
      "name": "America/Indiana/Vincennes",
      "abbrs": [
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CWT",
        "CPT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "CDT",
        "CST",
        "CDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST"
      ],
      "untils": [
        -1633276800000,
        -1615136400000,
        -1601827200000,
        -1583686800000,
        -880214400000,
        -769395600000,
        -765392400000,
        -747244800000,
        -733942800000,
        -526492800000,
        -513190800000,
        -495043200000,
        -481741200000,
        -462996000000,
        -450291600000,
        -431539200000,
        -418237200000,
        -400089600000,
        -386787600000,
        -368640000000,
        -355338000000,
        -337190400000,
        -323888400000,
        -305740800000,
        -289414800000,
        -273686400000,
        -260989200000,
        -242236800000,
        -226515600000,
        -210787200000,
        -195066000000,
        -179337600000,
        -21488400000,
        -5767200000,
        9961200000,
        25682400000,
        1143961200000,
        1162105200000,
        1173600000000,
        1194159600000,
        1205046000000,
        1225605600000,
        1236495600000,
        1257055200000,
        1268550000000,
        1289109600000,
        1299999600000,
        1320559200000,
        1331449200000,
        1352008800000,
        1362898800000,
        1383458400000,
        1394348400000,
        1414908000000,
        1425798000000,
        1446357600000,
        1457852400000,
        1478412000000,
        1489302000000,
        1509861600000,
        1520751600000,
        1541311200000,
        1552201200000,
        1572760800000,
        1583650800000,
        1604210400000,
        1615705200000,
        1636264800000,
        1647154800000,
        1667714400000,
        1678604400000,
        1699164000000,
        1710054000000,
        1730613600000,
        1741503600000,
        1762063200000,
        1772953200000,
        1793512800000,
        1805007600000,
        1825567200000,
        1836457200000,
        1857016800000,
        1867906800000,
        1888466400000,
        1899356400000,
        1919916000000,
        1930806000000,
        1951365600000,
        1962860400000,
        1983420000000,
        1994310000000,
        2014869600000,
        2025759600000,
        2046319200000,
        2057209200000,
        2077768800000,
        2088658800000,
        2109218400000,
        2120108400000,
        2140668000000,
        null
      ],
      "offsets": [
        360,
        300,
        360,
        300,
        360,
        300,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        240,
        300,
        240,
        300,
        300,
        360,
        300,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300
      ]
    },
    {
      "name": "America/Indiana/Winamac",
      "abbrs": [
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CWT",
        "CPT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "CDT",
        "CST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST"
      ],
      "untils": [
        -1633276800000,
        -1615136400000,
        -1601827200000,
        -1583686800000,
        -880214400000,
        -769395600000,
        -765392400000,
        -747244800000,
        -733942800000,
        -715795200000,
        -702493200000,
        -684345600000,
        -671043600000,
        -652896000000,
        -639594000000,
        -620841600000,
        -608144400000,
        -589392000000,
        -576090000000,
        -557942400000,
        -544640400000,
        -526492800000,
        -513190800000,
        -495043200000,
        -481741200000,
        -463593600000,
        -447267600000,
        -431539200000,
        -415818000000,
        -400089600000,
        -386787600000,
        -368640000000,
        -355338000000,
        -337190400000,
        -323888400000,
        -305740800000,
        -292438800000,
        -273686400000,
        -21488400000,
        -5767200000,
        9961200000,
        25682400000,
        1143961200000,
        1162105200000,
        1173600000000,
        1194156000000,
        1205046000000,
        1225605600000,
        1236495600000,
        1257055200000,
        1268550000000,
        1289109600000,
        1299999600000,
        1320559200000,
        1331449200000,
        1352008800000,
        1362898800000,
        1383458400000,
        1394348400000,
        1414908000000,
        1425798000000,
        1446357600000,
        1457852400000,
        1478412000000,
        1489302000000,
        1509861600000,
        1520751600000,
        1541311200000,
        1552201200000,
        1572760800000,
        1583650800000,
        1604210400000,
        1615705200000,
        1636264800000,
        1647154800000,
        1667714400000,
        1678604400000,
        1699164000000,
        1710054000000,
        1730613600000,
        1741503600000,
        1762063200000,
        1772953200000,
        1793512800000,
        1805007600000,
        1825567200000,
        1836457200000,
        1857016800000,
        1867906800000,
        1888466400000,
        1899356400000,
        1919916000000,
        1930806000000,
        1951365600000,
        1962860400000,
        1983420000000,
        1994310000000,
        2014869600000,
        2025759600000,
        2046319200000,
        2057209200000,
        2077768800000,
        2088658800000,
        2109218400000,
        2120108400000,
        2140668000000,
        null
      ],
      "offsets": [
        360,
        300,
        360,
        300,
        360,
        300,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        240,
        300,
        240,
        300,
        300,
        360,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300
      ]
    },
    {
      "name": "America/Indianapolis",
      "abbrs": [
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CWT",
        "CPT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "EST",
        "CST",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST"
      ],
      "untils": [
        -1633276800000,
        -1615136400000,
        -1601827200000,
        -1583686800000,
        -900259200000,
        -891795600000,
        -880214400000,
        -769395600000,
        -765392400000,
        -747244800000,
        -733942800000,
        -715795200000,
        -702493200000,
        -684345600000,
        -671043600000,
        -652896000000,
        -639594000000,
        -620841600000,
        -608144400000,
        -589392000000,
        -576090000000,
        -557942400000,
        -544640400000,
        -526492800000,
        -513190800000,
        -495043200000,
        -481741200000,
        -463593600000,
        -386787600000,
        -368640000000,
        -21488400000,
        -5767200000,
        9961200000,
        25682400000,
        1143961200000,
        1162101600000,
        1173596400000,
        1194156000000,
        1205046000000,
        1225605600000,
        1236495600000,
        1257055200000,
        1268550000000,
        1289109600000,
        1299999600000,
        1320559200000,
        1331449200000,
        1352008800000,
        1362898800000,
        1383458400000,
        1394348400000,
        1414908000000,
        1425798000000,
        1446357600000,
        1457852400000,
        1478412000000,
        1489302000000,
        1509861600000,
        1520751600000,
        1541311200000,
        1552201200000,
        1572760800000,
        1583650800000,
        1604210400000,
        1615705200000,
        1636264800000,
        1647154800000,
        1667714400000,
        1678604400000,
        1699164000000,
        1710054000000,
        1730613600000,
        1741503600000,
        1762063200000,
        1772953200000,
        1793512800000,
        1805007600000,
        1825567200000,
        1836457200000,
        1857016800000,
        1867906800000,
        1888466400000,
        1899356400000,
        1919916000000,
        1930806000000,
        1951365600000,
        1962860400000,
        1983420000000,
        1994310000000,
        2014869600000,
        2025759600000,
        2046319200000,
        2057209200000,
        2077768800000,
        2088658800000,
        2109218400000,
        2120108400000,
        2140668000000,
        null
      ],
      "offsets": [
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300
      ]
    },
    {
      "name": "America/Inuvik",
      "abbrs": [
        "zzz",
        "PST",
        "PDDT",
        "PST",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST"
      ],
      "untils": [
        -536457600000,
        -147888000000,
        -131558400000,
        294228000000,
        325674000000,
        341395200000,
        357123600000,
        372844800000,
        388573200000,
        404899200000,
        420022800000,
        436348800000,
        452077200000,
        467798400000,
        483526800000,
        499248000000,
        514976400000,
        530697600000,
        544611600000,
        562147200000,
        576061200000,
        594201600000,
        607510800000,
        625651200000,
        638960400000,
        657100800000,
        671014800000,
        688550400000,
        702464400000,
        720000000000,
        733914000000,
        752054400000,
        765363600000,
        783504000000,
        796813200000,
        814953600000,
        828867600000,
        846403200000,
        860317200000,
        877852800000,
        891766800000,
        909302400000,
        923216400000,
        941356800000,
        954666000000,
        972806400000,
        986115600000,
        1004256000000,
        1018170000000,
        1035705600000,
        1049619600000,
        1067155200000,
        1081069200000,
        1099209600000,
        1112518800000,
        1130659200000,
        1143968400000,
        1162108800000,
        1173603600000,
        1194163200000,
        1205053200000,
        1225612800000,
        1236502800000,
        1257062400000,
        1268557200000,
        1289116800000,
        1300006800000,
        1320566400000,
        1331456400000,
        1352016000000,
        1362906000000,
        1383465600000,
        1394355600000,
        1414915200000,
        1425805200000,
        1446364800000,
        1457859600000,
        1478419200000,
        1489309200000,
        1509868800000,
        1520758800000,
        1541318400000,
        1552208400000,
        1572768000000,
        1583658000000,
        1604217600000,
        1615712400000,
        1636272000000,
        1647162000000,
        1667721600000,
        1678611600000,
        1699171200000,
        1710061200000,
        1730620800000,
        1741510800000,
        1762070400000,
        1772960400000,
        1793520000000,
        1805014800000,
        1825574400000,
        1836464400000,
        1857024000000,
        1867914000000,
        1888473600000,
        1899363600000,
        1919923200000,
        1930813200000,
        1951372800000,
        1962867600000,
        1983427200000,
        1994317200000,
        2014876800000,
        2025766800000,
        2046326400000,
        2057216400000,
        2077776000000,
        2088666000000,
        2109225600000,
        2120115600000,
        2140675200000,
        null
      ],
      "offsets": [
        0,
        480,
        360,
        480,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420
      ]
    },
    {
      "name": "America/Iqaluit",
      "abbrs": [
        "zzz",
        "EWT",
        "EPT",
        "EST",
        "EDDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "CST",
        "CDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST"
      ],
      "untils": [
        -865296000000,
        -769395600000,
        -765396000000,
        -147898800000,
        -131569200000,
        325666800000,
        341388000000,
        357116400000,
        372837600000,
        388566000000,
        404892000000,
        420015600000,
        436341600000,
        452070000000,
        467791200000,
        483519600000,
        499240800000,
        514969200000,
        530690400000,
        544604400000,
        562140000000,
        576054000000,
        594194400000,
        607503600000,
        625644000000,
        638953200000,
        657093600000,
        671007600000,
        688543200000,
        702457200000,
        719992800000,
        733906800000,
        752047200000,
        765356400000,
        783496800000,
        796806000000,
        814946400000,
        828860400000,
        846396000000,
        860310000000,
        877845600000,
        891759600000,
        909295200000,
        923209200000,
        941349600000,
        954662400000,
        972802800000,
        986108400000,
        1004248800000,
        1018162800000,
        1035698400000,
        1049612400000,
        1067148000000,
        1081062000000,
        1099202400000,
        1112511600000,
        1130652000000,
        1143961200000,
        1162101600000,
        1173596400000,
        1194156000000,
        1205046000000,
        1225605600000,
        1236495600000,
        1257055200000,
        1268550000000,
        1289109600000,
        1299999600000,
        1320559200000,
        1331449200000,
        1352008800000,
        1362898800000,
        1383458400000,
        1394348400000,
        1414908000000,
        1425798000000,
        1446357600000,
        1457852400000,
        1478412000000,
        1489302000000,
        1509861600000,
        1520751600000,
        1541311200000,
        1552201200000,
        1572760800000,
        1583650800000,
        1604210400000,
        1615705200000,
        1636264800000,
        1647154800000,
        1667714400000,
        1678604400000,
        1699164000000,
        1710054000000,
        1730613600000,
        1741503600000,
        1762063200000,
        1772953200000,
        1793512800000,
        1805007600000,
        1825567200000,
        1836457200000,
        1857016800000,
        1867906800000,
        1888466400000,
        1899356400000,
        1919916000000,
        1930806000000,
        1951365600000,
        1962860400000,
        1983420000000,
        1994310000000,
        2014869600000,
        2025759600000,
        2046319200000,
        2057209200000,
        2077768800000,
        2088658800000,
        2109218400000,
        2120108400000,
        2140668000000,
        null
      ],
      "offsets": [
        0,
        240,
        240,
        300,
        180,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        360,
        300,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300
      ]
    },
    {
      "name": "America/Jamaica",
      "abbrs": [
        "KMT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST"
      ],
      "untils": [
        -1827687169000,
        126687600000,
        152085600000,
        162370800000,
        183535200000,
        199263600000,
        215589600000,
        230713200000,
        247039200000,
        262767600000,
        278488800000,
        294217200000,
        309938400000,
        325666800000,
        341388000000,
        357116400000,
        372837600000,
        388566000000,
        404892000000,
        420015600000,
        436341600000,
        null
      ],
      "offsets": [
        307.1833,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300
      ]
    },
    {
      "name": "America/Jujuy",
      "abbrs": [
        "CMT",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "WART",
        "WARST",
        "WART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART"
      ],
      "untils": [
        -1567453392000,
        -1233432000000,
        -1222981200000,
        -1205956800000,
        -1194037200000,
        -1172865600000,
        -1162501200000,
        -1141329600000,
        -1130965200000,
        -1109793600000,
        -1099429200000,
        -1078257600000,
        -1067806800000,
        -1046635200000,
        -1036270800000,
        -1015099200000,
        -1004734800000,
        -983563200000,
        -973198800000,
        -952027200000,
        -941576400000,
        -931032000000,
        -900882000000,
        -890337600000,
        -833749200000,
        -827265600000,
        -752274000000,
        -733780800000,
        -197326800000,
        -190843200000,
        -184194000000,
        -164491200000,
        -152658000000,
        -132955200000,
        -121122000000,
        -101419200000,
        -86821200000,
        -71092800000,
        -54766800000,
        -39038400000,
        -23317200000,
        -7588800000,
        128142000000,
        136605600000,
        596948400000,
        605066400000,
        624423600000,
        636516000000,
        657086400000,
        669178800000,
        686721600000,
        699415200000,
        719377200000,
        731469600000,
        938919600000,
        952052400000,
        1198983600000,
        1205632800000,
        null
      ],
      "offsets": [
        256.8,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        120,
        180,
        120,
        180,
        120,
        240,
        180,
        240,
        120,
        180,
        120,
        180,
        180,
        180,
        120,
        180
      ]
    },
    {
      "name": "America/Juneau",
      "abbrs": [
        "PST",
        "PWT",
        "PPT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "YDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "YST",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST"
      ],
      "untils": [
        -880207200000,
        -769395600000,
        -765385200000,
        -21477600000,
        -5756400000,
        9972000000,
        25693200000,
        41421600000,
        57747600000,
        73476000000,
        89197200000,
        104925600000,
        120646800000,
        126698400000,
        152096400000,
        162381600000,
        183546000000,
        199274400000,
        215600400000,
        230724000000,
        247050000000,
        262778400000,
        278499600000,
        294228000000,
        309949200000,
        325677600000,
        341402400000,
        357127200000,
        372848400000,
        388576800000,
        404902800000,
        420026400000,
        436352400000,
        439030800000,
        452084400000,
        467805600000,
        483534000000,
        499255200000,
        514983600000,
        530704800000,
        544618800000,
        562154400000,
        576068400000,
        594208800000,
        607518000000,
        625658400000,
        638967600000,
        657108000000,
        671022000000,
        688557600000,
        702471600000,
        720007200000,
        733921200000,
        752061600000,
        765370800000,
        783511200000,
        796820400000,
        814960800000,
        828874800000,
        846410400000,
        860324400000,
        877860000000,
        891774000000,
        909309600000,
        923223600000,
        941364000000,
        954673200000,
        972813600000,
        986122800000,
        1004263200000,
        1018177200000,
        1035712800000,
        1049626800000,
        1067162400000,
        1081076400000,
        1099216800000,
        1112526000000,
        1130666400000,
        1143975600000,
        1162116000000,
        1173610800000,
        1194170400000,
        1205060400000,
        1225620000000,
        1236510000000,
        1257069600000,
        1268564400000,
        1289124000000,
        1300014000000,
        1320573600000,
        1331463600000,
        1352023200000,
        1362913200000,
        1383472800000,
        1394362800000,
        1414922400000,
        1425812400000,
        1446372000000,
        1457866800000,
        1478426400000,
        1489316400000,
        1509876000000,
        1520766000000,
        1541325600000,
        1552215600000,
        1572775200000,
        1583665200000,
        1604224800000,
        1615719600000,
        1636279200000,
        1647169200000,
        1667728800000,
        1678618800000,
        1699178400000,
        1710068400000,
        1730628000000,
        1741518000000,
        1762077600000,
        1772967600000,
        1793527200000,
        1805022000000,
        1825581600000,
        1836471600000,
        1857031200000,
        1867921200000,
        1888480800000,
        1899370800000,
        1919930400000,
        1930820400000,
        1951380000000,
        1962874800000,
        1983434400000,
        1994324400000,
        2014884000000,
        2025774000000,
        2046333600000,
        2057223600000,
        2077783200000,
        2088673200000,
        2109232800000,
        2120122800000,
        2140682400000,
        null
      ],
      "offsets": [
        480,
        420,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        480,
        480,
        420,
        480,
        420,
        480,
        420,
        540,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540
      ]
    },
    {
      "name": "America/Kentucky/Louisville",
      "abbrs": [
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CWT",
        "CPT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "CDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST"
      ],
      "untils": [
        -1633276800000,
        -1615136400000,
        -1601827200000,
        -1583686800000,
        -1535904000000,
        -1525280400000,
        -905097600000,
        -891795600000,
        -880214400000,
        -769395600000,
        -765392400000,
        -757360800000,
        -744224400000,
        -715795200000,
        -608144400000,
        -589392000000,
        -576090000000,
        -557942400000,
        -544640400000,
        -526492800000,
        -513190800000,
        -495043200000,
        -481741200000,
        -463593600000,
        -450291600000,
        -431539200000,
        -415818000000,
        -400089600000,
        -384368400000,
        -368640000000,
        -352918800000,
        -337190400000,
        -321469200000,
        -305740800000,
        -289414800000,
        -273686400000,
        -266432400000,
        -52938000000,
        -37216800000,
        -21488400000,
        -5767200000,
        9961200000,
        25682400000,
        41410800000,
        57736800000,
        73465200000,
        89186400000,
        104914800000,
        120636000000,
        126687600000,
        152089200000,
        162370800000,
        183535200000,
        199263600000,
        215589600000,
        230713200000,
        247039200000,
        262767600000,
        278488800000,
        294217200000,
        309938400000,
        325666800000,
        341388000000,
        357116400000,
        372837600000,
        388566000000,
        404892000000,
        420015600000,
        436341600000,
        452070000000,
        467791200000,
        483519600000,
        499240800000,
        514969200000,
        530690400000,
        544604400000,
        562140000000,
        576054000000,
        594194400000,
        607503600000,
        625644000000,
        638953200000,
        657093600000,
        671007600000,
        688543200000,
        702457200000,
        719992800000,
        733906800000,
        752047200000,
        765356400000,
        783496800000,
        796806000000,
        814946400000,
        828860400000,
        846396000000,
        860310000000,
        877845600000,
        891759600000,
        909295200000,
        923209200000,
        941349600000,
        954658800000,
        972799200000,
        986108400000,
        1004248800000,
        1018162800000,
        1035698400000,
        1049612400000,
        1067148000000,
        1081062000000,
        1099202400000,
        1112511600000,
        1130652000000,
        1143961200000,
        1162101600000,
        1173596400000,
        1194156000000,
        1205046000000,
        1225605600000,
        1236495600000,
        1257055200000,
        1268550000000,
        1289109600000,
        1299999600000,
        1320559200000,
        1331449200000,
        1352008800000,
        1362898800000,
        1383458400000,
        1394348400000,
        1414908000000,
        1425798000000,
        1446357600000,
        1457852400000,
        1478412000000,
        1489302000000,
        1509861600000,
        1520751600000,
        1541311200000,
        1552201200000,
        1572760800000,
        1583650800000,
        1604210400000,
        1615705200000,
        1636264800000,
        1647154800000,
        1667714400000,
        1678604400000,
        1699164000000,
        1710054000000,
        1730613600000,
        1741503600000,
        1762063200000,
        1772953200000,
        1793512800000,
        1805007600000,
        1825567200000,
        1836457200000,
        1857016800000,
        1867906800000,
        1888466400000,
        1899356400000,
        1919916000000,
        1930806000000,
        1951365600000,
        1962860400000,
        1983420000000,
        1994310000000,
        2014869600000,
        2025759600000,
        2046319200000,
        2057209200000,
        2077768800000,
        2088658800000,
        2109218400000,
        2120108400000,
        2140668000000,
        null
      ],
      "offsets": [
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        300,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300
      ]
    },
    {
      "name": "America/Kentucky/Monticello",
      "abbrs": [
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CWT",
        "CPT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST"
      ],
      "untils": [
        -1633276800000,
        -1615136400000,
        -1601827200000,
        -1583686800000,
        -880214400000,
        -769395600000,
        -765392400000,
        -52934400000,
        -37213200000,
        -21484800000,
        -5763600000,
        9964800000,
        25686000000,
        41414400000,
        57740400000,
        73468800000,
        89190000000,
        104918400000,
        120639600000,
        126691200000,
        152089200000,
        162374400000,
        183538800000,
        199267200000,
        215593200000,
        230716800000,
        247042800000,
        262771200000,
        278492400000,
        294220800000,
        309942000000,
        325670400000,
        341391600000,
        357120000000,
        372841200000,
        388569600000,
        404895600000,
        420019200000,
        436345200000,
        452073600000,
        467794800000,
        483523200000,
        499244400000,
        514972800000,
        530694000000,
        544608000000,
        562143600000,
        576057600000,
        594198000000,
        607507200000,
        625647600000,
        638956800000,
        657097200000,
        671011200000,
        688546800000,
        702460800000,
        719996400000,
        733910400000,
        752050800000,
        765360000000,
        783500400000,
        796809600000,
        814950000000,
        828864000000,
        846399600000,
        860313600000,
        877849200000,
        891763200000,
        909298800000,
        923212800000,
        941353200000,
        954662400000,
        972802800000,
        986108400000,
        1004248800000,
        1018162800000,
        1035698400000,
        1049612400000,
        1067148000000,
        1081062000000,
        1099202400000,
        1112511600000,
        1130652000000,
        1143961200000,
        1162101600000,
        1173596400000,
        1194156000000,
        1205046000000,
        1225605600000,
        1236495600000,
        1257055200000,
        1268550000000,
        1289109600000,
        1299999600000,
        1320559200000,
        1331449200000,
        1352008800000,
        1362898800000,
        1383458400000,
        1394348400000,
        1414908000000,
        1425798000000,
        1446357600000,
        1457852400000,
        1478412000000,
        1489302000000,
        1509861600000,
        1520751600000,
        1541311200000,
        1552201200000,
        1572760800000,
        1583650800000,
        1604210400000,
        1615705200000,
        1636264800000,
        1647154800000,
        1667714400000,
        1678604400000,
        1699164000000,
        1710054000000,
        1730613600000,
        1741503600000,
        1762063200000,
        1772953200000,
        1793512800000,
        1805007600000,
        1825567200000,
        1836457200000,
        1857016800000,
        1867906800000,
        1888466400000,
        1899356400000,
        1919916000000,
        1930806000000,
        1951365600000,
        1962860400000,
        1983420000000,
        1994310000000,
        2014869600000,
        2025759600000,
        2046319200000,
        2057209200000,
        2077768800000,
        2088658800000,
        2109218400000,
        2120108400000,
        2140668000000,
        null
      ],
      "offsets": [
        360,
        300,
        360,
        300,
        360,
        300,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300
      ]
    },
    {
      "name": "America/Knox_IN",
      "abbrs": [
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CWT",
        "CPT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "EST",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "EST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST"
      ],
      "untils": [
        -1633276800000,
        -1615136400000,
        -1601827200000,
        -1583686800000,
        -880214400000,
        -769395600000,
        -765392400000,
        -715795200000,
        -702493200000,
        -684345600000,
        -671043600000,
        -652896000000,
        -639594000000,
        -620841600000,
        -608144400000,
        -589392000000,
        -576090000000,
        -557942400000,
        -544640400000,
        -526492800000,
        -513190800000,
        -495043200000,
        -481741200000,
        -463593600000,
        -447267600000,
        -431539200000,
        -415818000000,
        -400089600000,
        -386787600000,
        -368640000000,
        -355338000000,
        -337190400000,
        -321469200000,
        -305740800000,
        -289414800000,
        -273686400000,
        -257965200000,
        -242236800000,
        -195066000000,
        -84384000000,
        -68662800000,
        -52934400000,
        -37213200000,
        -21484800000,
        -5763600000,
        9964800000,
        25686000000,
        41414400000,
        57740400000,
        73468800000,
        89190000000,
        104918400000,
        120639600000,
        126691200000,
        152089200000,
        162374400000,
        183538800000,
        199267200000,
        215593200000,
        230716800000,
        247042800000,
        262771200000,
        278492400000,
        294220800000,
        309942000000,
        325670400000,
        341391600000,
        357120000000,
        372841200000,
        388569600000,
        404895600000,
        420019200000,
        436345200000,
        452073600000,
        467794800000,
        483523200000,
        499244400000,
        514972800000,
        530694000000,
        544608000000,
        562143600000,
        576057600000,
        594198000000,
        607507200000,
        625647600000,
        638956800000,
        657097200000,
        671011200000,
        688546800000,
        1143961200000,
        1162105200000,
        1173600000000,
        1194159600000,
        1205049600000,
        1225609200000,
        1236499200000,
        1257058800000,
        1268553600000,
        1289113200000,
        1300003200000,
        1320562800000,
        1331452800000,
        1352012400000,
        1362902400000,
        1383462000000,
        1394352000000,
        1414911600000,
        1425801600000,
        1446361200000,
        1457856000000,
        1478415600000,
        1489305600000,
        1509865200000,
        1520755200000,
        1541314800000,
        1552204800000,
        1572764400000,
        1583654400000,
        1604214000000,
        1615708800000,
        1636268400000,
        1647158400000,
        1667718000000,
        1678608000000,
        1699167600000,
        1710057600000,
        1730617200000,
        1741507200000,
        1762066800000,
        1772956800000,
        1793516400000,
        1805011200000,
        1825570800000,
        1836460800000,
        1857020400000,
        1867910400000,
        1888470000000,
        1899360000000,
        1919919600000,
        1930809600000,
        1951369200000,
        1962864000000,
        1983423600000,
        1994313600000,
        2014873200000,
        2025763200000,
        2046322800000,
        2057212800000,
        2077772400000,
        2088662400000,
        2109222000000,
        2120112000000,
        2140671600000,
        null
      ],
      "offsets": [
        360,
        300,
        360,
        300,
        360,
        300,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        300,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360
      ]
    },
    {
      "name": "America/Kralendijk",
      "abbrs": [
        "LMT",
        "ANT",
        "AST"
      ],
      "untils": [
        -1826738653000,
        -157750200000,
        null
      ],
      "offsets": [
        275.7833,
        270,
        240
      ]
    },
    {
      "name": "America/La_Paz",
      "abbrs": [
        "CMT",
        "BOST",
        "BOT"
      ],
      "untils": [
        -1205954844000,
        -1192307244000,
        null
      ],
      "offsets": [
        272.6,
        212.6,
        240
      ]
    },
    {
      "name": "America/Lima",
      "abbrs": [
        "LMT",
        "PET",
        "PEST",
        "PET",
        "PEST",
        "PET",
        "PEST",
        "PET",
        "PEST",
        "PET",
        "PEST",
        "PET",
        "PEST",
        "PET",
        "PEST",
        "PET"
      ],
      "untils": [
        -1938538284000,
        -1009825200000,
        -1002052800000,
        -986756400000,
        -971035200000,
        -955306800000,
        -939585600000,
        504939600000,
        512712000000,
        536475600000,
        544248000000,
        631170000000,
        638942400000,
        757400400000,
        765172800000,
        null
      ],
      "offsets": [
        308.6,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300
      ]
    },
    {
      "name": "America/Los_Angeles",
      "abbrs": [
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PWT",
        "PPT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST"
      ],
      "untils": [
        -1633269600000,
        -1615129200000,
        -1601820000000,
        -1583679600000,
        -880207200000,
        -769395600000,
        -765385200000,
        -687967200000,
        -662655600000,
        -620834400000,
        -608137200000,
        -589384800000,
        -576082800000,
        -557935200000,
        -544633200000,
        -526485600000,
        -513183600000,
        -495036000000,
        -481734000000,
        -463586400000,
        -450284400000,
        -431532000000,
        -418230000000,
        -400082400000,
        -386780400000,
        -368632800000,
        -355330800000,
        -337183200000,
        -323881200000,
        -305733600000,
        -292431600000,
        -273679200000,
        -260982000000,
        -242229600000,
        -226508400000,
        -210780000000,
        -195058800000,
        -179330400000,
        -163609200000,
        -147880800000,
        -131554800000,
        -116431200000,
        -100105200000,
        -84376800000,
        -68655600000,
        -52927200000,
        -37206000000,
        -21477600000,
        -5756400000,
        9972000000,
        25693200000,
        41421600000,
        57747600000,
        73476000000,
        89197200000,
        104925600000,
        120646800000,
        126698400000,
        152096400000,
        162381600000,
        183546000000,
        199274400000,
        215600400000,
        230724000000,
        247050000000,
        262778400000,
        278499600000,
        294228000000,
        309949200000,
        325677600000,
        341398800000,
        357127200000,
        372848400000,
        388576800000,
        404902800000,
        420026400000,
        436352400000,
        452080800000,
        467802000000,
        483530400000,
        499251600000,
        514980000000,
        530701200000,
        544615200000,
        562150800000,
        576064800000,
        594205200000,
        607514400000,
        625654800000,
        638964000000,
        657104400000,
        671018400000,
        688554000000,
        702468000000,
        720003600000,
        733917600000,
        752058000000,
        765367200000,
        783507600000,
        796816800000,
        814957200000,
        828871200000,
        846406800000,
        860320800000,
        877856400000,
        891770400000,
        909306000000,
        923220000000,
        941360400000,
        954669600000,
        972810000000,
        986119200000,
        1004259600000,
        1018173600000,
        1035709200000,
        1049623200000,
        1067158800000,
        1081072800000,
        1099213200000,
        1112522400000,
        1130662800000,
        1143972000000,
        1162112400000,
        1173607200000,
        1194166800000,
        1205056800000,
        1225616400000,
        1236506400000,
        1257066000000,
        1268560800000,
        1289120400000,
        1300010400000,
        1320570000000,
        1331460000000,
        1352019600000,
        1362909600000,
        1383469200000,
        1394359200000,
        1414918800000,
        1425808800000,
        1446368400000,
        1457863200000,
        1478422800000,
        1489312800000,
        1509872400000,
        1520762400000,
        1541322000000,
        1552212000000,
        1572771600000,
        1583661600000,
        1604221200000,
        1615716000000,
        1636275600000,
        1647165600000,
        1667725200000,
        1678615200000,
        1699174800000,
        1710064800000,
        1730624400000,
        1741514400000,
        1762074000000,
        1772964000000,
        1793523600000,
        1805018400000,
        1825578000000,
        1836468000000,
        1857027600000,
        1867917600000,
        1888477200000,
        1899367200000,
        1919926800000,
        1930816800000,
        1951376400000,
        1962871200000,
        1983430800000,
        1994320800000,
        2014880400000,
        2025770400000,
        2046330000000,
        2057220000000,
        2077779600000,
        2088669600000,
        2109229200000,
        2120119200000,
        2140678800000,
        null
      ],
      "offsets": [
        480,
        420,
        480,
        420,
        480,
        420,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480
      ]
    },
    {
      "name": "America/Louisville",
      "abbrs": [
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CWT",
        "CPT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "CDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST"
      ],
      "untils": [
        -1633276800000,
        -1615136400000,
        -1601827200000,
        -1583686800000,
        -1535904000000,
        -1525280400000,
        -905097600000,
        -891795600000,
        -880214400000,
        -769395600000,
        -765392400000,
        -757360800000,
        -744224400000,
        -715795200000,
        -608144400000,
        -589392000000,
        -576090000000,
        -557942400000,
        -544640400000,
        -526492800000,
        -513190800000,
        -495043200000,
        -481741200000,
        -463593600000,
        -450291600000,
        -431539200000,
        -415818000000,
        -400089600000,
        -384368400000,
        -368640000000,
        -352918800000,
        -337190400000,
        -321469200000,
        -305740800000,
        -289414800000,
        -273686400000,
        -266432400000,
        -52938000000,
        -37216800000,
        -21488400000,
        -5767200000,
        9961200000,
        25682400000,
        41410800000,
        57736800000,
        73465200000,
        89186400000,
        104914800000,
        120636000000,
        126687600000,
        152089200000,
        162370800000,
        183535200000,
        199263600000,
        215589600000,
        230713200000,
        247039200000,
        262767600000,
        278488800000,
        294217200000,
        309938400000,
        325666800000,
        341388000000,
        357116400000,
        372837600000,
        388566000000,
        404892000000,
        420015600000,
        436341600000,
        452070000000,
        467791200000,
        483519600000,
        499240800000,
        514969200000,
        530690400000,
        544604400000,
        562140000000,
        576054000000,
        594194400000,
        607503600000,
        625644000000,
        638953200000,
        657093600000,
        671007600000,
        688543200000,
        702457200000,
        719992800000,
        733906800000,
        752047200000,
        765356400000,
        783496800000,
        796806000000,
        814946400000,
        828860400000,
        846396000000,
        860310000000,
        877845600000,
        891759600000,
        909295200000,
        923209200000,
        941349600000,
        954658800000,
        972799200000,
        986108400000,
        1004248800000,
        1018162800000,
        1035698400000,
        1049612400000,
        1067148000000,
        1081062000000,
        1099202400000,
        1112511600000,
        1130652000000,
        1143961200000,
        1162101600000,
        1173596400000,
        1194156000000,
        1205046000000,
        1225605600000,
        1236495600000,
        1257055200000,
        1268550000000,
        1289109600000,
        1299999600000,
        1320559200000,
        1331449200000,
        1352008800000,
        1362898800000,
        1383458400000,
        1394348400000,
        1414908000000,
        1425798000000,
        1446357600000,
        1457852400000,
        1478412000000,
        1489302000000,
        1509861600000,
        1520751600000,
        1541311200000,
        1552201200000,
        1572760800000,
        1583650800000,
        1604210400000,
        1615705200000,
        1636264800000,
        1647154800000,
        1667714400000,
        1678604400000,
        1699164000000,
        1710054000000,
        1730613600000,
        1741503600000,
        1762063200000,
        1772953200000,
        1793512800000,
        1805007600000,
        1825567200000,
        1836457200000,
        1857016800000,
        1867906800000,
        1888466400000,
        1899356400000,
        1919916000000,
        1930806000000,
        1951365600000,
        1962860400000,
        1983420000000,
        1994310000000,
        2014869600000,
        2025759600000,
        2046319200000,
        2057209200000,
        2077768800000,
        2088658800000,
        2109218400000,
        2120108400000,
        2140668000000,
        null
      ],
      "offsets": [
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        300,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300
      ]
    },
    {
      "name": "America/Lower_Princes",
      "abbrs": [
        "LMT",
        "ANT",
        "AST"
      ],
      "untils": [
        -1826738653000,
        -157750200000,
        null
      ],
      "offsets": [
        275.7833,
        270,
        240
      ]
    },
    {
      "name": "America/Maceio",
      "abbrs": [
        "LMT",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT"
      ],
      "untils": [
        -1767217028000,
        -1206957600000,
        -1191362400000,
        -1175374800000,
        -1159826400000,
        -633819600000,
        -622069200000,
        -602283600000,
        -591832800000,
        -570747600000,
        -560210400000,
        -539125200000,
        -531352800000,
        -191365200000,
        -184197600000,
        -155163600000,
        -150069600000,
        -128898000000,
        -121125600000,
        -99954000000,
        -89589600000,
        -68418000000,
        -57967200000,
        499748400000,
        511236000000,
        530593200000,
        540266400000,
        562129200000,
        571197600000,
        592974000000,
        602042400000,
        624423600000,
        634701600000,
        813726000000,
        824004000000,
        938919600000,
        951616800000,
        970974000000,
        972180000000,
        1003028400000,
        1013911200000,
        null
      ],
      "offsets": [
        142.8667,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180
      ]
    },
    {
      "name": "America/Managua",
      "abbrs": [
        "MMT",
        "CST",
        "EST",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "EST",
        "CST",
        "EST",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST"
      ],
      "untils": [
        -1121105688000,
        105084000000,
        161758800000,
        290584800000,
        299134800000,
        322034400000,
        330584400000,
        694260000000,
        717310800000,
        725868000000,
        852094800000,
        1113112800000,
        1128229200000,
        1146384000000,
        1159682400000,
        null
      ],
      "offsets": [
        345.2,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360
      ]
    },
    {
      "name": "America/Manaus",
      "abbrs": [
        "LMT",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT"
      ],
      "untils": [
        -1767211196000,
        -1206954000000,
        -1191358800000,
        -1175371200000,
        -1159822800000,
        -633816000000,
        -622065600000,
        -602280000000,
        -591829200000,
        -570744000000,
        -560206800000,
        -539121600000,
        -531349200000,
        -191361600000,
        -184194000000,
        -155160000000,
        -150066000000,
        -128894400000,
        -121122000000,
        -99950400000,
        -89586000000,
        -68414400000,
        -57963600000,
        499752000000,
        511239600000,
        530596800000,
        540270000000,
        562132800000,
        571201200000,
        750830400000,
        761713200000,
        null
      ],
      "offsets": [
        240.0667,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240
      ]
    },
    {
      "name": "America/Marigot",
      "abbrs": [
        "LMT",
        "AST"
      ],
      "untils": [
        -1825098836000,
        null
      ],
      "offsets": [
        246.0667,
        240
      ]
    },
    {
      "name": "America/Martinique",
      "abbrs": [
        "FFMT",
        "AST",
        "ADT",
        "AST"
      ],
      "untils": [
        -1851537340000,
        323841600000,
        338958000000,
        null
      ],
      "offsets": [
        244.3333,
        240,
        180,
        240
      ]
    },
    {
      "name": "America/Matamoros",
      "abbrs": [
        "LMT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST"
      ],
      "untils": [
        -1514743200000,
        576057600000,
        594198000000,
        828864000000,
        846399600000,
        860313600000,
        877849200000,
        891763200000,
        909298800000,
        923212800000,
        941353200000,
        954662400000,
        972802800000,
        989136000000,
        1001833200000,
        1018166400000,
        1035702000000,
        1049616000000,
        1067151600000,
        1081065600000,
        1099206000000,
        1112515200000,
        1130655600000,
        1143964800000,
        1162105200000,
        1175414400000,
        1193554800000,
        1207468800000,
        1225004400000,
        1238918400000,
        1256454000000,
        1268553600000,
        1289113200000,
        1300003200000,
        1320562800000,
        1331452800000,
        1352012400000,
        1362902400000,
        1383462000000,
        1394352000000,
        1414911600000,
        1425801600000,
        1446361200000,
        1457856000000,
        1478415600000,
        1489305600000,
        1509865200000,
        1520755200000,
        1541314800000,
        1552204800000,
        1572764400000,
        1583654400000,
        1604214000000,
        1615708800000,
        1636268400000,
        1647158400000,
        1667718000000,
        1678608000000,
        1699167600000,
        1710057600000,
        1730617200000,
        1741507200000,
        1762066800000,
        1772956800000,
        1793516400000,
        1805011200000,
        1825570800000,
        1836460800000,
        1857020400000,
        1867910400000,
        1888470000000,
        1899360000000,
        1919919600000,
        1930809600000,
        1951369200000,
        1962864000000,
        1983423600000,
        1994313600000,
        2014873200000,
        2025763200000,
        2046322800000,
        2057212800000,
        2077772400000,
        2088662400000,
        2109222000000,
        2120112000000,
        2140671600000,
        null
      ],
      "offsets": [
        400,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360
      ]
    },
    {
      "name": "America/Mazatlan",
      "abbrs": [
        "LMT",
        "MST",
        "CST",
        "MST",
        "CST",
        "MST",
        "CST",
        "MST",
        "PST",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST"
      ],
      "untils": [
        -1514739600000,
        -1343066400000,
        -1234807200000,
        -1220292000000,
        -1207159200000,
        -1191344400000,
        -873828000000,
        -661539600000,
        28800000,
        828867600000,
        846403200000,
        860317200000,
        877852800000,
        891766800000,
        909302400000,
        923216400000,
        941356800000,
        954666000000,
        972806400000,
        989139600000,
        1001836800000,
        1018170000000,
        1035705600000,
        1049619600000,
        1067155200000,
        1081069200000,
        1099209600000,
        1112518800000,
        1130659200000,
        1143968400000,
        1162108800000,
        1175418000000,
        1193558400000,
        1207472400000,
        1225008000000,
        1238922000000,
        1256457600000,
        1270371600000,
        1288512000000,
        1301821200000,
        1319961600000,
        1333270800000,
        1351411200000,
        1365325200000,
        1382860800000,
        1396774800000,
        1414310400000,
        1428224400000,
        1445760000000,
        1459674000000,
        1477814400000,
        1491123600000,
        1509264000000,
        1522573200000,
        1540713600000,
        1554627600000,
        1572163200000,
        1586077200000,
        1603612800000,
        1617526800000,
        1635667200000,
        1648976400000,
        1667116800000,
        1680426000000,
        1698566400000,
        1712480400000,
        1730016000000,
        1743930000000,
        1761465600000,
        1775379600000,
        1792915200000,
        1806829200000,
        1824969600000,
        1838278800000,
        1856419200000,
        1869728400000,
        1887868800000,
        1901782800000,
        1919318400000,
        1933232400000,
        1950768000000,
        1964682000000,
        1982822400000,
        1996131600000,
        2014272000000,
        2027581200000,
        2045721600000,
        2059030800000,
        2077171200000,
        2091085200000,
        2108620800000,
        2122534800000,
        2140070400000,
        null
      ],
      "offsets": [
        425.6667,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        480,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420
      ]
    },
    {
      "name": "America/Mendoza",
      "abbrs": [
        "CMT",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "WART",
        "WARST",
        "WART",
        "WARST",
        "WART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "WART",
        "ART",
        "ARST",
        "ART"
      ],
      "untils": [
        -1567453392000,
        -1233432000000,
        -1222981200000,
        -1205956800000,
        -1194037200000,
        -1172865600000,
        -1162501200000,
        -1141329600000,
        -1130965200000,
        -1109793600000,
        -1099429200000,
        -1078257600000,
        -1067806800000,
        -1046635200000,
        -1036270800000,
        -1015099200000,
        -1004734800000,
        -983563200000,
        -973198800000,
        -952027200000,
        -941576400000,
        -931032000000,
        -900882000000,
        -890337600000,
        -833749200000,
        -827265600000,
        -752274000000,
        -733780800000,
        -197326800000,
        -190843200000,
        -184194000000,
        -164491200000,
        -152658000000,
        -132955200000,
        -121122000000,
        -101419200000,
        -86821200000,
        -71092800000,
        -54766800000,
        -39038400000,
        -23317200000,
        -7588800000,
        128142000000,
        136605600000,
        596948400000,
        605066400000,
        624423600000,
        636516000000,
        655963200000,
        667796400000,
        687499200000,
        699418800000,
        719380800000,
        731469600000,
        938919600000,
        952052400000,
        1085281200000,
        1096171200000,
        1198983600000,
        1205632800000,
        null
      ],
      "offsets": [
        256.8,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        120,
        180,
        120,
        180,
        120,
        240,
        180,
        240,
        180,
        240,
        120,
        180,
        180,
        180,
        240,
        180,
        120,
        180
      ]
    },
    {
      "name": "America/Menominee",
      "abbrs": [
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CWT",
        "CPT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "EST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST"
      ],
      "untils": [
        -1633276800000,
        -1615136400000,
        -1601827200000,
        -1583686800000,
        -880214400000,
        -769395600000,
        -765392400000,
        -747244800000,
        -733942800000,
        -116438400000,
        -100112400000,
        -21484800000,
        104914800000,
        120639600000,
        126691200000,
        152089200000,
        162374400000,
        183538800000,
        199267200000,
        215593200000,
        230716800000,
        247042800000,
        262771200000,
        278492400000,
        294220800000,
        309942000000,
        325670400000,
        341391600000,
        357120000000,
        372841200000,
        388569600000,
        404895600000,
        420019200000,
        436345200000,
        452073600000,
        467794800000,
        483523200000,
        499244400000,
        514972800000,
        530694000000,
        544608000000,
        562143600000,
        576057600000,
        594198000000,
        607507200000,
        625647600000,
        638956800000,
        657097200000,
        671011200000,
        688546800000,
        702460800000,
        719996400000,
        733910400000,
        752050800000,
        765360000000,
        783500400000,
        796809600000,
        814950000000,
        828864000000,
        846399600000,
        860313600000,
        877849200000,
        891763200000,
        909298800000,
        923212800000,
        941353200000,
        954662400000,
        972802800000,
        986112000000,
        1004252400000,
        1018166400000,
        1035702000000,
        1049616000000,
        1067151600000,
        1081065600000,
        1099206000000,
        1112515200000,
        1130655600000,
        1143964800000,
        1162105200000,
        1173600000000,
        1194159600000,
        1205049600000,
        1225609200000,
        1236499200000,
        1257058800000,
        1268553600000,
        1289113200000,
        1300003200000,
        1320562800000,
        1331452800000,
        1352012400000,
        1362902400000,
        1383462000000,
        1394352000000,
        1414911600000,
        1425801600000,
        1446361200000,
        1457856000000,
        1478415600000,
        1489305600000,
        1509865200000,
        1520755200000,
        1541314800000,
        1552204800000,
        1572764400000,
        1583654400000,
        1604214000000,
        1615708800000,
        1636268400000,
        1647158400000,
        1667718000000,
        1678608000000,
        1699167600000,
        1710057600000,
        1730617200000,
        1741507200000,
        1762066800000,
        1772956800000,
        1793516400000,
        1805011200000,
        1825570800000,
        1836460800000,
        1857020400000,
        1867910400000,
        1888470000000,
        1899360000000,
        1919919600000,
        1930809600000,
        1951369200000,
        1962864000000,
        1983423600000,
        1994313600000,
        2014873200000,
        2025763200000,
        2046322800000,
        2057212800000,
        2077772400000,
        2088662400000,
        2109222000000,
        2120112000000,
        2140671600000,
        null
      ],
      "offsets": [
        360,
        300,
        360,
        300,
        360,
        300,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360
      ]
    },
    {
      "name": "America/Merida",
      "abbrs": [
        "LMT",
        "CST",
        "EST",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST"
      ],
      "untils": [
        -1514743200000,
        377935200000,
        407653200000,
        828864000000,
        846399600000,
        860313600000,
        877849200000,
        891763200000,
        909298800000,
        923212800000,
        941353200000,
        954662400000,
        972802800000,
        989136000000,
        1001833200000,
        1018166400000,
        1035702000000,
        1049616000000,
        1067151600000,
        1081065600000,
        1099206000000,
        1112515200000,
        1130655600000,
        1143964800000,
        1162105200000,
        1175414400000,
        1193554800000,
        1207468800000,
        1225004400000,
        1238918400000,
        1256454000000,
        1270368000000,
        1288508400000,
        1301817600000,
        1319958000000,
        1333267200000,
        1351407600000,
        1365321600000,
        1382857200000,
        1396771200000,
        1414306800000,
        1428220800000,
        1445756400000,
        1459670400000,
        1477810800000,
        1491120000000,
        1509260400000,
        1522569600000,
        1540710000000,
        1554624000000,
        1572159600000,
        1586073600000,
        1603609200000,
        1617523200000,
        1635663600000,
        1648972800000,
        1667113200000,
        1680422400000,
        1698562800000,
        1712476800000,
        1730012400000,
        1743926400000,
        1761462000000,
        1775376000000,
        1792911600000,
        1806825600000,
        1824966000000,
        1838275200000,
        1856415600000,
        1869724800000,
        1887865200000,
        1901779200000,
        1919314800000,
        1933228800000,
        1950764400000,
        1964678400000,
        1982818800000,
        1996128000000,
        2014268400000,
        2027577600000,
        2045718000000,
        2059027200000,
        2077167600000,
        2091081600000,
        2108617200000,
        2122531200000,
        2140066800000,
        null
      ],
      "offsets": [
        358.4667,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360
      ]
    },
    {
      "name": "America/Metlakatla",
      "abbrs": [
        "PST",
        "PWT",
        "PPT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST"
      ],
      "untils": [
        -880207200000,
        -769395600000,
        -765385200000,
        -21477600000,
        -5756400000,
        9972000000,
        25693200000,
        41421600000,
        57747600000,
        73476000000,
        89197200000,
        104925600000,
        120646800000,
        126698400000,
        152096400000,
        162381600000,
        183546000000,
        199274400000,
        215600400000,
        230724000000,
        247050000000,
        262778400000,
        278499600000,
        294228000000,
        309949200000,
        325677600000,
        341398800000,
        357127200000,
        372848400000,
        388576800000,
        404902800000,
        420026400000,
        436352400000,
        null
      ],
      "offsets": [
        480,
        420,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480
      ]
    },
    {
      "name": "America/Mexico_City",
      "abbrs": [
        "LMT",
        "MST",
        "CST",
        "MST",
        "CST",
        "MST",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CWT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST"
      ],
      "untils": [
        -1514739600000,
        -1343066400000,
        -1234807200000,
        -1220292000000,
        -1207159200000,
        -1191344400000,
        -975261600000,
        -963169200000,
        -917114400000,
        -907354800000,
        -821901600000,
        -810068400000,
        -627501600000,
        -612990000000,
        828864000000,
        846399600000,
        860313600000,
        877849200000,
        891763200000,
        909298800000,
        923212800000,
        941353200000,
        954662400000,
        972802800000,
        989136000000,
        1001833200000,
        1018166400000,
        1035702000000,
        1049616000000,
        1067151600000,
        1081065600000,
        1099206000000,
        1112515200000,
        1130655600000,
        1143964800000,
        1162105200000,
        1175414400000,
        1193554800000,
        1207468800000,
        1225004400000,
        1238918400000,
        1256454000000,
        1270368000000,
        1288508400000,
        1301817600000,
        1319958000000,
        1333267200000,
        1351407600000,
        1365321600000,
        1382857200000,
        1396771200000,
        1414306800000,
        1428220800000,
        1445756400000,
        1459670400000,
        1477810800000,
        1491120000000,
        1509260400000,
        1522569600000,
        1540710000000,
        1554624000000,
        1572159600000,
        1586073600000,
        1603609200000,
        1617523200000,
        1635663600000,
        1648972800000,
        1667113200000,
        1680422400000,
        1698562800000,
        1712476800000,
        1730012400000,
        1743926400000,
        1761462000000,
        1775376000000,
        1792911600000,
        1806825600000,
        1824966000000,
        1838275200000,
        1856415600000,
        1869724800000,
        1887865200000,
        1901779200000,
        1919314800000,
        1933228800000,
        1950764400000,
        1964678400000,
        1982818800000,
        1996128000000,
        2014268400000,
        2027577600000,
        2045718000000,
        2059027200000,
        2077167600000,
        2091081600000,
        2108617200000,
        2122531200000,
        2140066800000,
        null
      ],
      "offsets": [
        396.6,
        420,
        360,
        420,
        360,
        420,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360
      ]
    },
    {
      "name": "America/Miquelon",
      "abbrs": [
        "LMT",
        "AST",
        "PMST",
        "PMDT",
        "PMST",
        "PMDT",
        "PMST",
        "PMDT",
        "PMST",
        "PMDT",
        "PMST",
        "PMDT",
        "PMST",
        "PMDT",
        "PMST",
        "PMDT",
        "PMST",
        "PMDT",
        "PMST",
        "PMDT",
        "PMST",
        "PMDT",
        "PMST",
        "PMDT",
        "PMST",
        "PMDT",
        "PMST",
        "PMDT",
        "PMST",
        "PMDT",
        "PMST",
        "PMDT",
        "PMST",
        "PMDT",
        "PMST",
        "PMDT",
        "PMST",
        "PMDT",
        "PMST",
        "PMDT",
        "PMST",
        "PMDT",
        "PMST",
        "PMDT",
        "PMST",
        "PMDT",
        "PMST",
        "PMDT",
        "PMST",
        "PMDT",
        "PMST",
        "PMDT",
        "PMST",
        "PMDT",
        "PMST",
        "PMDT",
        "PMST",
        "PMDT",
        "PMST",
        "PMDT",
        "PMST",
        "PMDT",
        "PMST",
        "PMDT",
        "PMST",
        "PMDT",
        "PMST",
        "PMDT",
        "PMST",
        "PMDT",
        "PMST",
        "PMDT",
        "PMST",
        "PMDT",
        "PMST",
        "PMDT",
        "PMST",
        "PMDT",
        "PMST",
        "PMDT",
        "PMST",
        "PMDT",
        "PMST",
        "PMDT",
        "PMST",
        "PMDT",
        "PMST",
        "PMDT",
        "PMST",
        "PMDT",
        "PMST",
        "PMDT",
        "PMST",
        "PMDT",
        "PMST",
        "PMDT",
        "PMST",
        "PMDT",
        "PMST",
        "PMDT",
        "PMST",
        "PMDT",
        "PMST",
        "PMDT",
        "PMST"
      ],
      "untils": [
        -1850328920000,
        326001600000,
        544597200000,
        562132800000,
        576046800000,
        594187200000,
        607496400000,
        625636800000,
        638946000000,
        657086400000,
        671000400000,
        688536000000,
        702450000000,
        719985600000,
        733899600000,
        752040000000,
        765349200000,
        783489600000,
        796798800000,
        814939200000,
        828853200000,
        846388800000,
        860302800000,
        877838400000,
        891752400000,
        909288000000,
        923202000000,
        941342400000,
        954651600000,
        972792000000,
        986101200000,
        1004241600000,
        1018155600000,
        1035691200000,
        1049605200000,
        1067140800000,
        1081054800000,
        1099195200000,
        1112504400000,
        1130644800000,
        1143954000000,
        1162094400000,
        1173589200000,
        1194148800000,
        1205038800000,
        1225598400000,
        1236488400000,
        1257048000000,
        1268542800000,
        1289102400000,
        1299992400000,
        1320552000000,
        1331442000000,
        1352001600000,
        1362891600000,
        1383451200000,
        1394341200000,
        1414900800000,
        1425790800000,
        1446350400000,
        1457845200000,
        1478404800000,
        1489294800000,
        1509854400000,
        1520744400000,
        1541304000000,
        1552194000000,
        1572753600000,
        1583643600000,
        1604203200000,
        1615698000000,
        1636257600000,
        1647147600000,
        1667707200000,
        1678597200000,
        1699156800000,
        1710046800000,
        1730606400000,
        1741496400000,
        1762056000000,
        1772946000000,
        1793505600000,
        1805000400000,
        1825560000000,
        1836450000000,
        1857009600000,
        1867899600000,
        1888459200000,
        1899349200000,
        1919908800000,
        1930798800000,
        1951358400000,
        1962853200000,
        1983412800000,
        1994302800000,
        2014862400000,
        2025752400000,
        2046312000000,
        2057202000000,
        2077761600000,
        2088651600000,
        2109211200000,
        2120101200000,
        2140660800000,
        null
      ],
      "offsets": [
        224.6667,
        240,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180
      ]
    },
    {
      "name": "America/Moncton",
      "abbrs": [
        "EST",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "AWT",
        "APT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST"
      ],
      "untils": [
        -2131642800000,
        -1632074400000,
        -1615143600000,
        -1153681200000,
        -1145822400000,
        -1122231600000,
        -1114372800000,
        -1090782000000,
        -1082923200000,
        -1059332400000,
        -1051473600000,
        -1027882800000,
        -1020024000000,
        -996433200000,
        -988574400000,
        -965674800000,
        -955396800000,
        -934743600000,
        -923947200000,
        -904503600000,
        -891892800000,
        -880221600000,
        -769395600000,
        -765399600000,
        -747252000000,
        -733950000000,
        -715802400000,
        -702500400000,
        -684352800000,
        -671050800000,
        -652903200000,
        -639601200000,
        -620848800000,
        -608151600000,
        -589399200000,
        -576097200000,
        -557949600000,
        -544647600000,
        -526500000000,
        -513198000000,
        -495050400000,
        -481748400000,
        -463600800000,
        -450298800000,
        -431546400000,
        -418244400000,
        -400096800000,
        -384375600000,
        -368647200000,
        -352926000000,
        -337197600000,
        -321476400000,
        -305748000000,
        -289422000000,
        -273693600000,
        -257972400000,
        -242244000000,
        -226522800000,
        -210794400000,
        -195073200000,
        -179344800000,
        -163623600000,
        -147895200000,
        -131569200000,
        -116445600000,
        -100119600000,
        -84391200000,
        -68670000000,
        -52941600000,
        -37220400000,
        -21492000000,
        -5770800000,
        9957600000,
        25678800000,
        41407200000,
        57733200000,
        73461600000,
        89182800000,
        136360800000,
        152082000000,
        167810400000,
        183531600000,
        199260000000,
        215586000000,
        230709600000,
        247035600000,
        262764000000,
        278485200000,
        294213600000,
        309934800000,
        325663200000,
        341384400000,
        357112800000,
        372834000000,
        388562400000,
        404888400000,
        420012000000,
        436338000000,
        452066400000,
        467787600000,
        483516000000,
        499237200000,
        514965600000,
        530686800000,
        544600800000,
        562136400000,
        576050400000,
        594190800000,
        607500000000,
        625640400000,
        638949600000,
        657090000000,
        671004000000,
        688539600000,
        702453600000,
        719989200000,
        733896060000,
        752036460000,
        765345660000,
        783486060000,
        796795260000,
        814935660000,
        828849660000,
        846385260000,
        860299260000,
        877834860000,
        891748860000,
        909284460000,
        923198460000,
        941338860000,
        954648060000,
        972788460000,
        986097660000,
        1004238060000,
        1018152060000,
        1035687660000,
        1049601660000,
        1067137260000,
        1081051260000,
        1099191660000,
        1112500860000,
        1130641260000,
        1143950460000,
        1162090860000,
        1173592800000,
        1194152400000,
        1205042400000,
        1225602000000,
        1236492000000,
        1257051600000,
        1268546400000,
        1289106000000,
        1299996000000,
        1320555600000,
        1331445600000,
        1352005200000,
        1362895200000,
        1383454800000,
        1394344800000,
        1414904400000,
        1425794400000,
        1446354000000,
        1457848800000,
        1478408400000,
        1489298400000,
        1509858000000,
        1520748000000,
        1541307600000,
        1552197600000,
        1572757200000,
        1583647200000,
        1604206800000,
        1615701600000,
        1636261200000,
        1647151200000,
        1667710800000,
        1678600800000,
        1699160400000,
        1710050400000,
        1730610000000,
        1741500000000,
        1762059600000,
        1772949600000,
        1793509200000,
        1805004000000,
        1825563600000,
        1836453600000,
        1857013200000,
        1867903200000,
        1888462800000,
        1899352800000,
        1919912400000,
        1930802400000,
        1951362000000,
        1962856800000,
        1983416400000,
        1994306400000,
        2014866000000,
        2025756000000,
        2046315600000,
        2057205600000,
        2077765200000,
        2088655200000,
        2109214800000,
        2120104800000,
        2140664400000,
        null
      ],
      "offsets": [
        300,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240
      ]
    },
    {
      "name": "America/Monterrey",
      "abbrs": [
        "LMT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST"
      ],
      "untils": [
        -1514743200000,
        576057600000,
        594198000000,
        828864000000,
        846399600000,
        860313600000,
        877849200000,
        891763200000,
        909298800000,
        923212800000,
        941353200000,
        954662400000,
        972802800000,
        989136000000,
        1001833200000,
        1018166400000,
        1035702000000,
        1049616000000,
        1067151600000,
        1081065600000,
        1099206000000,
        1112515200000,
        1130655600000,
        1143964800000,
        1162105200000,
        1175414400000,
        1193554800000,
        1207468800000,
        1225004400000,
        1238918400000,
        1256454000000,
        1270368000000,
        1288508400000,
        1301817600000,
        1319958000000,
        1333267200000,
        1351407600000,
        1365321600000,
        1382857200000,
        1396771200000,
        1414306800000,
        1428220800000,
        1445756400000,
        1459670400000,
        1477810800000,
        1491120000000,
        1509260400000,
        1522569600000,
        1540710000000,
        1554624000000,
        1572159600000,
        1586073600000,
        1603609200000,
        1617523200000,
        1635663600000,
        1648972800000,
        1667113200000,
        1680422400000,
        1698562800000,
        1712476800000,
        1730012400000,
        1743926400000,
        1761462000000,
        1775376000000,
        1792911600000,
        1806825600000,
        1824966000000,
        1838275200000,
        1856415600000,
        1869724800000,
        1887865200000,
        1901779200000,
        1919314800000,
        1933228800000,
        1950764400000,
        1964678400000,
        1982818800000,
        1996128000000,
        2014268400000,
        2027577600000,
        2045718000000,
        2059027200000,
        2077167600000,
        2091081600000,
        2108617200000,
        2122531200000,
        2140066800000,
        null
      ],
      "offsets": [
        401.2667,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360
      ]
    },
    {
      "name": "America/Montevideo",
      "abbrs": [
        "MMT",
        "UYT",
        "UYHST",
        "UYT",
        "UYHST",
        "UYT",
        "UYHST",
        "UYT",
        "UYHST",
        "UYT",
        "UYHST",
        "UYT",
        "UYHST",
        "UYT",
        "UYHST",
        "UYT",
        "UYHST",
        "UYT",
        "UYHST",
        "UYT",
        "UYHST",
        "UYT",
        "UYHST",
        "UYT",
        "UYHST",
        "UYT",
        "UYST",
        "UYT",
        "UYST",
        "UYT",
        "UYST",
        "UYT",
        "UYST",
        "UYT",
        "UYST",
        "UYT",
        "UYST",
        "UYT",
        "UYHST",
        "UYT",
        "UYHST",
        "UYT",
        "UYHST",
        "UYT",
        "UYST",
        "UYT",
        "UYHST",
        "UYST",
        "UYT",
        "UYST",
        "UYT",
        "UYST",
        "UYT",
        "UYST",
        "UYT",
        "UYST",
        "UYT",
        "UYST",
        "UYT",
        "UYST",
        "UYT",
        "UYST",
        "UYT",
        "UYST",
        "UYT",
        "UYST",
        "UYT",
        "UYST",
        "UYT",
        "UYST",
        "UYT",
        "UYST",
        "UYT",
        "UYST",
        "UYT",
        "UYST",
        "UYT",
        "UYST",
        "UYT",
        "UYST",
        "UYT",
        "UYST",
        "UYT",
        "UYST",
        "UYT",
        "UYST",
        "UYT",
        "UYST",
        "UYT",
        "UYST",
        "UYT",
        "UYST",
        "UYT",
        "UYST",
        "UYT",
        "UYST",
        "UYT",
        "UYST",
        "UYT",
        "UYST",
        "UYT",
        "UYST",
        "UYT",
        "UYST",
        "UYT",
        "UYST",
        "UYT",
        "UYST",
        "UYT",
        "UYST",
        "UYT",
        "UYST",
        "UYT",
        "UYST",
        "UYT",
        "UYST",
        "UYT",
        "UYST",
        "UYT",
        "UYST",
        "UYT",
        "UYST",
        "UYT",
        "UYST",
        "UYT",
        "UYST",
        "UYT",
        "UYST",
        "UYT",
        "UYST",
        "UYT",
        "UYST"
      ],
      "untils": [
        -1567455316000,
        -1459542600000,
        -1443819600000,
        -1428006600000,
        -1412283600000,
        -1396470600000,
        -1380747600000,
        -1141590600000,
        -1128286800000,
        -1110141000000,
        -1096837200000,
        -1078691400000,
        -1065387600000,
        -1046637000000,
        -1033938000000,
        -1015187400000,
        -1002488400000,
        -983737800000,
        -971038800000,
        -952288200000,
        -938984400000,
        -920838600000,
        -907534800000,
        -896819400000,
        -883602000000,
        -853619400000,
        -845848800000,
        -334789200000,
        -319672800000,
        -314226000000,
        -309996000000,
        -149720400000,
        -134604000000,
        -118270800000,
        -100044000000,
        -86821200000,
        -68508000000,
        -50446800000,
        -34119000000,
        -18910800000,
        -2583000000,
        12625200000,
        28953000000,
        72932400000,
        82692000000,
        132116400000,
        156911400000,
        212983200000,
        250052400000,
        260244000000,
        307594800000,
        325994400000,
        566449200000,
        574308000000,
        597812400000,
        605671200000,
        625633200000,
        636516000000,
        656478000000,
        667965600000,
        688532400000,
        699415200000,
        719377200000,
        730864800000,
        1095562800000,
        1111896000000,
        1128834000000,
        1142136000000,
        1159678800000,
        1173585600000,
        1191733200000,
        1205035200000,
        1223182800000,
        1236484800000,
        1254632400000,
        1268539200000,
        1286082000000,
        1299988800000,
        1317531600000,
        1331438400000,
        1349586000000,
        1362888000000,
        1381035600000,
        1394337600000,
        1412485200000,
        1425787200000,
        1443934800000,
        1457841600000,
        1475384400000,
        1489291200000,
        1506834000000,
        1520740800000,
        1538888400000,
        1552190400000,
        1570338000000,
        1583640000000,
        1601787600000,
        1615694400000,
        1633237200000,
        1647144000000,
        1664686800000,
        1678593600000,
        1696136400000,
        1710043200000,
        1728190800000,
        1741492800000,
        1759640400000,
        1772942400000,
        1791090000000,
        1804996800000,
        1822539600000,
        1836446400000,
        1853989200000,
        1867896000000,
        1886043600000,
        1899345600000,
        1917493200000,
        1930795200000,
        1948942800000,
        1962849600000,
        1980392400000,
        1994299200000,
        2011842000000,
        2025748800000,
        2043291600000,
        2057198400000,
        2075346000000,
        2088648000000,
        2106795600000,
        2120097600000,
        2138245200000,
        null
      ],
      "offsets": [
        224.7333,
        210,
        180,
        210,
        180,
        210,
        180,
        210,
        180,
        210,
        180,
        210,
        180,
        210,
        180,
        210,
        180,
        210,
        180,
        210,
        180,
        210,
        180,
        210,
        180,
        210,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        150,
        180,
        150,
        180,
        150,
        180,
        120,
        180,
        150,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120
      ]
    },
    {
      "name": "America/Montreal",
      "abbrs": [
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EWT",
        "EPT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST"
      ],
      "untils": [
        -1632070800000,
        -1615140000000,
        -1601753400000,
        -1583697600000,
        -1567357200000,
        -1554667200000,
        -1534698000000,
        -1524074400000,
        -1503248400000,
        -1492365600000,
        -1471798800000,
        -1460916000000,
        -1440954000000,
        -1428861600000,
        -1409504400000,
        -1397412000000,
        -1378054800000,
        -1365962400000,
        -1346605200000,
        -1333908000000,
        -1315155600000,
        -1301853600000,
        -1283706000000,
        -1270404000000,
        -1252256400000,
        -1238954400000,
        -1220806800000,
        -1207504800000,
        -1188752400000,
        -1176055200000,
        -1157302800000,
        -1144000800000,
        -1125853200000,
        -1112551200000,
        -1094403600000,
        -1081101600000,
        -1062954000000,
        -1049652000000,
        -1031504400000,
        -1018202400000,
        -1000054800000,
        -986752800000,
        -968000400000,
        -955303200000,
        -936550800000,
        -880218000000,
        -769395600000,
        -765396000000,
        -747248400000,
        -733946400000,
        -715806000000,
        -702504000000,
        -684356400000,
        -671054400000,
        -652906800000,
        -634161600000,
        -620845200000,
        -602704800000,
        -589395600000,
        -576093600000,
        -557946000000,
        -544644000000,
        -526496400000,
        -513194400000,
        -495046800000,
        -481744800000,
        -463597200000,
        -450295200000,
        -431542800000,
        -418240800000,
        -400093200000,
        -384372000000,
        -368643600000,
        -352922400000,
        -337194000000,
        -321472800000,
        -305744400000,
        -289418400000,
        -273690000000,
        -257968800000,
        -242240400000,
        -226519200000,
        -210790800000,
        -195069600000,
        -179341200000,
        -163620000000,
        -147891600000,
        -131565600000,
        -116442000000,
        -100116000000,
        -84387600000,
        -68666400000,
        -52938000000,
        -37216800000,
        -21488400000,
        -5767200000,
        9961200000,
        25682400000,
        41410800000,
        57736800000,
        73465200000,
        89186400000,
        104914800000,
        120636000000,
        136364400000,
        152085600000,
        167814000000,
        183535200000,
        199263600000,
        215589600000,
        230713200000,
        247039200000,
        262767600000,
        278488800000,
        294217200000,
        309938400000,
        325666800000,
        341388000000,
        357116400000,
        372837600000,
        388566000000,
        404892000000,
        420015600000,
        436341600000,
        452070000000,
        467791200000,
        483519600000,
        499240800000,
        514969200000,
        530690400000,
        544604400000,
        562140000000,
        576054000000,
        594194400000,
        607503600000,
        625644000000,
        638953200000,
        657093600000,
        671007600000,
        688543200000,
        702457200000,
        719992800000,
        733906800000,
        752047200000,
        765356400000,
        783496800000,
        796806000000,
        814946400000,
        828860400000,
        846396000000,
        860310000000,
        877845600000,
        891759600000,
        909295200000,
        923209200000,
        941349600000,
        954658800000,
        972799200000,
        986108400000,
        1004248800000,
        1018162800000,
        1035698400000,
        1049612400000,
        1067148000000,
        1081062000000,
        1099202400000,
        1112511600000,
        1130652000000,
        1143961200000,
        1162101600000,
        1173596400000,
        1194156000000,
        1205046000000,
        1225605600000,
        1236495600000,
        1257055200000,
        1268550000000,
        1289109600000,
        1299999600000,
        1320559200000,
        1331449200000,
        1352008800000,
        1362898800000,
        1383458400000,
        1394348400000,
        1414908000000,
        1425798000000,
        1446357600000,
        1457852400000,
        1478412000000,
        1489302000000,
        1509861600000,
        1520751600000,
        1541311200000,
        1552201200000,
        1572760800000,
        1583650800000,
        1604210400000,
        1615705200000,
        1636264800000,
        1647154800000,
        1667714400000,
        1678604400000,
        1699164000000,
        1710054000000,
        1730613600000,
        1741503600000,
        1762063200000,
        1772953200000,
        1793512800000,
        1805007600000,
        1825567200000,
        1836457200000,
        1857016800000,
        1867906800000,
        1888466400000,
        1899356400000,
        1919916000000,
        1930806000000,
        1951365600000,
        1962860400000,
        1983420000000,
        1994310000000,
        2014869600000,
        2025759600000,
        2046319200000,
        2057209200000,
        2077768800000,
        2088658800000,
        2109218400000,
        2120108400000,
        2140668000000,
        null
      ],
      "offsets": [
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        240,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300
      ]
    },
    {
      "name": "America/Montserrat",
      "abbrs": [
        "LMT",
        "AST"
      ],
      "untils": [
        -1825098836000,
        null
      ],
      "offsets": [
        246.0667,
        240
      ]
    },
    {
      "name": "America/Nassau",
      "abbrs": [
        "LMT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST"
      ],
      "untils": [
        -1825095030000,
        -179341200000,
        -163620000000,
        -147891600000,
        -131565600000,
        -116442000000,
        -100116000000,
        -84387600000,
        -68666400000,
        -52938000000,
        -37216800000,
        -21488400000,
        -5767200000,
        9961200000,
        25682400000,
        41410800000,
        57736800000,
        73465200000,
        89186400000,
        104914800000,
        120636000000,
        136364400000,
        152085600000,
        167814000000,
        183535200000,
        199263600000,
        215589600000,
        230713200000,
        247039200000,
        262767600000,
        278488800000,
        294217200000,
        309938400000,
        325666800000,
        341388000000,
        357116400000,
        372837600000,
        388566000000,
        404892000000,
        420015600000,
        436341600000,
        452070000000,
        467791200000,
        483519600000,
        499240800000,
        514969200000,
        530690400000,
        544604400000,
        562140000000,
        576054000000,
        594194400000,
        607503600000,
        625644000000,
        638953200000,
        657093600000,
        671007600000,
        688543200000,
        702457200000,
        719992800000,
        733906800000,
        752047200000,
        765356400000,
        783496800000,
        796806000000,
        814946400000,
        828860400000,
        846396000000,
        860310000000,
        877845600000,
        891759600000,
        909295200000,
        923209200000,
        941349600000,
        954658800000,
        972799200000,
        986108400000,
        1004248800000,
        1018162800000,
        1035698400000,
        1049612400000,
        1067148000000,
        1081062000000,
        1099202400000,
        1112511600000,
        1130652000000,
        1143961200000,
        1162101600000,
        1173596400000,
        1194156000000,
        1205046000000,
        1225605600000,
        1236495600000,
        1257055200000,
        1268550000000,
        1289109600000,
        1299999600000,
        1320559200000,
        1331449200000,
        1352008800000,
        1362898800000,
        1383458400000,
        1394348400000,
        1414908000000,
        1425798000000,
        1446357600000,
        1457852400000,
        1478412000000,
        1489302000000,
        1509861600000,
        1520751600000,
        1541311200000,
        1552201200000,
        1572760800000,
        1583650800000,
        1604210400000,
        1615705200000,
        1636264800000,
        1647154800000,
        1667714400000,
        1678604400000,
        1699164000000,
        1710054000000,
        1730613600000,
        1741503600000,
        1762063200000,
        1772953200000,
        1793512800000,
        1805007600000,
        1825567200000,
        1836457200000,
        1857016800000,
        1867906800000,
        1888466400000,
        1899356400000,
        1919916000000,
        1930806000000,
        1951365600000,
        1962860400000,
        1983420000000,
        1994310000000,
        2014869600000,
        2025759600000,
        2046319200000,
        2057209200000,
        2077768800000,
        2088658800000,
        2109218400000,
        2120108400000,
        2140668000000,
        null
      ],
      "offsets": [
        309.5,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300
      ]
    },
    {
      "name": "America/New_York",
      "abbrs": [
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EWT",
        "EPT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST"
      ],
      "untils": [
        -1633280400000,
        -1615140000000,
        -1601830800000,
        -1583690400000,
        -1570381200000,
        -1551636000000,
        -1536512400000,
        -1523210400000,
        -1504458000000,
        -1491760800000,
        -1473008400000,
        -1459706400000,
        -1441558800000,
        -1428256800000,
        -1410109200000,
        -1396807200000,
        -1378659600000,
        -1365357600000,
        -1347210000000,
        -1333908000000,
        -1315155600000,
        -1301853600000,
        -1283706000000,
        -1270404000000,
        -1252256400000,
        -1238954400000,
        -1220806800000,
        -1207504800000,
        -1189357200000,
        -1176055200000,
        -1157302800000,
        -1144605600000,
        -1125853200000,
        -1112551200000,
        -1094403600000,
        -1081101600000,
        -1062954000000,
        -1049652000000,
        -1031504400000,
        -1018202400000,
        -1000054800000,
        -986752800000,
        -968000400000,
        -955303200000,
        -936550800000,
        -923248800000,
        -905101200000,
        -891799200000,
        -880218000000,
        -769395600000,
        -765396000000,
        -747248400000,
        -733946400000,
        -715798800000,
        -702496800000,
        -684349200000,
        -671047200000,
        -652899600000,
        -639597600000,
        -620845200000,
        -608148000000,
        -589395600000,
        -576093600000,
        -557946000000,
        -544644000000,
        -526496400000,
        -513194400000,
        -495046800000,
        -481744800000,
        -463597200000,
        -447271200000,
        -431542800000,
        -415821600000,
        -400093200000,
        -384372000000,
        -368643600000,
        -352922400000,
        -337194000000,
        -321472800000,
        -305744400000,
        -289418400000,
        -273690000000,
        -257968800000,
        -242240400000,
        -226519200000,
        -210790800000,
        -195069600000,
        -179341200000,
        -163620000000,
        -147891600000,
        -131565600000,
        -116442000000,
        -100116000000,
        -84387600000,
        -68666400000,
        -52938000000,
        -37216800000,
        -21488400000,
        -5767200000,
        9961200000,
        25682400000,
        41410800000,
        57736800000,
        73465200000,
        89186400000,
        104914800000,
        120636000000,
        126687600000,
        152085600000,
        162370800000,
        183535200000,
        199263600000,
        215589600000,
        230713200000,
        247039200000,
        262767600000,
        278488800000,
        294217200000,
        309938400000,
        325666800000,
        341388000000,
        357116400000,
        372837600000,
        388566000000,
        404892000000,
        420015600000,
        436341600000,
        452070000000,
        467791200000,
        483519600000,
        499240800000,
        514969200000,
        530690400000,
        544604400000,
        562140000000,
        576054000000,
        594194400000,
        607503600000,
        625644000000,
        638953200000,
        657093600000,
        671007600000,
        688543200000,
        702457200000,
        719992800000,
        733906800000,
        752047200000,
        765356400000,
        783496800000,
        796806000000,
        814946400000,
        828860400000,
        846396000000,
        860310000000,
        877845600000,
        891759600000,
        909295200000,
        923209200000,
        941349600000,
        954658800000,
        972799200000,
        986108400000,
        1004248800000,
        1018162800000,
        1035698400000,
        1049612400000,
        1067148000000,
        1081062000000,
        1099202400000,
        1112511600000,
        1130652000000,
        1143961200000,
        1162101600000,
        1173596400000,
        1194156000000,
        1205046000000,
        1225605600000,
        1236495600000,
        1257055200000,
        1268550000000,
        1289109600000,
        1299999600000,
        1320559200000,
        1331449200000,
        1352008800000,
        1362898800000,
        1383458400000,
        1394348400000,
        1414908000000,
        1425798000000,
        1446357600000,
        1457852400000,
        1478412000000,
        1489302000000,
        1509861600000,
        1520751600000,
        1541311200000,
        1552201200000,
        1572760800000,
        1583650800000,
        1604210400000,
        1615705200000,
        1636264800000,
        1647154800000,
        1667714400000,
        1678604400000,
        1699164000000,
        1710054000000,
        1730613600000,
        1741503600000,
        1762063200000,
        1772953200000,
        1793512800000,
        1805007600000,
        1825567200000,
        1836457200000,
        1857016800000,
        1867906800000,
        1888466400000,
        1899356400000,
        1919916000000,
        1930806000000,
        1951365600000,
        1962860400000,
        1983420000000,
        1994310000000,
        2014869600000,
        2025759600000,
        2046319200000,
        2057209200000,
        2077768800000,
        2088658800000,
        2109218400000,
        2120108400000,
        2140668000000,
        null
      ],
      "offsets": [
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300
      ]
    },
    {
      "name": "America/Nipigon",
      "abbrs": [
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EWT",
        "EPT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST"
      ],
      "untils": [
        -1632070800000,
        -1615140000000,
        -923252400000,
        -880218000000,
        -769395600000,
        -765396000000,
        136364400000,
        152085600000,
        167814000000,
        183535200000,
        199263600000,
        215589600000,
        230713200000,
        247039200000,
        262767600000,
        278488800000,
        294217200000,
        309938400000,
        325666800000,
        341388000000,
        357116400000,
        372837600000,
        388566000000,
        404892000000,
        420015600000,
        436341600000,
        452070000000,
        467791200000,
        483519600000,
        499240800000,
        514969200000,
        530690400000,
        544604400000,
        562140000000,
        576054000000,
        594194400000,
        607503600000,
        625644000000,
        638953200000,
        657093600000,
        671007600000,
        688543200000,
        702457200000,
        719992800000,
        733906800000,
        752047200000,
        765356400000,
        783496800000,
        796806000000,
        814946400000,
        828860400000,
        846396000000,
        860310000000,
        877845600000,
        891759600000,
        909295200000,
        923209200000,
        941349600000,
        954658800000,
        972799200000,
        986108400000,
        1004248800000,
        1018162800000,
        1035698400000,
        1049612400000,
        1067148000000,
        1081062000000,
        1099202400000,
        1112511600000,
        1130652000000,
        1143961200000,
        1162101600000,
        1173596400000,
        1194156000000,
        1205046000000,
        1225605600000,
        1236495600000,
        1257055200000,
        1268550000000,
        1289109600000,
        1299999600000,
        1320559200000,
        1331449200000,
        1352008800000,
        1362898800000,
        1383458400000,
        1394348400000,
        1414908000000,
        1425798000000,
        1446357600000,
        1457852400000,
        1478412000000,
        1489302000000,
        1509861600000,
        1520751600000,
        1541311200000,
        1552201200000,
        1572760800000,
        1583650800000,
        1604210400000,
        1615705200000,
        1636264800000,
        1647154800000,
        1667714400000,
        1678604400000,
        1699164000000,
        1710054000000,
        1730613600000,
        1741503600000,
        1762063200000,
        1772953200000,
        1793512800000,
        1805007600000,
        1825567200000,
        1836457200000,
        1857016800000,
        1867906800000,
        1888466400000,
        1899356400000,
        1919916000000,
        1930806000000,
        1951365600000,
        1962860400000,
        1983420000000,
        1994310000000,
        2014869600000,
        2025759600000,
        2046319200000,
        2057209200000,
        2077768800000,
        2088658800000,
        2109218400000,
        2120108400000,
        2140668000000,
        null
      ],
      "offsets": [
        300,
        240,
        300,
        240,
        240,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300
      ]
    },
    {
      "name": "America/Nome",
      "abbrs": [
        "NST",
        "NWT",
        "NPT",
        "NST",
        "BST",
        "BDT",
        "BST",
        "BDT",
        "BST",
        "BDT",
        "BST",
        "BDT",
        "BST",
        "BDT",
        "BST",
        "BDT",
        "BST",
        "BDT",
        "BST",
        "BDT",
        "BST",
        "BDT",
        "BST",
        "BDT",
        "BST",
        "BDT",
        "BST",
        "BDT",
        "BST",
        "BDT",
        "BST",
        "BDT",
        "BST",
        "BDT",
        "YST",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST"
      ],
      "untils": [
        -880196400000,
        -769395600000,
        -765374400000,
        -86878800000,
        -21466800000,
        -5745600000,
        9982800000,
        25704000000,
        41432400000,
        57758400000,
        73486800000,
        89208000000,
        104936400000,
        120657600000,
        126709200000,
        152107200000,
        162392400000,
        183556800000,
        199285200000,
        215611200000,
        230734800000,
        247060800000,
        262789200000,
        278510400000,
        294238800000,
        309960000000,
        325688400000,
        341409600000,
        357138000000,
        372859200000,
        388587600000,
        404913600000,
        420037200000,
        436363200000,
        439030800000,
        452084400000,
        467805600000,
        483534000000,
        499255200000,
        514983600000,
        530704800000,
        544618800000,
        562154400000,
        576068400000,
        594208800000,
        607518000000,
        625658400000,
        638967600000,
        657108000000,
        671022000000,
        688557600000,
        702471600000,
        720007200000,
        733921200000,
        752061600000,
        765370800000,
        783511200000,
        796820400000,
        814960800000,
        828874800000,
        846410400000,
        860324400000,
        877860000000,
        891774000000,
        909309600000,
        923223600000,
        941364000000,
        954673200000,
        972813600000,
        986122800000,
        1004263200000,
        1018177200000,
        1035712800000,
        1049626800000,
        1067162400000,
        1081076400000,
        1099216800000,
        1112526000000,
        1130666400000,
        1143975600000,
        1162116000000,
        1173610800000,
        1194170400000,
        1205060400000,
        1225620000000,
        1236510000000,
        1257069600000,
        1268564400000,
        1289124000000,
        1300014000000,
        1320573600000,
        1331463600000,
        1352023200000,
        1362913200000,
        1383472800000,
        1394362800000,
        1414922400000,
        1425812400000,
        1446372000000,
        1457866800000,
        1478426400000,
        1489316400000,
        1509876000000,
        1520766000000,
        1541325600000,
        1552215600000,
        1572775200000,
        1583665200000,
        1604224800000,
        1615719600000,
        1636279200000,
        1647169200000,
        1667728800000,
        1678618800000,
        1699178400000,
        1710068400000,
        1730628000000,
        1741518000000,
        1762077600000,
        1772967600000,
        1793527200000,
        1805022000000,
        1825581600000,
        1836471600000,
        1857031200000,
        1867921200000,
        1888480800000,
        1899370800000,
        1919930400000,
        1930820400000,
        1951380000000,
        1962874800000,
        1983434400000,
        1994324400000,
        2014884000000,
        2025774000000,
        2046333600000,
        2057223600000,
        2077783200000,
        2088673200000,
        2109232800000,
        2120122800000,
        2140682400000,
        null
      ],
      "offsets": [
        660,
        600,
        600,
        660,
        660,
        600,
        660,
        600,
        660,
        600,
        660,
        600,
        660,
        600,
        660,
        600,
        660,
        600,
        660,
        600,
        660,
        600,
        660,
        600,
        660,
        600,
        660,
        600,
        660,
        600,
        660,
        600,
        660,
        600,
        540,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540
      ]
    },
    {
      "name": "America/Noronha",
      "abbrs": [
        "LMT",
        "FNT",
        "FNST",
        "FNT",
        "FNST",
        "FNT",
        "FNST",
        "FNT",
        "FNST",
        "FNT",
        "FNST",
        "FNT",
        "FNST",
        "FNT",
        "FNST",
        "FNT",
        "FNST",
        "FNT",
        "FNST",
        "FNT",
        "FNST",
        "FNT",
        "FNST",
        "FNT",
        "FNST",
        "FNT",
        "FNST",
        "FNT",
        "FNST",
        "FNT",
        "FNST",
        "FNT",
        "FNST",
        "FNT",
        "FNST",
        "FNT",
        "FNST",
        "FNT",
        "FNST",
        "FNT"
      ],
      "untils": [
        -1767217820000,
        -1206961200000,
        -1191366000000,
        -1175378400000,
        -1159830000000,
        -633823200000,
        -622072800000,
        -602287200000,
        -591836400000,
        -570751200000,
        -560214000000,
        -539128800000,
        -531356400000,
        -191368800000,
        -184201200000,
        -155167200000,
        -150073200000,
        -128901600000,
        -121129200000,
        -99957600000,
        -89593200000,
        -68421600000,
        -57970800000,
        499744800000,
        511232400000,
        530589600000,
        540262800000,
        562125600000,
        571194000000,
        592970400000,
        602038800000,
        624420000000,
        634698000000,
        938916000000,
        951613200000,
        970970400000,
        971571600000,
        1003024800000,
        1013907600000,
        null
      ],
      "offsets": [
        129.6667,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120
      ]
    },
    {
      "name": "America/North_Dakota/Beulah",
      "abbrs": [
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MWT",
        "MPT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST"
      ],
      "untils": [
        -1633273200000,
        -1615132800000,
        -1601823600000,
        -1583683200000,
        -880210800000,
        -769395600000,
        -765388800000,
        -84380400000,
        -68659200000,
        -52930800000,
        -37209600000,
        -21481200000,
        -5760000000,
        9968400000,
        25689600000,
        41418000000,
        57744000000,
        73472400000,
        89193600000,
        104922000000,
        120643200000,
        126694800000,
        152092800000,
        162378000000,
        183542400000,
        199270800000,
        215596800000,
        230720400000,
        247046400000,
        262774800000,
        278496000000,
        294224400000,
        309945600000,
        325674000000,
        341395200000,
        357123600000,
        372844800000,
        388573200000,
        404899200000,
        420022800000,
        436348800000,
        452077200000,
        467798400000,
        483526800000,
        499248000000,
        514976400000,
        530697600000,
        544611600000,
        562147200000,
        576061200000,
        594201600000,
        607510800000,
        625651200000,
        638960400000,
        657100800000,
        671014800000,
        688550400000,
        702464400000,
        720000000000,
        733914000000,
        752054400000,
        765363600000,
        783504000000,
        796813200000,
        814953600000,
        828867600000,
        846403200000,
        860317200000,
        877852800000,
        891766800000,
        909302400000,
        923216400000,
        941356800000,
        954666000000,
        972806400000,
        986115600000,
        1004256000000,
        1018170000000,
        1035705600000,
        1049619600000,
        1067155200000,
        1081069200000,
        1099209600000,
        1112518800000,
        1130659200000,
        1143968400000,
        1162108800000,
        1173603600000,
        1194163200000,
        1205053200000,
        1225612800000,
        1236502800000,
        1257062400000,
        1268557200000,
        1289116800000,
        1300003200000,
        1320562800000,
        1331452800000,
        1352012400000,
        1362902400000,
        1383462000000,
        1394352000000,
        1414911600000,
        1425801600000,
        1446361200000,
        1457856000000,
        1478415600000,
        1489305600000,
        1509865200000,
        1520755200000,
        1541314800000,
        1552204800000,
        1572764400000,
        1583654400000,
        1604214000000,
        1615708800000,
        1636268400000,
        1647158400000,
        1667718000000,
        1678608000000,
        1699167600000,
        1710057600000,
        1730617200000,
        1741507200000,
        1762066800000,
        1772956800000,
        1793516400000,
        1805011200000,
        1825570800000,
        1836460800000,
        1857020400000,
        1867910400000,
        1888470000000,
        1899360000000,
        1919919600000,
        1930809600000,
        1951369200000,
        1962864000000,
        1983423600000,
        1994313600000,
        2014873200000,
        2025763200000,
        2046322800000,
        2057212800000,
        2077772400000,
        2088662400000,
        2109222000000,
        2120112000000,
        2140671600000,
        null
      ],
      "offsets": [
        420,
        360,
        420,
        360,
        420,
        360,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360
      ]
    },
    {
      "name": "America/North_Dakota/Center",
      "abbrs": [
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MWT",
        "MPT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST"
      ],
      "untils": [
        -1633273200000,
        -1615132800000,
        -1601823600000,
        -1583683200000,
        -880210800000,
        -769395600000,
        -765388800000,
        -84380400000,
        -68659200000,
        -52930800000,
        -37209600000,
        -21481200000,
        -5760000000,
        9968400000,
        25689600000,
        41418000000,
        57744000000,
        73472400000,
        89193600000,
        104922000000,
        120643200000,
        126694800000,
        152092800000,
        162378000000,
        183542400000,
        199270800000,
        215596800000,
        230720400000,
        247046400000,
        262774800000,
        278496000000,
        294224400000,
        309945600000,
        325674000000,
        341395200000,
        357123600000,
        372844800000,
        388573200000,
        404899200000,
        420022800000,
        436348800000,
        452077200000,
        467798400000,
        483526800000,
        499248000000,
        514976400000,
        530697600000,
        544611600000,
        562147200000,
        576061200000,
        594201600000,
        607510800000,
        625651200000,
        638960400000,
        657100800000,
        671014800000,
        688550400000,
        702464400000,
        720000000000,
        733910400000,
        752050800000,
        765360000000,
        783500400000,
        796809600000,
        814950000000,
        828864000000,
        846399600000,
        860313600000,
        877849200000,
        891763200000,
        909298800000,
        923212800000,
        941353200000,
        954662400000,
        972802800000,
        986112000000,
        1004252400000,
        1018166400000,
        1035702000000,
        1049616000000,
        1067151600000,
        1081065600000,
        1099206000000,
        1112515200000,
        1130655600000,
        1143964800000,
        1162105200000,
        1173600000000,
        1194159600000,
        1205049600000,
        1225609200000,
        1236499200000,
        1257058800000,
        1268553600000,
        1289113200000,
        1300003200000,
        1320562800000,
        1331452800000,
        1352012400000,
        1362902400000,
        1383462000000,
        1394352000000,
        1414911600000,
        1425801600000,
        1446361200000,
        1457856000000,
        1478415600000,
        1489305600000,
        1509865200000,
        1520755200000,
        1541314800000,
        1552204800000,
        1572764400000,
        1583654400000,
        1604214000000,
        1615708800000,
        1636268400000,
        1647158400000,
        1667718000000,
        1678608000000,
        1699167600000,
        1710057600000,
        1730617200000,
        1741507200000,
        1762066800000,
        1772956800000,
        1793516400000,
        1805011200000,
        1825570800000,
        1836460800000,
        1857020400000,
        1867910400000,
        1888470000000,
        1899360000000,
        1919919600000,
        1930809600000,
        1951369200000,
        1962864000000,
        1983423600000,
        1994313600000,
        2014873200000,
        2025763200000,
        2046322800000,
        2057212800000,
        2077772400000,
        2088662400000,
        2109222000000,
        2120112000000,
        2140671600000,
        null
      ],
      "offsets": [
        420,
        360,
        420,
        360,
        420,
        360,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360
      ]
    },
    {
      "name": "America/North_Dakota/New_Salem",
      "abbrs": [
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MWT",
        "MPT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST"
      ],
      "untils": [
        -1633273200000,
        -1615132800000,
        -1601823600000,
        -1583683200000,
        -880210800000,
        -769395600000,
        -765388800000,
        -84380400000,
        -68659200000,
        -52930800000,
        -37209600000,
        -21481200000,
        -5760000000,
        9968400000,
        25689600000,
        41418000000,
        57744000000,
        73472400000,
        89193600000,
        104922000000,
        120643200000,
        126694800000,
        152092800000,
        162378000000,
        183542400000,
        199270800000,
        215596800000,
        230720400000,
        247046400000,
        262774800000,
        278496000000,
        294224400000,
        309945600000,
        325674000000,
        341395200000,
        357123600000,
        372844800000,
        388573200000,
        404899200000,
        420022800000,
        436348800000,
        452077200000,
        467798400000,
        483526800000,
        499248000000,
        514976400000,
        530697600000,
        544611600000,
        562147200000,
        576061200000,
        594201600000,
        607510800000,
        625651200000,
        638960400000,
        657100800000,
        671014800000,
        688550400000,
        702464400000,
        720000000000,
        733914000000,
        752054400000,
        765363600000,
        783504000000,
        796813200000,
        814953600000,
        828867600000,
        846403200000,
        860317200000,
        877852800000,
        891766800000,
        909302400000,
        923216400000,
        941356800000,
        954666000000,
        972806400000,
        986115600000,
        1004256000000,
        1018170000000,
        1035705600000,
        1049619600000,
        1067155200000,
        1081065600000,
        1099206000000,
        1112515200000,
        1130655600000,
        1143964800000,
        1162105200000,
        1173600000000,
        1194159600000,
        1205049600000,
        1225609200000,
        1236499200000,
        1257058800000,
        1268553600000,
        1289113200000,
        1300003200000,
        1320562800000,
        1331452800000,
        1352012400000,
        1362902400000,
        1383462000000,
        1394352000000,
        1414911600000,
        1425801600000,
        1446361200000,
        1457856000000,
        1478415600000,
        1489305600000,
        1509865200000,
        1520755200000,
        1541314800000,
        1552204800000,
        1572764400000,
        1583654400000,
        1604214000000,
        1615708800000,
        1636268400000,
        1647158400000,
        1667718000000,
        1678608000000,
        1699167600000,
        1710057600000,
        1730617200000,
        1741507200000,
        1762066800000,
        1772956800000,
        1793516400000,
        1805011200000,
        1825570800000,
        1836460800000,
        1857020400000,
        1867910400000,
        1888470000000,
        1899360000000,
        1919919600000,
        1930809600000,
        1951369200000,
        1962864000000,
        1983423600000,
        1994313600000,
        2014873200000,
        2025763200000,
        2046322800000,
        2057212800000,
        2077772400000,
        2088662400000,
        2109222000000,
        2120112000000,
        2140671600000,
        null
      ],
      "offsets": [
        420,
        360,
        420,
        360,
        420,
        360,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360
      ]
    },
    {
      "name": "America/Ojinaga",
      "abbrs": [
        "LMT",
        "MST",
        "CST",
        "MST",
        "CST",
        "MST",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST"
      ],
      "untils": [
        -1514739600000,
        -1343066400000,
        -1234807200000,
        -1220292000000,
        -1207159200000,
        -1191344400000,
        828864000000,
        846399600000,
        860313600000,
        877849200000,
        891766800000,
        909302400000,
        923216400000,
        941356800000,
        954666000000,
        972806400000,
        989139600000,
        1001836800000,
        1018170000000,
        1035705600000,
        1049619600000,
        1067155200000,
        1081069200000,
        1099209600000,
        1112518800000,
        1130659200000,
        1143968400000,
        1162108800000,
        1175418000000,
        1193558400000,
        1207472400000,
        1225008000000,
        1238922000000,
        1256457600000,
        1268557200000,
        1289116800000,
        1300006800000,
        1320566400000,
        1331456400000,
        1352016000000,
        1362906000000,
        1383465600000,
        1394355600000,
        1414915200000,
        1425805200000,
        1446364800000,
        1457859600000,
        1478419200000,
        1489309200000,
        1509868800000,
        1520758800000,
        1541318400000,
        1552208400000,
        1572768000000,
        1583658000000,
        1604217600000,
        1615712400000,
        1636272000000,
        1647162000000,
        1667721600000,
        1678611600000,
        1699171200000,
        1710061200000,
        1730620800000,
        1741510800000,
        1762070400000,
        1772960400000,
        1793520000000,
        1805014800000,
        1825574400000,
        1836464400000,
        1857024000000,
        1867914000000,
        1888473600000,
        1899363600000,
        1919923200000,
        1930813200000,
        1951372800000,
        1962867600000,
        1983427200000,
        1994317200000,
        2014876800000,
        2025766800000,
        2046326400000,
        2057216400000,
        2077776000000,
        2088666000000,
        2109225600000,
        2120115600000,
        2140675200000,
        null
      ],
      "offsets": [
        417.6667,
        420,
        360,
        420,
        360,
        420,
        360,
        300,
        360,
        300,
        360,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420
      ]
    },
    {
      "name": "America/Panama",
      "abbrs": [
        "CMT",
        "EST"
      ],
      "untils": [
        -1946918424000,
        null
      ],
      "offsets": [
        319.6,
        300
      ]
    },
    {
      "name": "America/Pangnirtung",
      "abbrs": [
        "zzz",
        "AST",
        "AWT",
        "APT",
        "AST",
        "ADDT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "CST",
        "CDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST"
      ],
      "untils": [
        -1546300800000,
        -880221600000,
        -769395600000,
        -765399600000,
        -147902400000,
        -131572800000,
        325663200000,
        341384400000,
        357112800000,
        372834000000,
        388562400000,
        404888400000,
        420012000000,
        436338000000,
        452066400000,
        467787600000,
        483516000000,
        499237200000,
        514965600000,
        530686800000,
        544600800000,
        562136400000,
        576050400000,
        594190800000,
        607500000000,
        625640400000,
        638949600000,
        657090000000,
        671004000000,
        688539600000,
        702453600000,
        719989200000,
        733903200000,
        752043600000,
        765352800000,
        783493200000,
        796802400000,
        814946400000,
        828860400000,
        846396000000,
        860310000000,
        877845600000,
        891759600000,
        909295200000,
        923209200000,
        941349600000,
        954662400000,
        972802800000,
        986108400000,
        1004248800000,
        1018162800000,
        1035698400000,
        1049612400000,
        1067148000000,
        1081062000000,
        1099202400000,
        1112511600000,
        1130652000000,
        1143961200000,
        1162101600000,
        1173596400000,
        1194156000000,
        1205046000000,
        1225605600000,
        1236495600000,
        1257055200000,
        1268550000000,
        1289109600000,
        1299999600000,
        1320559200000,
        1331449200000,
        1352008800000,
        1362898800000,
        1383458400000,
        1394348400000,
        1414908000000,
        1425798000000,
        1446357600000,
        1457852400000,
        1478412000000,
        1489302000000,
        1509861600000,
        1520751600000,
        1541311200000,
        1552201200000,
        1572760800000,
        1583650800000,
        1604210400000,
        1615705200000,
        1636264800000,
        1647154800000,
        1667714400000,
        1678604400000,
        1699164000000,
        1710054000000,
        1730613600000,
        1741503600000,
        1762063200000,
        1772953200000,
        1793512800000,
        1805007600000,
        1825567200000,
        1836457200000,
        1857016800000,
        1867906800000,
        1888466400000,
        1899356400000,
        1919916000000,
        1930806000000,
        1951365600000,
        1962860400000,
        1983420000000,
        1994310000000,
        2014869600000,
        2025759600000,
        2046319200000,
        2057209200000,
        2077768800000,
        2088658800000,
        2109218400000,
        2120108400000,
        2140668000000,
        null
      ],
      "offsets": [
        0,
        240,
        180,
        180,
        240,
        120,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        360,
        300,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300
      ]
    },
    {
      "name": "America/Paramaribo",
      "abbrs": [
        "LMT",
        "PMT",
        "PMT",
        "NEGT",
        "SRT",
        "SRT"
      ],
      "untils": [
        -1861906760000,
        -1104524348000,
        -765317964000,
        185686200000,
        465449400000,
        null
      ],
      "offsets": [
        220.6667,
        220.8667,
        220.6,
        210,
        210,
        180
      ]
    },
    {
      "name": "America/Phoenix",
      "abbrs": [
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MWT",
        "MST",
        "MWT",
        "MST",
        "MDT",
        "MST"
      ],
      "untils": [
        -1633273200000,
        -1615132800000,
        -1601823600000,
        -1583683200000,
        -880210800000,
        -820519140000,
        -812653140000,
        -796845540000,
        -84380400000,
        -68659200000,
        null
      ],
      "offsets": [
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420
      ]
    },
    {
      "name": "America/Port-au-Prince",
      "abbrs": [
        "PPMT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST"
      ],
      "untils": [
        -1670483460000,
        421218000000,
        436334400000,
        452062800000,
        467784000000,
        483512400000,
        499233600000,
        514962000000,
        530683200000,
        546411600000,
        562132800000,
        576050400000,
        594194400000,
        607500000000,
        625644000000,
        638949600000,
        657093600000,
        671004000000,
        688543200000,
        702453600000,
        719992800000,
        733903200000,
        752047200000,
        765352800000,
        783496800000,
        796802400000,
        814946400000,
        828856800000,
        846396000000,
        860306400000,
        877845600000,
        1112504400000,
        1130644800000,
        1143954000000,
        1162094400000,
        1331449200000,
        1352008800000,
        1362898800000,
        1383458400000,
        1394348400000,
        1414908000000,
        1425798000000,
        1446357600000,
        1457852400000,
        1478412000000,
        1489302000000,
        1509861600000,
        1520751600000,
        1541311200000,
        1552201200000,
        1572760800000,
        1583650800000,
        1604210400000,
        1615705200000,
        1636264800000,
        1647154800000,
        1667714400000,
        1678604400000,
        1699164000000,
        1710054000000,
        1730613600000,
        1741503600000,
        1762063200000,
        1772953200000,
        1793512800000,
        1805007600000,
        1825567200000,
        1836457200000,
        1857016800000,
        1867906800000,
        1888466400000,
        1899356400000,
        1919916000000,
        1930806000000,
        1951365600000,
        1962860400000,
        1983420000000,
        1994310000000,
        2014869600000,
        2025759600000,
        2046319200000,
        2057209200000,
        2077768800000,
        2088658800000,
        2109218400000,
        2120108400000,
        2140668000000,
        null
      ],
      "offsets": [
        289,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300
      ]
    },
    {
      "name": "America/Port_of_Spain",
      "abbrs": [
        "LMT",
        "AST"
      ],
      "untils": [
        -1825098836000,
        null
      ],
      "offsets": [
        246.0667,
        240
      ]
    },
    {
      "name": "America/Porto_Acre",
      "abbrs": [
        "LMT",
        "ACT",
        "ACST",
        "ACT",
        "ACST",
        "ACT",
        "ACST",
        "ACT",
        "ACST",
        "ACT",
        "ACST",
        "ACT",
        "ACST",
        "ACT",
        "ACST",
        "ACT",
        "ACST",
        "ACT",
        "ACST",
        "ACT",
        "ACST",
        "ACT",
        "ACST",
        "ACT",
        "ACST",
        "ACT",
        "ACST",
        "ACT",
        "ACST",
        "ACT",
        "AMT",
        "ACT"
      ],
      "untils": [
        -1767209328000,
        -1206950400000,
        -1191355200000,
        -1175367600000,
        -1159819200000,
        -633812400000,
        -622062000000,
        -602276400000,
        -591825600000,
        -570740400000,
        -560203200000,
        -539118000000,
        -531345600000,
        -191358000000,
        -184190400000,
        -155156400000,
        -150062400000,
        -128890800000,
        -121118400000,
        -99946800000,
        -89582400000,
        -68410800000,
        -57960000000,
        499755600000,
        511243200000,
        530600400000,
        540273600000,
        562136400000,
        571204800000,
        1214283600000,
        1384056000000,
        null
      ],
      "offsets": [
        271.2,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300
      ]
    },
    {
      "name": "America/Porto_Velho",
      "abbrs": [
        "LMT",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT"
      ],
      "untils": [
        -1767210264000,
        -1206954000000,
        -1191358800000,
        -1175371200000,
        -1159822800000,
        -633816000000,
        -622065600000,
        -602280000000,
        -591829200000,
        -570744000000,
        -560206800000,
        -539121600000,
        -531349200000,
        -191361600000,
        -184194000000,
        -155160000000,
        -150066000000,
        -128894400000,
        -121122000000,
        -99950400000,
        -89586000000,
        -68414400000,
        -57963600000,
        499752000000,
        511239600000,
        530596800000,
        540270000000,
        562132800000,
        571201200000,
        null
      ],
      "offsets": [
        255.6,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240
      ]
    },
    {
      "name": "America/Puerto_Rico",
      "abbrs": [
        "AST",
        "AWT",
        "APT",
        "AST"
      ],
      "untils": [
        -873057600000,
        -769395600000,
        -765399600000,
        null
      ],
      "offsets": [
        240,
        180,
        180,
        240
      ]
    },
    {
      "name": "America/Rainy_River",
      "abbrs": [
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CWT",
        "CPT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST"
      ],
      "untils": [
        -1632067200000,
        -1615136400000,
        -923248800000,
        -880214400000,
        -769395600000,
        -765392400000,
        136368000000,
        152089200000,
        167817600000,
        183538800000,
        199267200000,
        215593200000,
        230716800000,
        247042800000,
        262771200000,
        278492400000,
        294220800000,
        309942000000,
        325670400000,
        341391600000,
        357120000000,
        372841200000,
        388569600000,
        404895600000,
        420019200000,
        436345200000,
        452073600000,
        467794800000,
        483523200000,
        499244400000,
        514972800000,
        530694000000,
        544608000000,
        562143600000,
        576057600000,
        594198000000,
        607507200000,
        625647600000,
        638956800000,
        657097200000,
        671011200000,
        688546800000,
        702460800000,
        719996400000,
        733910400000,
        752050800000,
        765360000000,
        783500400000,
        796809600000,
        814950000000,
        828864000000,
        846399600000,
        860313600000,
        877849200000,
        891763200000,
        909298800000,
        923212800000,
        941353200000,
        954662400000,
        972802800000,
        986112000000,
        1004252400000,
        1018166400000,
        1035702000000,
        1049616000000,
        1067151600000,
        1081065600000,
        1099206000000,
        1112515200000,
        1130655600000,
        1143964800000,
        1162105200000,
        1173600000000,
        1194159600000,
        1205049600000,
        1225609200000,
        1236499200000,
        1257058800000,
        1268553600000,
        1289113200000,
        1300003200000,
        1320562800000,
        1331452800000,
        1352012400000,
        1362902400000,
        1383462000000,
        1394352000000,
        1414911600000,
        1425801600000,
        1446361200000,
        1457856000000,
        1478415600000,
        1489305600000,
        1509865200000,
        1520755200000,
        1541314800000,
        1552204800000,
        1572764400000,
        1583654400000,
        1604214000000,
        1615708800000,
        1636268400000,
        1647158400000,
        1667718000000,
        1678608000000,
        1699167600000,
        1710057600000,
        1730617200000,
        1741507200000,
        1762066800000,
        1772956800000,
        1793516400000,
        1805011200000,
        1825570800000,
        1836460800000,
        1857020400000,
        1867910400000,
        1888470000000,
        1899360000000,
        1919919600000,
        1930809600000,
        1951369200000,
        1962864000000,
        1983423600000,
        1994313600000,
        2014873200000,
        2025763200000,
        2046322800000,
        2057212800000,
        2077772400000,
        2088662400000,
        2109222000000,
        2120112000000,
        2140671600000,
        null
      ],
      "offsets": [
        360,
        300,
        360,
        300,
        300,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360
      ]
    },
    {
      "name": "America/Rankin_Inlet",
      "abbrs": [
        "zzz",
        "CST",
        "CDDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "EST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST"
      ],
      "untils": [
        -410227200000,
        -147895200000,
        -131565600000,
        325670400000,
        341391600000,
        357120000000,
        372841200000,
        388569600000,
        404895600000,
        420019200000,
        436345200000,
        452073600000,
        467794800000,
        483523200000,
        499244400000,
        514972800000,
        530694000000,
        544608000000,
        562143600000,
        576057600000,
        594198000000,
        607507200000,
        625647600000,
        638956800000,
        657097200000,
        671011200000,
        688546800000,
        702460800000,
        719996400000,
        733910400000,
        752050800000,
        765360000000,
        783500400000,
        796809600000,
        814950000000,
        828864000000,
        846399600000,
        860313600000,
        877849200000,
        891763200000,
        909298800000,
        923212800000,
        941353200000,
        954662400000,
        972802800000,
        986112000000,
        1004252400000,
        1018166400000,
        1035702000000,
        1049616000000,
        1067151600000,
        1081065600000,
        1099206000000,
        1112515200000,
        1130655600000,
        1143964800000,
        1162105200000,
        1173600000000,
        1194159600000,
        1205049600000,
        1225609200000,
        1236499200000,
        1257058800000,
        1268553600000,
        1289113200000,
        1300003200000,
        1320562800000,
        1331452800000,
        1352012400000,
        1362902400000,
        1383462000000,
        1394352000000,
        1414911600000,
        1425801600000,
        1446361200000,
        1457856000000,
        1478415600000,
        1489305600000,
        1509865200000,
        1520755200000,
        1541314800000,
        1552204800000,
        1572764400000,
        1583654400000,
        1604214000000,
        1615708800000,
        1636268400000,
        1647158400000,
        1667718000000,
        1678608000000,
        1699167600000,
        1710057600000,
        1730617200000,
        1741507200000,
        1762066800000,
        1772956800000,
        1793516400000,
        1805011200000,
        1825570800000,
        1836460800000,
        1857020400000,
        1867910400000,
        1888470000000,
        1899360000000,
        1919919600000,
        1930809600000,
        1951369200000,
        1962864000000,
        1983423600000,
        1994313600000,
        2014873200000,
        2025763200000,
        2046322800000,
        2057212800000,
        2077772400000,
        2088662400000,
        2109222000000,
        2120112000000,
        2140671600000,
        null
      ],
      "offsets": [
        0,
        360,
        240,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        300,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360
      ]
    },
    {
      "name": "America/Recife",
      "abbrs": [
        "LMT",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT"
      ],
      "untils": [
        -1767217224000,
        -1206957600000,
        -1191362400000,
        -1175374800000,
        -1159826400000,
        -633819600000,
        -622069200000,
        -602283600000,
        -591832800000,
        -570747600000,
        -560210400000,
        -539125200000,
        -531352800000,
        -191365200000,
        -184197600000,
        -155163600000,
        -150069600000,
        -128898000000,
        -121125600000,
        -99954000000,
        -89589600000,
        -68418000000,
        -57967200000,
        499748400000,
        511236000000,
        530593200000,
        540266400000,
        562129200000,
        571197600000,
        592974000000,
        602042400000,
        624423600000,
        634701600000,
        938919600000,
        951616800000,
        970974000000,
        971575200000,
        1003028400000,
        1013911200000,
        null
      ],
      "offsets": [
        139.6,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180
      ]
    },
    {
      "name": "America/Regina",
      "abbrs": [
        "LMT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MWT",
        "MPT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "CST"
      ],
      "untils": [
        -2030202084000,
        -1632063600000,
        -1615132800000,
        -1251651600000,
        -1238349600000,
        -1220202000000,
        -1206900000000,
        -1188752400000,
        -1175450400000,
        -1156698000000,
        -1144000800000,
        -1125248400000,
        -1111946400000,
        -1032714000000,
        -1016992800000,
        -1001264400000,
        -986148000000,
        -969814800000,
        -954093600000,
        -937760400000,
        -922039200000,
        -906310800000,
        -890589600000,
        -880210800000,
        -769395600000,
        -765388800000,
        -748450800000,
        -732729600000,
        -715791600000,
        -702489600000,
        -684342000000,
        -671040000000,
        -652892400000,
        -639590400000,
        -620838000000,
        -608140800000,
        -589388400000,
        -576086400000,
        -557938800000,
        -544636800000,
        -526489200000,
        -513187200000,
        -495039600000,
        -481737600000,
        -463590000000,
        -450288000000,
        -431535600000,
        -418233600000,
        -400086000000,
        -386784000000,
        -337186800000,
        -321465600000,
        -305737200000,
        null
      ],
      "offsets": [
        418.6,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360
      ]
    },
    {
      "name": "America/Resolute",
      "abbrs": [
        "zzz",
        "CST",
        "CDDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "EST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "EST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST"
      ],
      "untils": [
        -704937600000,
        -147895200000,
        -131565600000,
        325670400000,
        341391600000,
        357120000000,
        372841200000,
        388569600000,
        404895600000,
        420019200000,
        436345200000,
        452073600000,
        467794800000,
        483523200000,
        499244400000,
        514972800000,
        530694000000,
        544608000000,
        562143600000,
        576057600000,
        594198000000,
        607507200000,
        625647600000,
        638956800000,
        657097200000,
        671011200000,
        688546800000,
        702460800000,
        719996400000,
        733910400000,
        752050800000,
        765360000000,
        783500400000,
        796809600000,
        814950000000,
        828864000000,
        846399600000,
        860313600000,
        877849200000,
        891763200000,
        909298800000,
        923212800000,
        941353200000,
        954662400000,
        972802800000,
        986112000000,
        1004252400000,
        1018166400000,
        1035702000000,
        1049616000000,
        1067151600000,
        1081065600000,
        1099206000000,
        1112515200000,
        1130655600000,
        1143964800000,
        1162105200000,
        1173600000000,
        1194159600000,
        1205049600000,
        1225609200000,
        1236499200000,
        1257058800000,
        1268553600000,
        1289113200000,
        1300003200000,
        1320562800000,
        1331452800000,
        1352012400000,
        1362902400000,
        1383462000000,
        1394352000000,
        1414911600000,
        1425801600000,
        1446361200000,
        1457856000000,
        1478415600000,
        1489305600000,
        1509865200000,
        1520755200000,
        1541314800000,
        1552204800000,
        1572764400000,
        1583654400000,
        1604214000000,
        1615708800000,
        1636268400000,
        1647158400000,
        1667718000000,
        1678608000000,
        1699167600000,
        1710057600000,
        1730617200000,
        1741507200000,
        1762066800000,
        1772956800000,
        1793516400000,
        1805011200000,
        1825570800000,
        1836460800000,
        1857020400000,
        1867910400000,
        1888470000000,
        1899360000000,
        1919919600000,
        1930809600000,
        1951369200000,
        1962864000000,
        1983423600000,
        1994313600000,
        2014873200000,
        2025763200000,
        2046322800000,
        2057212800000,
        2077772400000,
        2088662400000,
        2109222000000,
        2120112000000,
        2140671600000,
        null
      ],
      "offsets": [
        0,
        360,
        240,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        300,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        300,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360
      ]
    },
    {
      "name": "America/Rio_Branco",
      "abbrs": [
        "LMT",
        "ACT",
        "ACST",
        "ACT",
        "ACST",
        "ACT",
        "ACST",
        "ACT",
        "ACST",
        "ACT",
        "ACST",
        "ACT",
        "ACST",
        "ACT",
        "ACST",
        "ACT",
        "ACST",
        "ACT",
        "ACST",
        "ACT",
        "ACST",
        "ACT",
        "ACST",
        "ACT",
        "ACST",
        "ACT",
        "ACST",
        "ACT",
        "ACST",
        "ACT",
        "AMT",
        "ACT"
      ],
      "untils": [
        -1767209328000,
        -1206950400000,
        -1191355200000,
        -1175367600000,
        -1159819200000,
        -633812400000,
        -622062000000,
        -602276400000,
        -591825600000,
        -570740400000,
        -560203200000,
        -539118000000,
        -531345600000,
        -191358000000,
        -184190400000,
        -155156400000,
        -150062400000,
        -128890800000,
        -121118400000,
        -99946800000,
        -89582400000,
        -68410800000,
        -57960000000,
        499755600000,
        511243200000,
        530600400000,
        540273600000,
        562136400000,
        571204800000,
        1214283600000,
        1384056000000,
        null
      ],
      "offsets": [
        271.2,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300
      ]
    },
    {
      "name": "America/Rosario",
      "abbrs": [
        "CMT",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "WART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART"
      ],
      "untils": [
        -1567453392000,
        -1233432000000,
        -1222981200000,
        -1205956800000,
        -1194037200000,
        -1172865600000,
        -1162501200000,
        -1141329600000,
        -1130965200000,
        -1109793600000,
        -1099429200000,
        -1078257600000,
        -1067806800000,
        -1046635200000,
        -1036270800000,
        -1015099200000,
        -1004734800000,
        -983563200000,
        -973198800000,
        -952027200000,
        -941576400000,
        -931032000000,
        -900882000000,
        -890337600000,
        -833749200000,
        -827265600000,
        -752274000000,
        -733780800000,
        -197326800000,
        -190843200000,
        -184194000000,
        -164491200000,
        -152658000000,
        -132955200000,
        -121122000000,
        -101419200000,
        -86821200000,
        -71092800000,
        -54766800000,
        -39038400000,
        -23317200000,
        -7588800000,
        128142000000,
        136605600000,
        596948400000,
        605066400000,
        624423600000,
        636516000000,
        656478000000,
        667965600000,
        687931200000,
        699415200000,
        719377200000,
        731469600000,
        938919600000,
        952052400000,
        1198983600000,
        1205632800000,
        1224385200000,
        1237082400000,
        null
      ],
      "offsets": [
        256.8,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        240,
        120,
        180,
        120,
        180,
        180,
        180,
        120,
        180,
        120,
        180
      ]
    },
    {
      "name": "America/Santa_Isabel",
      "abbrs": [
        "LMT",
        "MST",
        "PST",
        "MST",
        "PST",
        "PDT",
        "PST",
        "PWT",
        "PPT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST"
      ],
      "untils": [
        -1514736000000,
        -1451667600000,
        -1343062800000,
        -1234803600000,
        -1222963200000,
        -1207242000000,
        -873820800000,
        -769395600000,
        -761677200000,
        -686073600000,
        -661539600000,
        -495036000000,
        -481734000000,
        -463586400000,
        -450284400000,
        -431532000000,
        -418230000000,
        -400082400000,
        -386780400000,
        -368632800000,
        -355330800000,
        -337183200000,
        -323881200000,
        -305733600000,
        -292431600000,
        199274400000,
        215600400000,
        230724000000,
        247050000000,
        262778400000,
        278499600000,
        294228000000,
        309949200000,
        325677600000,
        341398800000,
        357127200000,
        372848400000,
        388576800000,
        404902800000,
        420026400000,
        436352400000,
        452080800000,
        467802000000,
        483530400000,
        499251600000,
        514980000000,
        530701200000,
        544615200000,
        562150800000,
        576064800000,
        594205200000,
        607514400000,
        625654800000,
        638964000000,
        657104400000,
        671018400000,
        688554000000,
        702468000000,
        720003600000,
        733917600000,
        752058000000,
        765367200000,
        783507600000,
        796816800000,
        814957200000,
        828871200000,
        846406800000,
        860320800000,
        877856400000,
        891770400000,
        909306000000,
        923220000000,
        941360400000,
        954669600000,
        972810000000,
        986119200000,
        1004259600000,
        1018173600000,
        1035709200000,
        1049623200000,
        1067158800000,
        1081072800000,
        1099213200000,
        1112522400000,
        1130662800000,
        1143972000000,
        1162112400000,
        1175421600000,
        1193562000000,
        1207476000000,
        1225011600000,
        1238925600000,
        1256461200000,
        1270375200000,
        1288515600000,
        1301824800000,
        1319965200000,
        1333274400000,
        1351414800000,
        1365328800000,
        1382864400000,
        1396778400000,
        1414314000000,
        1428228000000,
        1445763600000,
        1459677600000,
        1477818000000,
        1491127200000,
        1509267600000,
        1522576800000,
        1540717200000,
        1554631200000,
        1572166800000,
        1586080800000,
        1603616400000,
        1617530400000,
        1635670800000,
        1648980000000,
        1667120400000,
        1680429600000,
        1698570000000,
        1712484000000,
        1730019600000,
        1743933600000,
        1761469200000,
        1775383200000,
        1792918800000,
        1806832800000,
        1824973200000,
        1838282400000,
        1856422800000,
        1869732000000,
        1887872400000,
        1901786400000,
        1919322000000,
        1933236000000,
        1950771600000,
        1964685600000,
        1982826000000,
        1996135200000,
        2014275600000,
        2027584800000,
        2045725200000,
        2059034400000,
        2077174800000,
        2091088800000,
        2108624400000,
        2122538400000,
        2140074000000,
        null
      ],
      "offsets": [
        459.4667,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480
      ]
    },
    {
      "name": "America/Santarem",
      "abbrs": [
        "LMT",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "BRT"
      ],
      "untils": [
        -1767212472000,
        -1206954000000,
        -1191358800000,
        -1175371200000,
        -1159822800000,
        -633816000000,
        -622065600000,
        -602280000000,
        -591829200000,
        -570744000000,
        -560206800000,
        -539121600000,
        -531349200000,
        -191361600000,
        -184194000000,
        -155160000000,
        -150066000000,
        -128894400000,
        -121122000000,
        -99950400000,
        -89586000000,
        -68414400000,
        -57963600000,
        499752000000,
        511239600000,
        530596800000,
        540270000000,
        562132800000,
        571201200000,
        1214280000000,
        null
      ],
      "offsets": [
        218.8,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180
      ]
    },
    {
      "name": "America/Santiago",
      "abbrs": [
        "SMT",
        "CLT",
        "SMT",
        "CLT",
        "SMT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLT",
        "CLT",
        "CLT",
        "CLST",
        "CLT",
        "CLT",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT"
      ],
      "untils": [
        -1892661434000,
        -1688410800000,
        -1619205434000,
        -1593806400000,
        -1335986234000,
        -1317585600000,
        -1304362800000,
        -1286049600000,
        -1272826800000,
        -1254513600000,
        -1241290800000,
        -1222977600000,
        -1209754800000,
        -1191355200000,
        -1178132400000,
        -870552000000,
        -865278000000,
        -740520000000,
        -736376400000,
        -718056000000,
        -713649600000,
        -36619200000,
        -23922000000,
        -3355200000,
        7527600000,
        24465600000,
        37767600000,
        55915200000,
        69217200000,
        87969600000,
        100666800000,
        118209600000,
        132116400000,
        150868800000,
        163566000000,
        182318400000,
        195620400000,
        213768000000,
        227070000000,
        245217600000,
        258519600000,
        277272000000,
        289969200000,
        308721600000,
        321418800000,
        340171200000,
        353473200000,
        371620800000,
        384922800000,
        403070400000,
        416372400000,
        434520000000,
        447822000000,
        466574400000,
        479271600000,
        498024000000,
        510721200000,
        529473600000,
        545194800000,
        560923200000,
        574225200000,
        592372800000,
        605674800000,
        624427200000,
        637124400000,
        653457600000,
        668574000000,
        687326400000,
        700628400000,
        718776000000,
        732078000000,
        750225600000,
        763527600000,
        781675200000,
        794977200000,
        813729600000,
        826426800000,
        845179200000,
        859690800000,
        876628800000,
        889930800000,
        906868800000,
        923194800000,
        939528000000,
        952830000000,
        971582400000,
        984279600000,
        1003032000000,
        1015729200000,
        1034481600000,
        1047178800000,
        1065931200000,
        1079233200000,
        1097380800000,
        1110682800000,
        1128830400000,
        1142132400000,
        1160884800000,
        1173582000000,
        1192334400000,
        1206846000000,
        1223784000000,
        1237086000000,
        1255233600000,
        1270350000000,
        1286683200000,
        1304823600000,
        1313899200000,
        1335668400000,
        1346558400000,
        1367118000000,
        1378612800000,
        1398567600000,
        1410062400000,
        1430017200000,
        null
      ],
      "offsets": [
        282.7667,
        300,
        282.7667,
        240,
        282.7667,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        180,
        240,
        300,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        180
      ]
    },
    {
      "name": "America/Santo_Domingo",
      "abbrs": [
        "SDMT",
        "EST",
        "EDT",
        "EST",
        "EHDT",
        "EST",
        "EHDT",
        "EST",
        "EHDT",
        "EST",
        "EHDT",
        "EST",
        "EHDT",
        "EST",
        "AST",
        "EST",
        "AST"
      ],
      "untils": [
        -1159773600000,
        -100119600000,
        -89668800000,
        -5770800000,
        4422600000,
        25678800000,
        33193800000,
        57733200000,
        64816200000,
        89182800000,
        96438600000,
        120632400000,
        127974600000,
        152082000000,
        972799200000,
        975823200000,
        null
      ],
      "offsets": [
        280,
        300,
        240,
        300,
        270,
        300,
        270,
        300,
        270,
        300,
        270,
        300,
        270,
        300,
        240,
        300,
        240
      ]
    },
    {
      "name": "America/Sao_Paulo",
      "abbrs": [
        "LMT",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST"
      ],
      "untils": [
        -1767214412000,
        -1206957600000,
        -1191362400000,
        -1175374800000,
        -1159826400000,
        -633819600000,
        -622069200000,
        -602283600000,
        -591832800000,
        -570747600000,
        -560210400000,
        -539125200000,
        -531352800000,
        -195426000000,
        -184197600000,
        -155163600000,
        -150069600000,
        -128898000000,
        -121125600000,
        -99954000000,
        -89589600000,
        -68418000000,
        -57967200000,
        499748400000,
        511236000000,
        530593200000,
        540266400000,
        562129200000,
        571197600000,
        592974000000,
        602042400000,
        624423600000,
        634701600000,
        656478000000,
        666756000000,
        687927600000,
        697600800000,
        719982000000,
        728445600000,
        750826800000,
        761709600000,
        782276400000,
        793159200000,
        813726000000,
        824004000000,
        844570800000,
        856058400000,
        876106800000,
        888717600000,
        908074800000,
        919562400000,
        938919600000,
        951616800000,
        970974000000,
        982461600000,
        1003028400000,
        1013911200000,
        1036292400000,
        1045360800000,
        1066532400000,
        1076810400000,
        1099364400000,
        1108864800000,
        1129431600000,
        1140314400000,
        1162695600000,
        1172368800000,
        1192330800000,
        1203213600000,
        1224385200000,
        1234663200000,
        1255834800000,
        1266717600000,
        1287284400000,
        1298167200000,
        1318734000000,
        1330221600000,
        1350788400000,
        1361066400000,
        1382238000000,
        1392516000000,
        1413687600000,
        1424570400000,
        1445137200000,
        1456020000000,
        1476586800000,
        1487469600000,
        1508036400000,
        1518919200000,
        1540090800000,
        1550368800000,
        1571540400000,
        1581818400000,
        1602990000000,
        1613872800000,
        1634439600000,
        1645322400000,
        1665889200000,
        1677376800000,
        1697338800000,
        1708221600000,
        1729393200000,
        1739671200000,
        1760842800000,
        1771725600000,
        1792292400000,
        1803175200000,
        1823742000000,
        1834624800000,
        1855191600000,
        1866074400000,
        1887246000000,
        1897524000000,
        1918695600000,
        1928973600000,
        1950145200000,
        1960423200000,
        1981594800000,
        1992477600000,
        2013044400000,
        2024532000000,
        2044494000000,
        2055376800000,
        2076548400000,
        2086826400000,
        2107998000000,
        2118880800000,
        2139447600000,
        null
      ],
      "offsets": [
        186.4667,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120
      ]
    },
    {
      "name": "America/Scoresbysund",
      "abbrs": [
        "LMT",
        "CGT",
        "CGST",
        "CGT",
        "EGST",
        "EGT",
        "EGST",
        "EGT",
        "EGST",
        "EGT",
        "EGST",
        "EGT",
        "EGST",
        "EGT",
        "EGST",
        "EGT",
        "EGST",
        "EGT",
        "EGST",
        "EGT",
        "EGST",
        "EGT",
        "EGST",
        "EGT",
        "EGST",
        "EGT",
        "EGST",
        "EGT",
        "EGST",
        "EGT",
        "EGST",
        "EGT",
        "EGST",
        "EGT",
        "EGST",
        "EGT",
        "EGST",
        "EGT",
        "EGST",
        "EGT",
        "EGST",
        "EGT",
        "EGST",
        "EGT",
        "EGST",
        "EGT",
        "EGST",
        "EGT",
        "EGST",
        "EGT",
        "EGST",
        "EGT",
        "EGST",
        "EGT",
        "EGST",
        "EGT",
        "EGST",
        "EGT",
        "EGST",
        "EGT",
        "EGST",
        "EGT",
        "EGST",
        "EGT",
        "EGST",
        "EGT",
        "EGST",
        "EGT",
        "EGST",
        "EGT",
        "EGST",
        "EGT",
        "EGST",
        "EGT",
        "EGST",
        "EGT",
        "EGST",
        "EGT",
        "EGST",
        "EGT",
        "EGST",
        "EGT",
        "EGST",
        "EGT",
        "EGST",
        "EGT",
        "EGST",
        "EGT",
        "EGST",
        "EGT",
        "EGST",
        "EGT",
        "EGST",
        "EGT",
        "EGST",
        "EGT",
        "EGST",
        "EGT",
        "EGST",
        "EGT",
        "EGST",
        "EGT",
        "EGST",
        "EGT",
        "EGST",
        "EGT",
        "EGST",
        "EGT",
        "EGST",
        "EGT",
        "EGST",
        "EGT",
        "EGST",
        "EGT",
        "EGST",
        "EGT",
        "EGST",
        "EGT"
      ],
      "untils": [
        -1686090728000,
        323841600000,
        338961600000,
        354679200000,
        370400400000,
        386125200000,
        401850000000,
        417574800000,
        433299600000,
        449024400000,
        465354000000,
        481078800000,
        496803600000,
        512528400000,
        528253200000,
        543978000000,
        559702800000,
        575427600000,
        591152400000,
        606877200000,
        622602000000,
        638326800000,
        654656400000,
        670381200000,
        686106000000,
        701830800000,
        717555600000,
        733280400000,
        749005200000,
        764730000000,
        780454800000,
        796179600000,
        811904400000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        87.8667,
        120,
        60,
        120,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60
      ]
    },
    {
      "name": "America/Shiprock",
      "abbrs": [
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MWT",
        "MPT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST"
      ],
      "untils": [
        -1633273200000,
        -1615132800000,
        -1601823600000,
        -1583683200000,
        -1570374000000,
        -1551628800000,
        -1538924400000,
        -1534089600000,
        -880210800000,
        -769395600000,
        -765388800000,
        -147884400000,
        -131558400000,
        -116434800000,
        -100108800000,
        -84380400000,
        -68659200000,
        -52930800000,
        -37209600000,
        -21481200000,
        -5760000000,
        9968400000,
        25689600000,
        41418000000,
        57744000000,
        73472400000,
        89193600000,
        104922000000,
        120643200000,
        126694800000,
        152092800000,
        162378000000,
        183542400000,
        199270800000,
        215596800000,
        230720400000,
        247046400000,
        262774800000,
        278496000000,
        294224400000,
        309945600000,
        325674000000,
        341395200000,
        357123600000,
        372844800000,
        388573200000,
        404899200000,
        420022800000,
        436348800000,
        452077200000,
        467798400000,
        483526800000,
        499248000000,
        514976400000,
        530697600000,
        544611600000,
        562147200000,
        576061200000,
        594201600000,
        607510800000,
        625651200000,
        638960400000,
        657100800000,
        671014800000,
        688550400000,
        702464400000,
        720000000000,
        733914000000,
        752054400000,
        765363600000,
        783504000000,
        796813200000,
        814953600000,
        828867600000,
        846403200000,
        860317200000,
        877852800000,
        891766800000,
        909302400000,
        923216400000,
        941356800000,
        954666000000,
        972806400000,
        986115600000,
        1004256000000,
        1018170000000,
        1035705600000,
        1049619600000,
        1067155200000,
        1081069200000,
        1099209600000,
        1112518800000,
        1130659200000,
        1143968400000,
        1162108800000,
        1173603600000,
        1194163200000,
        1205053200000,
        1225612800000,
        1236502800000,
        1257062400000,
        1268557200000,
        1289116800000,
        1300006800000,
        1320566400000,
        1331456400000,
        1352016000000,
        1362906000000,
        1383465600000,
        1394355600000,
        1414915200000,
        1425805200000,
        1446364800000,
        1457859600000,
        1478419200000,
        1489309200000,
        1509868800000,
        1520758800000,
        1541318400000,
        1552208400000,
        1572768000000,
        1583658000000,
        1604217600000,
        1615712400000,
        1636272000000,
        1647162000000,
        1667721600000,
        1678611600000,
        1699171200000,
        1710061200000,
        1730620800000,
        1741510800000,
        1762070400000,
        1772960400000,
        1793520000000,
        1805014800000,
        1825574400000,
        1836464400000,
        1857024000000,
        1867914000000,
        1888473600000,
        1899363600000,
        1919923200000,
        1930813200000,
        1951372800000,
        1962867600000,
        1983427200000,
        1994317200000,
        2014876800000,
        2025766800000,
        2046326400000,
        2057216400000,
        2077776000000,
        2088666000000,
        2109225600000,
        2120115600000,
        2140675200000,
        null
      ],
      "offsets": [
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420
      ]
    },
    {
      "name": "America/Sitka",
      "abbrs": [
        "PST",
        "PWT",
        "PPT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "YST",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST"
      ],
      "untils": [
        -880207200000,
        -769395600000,
        -765385200000,
        -21477600000,
        -5756400000,
        9972000000,
        25693200000,
        41421600000,
        57747600000,
        73476000000,
        89197200000,
        104925600000,
        120646800000,
        126698400000,
        152096400000,
        162381600000,
        183546000000,
        199274400000,
        215600400000,
        230724000000,
        247050000000,
        262778400000,
        278499600000,
        294228000000,
        309949200000,
        325677600000,
        341398800000,
        357127200000,
        372848400000,
        388576800000,
        404902800000,
        420026400000,
        436352400000,
        439030800000,
        452084400000,
        467805600000,
        483534000000,
        499255200000,
        514983600000,
        530704800000,
        544618800000,
        562154400000,
        576068400000,
        594208800000,
        607518000000,
        625658400000,
        638967600000,
        657108000000,
        671022000000,
        688557600000,
        702471600000,
        720007200000,
        733921200000,
        752061600000,
        765370800000,
        783511200000,
        796820400000,
        814960800000,
        828874800000,
        846410400000,
        860324400000,
        877860000000,
        891774000000,
        909309600000,
        923223600000,
        941364000000,
        954673200000,
        972813600000,
        986122800000,
        1004263200000,
        1018177200000,
        1035712800000,
        1049626800000,
        1067162400000,
        1081076400000,
        1099216800000,
        1112526000000,
        1130666400000,
        1143975600000,
        1162116000000,
        1173610800000,
        1194170400000,
        1205060400000,
        1225620000000,
        1236510000000,
        1257069600000,
        1268564400000,
        1289124000000,
        1300014000000,
        1320573600000,
        1331463600000,
        1352023200000,
        1362913200000,
        1383472800000,
        1394362800000,
        1414922400000,
        1425812400000,
        1446372000000,
        1457866800000,
        1478426400000,
        1489316400000,
        1509876000000,
        1520766000000,
        1541325600000,
        1552215600000,
        1572775200000,
        1583665200000,
        1604224800000,
        1615719600000,
        1636279200000,
        1647169200000,
        1667728800000,
        1678618800000,
        1699178400000,
        1710068400000,
        1730628000000,
        1741518000000,
        1762077600000,
        1772967600000,
        1793527200000,
        1805022000000,
        1825581600000,
        1836471600000,
        1857031200000,
        1867921200000,
        1888480800000,
        1899370800000,
        1919930400000,
        1930820400000,
        1951380000000,
        1962874800000,
        1983434400000,
        1994324400000,
        2014884000000,
        2025774000000,
        2046333600000,
        2057223600000,
        2077783200000,
        2088673200000,
        2109232800000,
        2120122800000,
        2140682400000,
        null
      ],
      "offsets": [
        480,
        420,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        540,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540
      ]
    },
    {
      "name": "America/St_Barthelemy",
      "abbrs": [
        "LMT",
        "AST"
      ],
      "untils": [
        -1825098836000,
        null
      ],
      "offsets": [
        246.0667,
        240
      ]
    },
    {
      "name": "America/St_Johns",
      "abbrs": [
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NWT",
        "NPT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST"
      ],
      "untils": [
        -1664130548000,
        -1650137348000,
        -1632076148000,
        -1615145348000,
        -1598650148000,
        -1590100148000,
        -1567286948000,
        -1551565748000,
        -1535837348000,
        -1520116148000,
        -1503782948000,
        -1488666548000,
        -1472333348000,
        -1457216948000,
        -1440883748000,
        -1425767348000,
        -1409434148000,
        -1394317748000,
        -1377984548000,
        -1362263348000,
        -1346534948000,
        -1330813748000,
        -1314480548000,
        -1299364148000,
        -1283030948000,
        -1267914548000,
        -1251581348000,
        -1236464948000,
        -1220131748000,
        -1205015348000,
        -1188682148000,
        -1172960948000,
        -1156627748000,
        -1141511348000,
        -1125178148000,
        -1110061748000,
        -1096921748000,
        -1093728600000,
        -1078612200000,
        -1061670600000,
        -1048973400000,
        -1030221000000,
        -1017523800000,
        -998771400000,
        -986074200000,
        -966717000000,
        -954624600000,
        -935267400000,
        -922570200000,
        -903817800000,
        -891120600000,
        -872368200000,
        -769395600000,
        -765401400000,
        -746044200000,
        -733347000000,
        -714594600000,
        -701897400000,
        -683145000000,
        -670447800000,
        -651695400000,
        -638998200000,
        -619641000000,
        -606943800000,
        -589401000000,
        -576099000000,
        -557951400000,
        -544649400000,
        -526501800000,
        -513199800000,
        -495052200000,
        -481750200000,
        -463602600000,
        -450300600000,
        -431548200000,
        -418246200000,
        -400098600000,
        -386796600000,
        -368649000000,
        -355347000000,
        -337199400000,
        -323897400000,
        -305749800000,
        -289423800000,
        -273695400000,
        -257974200000,
        -242245800000,
        -226524600000,
        -210796200000,
        -195075000000,
        -179346600000,
        -163625400000,
        -147897000000,
        -131571000000,
        -116447400000,
        -100121400000,
        -84393000000,
        -68671800000,
        -52943400000,
        -37222200000,
        -21493800000,
        -5772600000,
        9955800000,
        25677000000,
        41405400000,
        57731400000,
        73459800000,
        89181000000,
        104909400000,
        120630600000,
        136359000000,
        152080200000,
        167808600000,
        183529800000,
        199258200000,
        215584200000,
        230707800000,
        247033800000,
        262762200000,
        278483400000,
        294211800000,
        309933000000,
        325661400000,
        341382600000,
        357111000000,
        372832200000,
        388560600000,
        404886600000,
        420010200000,
        436336200000,
        452064600000,
        467785800000,
        483514200000,
        499235400000,
        514963800000,
        530685000000,
        544591860000,
        562127460000,
        576041460000,
        594178260000,
        607491060000,
        625631460000,
        638940660000,
        657081060000,
        670995060000,
        688530660000,
        702444660000,
        719980260000,
        733894260000,
        752034660000,
        765343860000,
        783484260000,
        796793460000,
        814933860000,
        828847860000,
        846383460000,
        860297460000,
        877833060000,
        891747060000,
        909282660000,
        923196660000,
        941337060000,
        954646260000,
        972786660000,
        986095860000,
        1004236260000,
        1018150260000,
        1035685860000,
        1049599860000,
        1067135460000,
        1081049460000,
        1099189860000,
        1112499060000,
        1130639460000,
        1143948660000,
        1162089060000,
        1173583860000,
        1194143460000,
        1205033460000,
        1225593060000,
        1236483060000,
        1257042660000,
        1268537460000,
        1289097060000,
        1299987060000,
        1320553800000,
        1331443800000,
        1352003400000,
        1362893400000,
        1383453000000,
        1394343000000,
        1414902600000,
        1425792600000,
        1446352200000,
        1457847000000,
        1478406600000,
        1489296600000,
        1509856200000,
        1520746200000,
        1541305800000,
        1552195800000,
        1572755400000,
        1583645400000,
        1604205000000,
        1615699800000,
        1636259400000,
        1647149400000,
        1667709000000,
        1678599000000,
        1699158600000,
        1710048600000,
        1730608200000,
        1741498200000,
        1762057800000,
        1772947800000,
        1793507400000,
        1805002200000,
        1825561800000,
        1836451800000,
        1857011400000,
        1867901400000,
        1888461000000,
        1899351000000,
        1919910600000,
        1930800600000,
        1951360200000,
        1962855000000,
        1983414600000,
        1994304600000,
        2014864200000,
        2025754200000,
        2046313800000,
        2057203800000,
        2077763400000,
        2088653400000,
        2109213000000,
        2120103000000,
        2140662600000,
        null
      ],
      "offsets": [
        210.8667,
        150.8667,
        210.8667,
        150.8667,
        210.8667,
        150.8667,
        210.8667,
        150.8667,
        210.8667,
        150.8667,
        210.8667,
        150.8667,
        210.8667,
        150.8667,
        210.8667,
        150.8667,
        210.8667,
        150.8667,
        210.8667,
        150.8667,
        210.8667,
        150.8667,
        210.8667,
        150.8667,
        210.8667,
        150.8667,
        210.8667,
        150.8667,
        210.8667,
        150.8667,
        210.8667,
        150.8667,
        210.8667,
        150.8667,
        210.8667,
        150.8667,
        210.8667,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        90,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210
      ]
    },
    {
      "name": "America/St_Kitts",
      "abbrs": [
        "LMT",
        "AST"
      ],
      "untils": [
        -1825098836000,
        null
      ],
      "offsets": [
        246.0667,
        240
      ]
    },
    {
      "name": "America/St_Lucia",
      "abbrs": [
        "LMT",
        "AST"
      ],
      "untils": [
        -1825098836000,
        null
      ],
      "offsets": [
        246.0667,
        240
      ]
    },
    {
      "name": "America/St_Thomas",
      "abbrs": [
        "LMT",
        "AST"
      ],
      "untils": [
        -1825098836000,
        null
      ],
      "offsets": [
        246.0667,
        240
      ]
    },
    {
      "name": "America/St_Vincent",
      "abbrs": [
        "LMT",
        "AST"
      ],
      "untils": [
        -1825098836000,
        null
      ],
      "offsets": [
        246.0667,
        240
      ]
    },
    {
      "name": "America/Swift_Current",
      "abbrs": [
        "LMT",
        "MST",
        "MDT",
        "MST",
        "MWT",
        "MPT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "CST"
      ],
      "untils": [
        -2030201320000,
        -1632063600000,
        -1615132800000,
        -880210800000,
        -769395600000,
        -765388800000,
        -747241200000,
        -732729600000,
        -715791600000,
        -702489600000,
        -684342000000,
        -671040000000,
        -652892400000,
        -639590400000,
        -400086000000,
        -384364800000,
        -337186800000,
        -321465600000,
        -305737200000,
        -292435200000,
        -273682800000,
        -260985600000,
        73472400000,
        null
      ],
      "offsets": [
        431.3333,
        420,
        360,
        420,
        360,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360
      ]
    },
    {
      "name": "America/Tegucigalpa",
      "abbrs": [
        "LMT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST"
      ],
      "untils": [
        -1538503868000,
        547020000000,
        559717200000,
        578469600000,
        591166800000,
        1146981600000,
        1154926800000,
        null
      ],
      "offsets": [
        348.8667,
        360,
        300,
        360,
        300,
        360,
        300,
        360
      ]
    },
    {
      "name": "America/Thule",
      "abbrs": [
        "LMT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST"
      ],
      "untils": [
        -1686079492000,
        670399200000,
        686120400000,
        701848800000,
        717570000000,
        733903200000,
        752043600000,
        765352800000,
        783493200000,
        796802400000,
        814942800000,
        828856800000,
        846392400000,
        860306400000,
        877842000000,
        891756000000,
        909291600000,
        923205600000,
        941346000000,
        954655200000,
        972795600000,
        986104800000,
        1004245200000,
        1018159200000,
        1035694800000,
        1049608800000,
        1067144400000,
        1081058400000,
        1099198800000,
        1112508000000,
        1130648400000,
        1143957600000,
        1162098000000,
        1173592800000,
        1194152400000,
        1205042400000,
        1225602000000,
        1236492000000,
        1257051600000,
        1268546400000,
        1289106000000,
        1299996000000,
        1320555600000,
        1331445600000,
        1352005200000,
        1362895200000,
        1383454800000,
        1394344800000,
        1414904400000,
        1425794400000,
        1446354000000,
        1457848800000,
        1478408400000,
        1489298400000,
        1509858000000,
        1520748000000,
        1541307600000,
        1552197600000,
        1572757200000,
        1583647200000,
        1604206800000,
        1615701600000,
        1636261200000,
        1647151200000,
        1667710800000,
        1678600800000,
        1699160400000,
        1710050400000,
        1730610000000,
        1741500000000,
        1762059600000,
        1772949600000,
        1793509200000,
        1805004000000,
        1825563600000,
        1836453600000,
        1857013200000,
        1867903200000,
        1888462800000,
        1899352800000,
        1919912400000,
        1930802400000,
        1951362000000,
        1962856800000,
        1983416400000,
        1994306400000,
        2014866000000,
        2025756000000,
        2046315600000,
        2057205600000,
        2077765200000,
        2088655200000,
        2109214800000,
        2120104800000,
        2140664400000,
        null
      ],
      "offsets": [
        275.1333,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240
      ]
    },
    {
      "name": "America/Thunder_Bay",
      "abbrs": [
        "CST",
        "EST",
        "EWT",
        "EPT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST"
      ],
      "untils": [
        -1893434400000,
        -880218000000,
        -769395600000,
        -765396000000,
        9961200000,
        25682400000,
        41410800000,
        57736800000,
        73465200000,
        89186400000,
        136364400000,
        152085600000,
        167814000000,
        183535200000,
        199263600000,
        215589600000,
        230713200000,
        247039200000,
        262767600000,
        278488800000,
        294217200000,
        309938400000,
        325666800000,
        341388000000,
        357116400000,
        372837600000,
        388566000000,
        404892000000,
        420015600000,
        436341600000,
        452070000000,
        467791200000,
        483519600000,
        499240800000,
        514969200000,
        530690400000,
        544604400000,
        562140000000,
        576054000000,
        594194400000,
        607503600000,
        625644000000,
        638953200000,
        657093600000,
        671007600000,
        688543200000,
        702457200000,
        719992800000,
        733906800000,
        752047200000,
        765356400000,
        783496800000,
        796806000000,
        814946400000,
        828860400000,
        846396000000,
        860310000000,
        877845600000,
        891759600000,
        909295200000,
        923209200000,
        941349600000,
        954658800000,
        972799200000,
        986108400000,
        1004248800000,
        1018162800000,
        1035698400000,
        1049612400000,
        1067148000000,
        1081062000000,
        1099202400000,
        1112511600000,
        1130652000000,
        1143961200000,
        1162101600000,
        1173596400000,
        1194156000000,
        1205046000000,
        1225605600000,
        1236495600000,
        1257055200000,
        1268550000000,
        1289109600000,
        1299999600000,
        1320559200000,
        1331449200000,
        1352008800000,
        1362898800000,
        1383458400000,
        1394348400000,
        1414908000000,
        1425798000000,
        1446357600000,
        1457852400000,
        1478412000000,
        1489302000000,
        1509861600000,
        1520751600000,
        1541311200000,
        1552201200000,
        1572760800000,
        1583650800000,
        1604210400000,
        1615705200000,
        1636264800000,
        1647154800000,
        1667714400000,
        1678604400000,
        1699164000000,
        1710054000000,
        1730613600000,
        1741503600000,
        1762063200000,
        1772953200000,
        1793512800000,
        1805007600000,
        1825567200000,
        1836457200000,
        1857016800000,
        1867906800000,
        1888466400000,
        1899356400000,
        1919916000000,
        1930806000000,
        1951365600000,
        1962860400000,
        1983420000000,
        1994310000000,
        2014869600000,
        2025759600000,
        2046319200000,
        2057209200000,
        2077768800000,
        2088658800000,
        2109218400000,
        2120108400000,
        2140668000000,
        null
      ],
      "offsets": [
        360,
        300,
        240,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300
      ]
    },
    {
      "name": "America/Tijuana",
      "abbrs": [
        "LMT",
        "MST",
        "PST",
        "MST",
        "PST",
        "PDT",
        "PST",
        "PWT",
        "PPT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST"
      ],
      "untils": [
        -1514736000000,
        -1451667600000,
        -1343062800000,
        -1234803600000,
        -1222963200000,
        -1207242000000,
        -873820800000,
        -769395600000,
        -761677200000,
        -686073600000,
        -661539600000,
        -495036000000,
        -481734000000,
        -463586400000,
        -450284400000,
        -431532000000,
        -418230000000,
        -400082400000,
        -386780400000,
        -368632800000,
        -355330800000,
        -337183200000,
        -323881200000,
        -305733600000,
        -292431600000,
        199274400000,
        215600400000,
        230724000000,
        247050000000,
        262778400000,
        278499600000,
        294228000000,
        309949200000,
        325677600000,
        341398800000,
        357127200000,
        372848400000,
        388576800000,
        404902800000,
        420026400000,
        436352400000,
        452080800000,
        467802000000,
        483530400000,
        499251600000,
        514980000000,
        530701200000,
        544615200000,
        562150800000,
        576064800000,
        594205200000,
        607514400000,
        625654800000,
        638964000000,
        657104400000,
        671018400000,
        688554000000,
        702468000000,
        720003600000,
        733917600000,
        752058000000,
        765367200000,
        783507600000,
        796816800000,
        814957200000,
        828871200000,
        846406800000,
        860320800000,
        877856400000,
        891770400000,
        909306000000,
        923220000000,
        941360400000,
        954669600000,
        972810000000,
        986119200000,
        1004259600000,
        1018173600000,
        1035709200000,
        1049623200000,
        1067158800000,
        1081072800000,
        1099213200000,
        1112522400000,
        1130662800000,
        1143972000000,
        1162112400000,
        1175421600000,
        1193562000000,
        1207476000000,
        1225011600000,
        1238925600000,
        1256461200000,
        1268560800000,
        1289120400000,
        1300010400000,
        1320570000000,
        1331460000000,
        1352019600000,
        1362909600000,
        1383469200000,
        1394359200000,
        1414918800000,
        1425808800000,
        1446368400000,
        1457863200000,
        1478422800000,
        1489312800000,
        1509872400000,
        1520762400000,
        1541322000000,
        1552212000000,
        1572771600000,
        1583661600000,
        1604221200000,
        1615716000000,
        1636275600000,
        1647165600000,
        1667725200000,
        1678615200000,
        1699174800000,
        1710064800000,
        1730624400000,
        1741514400000,
        1762074000000,
        1772964000000,
        1793523600000,
        1805018400000,
        1825578000000,
        1836468000000,
        1857027600000,
        1867917600000,
        1888477200000,
        1899367200000,
        1919926800000,
        1930816800000,
        1951376400000,
        1962871200000,
        1983430800000,
        1994320800000,
        2014880400000,
        2025770400000,
        2046330000000,
        2057220000000,
        2077779600000,
        2088669600000,
        2109229200000,
        2120119200000,
        2140678800000,
        null
      ],
      "offsets": [
        468.0667,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480
      ]
    },
    {
      "name": "America/Toronto",
      "abbrs": [
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EWT",
        "EPT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST"
      ],
      "untils": [
        -1632070800000,
        -1615140000000,
        -1601753400000,
        -1583697600000,
        -1567357200000,
        -1554667200000,
        -1534698000000,
        -1524074400000,
        -1503248400000,
        -1492365600000,
        -1471798800000,
        -1460916000000,
        -1440954000000,
        -1428861600000,
        -1409504400000,
        -1397412000000,
        -1378054800000,
        -1365962400000,
        -1346605200000,
        -1333908000000,
        -1315155600000,
        -1301853600000,
        -1283706000000,
        -1270404000000,
        -1252256400000,
        -1238954400000,
        -1220806800000,
        -1207504800000,
        -1188752400000,
        -1176055200000,
        -1157302800000,
        -1144000800000,
        -1125853200000,
        -1112551200000,
        -1094403600000,
        -1081101600000,
        -1062954000000,
        -1049652000000,
        -1031504400000,
        -1018202400000,
        -1000054800000,
        -986752800000,
        -968000400000,
        -955303200000,
        -936550800000,
        -880218000000,
        -769395600000,
        -765396000000,
        -747248400000,
        -733946400000,
        -715806000000,
        -702504000000,
        -684356400000,
        -671054400000,
        -652906800000,
        -634161600000,
        -620845200000,
        -602704800000,
        -589395600000,
        -576093600000,
        -557946000000,
        -544644000000,
        -526496400000,
        -513194400000,
        -495046800000,
        -481744800000,
        -463597200000,
        -450295200000,
        -431542800000,
        -418240800000,
        -400093200000,
        -384372000000,
        -368643600000,
        -352922400000,
        -337194000000,
        -321472800000,
        -305744400000,
        -289418400000,
        -273690000000,
        -257968800000,
        -242240400000,
        -226519200000,
        -210790800000,
        -195069600000,
        -179341200000,
        -163620000000,
        -147891600000,
        -131565600000,
        -116442000000,
        -100116000000,
        -84387600000,
        -68666400000,
        -52938000000,
        -37216800000,
        -21488400000,
        -5767200000,
        9961200000,
        25682400000,
        41410800000,
        57736800000,
        73465200000,
        89186400000,
        104914800000,
        120636000000,
        136364400000,
        152085600000,
        167814000000,
        183535200000,
        199263600000,
        215589600000,
        230713200000,
        247039200000,
        262767600000,
        278488800000,
        294217200000,
        309938400000,
        325666800000,
        341388000000,
        357116400000,
        372837600000,
        388566000000,
        404892000000,
        420015600000,
        436341600000,
        452070000000,
        467791200000,
        483519600000,
        499240800000,
        514969200000,
        530690400000,
        544604400000,
        562140000000,
        576054000000,
        594194400000,
        607503600000,
        625644000000,
        638953200000,
        657093600000,
        671007600000,
        688543200000,
        702457200000,
        719992800000,
        733906800000,
        752047200000,
        765356400000,
        783496800000,
        796806000000,
        814946400000,
        828860400000,
        846396000000,
        860310000000,
        877845600000,
        891759600000,
        909295200000,
        923209200000,
        941349600000,
        954658800000,
        972799200000,
        986108400000,
        1004248800000,
        1018162800000,
        1035698400000,
        1049612400000,
        1067148000000,
        1081062000000,
        1099202400000,
        1112511600000,
        1130652000000,
        1143961200000,
        1162101600000,
        1173596400000,
        1194156000000,
        1205046000000,
        1225605600000,
        1236495600000,
        1257055200000,
        1268550000000,
        1289109600000,
        1299999600000,
        1320559200000,
        1331449200000,
        1352008800000,
        1362898800000,
        1383458400000,
        1394348400000,
        1414908000000,
        1425798000000,
        1446357600000,
        1457852400000,
        1478412000000,
        1489302000000,
        1509861600000,
        1520751600000,
        1541311200000,
        1552201200000,
        1572760800000,
        1583650800000,
        1604210400000,
        1615705200000,
        1636264800000,
        1647154800000,
        1667714400000,
        1678604400000,
        1699164000000,
        1710054000000,
        1730613600000,
        1741503600000,
        1762063200000,
        1772953200000,
        1793512800000,
        1805007600000,
        1825567200000,
        1836457200000,
        1857016800000,
        1867906800000,
        1888466400000,
        1899356400000,
        1919916000000,
        1930806000000,
        1951365600000,
        1962860400000,
        1983420000000,
        1994310000000,
        2014869600000,
        2025759600000,
        2046319200000,
        2057209200000,
        2077768800000,
        2088658800000,
        2109218400000,
        2120108400000,
        2140668000000,
        null
      ],
      "offsets": [
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        240,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300
      ]
    },
    {
      "name": "America/Tortola",
      "abbrs": [
        "LMT",
        "AST"
      ],
      "untils": [
        -1825098836000,
        null
      ],
      "offsets": [
        246.0667,
        240
      ]
    },
    {
      "name": "America/Vancouver",
      "abbrs": [
        "PST",
        "PDT",
        "PST",
        "PWT",
        "PPT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST"
      ],
      "untils": [
        -1632060000000,
        -1615129200000,
        -880207200000,
        -769395600000,
        -765385200000,
        -747237600000,
        -732726000000,
        -715788000000,
        -702486000000,
        -684338400000,
        -671036400000,
        -652888800000,
        -639586800000,
        -620834400000,
        -608137200000,
        -589384800000,
        -576082800000,
        -557935200000,
        -544633200000,
        -526485600000,
        -513183600000,
        -495036000000,
        -481734000000,
        -463586400000,
        -450284400000,
        -431532000000,
        -418230000000,
        -400082400000,
        -386780400000,
        -368632800000,
        -355330800000,
        -337183200000,
        -323881200000,
        -305733600000,
        -292431600000,
        -273679200000,
        -260982000000,
        -242229600000,
        -226508400000,
        -210780000000,
        -195058800000,
        -179330400000,
        -163609200000,
        -147880800000,
        -131554800000,
        -116431200000,
        -100105200000,
        -84376800000,
        -68655600000,
        -52927200000,
        -37206000000,
        -21477600000,
        -5756400000,
        9972000000,
        25693200000,
        41421600000,
        57747600000,
        73476000000,
        89197200000,
        104925600000,
        120646800000,
        136375200000,
        152096400000,
        167824800000,
        183546000000,
        199274400000,
        215600400000,
        230724000000,
        247050000000,
        262778400000,
        278499600000,
        294228000000,
        309949200000,
        325677600000,
        341398800000,
        357127200000,
        372848400000,
        388576800000,
        404902800000,
        420026400000,
        436352400000,
        452080800000,
        467802000000,
        483530400000,
        499251600000,
        514980000000,
        530701200000,
        544615200000,
        562150800000,
        576064800000,
        594205200000,
        607514400000,
        625654800000,
        638964000000,
        657104400000,
        671018400000,
        688554000000,
        702468000000,
        720003600000,
        733917600000,
        752058000000,
        765367200000,
        783507600000,
        796816800000,
        814957200000,
        828871200000,
        846406800000,
        860320800000,
        877856400000,
        891770400000,
        909306000000,
        923220000000,
        941360400000,
        954669600000,
        972810000000,
        986119200000,
        1004259600000,
        1018173600000,
        1035709200000,
        1049623200000,
        1067158800000,
        1081072800000,
        1099213200000,
        1112522400000,
        1130662800000,
        1143972000000,
        1162112400000,
        1173607200000,
        1194166800000,
        1205056800000,
        1225616400000,
        1236506400000,
        1257066000000,
        1268560800000,
        1289120400000,
        1300010400000,
        1320570000000,
        1331460000000,
        1352019600000,
        1362909600000,
        1383469200000,
        1394359200000,
        1414918800000,
        1425808800000,
        1446368400000,
        1457863200000,
        1478422800000,
        1489312800000,
        1509872400000,
        1520762400000,
        1541322000000,
        1552212000000,
        1572771600000,
        1583661600000,
        1604221200000,
        1615716000000,
        1636275600000,
        1647165600000,
        1667725200000,
        1678615200000,
        1699174800000,
        1710064800000,
        1730624400000,
        1741514400000,
        1762074000000,
        1772964000000,
        1793523600000,
        1805018400000,
        1825578000000,
        1836468000000,
        1857027600000,
        1867917600000,
        1888477200000,
        1899367200000,
        1919926800000,
        1930816800000,
        1951376400000,
        1962871200000,
        1983430800000,
        1994320800000,
        2014880400000,
        2025770400000,
        2046330000000,
        2057220000000,
        2077779600000,
        2088669600000,
        2109229200000,
        2120119200000,
        2140678800000,
        null
      ],
      "offsets": [
        480,
        420,
        480,
        420,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480
      ]
    },
    {
      "name": "America/Virgin",
      "abbrs": [
        "LMT",
        "AST"
      ],
      "untils": [
        -1825098836000,
        null
      ],
      "offsets": [
        246.0667,
        240
      ]
    },
    {
      "name": "America/Whitehorse",
      "abbrs": [
        "YST",
        "YDT",
        "YST",
        "YDT",
        "YST",
        "YWT",
        "YPT",
        "YST",
        "YDDT",
        "YST",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST"
      ],
      "untils": [
        -1632056400000,
        -1615125600000,
        -1596978000000,
        -1583164800000,
        -880203600000,
        -769395600000,
        -765381600000,
        -147884400000,
        -131554800000,
        -81961200000,
        325677600000,
        341398800000,
        357127200000,
        372848400000,
        388576800000,
        404902800000,
        420026400000,
        436352400000,
        452080800000,
        467802000000,
        483530400000,
        499251600000,
        514980000000,
        530701200000,
        544615200000,
        562150800000,
        576064800000,
        594205200000,
        607514400000,
        625654800000,
        638964000000,
        657104400000,
        671018400000,
        688554000000,
        702468000000,
        720003600000,
        733917600000,
        752058000000,
        765367200000,
        783507600000,
        796816800000,
        814957200000,
        828871200000,
        846406800000,
        860320800000,
        877856400000,
        891770400000,
        909306000000,
        923220000000,
        941360400000,
        954669600000,
        972810000000,
        986119200000,
        1004259600000,
        1018173600000,
        1035709200000,
        1049623200000,
        1067158800000,
        1081072800000,
        1099213200000,
        1112522400000,
        1130662800000,
        1143972000000,
        1162112400000,
        1173607200000,
        1194166800000,
        1205056800000,
        1225616400000,
        1236506400000,
        1257066000000,
        1268560800000,
        1289120400000,
        1300010400000,
        1320570000000,
        1331460000000,
        1352019600000,
        1362909600000,
        1383469200000,
        1394359200000,
        1414918800000,
        1425808800000,
        1446368400000,
        1457863200000,
        1478422800000,
        1489312800000,
        1509872400000,
        1520762400000,
        1541322000000,
        1552212000000,
        1572771600000,
        1583661600000,
        1604221200000,
        1615716000000,
        1636275600000,
        1647165600000,
        1667725200000,
        1678615200000,
        1699174800000,
        1710064800000,
        1730624400000,
        1741514400000,
        1762074000000,
        1772964000000,
        1793523600000,
        1805018400000,
        1825578000000,
        1836468000000,
        1857027600000,
        1867917600000,
        1888477200000,
        1899367200000,
        1919926800000,
        1930816800000,
        1951376400000,
        1962871200000,
        1983430800000,
        1994320800000,
        2014880400000,
        2025770400000,
        2046330000000,
        2057220000000,
        2077779600000,
        2088669600000,
        2109229200000,
        2120119200000,
        2140678800000,
        null
      ],
      "offsets": [
        540,
        480,
        540,
        480,
        540,
        480,
        480,
        540,
        420,
        540,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480
      ]
    },
    {
      "name": "America/Winnipeg",
      "abbrs": [
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CWT",
        "CPT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST"
      ],
      "untils": [
        -1694368800000,
        -1681671600000,
        -1632067200000,
        -1615136400000,
        -1029686400000,
        -1018198800000,
        -880214400000,
        -769395600000,
        -765392400000,
        -746035200000,
        -732733200000,
        -715795200000,
        -702493200000,
        -684345600000,
        -671043600000,
        -652896000000,
        -639594000000,
        -620755200000,
        -607626000000,
        -589392000000,
        -576090000000,
        -557942400000,
        -544640400000,
        -526492800000,
        -513190800000,
        -495043200000,
        -481741200000,
        -463593600000,
        -450291600000,
        -431539200000,
        -418237200000,
        -400089600000,
        -386787600000,
        -368640000000,
        -355338000000,
        -337190400000,
        -321469200000,
        -305740800000,
        -292438800000,
        -210787200000,
        -198090000000,
        -116438400000,
        -100108800000,
        -84384000000,
        -68659200000,
        -52934400000,
        -37209600000,
        -21484800000,
        -5760000000,
        9964800000,
        25689600000,
        41414400000,
        57744000000,
        73468800000,
        89193600000,
        104918400000,
        120643200000,
        136368000000,
        152092800000,
        167817600000,
        183542400000,
        199267200000,
        215596800000,
        230716800000,
        247046400000,
        262771200000,
        278496000000,
        294220800000,
        309945600000,
        325670400000,
        341395200000,
        357120000000,
        372844800000,
        388569600000,
        404899200000,
        420019200000,
        436348800000,
        452073600000,
        467798400000,
        483523200000,
        499248000000,
        514972800000,
        530697600000,
        544608000000,
        562147200000,
        576057600000,
        594201600000,
        607507200000,
        625651200000,
        638956800000,
        657100800000,
        671011200000,
        688550400000,
        702460800000,
        720000000000,
        733910400000,
        752054400000,
        765360000000,
        783504000000,
        796809600000,
        814953600000,
        828864000000,
        846403200000,
        860313600000,
        877852800000,
        891763200000,
        909302400000,
        923212800000,
        941356800000,
        954662400000,
        972806400000,
        986112000000,
        1004256000000,
        1018166400000,
        1035705600000,
        1049616000000,
        1067155200000,
        1081065600000,
        1099209600000,
        1112515200000,
        1130659200000,
        1143964800000,
        1162105200000,
        1173600000000,
        1194159600000,
        1205049600000,
        1225609200000,
        1236499200000,
        1257058800000,
        1268553600000,
        1289113200000,
        1300003200000,
        1320562800000,
        1331452800000,
        1352012400000,
        1362902400000,
        1383462000000,
        1394352000000,
        1414911600000,
        1425801600000,
        1446361200000,
        1457856000000,
        1478415600000,
        1489305600000,
        1509865200000,
        1520755200000,
        1541314800000,
        1552204800000,
        1572764400000,
        1583654400000,
        1604214000000,
        1615708800000,
        1636268400000,
        1647158400000,
        1667718000000,
        1678608000000,
        1699167600000,
        1710057600000,
        1730617200000,
        1741507200000,
        1762066800000,
        1772956800000,
        1793516400000,
        1805011200000,
        1825570800000,
        1836460800000,
        1857020400000,
        1867910400000,
        1888470000000,
        1899360000000,
        1919919600000,
        1930809600000,
        1951369200000,
        1962864000000,
        1983423600000,
        1994313600000,
        2014873200000,
        2025763200000,
        2046322800000,
        2057212800000,
        2077772400000,
        2088662400000,
        2109222000000,
        2120112000000,
        2140671600000,
        null
      ],
      "offsets": [
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360
      ]
    },
    {
      "name": "America/Yakutat",
      "abbrs": [
        "YST",
        "YWT",
        "YPT",
        "YST",
        "YDT",
        "YST",
        "YDT",
        "YST",
        "YDT",
        "YST",
        "YDT",
        "YST",
        "YDT",
        "YST",
        "YDT",
        "YST",
        "YDT",
        "YST",
        "YDT",
        "YST",
        "YDT",
        "YST",
        "YDT",
        "YST",
        "YDT",
        "YST",
        "YDT",
        "YST",
        "YDT",
        "YST",
        "YDT",
        "YST",
        "YDT",
        "YST",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST"
      ],
      "untils": [
        -880203600000,
        -769395600000,
        -765381600000,
        -21474000000,
        -5752800000,
        9975600000,
        25696800000,
        41425200000,
        57751200000,
        73479600000,
        89200800000,
        104929200000,
        120650400000,
        126702000000,
        152100000000,
        162385200000,
        183549600000,
        199278000000,
        215604000000,
        230727600000,
        247053600000,
        262782000000,
        278503200000,
        294231600000,
        309952800000,
        325681200000,
        341402400000,
        357130800000,
        372852000000,
        388580400000,
        404906400000,
        420030000000,
        436356000000,
        439030800000,
        452084400000,
        467805600000,
        483534000000,
        499255200000,
        514983600000,
        530704800000,
        544618800000,
        562154400000,
        576068400000,
        594208800000,
        607518000000,
        625658400000,
        638967600000,
        657108000000,
        671022000000,
        688557600000,
        702471600000,
        720007200000,
        733921200000,
        752061600000,
        765370800000,
        783511200000,
        796820400000,
        814960800000,
        828874800000,
        846410400000,
        860324400000,
        877860000000,
        891774000000,
        909309600000,
        923223600000,
        941364000000,
        954673200000,
        972813600000,
        986122800000,
        1004263200000,
        1018177200000,
        1035712800000,
        1049626800000,
        1067162400000,
        1081076400000,
        1099216800000,
        1112526000000,
        1130666400000,
        1143975600000,
        1162116000000,
        1173610800000,
        1194170400000,
        1205060400000,
        1225620000000,
        1236510000000,
        1257069600000,
        1268564400000,
        1289124000000,
        1300014000000,
        1320573600000,
        1331463600000,
        1352023200000,
        1362913200000,
        1383472800000,
        1394362800000,
        1414922400000,
        1425812400000,
        1446372000000,
        1457866800000,
        1478426400000,
        1489316400000,
        1509876000000,
        1520766000000,
        1541325600000,
        1552215600000,
        1572775200000,
        1583665200000,
        1604224800000,
        1615719600000,
        1636279200000,
        1647169200000,
        1667728800000,
        1678618800000,
        1699178400000,
        1710068400000,
        1730628000000,
        1741518000000,
        1762077600000,
        1772967600000,
        1793527200000,
        1805022000000,
        1825581600000,
        1836471600000,
        1857031200000,
        1867921200000,
        1888480800000,
        1899370800000,
        1919930400000,
        1930820400000,
        1951380000000,
        1962874800000,
        1983434400000,
        1994324400000,
        2014884000000,
        2025774000000,
        2046333600000,
        2057223600000,
        2077783200000,
        2088673200000,
        2109232800000,
        2120122800000,
        2140682400000,
        null
      ],
      "offsets": [
        540,
        480,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540
      ]
    },
    {
      "name": "America/Yellowknife",
      "abbrs": [
        "zzz",
        "MST",
        "MWT",
        "MPT",
        "MST",
        "MDDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST"
      ],
      "untils": [
        -1104537600000,
        -880210800000,
        -769395600000,
        -765388800000,
        -147891600000,
        -131562000000,
        325674000000,
        341395200000,
        357123600000,
        372844800000,
        388573200000,
        404899200000,
        420022800000,
        436348800000,
        452077200000,
        467798400000,
        483526800000,
        499248000000,
        514976400000,
        530697600000,
        544611600000,
        562147200000,
        576061200000,
        594201600000,
        607510800000,
        625651200000,
        638960400000,
        657100800000,
        671014800000,
        688550400000,
        702464400000,
        720000000000,
        733914000000,
        752054400000,
        765363600000,
        783504000000,
        796813200000,
        814953600000,
        828867600000,
        846403200000,
        860317200000,
        877852800000,
        891766800000,
        909302400000,
        923216400000,
        941356800000,
        954666000000,
        972806400000,
        986115600000,
        1004256000000,
        1018170000000,
        1035705600000,
        1049619600000,
        1067155200000,
        1081069200000,
        1099209600000,
        1112518800000,
        1130659200000,
        1143968400000,
        1162108800000,
        1173603600000,
        1194163200000,
        1205053200000,
        1225612800000,
        1236502800000,
        1257062400000,
        1268557200000,
        1289116800000,
        1300006800000,
        1320566400000,
        1331456400000,
        1352016000000,
        1362906000000,
        1383465600000,
        1394355600000,
        1414915200000,
        1425805200000,
        1446364800000,
        1457859600000,
        1478419200000,
        1489309200000,
        1509868800000,
        1520758800000,
        1541318400000,
        1552208400000,
        1572768000000,
        1583658000000,
        1604217600000,
        1615712400000,
        1636272000000,
        1647162000000,
        1667721600000,
        1678611600000,
        1699171200000,
        1710061200000,
        1730620800000,
        1741510800000,
        1762070400000,
        1772960400000,
        1793520000000,
        1805014800000,
        1825574400000,
        1836464400000,
        1857024000000,
        1867914000000,
        1888473600000,
        1899363600000,
        1919923200000,
        1930813200000,
        1951372800000,
        1962867600000,
        1983427200000,
        1994317200000,
        2014876800000,
        2025766800000,
        2046326400000,
        2057216400000,
        2077776000000,
        2088666000000,
        2109225600000,
        2120115600000,
        2140675200000,
        null
      ],
      "offsets": [
        0,
        420,
        360,
        360,
        420,
        300,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420
      ]
    },
    {
      "name": "Antarctica/Casey",
      "abbrs": [
        "zzz",
        "AWST",
        "CAST",
        "AWST",
        "CAST",
        "AWST"
      ],
      "untils": [
        -31536000000,
        1255802400000,
        1267714800000,
        1319738400000,
        1329843600000,
        null
      ],
      "offsets": [
        0,
        -480,
        -660,
        -480,
        -660,
        -480
      ]
    },
    {
      "name": "Antarctica/Davis",
      "abbrs": [
        "zzz",
        "DAVT",
        "zzz",
        "DAVT",
        "DAVT",
        "DAVT",
        "DAVT",
        "DAVT"
      ],
      "untils": [
        -409190400000,
        -163062000000,
        -28857600000,
        1255806000000,
        1268251200000,
        1319742000000,
        1329854400000,
        null
      ],
      "offsets": [
        0,
        -420,
        0,
        -420,
        -300,
        -420,
        -300,
        -420
      ]
    },
    {
      "name": "Antarctica/DumontDUrville",
      "abbrs": [
        "zzz",
        "PMT",
        "zzz",
        "DDUT"
      ],
      "untils": [
        -725846400000,
        -566992800000,
        -415497600000,
        null
      ],
      "offsets": [
        0,
        -600,
        0,
        -600
      ]
    },
    {
      "name": "Antarctica/Macquarie",
      "abbrs": [
        "AEST",
        "AEDT",
        "AEST",
        "zzz",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "MIST"
      ],
      "untils": [
        -1680508800000,
        -1665392400000,
        -1601719200000,
        -687052800000,
        -71136000000,
        -55411200000,
        -37267200000,
        -25776000000,
        -5817600000,
        5673600000,
        25632000000,
        37728000000,
        57686400000,
        67968000000,
        89136000000,
        100022400000,
        120585600000,
        131472000000,
        152035200000,
        162921600000,
        183484800000,
        194976000000,
        215539200000,
        226425600000,
        246988800000,
        257875200000,
        278438400000,
        289324800000,
        309888000000,
        320774400000,
        341337600000,
        352224000000,
        372787200000,
        386092800000,
        404841600000,
        417542400000,
        436291200000,
        447177600000,
        467740800000,
        478627200000,
        499190400000,
        510076800000,
        530035200000,
        542736000000,
        562089600000,
        574790400000,
        594144000000,
        606240000000,
        625593600000,
        637689600000,
        657043200000,
        670348800000,
        686678400000,
        701798400000,
        718128000000,
        733248000000,
        749577600000,
        764697600000,
        781027200000,
        796147200000,
        812476800000,
        828201600000,
        844531200000,
        859651200000,
        875980800000,
        891100800000,
        907430400000,
        922550400000,
        938880000000,
        954000000000,
        967305600000,
        985449600000,
        1002384000000,
        1017504000000,
        1033833600000,
        1048953600000,
        1065283200000,
        1080403200000,
        1096732800000,
        1111852800000,
        1128182400000,
        1143907200000,
        1159632000000,
        1174752000000,
        1191686400000,
        1207411200000,
        1223136000000,
        1238860800000,
        1254585600000,
        1270310400000,
        null
      ],
      "offsets": [
        -600,
        -660,
        -600,
        0,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -660
      ]
    },
    {
      "name": "Antarctica/Mawson",
      "abbrs": [
        "zzz",
        "MAWT",
        "MAWT"
      ],
      "untils": [
        -501206400000,
        1255809600000,
        null
      ],
      "offsets": [
        0,
        -360,
        -300
      ]
    },
    {
      "name": "Antarctica/McMurdo",
      "abbrs": [
        "NZMT",
        "NZST",
        "NZMT",
        "NZST",
        "NZMT",
        "NZST",
        "NZMT",
        "NZST",
        "NZMT",
        "NZST",
        "NZMT",
        "NZST",
        "NZMT",
        "NZST",
        "NZMT",
        "NZST",
        "NZMT",
        "NZST",
        "NZMT",
        "NZST",
        "NZMT",
        "NZST",
        "NZMT",
        "NZST",
        "NZMT",
        "NZST",
        "NZMT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT"
      ],
      "untils": [
        -1330335000000,
        -1320057000000,
        -1300699800000,
        -1287396000000,
        -1269250200000,
        -1255946400000,
        -1237800600000,
        -1224496800000,
        -1206351000000,
        -1192442400000,
        -1174901400000,
        -1160992800000,
        -1143451800000,
        -1125914400000,
        -1112607000000,
        -1094464800000,
        -1081157400000,
        -1063015200000,
        -1049707800000,
        -1031565600000,
        -1018258200000,
        -1000116000000,
        -986808600000,
        -968061600000,
        -955359000000,
        -936612000000,
        -923304600000,
        152632800000,
        162309600000,
        183477600000,
        194968800000,
        215532000000,
        226418400000,
        246981600000,
        257868000000,
        278431200000,
        289317600000,
        309880800000,
        320767200000,
        341330400000,
        352216800000,
        372780000000,
        384271200000,
        404834400000,
        415720800000,
        436284000000,
        447170400000,
        467733600000,
        478620000000,
        499183200000,
        510069600000,
        530632800000,
        541519200000,
        562082400000,
        573573600000,
        594136800000,
        605023200000,
        623772000000,
        637682400000,
        655221600000,
        669132000000,
        686671200000,
        700581600000,
        718120800000,
        732636000000,
        749570400000,
        764085600000,
        781020000000,
        795535200000,
        812469600000,
        826984800000,
        844524000000,
        858434400000,
        875973600000,
        889884000000,
        907423200000,
        921938400000,
        938872800000,
        953388000000,
        970322400000,
        984837600000,
        1002376800000,
        1016287200000,
        1033826400000,
        1047736800000,
        1065276000000,
        1079791200000,
        1096725600000,
        1111240800000,
        1128175200000,
        1142690400000,
        1159624800000,
        1174140000000,
        1191074400000,
        1207404000000,
        1222524000000,
        1238853600000,
        1253973600000,
        1270303200000,
        1285423200000,
        1301752800000,
        1316872800000,
        1333202400000,
        1348927200000,
        1365256800000,
        1380376800000,
        1396706400000,
        1411826400000,
        1428156000000,
        1443276000000,
        1459605600000,
        1474725600000,
        1491055200000,
        1506175200000,
        1522504800000,
        1538229600000,
        1554559200000,
        1569679200000,
        1586008800000,
        1601128800000,
        1617458400000,
        1632578400000,
        1648908000000,
        1664028000000,
        1680357600000,
        1695477600000,
        1712412000000,
        1727532000000,
        1743861600000,
        1758981600000,
        1775311200000,
        1790431200000,
        1806760800000,
        1821880800000,
        1838210400000,
        1853330400000,
        1869660000000,
        1885384800000,
        1901714400000,
        1916834400000,
        1933164000000,
        1948284000000,
        1964613600000,
        1979733600000,
        1996063200000,
        2011183200000,
        2027512800000,
        2042632800000,
        2058962400000,
        2074687200000,
        2091016800000,
        2106136800000,
        2122466400000,
        2137586400000,
        null
      ],
      "offsets": [
        -690,
        -750,
        -690,
        -720,
        -690,
        -720,
        -690,
        -720,
        -690,
        -720,
        -690,
        -720,
        -690,
        -720,
        -690,
        -720,
        -690,
        -720,
        -690,
        -720,
        -690,
        -720,
        -690,
        -720,
        -690,
        -720,
        -690,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780
      ]
    },
    {
      "name": "Antarctica/Palmer",
      "abbrs": [
        "zzz",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ARST",
        "ART",
        "ART",
        "ARST",
        "ART",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT"
      ],
      "untils": [
        -157766400000,
        -152658000000,
        -132955200000,
        -121122000000,
        -101419200000,
        -86821200000,
        -71092800000,
        -54766800000,
        -39038400000,
        -23317200000,
        -7588800000,
        128142000000,
        136605600000,
        389070000000,
        403070400000,
        416372400000,
        434520000000,
        447822000000,
        466574400000,
        479271600000,
        498024000000,
        510721200000,
        529473600000,
        545194800000,
        560923200000,
        574225200000,
        592372800000,
        605674800000,
        624427200000,
        637124400000,
        653457600000,
        668574000000,
        687326400000,
        700628400000,
        718776000000,
        732078000000,
        750225600000,
        763527600000,
        781675200000,
        794977200000,
        813729600000,
        826426800000,
        845179200000,
        859690800000,
        876628800000,
        889930800000,
        906868800000,
        923194800000,
        939528000000,
        952830000000,
        971582400000,
        984279600000,
        1003032000000,
        1015729200000,
        1034481600000,
        1047178800000,
        1065931200000,
        1079233200000,
        1097380800000,
        1110682800000,
        1128830400000,
        1142132400000,
        1160884800000,
        1173582000000,
        1192334400000,
        1206846000000,
        1223784000000,
        1237086000000,
        1255233600000,
        1270350000000,
        1286683200000,
        1304823600000,
        1313899200000,
        1335668400000,
        1346558400000,
        1367118000000,
        1378612800000,
        1398567600000,
        1410062400000,
        1430017200000,
        null
      ],
      "offsets": [
        0,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        120,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        180
      ]
    },
    {
      "name": "Antarctica/Rothera",
      "abbrs": [
        "zzz",
        "ROTT"
      ],
      "untils": [
        218246400000,
        null
      ],
      "offsets": [
        0,
        180
      ]
    },
    {
      "name": "Antarctica/South_Pole",
      "abbrs": [
        "NZMT",
        "NZST",
        "NZMT",
        "NZST",
        "NZMT",
        "NZST",
        "NZMT",
        "NZST",
        "NZMT",
        "NZST",
        "NZMT",
        "NZST",
        "NZMT",
        "NZST",
        "NZMT",
        "NZST",
        "NZMT",
        "NZST",
        "NZMT",
        "NZST",
        "NZMT",
        "NZST",
        "NZMT",
        "NZST",
        "NZMT",
        "NZST",
        "NZMT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT"
      ],
      "untils": [
        -1330335000000,
        -1320057000000,
        -1300699800000,
        -1287396000000,
        -1269250200000,
        -1255946400000,
        -1237800600000,
        -1224496800000,
        -1206351000000,
        -1192442400000,
        -1174901400000,
        -1160992800000,
        -1143451800000,
        -1125914400000,
        -1112607000000,
        -1094464800000,
        -1081157400000,
        -1063015200000,
        -1049707800000,
        -1031565600000,
        -1018258200000,
        -1000116000000,
        -986808600000,
        -968061600000,
        -955359000000,
        -936612000000,
        -923304600000,
        152632800000,
        162309600000,
        183477600000,
        194968800000,
        215532000000,
        226418400000,
        246981600000,
        257868000000,
        278431200000,
        289317600000,
        309880800000,
        320767200000,
        341330400000,
        352216800000,
        372780000000,
        384271200000,
        404834400000,
        415720800000,
        436284000000,
        447170400000,
        467733600000,
        478620000000,
        499183200000,
        510069600000,
        530632800000,
        541519200000,
        562082400000,
        573573600000,
        594136800000,
        605023200000,
        623772000000,
        637682400000,
        655221600000,
        669132000000,
        686671200000,
        700581600000,
        718120800000,
        732636000000,
        749570400000,
        764085600000,
        781020000000,
        795535200000,
        812469600000,
        826984800000,
        844524000000,
        858434400000,
        875973600000,
        889884000000,
        907423200000,
        921938400000,
        938872800000,
        953388000000,
        970322400000,
        984837600000,
        1002376800000,
        1016287200000,
        1033826400000,
        1047736800000,
        1065276000000,
        1079791200000,
        1096725600000,
        1111240800000,
        1128175200000,
        1142690400000,
        1159624800000,
        1174140000000,
        1191074400000,
        1207404000000,
        1222524000000,
        1238853600000,
        1253973600000,
        1270303200000,
        1285423200000,
        1301752800000,
        1316872800000,
        1333202400000,
        1348927200000,
        1365256800000,
        1380376800000,
        1396706400000,
        1411826400000,
        1428156000000,
        1443276000000,
        1459605600000,
        1474725600000,
        1491055200000,
        1506175200000,
        1522504800000,
        1538229600000,
        1554559200000,
        1569679200000,
        1586008800000,
        1601128800000,
        1617458400000,
        1632578400000,
        1648908000000,
        1664028000000,
        1680357600000,
        1695477600000,
        1712412000000,
        1727532000000,
        1743861600000,
        1758981600000,
        1775311200000,
        1790431200000,
        1806760800000,
        1821880800000,
        1838210400000,
        1853330400000,
        1869660000000,
        1885384800000,
        1901714400000,
        1916834400000,
        1933164000000,
        1948284000000,
        1964613600000,
        1979733600000,
        1996063200000,
        2011183200000,
        2027512800000,
        2042632800000,
        2058962400000,
        2074687200000,
        2091016800000,
        2106136800000,
        2122466400000,
        2137586400000,
        null
      ],
      "offsets": [
        -690,
        -750,
        -690,
        -720,
        -690,
        -720,
        -690,
        -720,
        -690,
        -720,
        -690,
        -720,
        -690,
        -720,
        -690,
        -720,
        -690,
        -720,
        -690,
        -720,
        -690,
        -720,
        -690,
        -720,
        -690,
        -720,
        -690,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780
      ]
    },
    {
      "name": "Antarctica/Syowa",
      "abbrs": [
        "zzz",
        "SYOT"
      ],
      "untils": [
        -407808000000,
        null
      ],
      "offsets": [
        0,
        -180
      ]
    },
    {
      "name": "Antarctica/Troll",
      "abbrs": [
        "zzz",
        "UTC",
        "CEST",
        "UTC",
        "CEST",
        "UTC",
        "CEST",
        "UTC",
        "CEST",
        "UTC",
        "CEST",
        "UTC",
        "CEST",
        "UTC",
        "CEST",
        "UTC",
        "CEST",
        "UTC",
        "CEST",
        "UTC",
        "CEST",
        "UTC",
        "CEST",
        "UTC",
        "CEST",
        "UTC",
        "CEST",
        "UTC",
        "CEST",
        "UTC",
        "CEST",
        "UTC",
        "CEST",
        "UTC",
        "CEST",
        "UTC",
        "CEST",
        "UTC",
        "CEST",
        "UTC",
        "CEST",
        "UTC",
        "CEST",
        "UTC",
        "CEST",
        "UTC",
        "CEST",
        "UTC",
        "CEST",
        "UTC",
        "CEST",
        "UTC",
        "CEST",
        "UTC",
        "CEST",
        "UTC",
        "CEST",
        "UTC",
        "CEST",
        "UTC",
        "CEST",
        "UTC",
        "CEST",
        "UTC",
        "CEST",
        "UTC",
        "CEST",
        "UTC"
      ],
      "untils": [
        1108166400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        0,
        0,
        -120,
        0,
        -120,
        0,
        -120,
        0,
        -120,
        0,
        -120,
        0,
        -120,
        0,
        -120,
        0,
        -120,
        0,
        -120,
        0,
        -120,
        0,
        -120,
        0,
        -120,
        0,
        -120,
        0,
        -120,
        0,
        -120,
        0,
        -120,
        0,
        -120,
        0,
        -120,
        0,
        -120,
        0,
        -120,
        0,
        -120,
        0,
        -120,
        0,
        -120,
        0,
        -120,
        0,
        -120,
        0,
        -120,
        0,
        -120,
        0,
        -120,
        0,
        -120,
        0,
        -120,
        0,
        -120,
        0,
        -120,
        0,
        -120,
        0
      ]
    },
    {
      "name": "Antarctica/Vostok",
      "abbrs": [
        "zzz",
        "VOST"
      ],
      "untils": [
        -380073600000,
        null
      ],
      "offsets": [
        0,
        -360
      ]
    },
    {
      "name": "Arctic/Longyearbyen",
      "abbrs": [
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET"
      ],
      "untils": [
        -1691884800000,
        -1680573600000,
        -927511200000,
        -857257200000,
        -844556400000,
        -828226800000,
        -812502000000,
        -796777200000,
        -781052400000,
        -765327600000,
        -340844400000,
        -324514800000,
        -308790000000,
        -293065200000,
        -277340400000,
        -261615600000,
        -245890800000,
        -230166000000,
        -214441200000,
        -198716400000,
        -182991600000,
        -166662000000,
        -147913200000,
        -135212400000,
        323830800000,
        338950800000,
        354675600000,
        370400400000,
        386125200000,
        401850000000,
        417574800000,
        433299600000,
        449024400000,
        465354000000,
        481078800000,
        496803600000,
        512528400000,
        528253200000,
        543978000000,
        559702800000,
        575427600000,
        591152400000,
        606877200000,
        622602000000,
        638326800000,
        654656400000,
        670381200000,
        686106000000,
        701830800000,
        717555600000,
        733280400000,
        749005200000,
        764730000000,
        780454800000,
        796179600000,
        811904400000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60
      ]
    },
    {
      "name": "Asia/Aden",
      "abbrs": [
        "LMT",
        "AST"
      ],
      "untils": [
        -719636812000,
        null
      ],
      "offsets": [
        -186.8667,
        -180
      ]
    },
    {
      "name": "Asia/Almaty",
      "abbrs": [
        "LMT",
        "ALMT",
        "ALMT",
        "ALMST",
        "ALMT",
        "ALMST",
        "ALMT",
        "ALMST",
        "ALMT",
        "ALMST",
        "ALMT",
        "ALMST",
        "ALMT",
        "ALMST",
        "ALMT",
        "ALMST",
        "ALMT",
        "ALMST",
        "ALMT",
        "ALMST",
        "ALMT",
        "ALMST",
        "ALMT",
        "ALMST",
        "ALMT",
        "ALMST",
        "ALMT",
        "ALMST",
        "ALMT",
        "ALMST",
        "ALMT",
        "ALMST",
        "ALMT",
        "ALMST",
        "ALMT",
        "ALMST",
        "ALMT",
        "ALMST",
        "ALMT",
        "ALMST",
        "ALMT",
        "ALMST",
        "ALMT",
        "ALMST",
        "ALMT",
        "ALMST",
        "ALMT",
        "ALMST",
        "ALMT"
      ],
      "untils": [
        -1441170468000,
        -1247547600000,
        354909600000,
        370717200000,
        386445600000,
        402253200000,
        417981600000,
        433789200000,
        449604000000,
        465336000000,
        481060800000,
        496785600000,
        512510400000,
        528235200000,
        543960000000,
        559684800000,
        575409600000,
        591134400000,
        606859200000,
        622584000000,
        638308800000,
        654638400000,
        701802000000,
        717523200000,
        733262400000,
        748987200000,
        764712000000,
        780436800000,
        796161600000,
        811886400000,
        828216000000,
        846360000000,
        859665600000,
        877809600000,
        891115200000,
        909259200000,
        922564800000,
        941313600000,
        954014400000,
        972763200000,
        985464000000,
        1004212800000,
        1017518400000,
        1035662400000,
        1048968000000,
        1067112000000,
        1080417600000,
        1099166400000,
        null
      ],
      "offsets": [
        -307.8,
        -300,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360
      ]
    },
    {
      "name": "Asia/Amman",
      "abbrs": [
        "LMT",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET"
      ],
      "untils": [
        -1230776624000,
        108165600000,
        118270800000,
        136591200000,
        149806800000,
        168127200000,
        181342800000,
        199749600000,
        215643600000,
        231285600000,
        244501200000,
        262735200000,
        275950800000,
        481154400000,
        496962000000,
        512949600000,
        528670800000,
        544399200000,
        560120400000,
        575848800000,
        592174800000,
        610581600000,
        623624400000,
        641167200000,
        655074000000,
        671839200000,
        685918800000,
        702856800000,
        717973200000,
        733701600000,
        749422800000,
        765151200000,
        779662800000,
        797205600000,
        811116000000,
        828655200000,
        843170400000,
        860104800000,
        874620000000,
        891554400000,
        906069600000,
        930780000000,
        938124000000,
        954367200000,
        970178400000,
        985816800000,
        1001628000000,
        1017352800000,
        1033077600000,
        1048802400000,
        1066946400000,
        1080252000000,
        1097791200000,
        1112306400000,
        1128031200000,
        1143756000000,
        1161900000000,
        1175205600000,
        1193349600000,
        1206655200000,
        1225404000000,
        1238104800000,
        1256853600000,
        1269554400000,
        1288303200000,
        1301608800000,
        1319752800000,
        1333058400000,
        1387486800000,
        1395957600000,
        1414706400000,
        1427407200000,
        1446156000000,
        1459461600000,
        1477605600000,
        1490911200000,
        1509055200000,
        1522360800000,
        1540504800000,
        1553810400000,
        1571954400000,
        1585260000000,
        1604008800000,
        1616709600000,
        1635458400000,
        1648764000000,
        1666908000000,
        1680213600000,
        1698357600000,
        1711663200000,
        1729807200000,
        1743112800000,
        1761861600000,
        1774562400000,
        1793311200000,
        1806012000000,
        1824760800000,
        1838066400000,
        1856210400000,
        1869516000000,
        1887660000000,
        1900965600000,
        1919109600000,
        1932415200000,
        1951164000000,
        1963864800000,
        1982613600000,
        1995919200000,
        2014063200000,
        2027368800000,
        2045512800000,
        2058818400000,
        2076962400000,
        2090268000000,
        2109016800000,
        2121717600000,
        2140466400000,
        null
      ],
      "offsets": [
        -143.7333,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120
      ]
    },
    {
      "name": "Asia/Anadyr",
      "abbrs": [
        "LMT",
        "ANAT",
        "ANAT",
        "ANAST",
        "ANAT",
        "ANAST",
        "ANAT",
        "ANAST",
        "ANAT",
        "ANAST",
        "ANAT",
        "ANAST",
        "ANAT",
        "ANAST",
        "ANAT",
        "ANAST",
        "ANAT",
        "ANAST",
        "ANAT",
        "ANAST",
        "ANAT",
        "ANAST",
        "ANAT",
        "ANAST",
        "ANAT",
        "ANAT",
        "ANAST",
        "ANAT",
        "ANAST",
        "ANAT",
        "ANAST",
        "ANAT",
        "ANAST",
        "ANAT",
        "ANAST",
        "ANAT",
        "ANAST",
        "ANAT",
        "ANAST",
        "ANAT",
        "ANAST",
        "ANAT",
        "ANAST",
        "ANAT",
        "ANAST",
        "ANAT",
        "ANAST",
        "ANAT",
        "ANAST",
        "ANAT",
        "ANAST",
        "ANAT",
        "ANAST",
        "ANAT",
        "ANAST",
        "ANAT",
        "ANAST",
        "ANAT",
        "ANAST",
        "ANAT",
        "ANAST",
        "ANAT",
        "ANAST",
        "ANAT",
        "ANAT"
      ],
      "untils": [
        -1441194596000,
        -1247572800000,
        354884400000,
        370692000000,
        386420400000,
        402231600000,
        417960000000,
        433767600000,
        449582400000,
        465314400000,
        481039200000,
        496764000000,
        512488800000,
        528213600000,
        543938400000,
        559663200000,
        575388000000,
        591112800000,
        606837600000,
        622562400000,
        638287200000,
        654616800000,
        670341600000,
        686070000000,
        695746800000,
        701780400000,
        717501600000,
        733240800000,
        748965600000,
        764690400000,
        780415200000,
        796140000000,
        811864800000,
        828194400000,
        846338400000,
        859644000000,
        877788000000,
        891093600000,
        909237600000,
        922543200000,
        941292000000,
        953992800000,
        972741600000,
        985442400000,
        1004191200000,
        1017496800000,
        1035640800000,
        1048946400000,
        1067090400000,
        1080396000000,
        1099144800000,
        1111845600000,
        1130594400000,
        1143295200000,
        1162044000000,
        1174744800000,
        1193493600000,
        1206799200000,
        1224943200000,
        1238248800000,
        1256392800000,
        1269698400000,
        1288450800000,
        1301151600000,
        null
      ],
      "offsets": [
        -709.9333,
        -720,
        -780,
        -840,
        -780,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -720,
        -660,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -720,
        -660,
        -720
      ]
    },
    {
      "name": "Asia/Aqtau",
      "abbrs": [
        "LMT",
        "FORT",
        "FORT",
        "SHET",
        "SHET",
        "SHEST",
        "SHET",
        "SHEST",
        "SHET",
        "SHEST",
        "SHET",
        "SHEST",
        "SHET",
        "SHEST",
        "SHET",
        "SHEST",
        "SHET",
        "SHEST",
        "SHET",
        "SHEST",
        "SHET",
        "SHEST",
        "SHET",
        "AQTT",
        "AQTST",
        "AQTT",
        "AQTST",
        "AQTT",
        "AQTST",
        "AQTT",
        "AQTST",
        "AQTT",
        "AQTST",
        "AQTT",
        "AQTST",
        "AQTT",
        "AQTST",
        "AQTT",
        "AQTST",
        "AQTT",
        "AQTST",
        "AQTT",
        "AQTST",
        "AQTT",
        "AQTST",
        "AQTT",
        "AQTST",
        "AQTT",
        "AQTST",
        "AQTT",
        "AQTT"
      ],
      "untils": [
        -1441164064000,
        -1247544000000,
        -220942800000,
        370724400000,
        386445600000,
        402256800000,
        417985200000,
        433792800000,
        449607600000,
        465339600000,
        481064400000,
        496789200000,
        512514000000,
        528238800000,
        543963600000,
        559688400000,
        575413200000,
        591138000000,
        606862800000,
        622587600000,
        638312400000,
        654642000000,
        692823600000,
        701805600000,
        717526800000,
        733266000000,
        748990800000,
        764715600000,
        780440400000,
        796165200000,
        811893600000,
        828223200000,
        846367200000,
        859672800000,
        877816800000,
        891122400000,
        909266400000,
        922572000000,
        941320800000,
        954021600000,
        972770400000,
        985471200000,
        1004220000000,
        1017525600000,
        1035669600000,
        1048975200000,
        1067119200000,
        1080424800000,
        1099173600000,
        1110830400000,
        null
      ],
      "offsets": [
        -201.0667,
        -240,
        -300,
        -300,
        -360,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300
      ]
    },
    {
      "name": "Asia/Aqtobe",
      "abbrs": [
        "LMT",
        "AKTT",
        "AKTT",
        "AKTST",
        "AKTT",
        "AKTST",
        "AKTT",
        "AKTST",
        "AKTT",
        "AKTST",
        "AKTT",
        "AKTST",
        "AKTT",
        "AKTST",
        "AKTT",
        "AKTST",
        "AKTT",
        "AKTST",
        "AKTT",
        "AKTST",
        "AKTT",
        "AKTST",
        "AKTT",
        "AQTT",
        "AQTST",
        "AQTT",
        "AQTST",
        "AQTT",
        "AQTST",
        "AQTT",
        "AQTST",
        "AQTT",
        "AQTST",
        "AQTT",
        "AQTST",
        "AQTT",
        "AQTST",
        "AQTT",
        "AQTST",
        "AQTT",
        "AQTST",
        "AQTT",
        "AQTST",
        "AQTT",
        "AQTST",
        "AQTT",
        "AQTST",
        "AQTT",
        "AQTST",
        "AQTT"
      ],
      "untils": [
        -1441165720000,
        -1247544000000,
        354913200000,
        370720800000,
        386445600000,
        402256800000,
        417985200000,
        433792800000,
        449607600000,
        465339600000,
        481064400000,
        496789200000,
        512514000000,
        528238800000,
        543963600000,
        559688400000,
        575413200000,
        591138000000,
        606862800000,
        622587600000,
        638312400000,
        654642000000,
        692823600000,
        701805600000,
        717526800000,
        733266000000,
        748990800000,
        764715600000,
        780440400000,
        796165200000,
        811890000000,
        828219600000,
        846363600000,
        859669200000,
        877813200000,
        891118800000,
        909262800000,
        922568400000,
        941317200000,
        954018000000,
        972766800000,
        985467600000,
        1004216400000,
        1017522000000,
        1035666000000,
        1048971600000,
        1067115600000,
        1080421200000,
        1099170000000,
        null
      ],
      "offsets": [
        -228.6667,
        -240,
        -300,
        -360,
        -360,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300
      ]
    },
    {
      "name": "Asia/Ashgabat",
      "abbrs": [
        "LMT",
        "ASHT",
        "ASHT",
        "ASHST",
        "ASHT",
        "ASHST",
        "ASHT",
        "ASHST",
        "ASHT",
        "ASHST",
        "ASHT",
        "ASHST",
        "ASHT",
        "ASHST",
        "ASHT",
        "ASHST",
        "ASHT",
        "ASHST",
        "ASHT",
        "ASHST",
        "ASHT",
        "ASHST",
        "ASHT",
        "ASHST",
        "ASHT",
        "TMT",
        "TMT"
      ],
      "untils": [
        -1441166012000,
        -1247544000000,
        354913200000,
        370720800000,
        386449200000,
        402256800000,
        417985200000,
        433792800000,
        449607600000,
        465339600000,
        481064400000,
        496789200000,
        512514000000,
        528238800000,
        543963600000,
        559688400000,
        575413200000,
        591138000000,
        606862800000,
        622587600000,
        638312400000,
        654642000000,
        670366800000,
        686095200000,
        688507200000,
        695772000000,
        null
      ],
      "offsets": [
        -233.5333,
        -240,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -300,
        -240,
        -240,
        -300
      ]
    },
    {
      "name": "Asia/Ashkhabad",
      "abbrs": [
        "LMT",
        "ASHT",
        "ASHT",
        "ASHST",
        "ASHT",
        "ASHST",
        "ASHT",
        "ASHST",
        "ASHT",
        "ASHST",
        "ASHT",
        "ASHST",
        "ASHT",
        "ASHST",
        "ASHT",
        "ASHST",
        "ASHT",
        "ASHST",
        "ASHT",
        "ASHST",
        "ASHT",
        "ASHST",
        "ASHT",
        "ASHST",
        "ASHT",
        "TMT",
        "TMT"
      ],
      "untils": [
        -1441166012000,
        -1247544000000,
        354913200000,
        370720800000,
        386449200000,
        402256800000,
        417985200000,
        433792800000,
        449607600000,
        465339600000,
        481064400000,
        496789200000,
        512514000000,
        528238800000,
        543963600000,
        559688400000,
        575413200000,
        591138000000,
        606862800000,
        622587600000,
        638312400000,
        654642000000,
        670366800000,
        686095200000,
        688507200000,
        695772000000,
        null
      ],
      "offsets": [
        -233.5333,
        -240,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -300,
        -240,
        -240,
        -300
      ]
    },
    {
      "name": "Asia/Baghdad",
      "abbrs": [
        "BMT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST"
      ],
      "untils": [
        -1641005856000,
        389048400000,
        402264000000,
        417906000000,
        433800000000,
        449614800000,
        465422400000,
        481150800000,
        496792800000,
        512517600000,
        528242400000,
        543967200000,
        559692000000,
        575416800000,
        591141600000,
        606866400000,
        622591200000,
        638316000000,
        654645600000,
        670464000000,
        686275200000,
        702086400000,
        717897600000,
        733622400000,
        749433600000,
        765158400000,
        780969600000,
        796694400000,
        812505600000,
        828316800000,
        844128000000,
        859852800000,
        875664000000,
        891388800000,
        907200000000,
        922924800000,
        938736000000,
        954547200000,
        970358400000,
        986083200000,
        1001894400000,
        1017619200000,
        1033430400000,
        1049155200000,
        1064966400000,
        1080777600000,
        1096588800000,
        1112313600000,
        1128124800000,
        1143849600000,
        1159660800000,
        1175385600000,
        1191196800000,
        null
      ],
      "offsets": [
        -177.6,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180
      ]
    },
    {
      "name": "Asia/Bahrain",
      "abbrs": [
        "LMT",
        "GST",
        "AST"
      ],
      "untils": [
        -1577935568000,
        76190400000,
        null
      ],
      "offsets": [
        -206.1333,
        -240,
        -180
      ]
    },
    {
      "name": "Asia/Baku",
      "abbrs": [
        "LMT",
        "BAKT",
        "BAKT",
        "BAKST",
        "BAKT",
        "BAKST",
        "BAKT",
        "BAKST",
        "BAKT",
        "BAKST",
        "BAKT",
        "BAKST",
        "BAKT",
        "BAKST",
        "BAKT",
        "BAKST",
        "BAKT",
        "BAKST",
        "BAKT",
        "BAKST",
        "BAKT",
        "BAKST",
        "BAKT",
        "BAKST",
        "AZST",
        "AZT",
        "AZST",
        "AZT",
        "AZST",
        "AZT",
        "AZST",
        "AZT",
        "AZST",
        "AZT",
        "AZST",
        "AZT",
        "AZST",
        "AZT",
        "AZST",
        "AZT",
        "AZST",
        "AZT",
        "AZST",
        "AZT",
        "AZST",
        "AZT",
        "AZST",
        "AZT",
        "AZST",
        "AZT",
        "AZST",
        "AZT",
        "AZST",
        "AZT",
        "AZST",
        "AZT",
        "AZST",
        "AZT",
        "AZST",
        "AZT",
        "AZST",
        "AZT",
        "AZST",
        "AZT",
        "AZST",
        "AZT",
        "AZST",
        "AZT",
        "AZST",
        "AZT",
        "AZST",
        "AZT",
        "AZST",
        "AZT",
        "AZST",
        "AZT",
        "AZST",
        "AZT",
        "AZST",
        "AZT",
        "AZST",
        "AZT",
        "AZST",
        "AZT",
        "AZST",
        "AZT",
        "AZST",
        "AZT",
        "AZST",
        "AZT",
        "AZST",
        "AZT",
        "AZST",
        "AZT",
        "AZST",
        "AZT",
        "AZST",
        "AZT",
        "AZST",
        "AZT",
        "AZST",
        "AZT",
        "AZST",
        "AZT",
        "AZST",
        "AZT",
        "AZST",
        "AZT",
        "AZST",
        "AZT",
        "AZST",
        "AZT"
      ],
      "untils": [
        -1441163964000,
        -405140400000,
        354916800000,
        370724400000,
        386452800000,
        402260400000,
        417988800000,
        433796400000,
        449611200000,
        465343200000,
        481068000000,
        496792800000,
        512517600000,
        528242400000,
        543967200000,
        559692000000,
        575416800000,
        591141600000,
        606866400000,
        622591200000,
        638316000000,
        654645600000,
        670370400000,
        683496000000,
        686098800000,
        701812800000,
        717534000000,
        828234000000,
        846378000000,
        859680000000,
        877824000000,
        891129600000,
        909273600000,
        922579200000,
        941328000000,
        954028800000,
        972777600000,
        985478400000,
        1004227200000,
        1017532800000,
        1035676800000,
        1048982400000,
        1067126400000,
        1080432000000,
        1099180800000,
        1111881600000,
        1130630400000,
        1143331200000,
        1162080000000,
        1174780800000,
        1193529600000,
        1206835200000,
        1224979200000,
        1238284800000,
        1256428800000,
        1269734400000,
        1288483200000,
        1301184000000,
        1319932800000,
        1332633600000,
        1351382400000,
        1364688000000,
        1382832000000,
        1396137600000,
        1414281600000,
        1427587200000,
        1445731200000,
        1459036800000,
        1477785600000,
        1490486400000,
        1509235200000,
        1521936000000,
        1540684800000,
        1553990400000,
        1572134400000,
        1585440000000,
        1603584000000,
        1616889600000,
        1635638400000,
        1648339200000,
        1667088000000,
        1679788800000,
        1698537600000,
        1711843200000,
        1729987200000,
        1743292800000,
        1761436800000,
        1774742400000,
        1792886400000,
        1806192000000,
        1824940800000,
        1837641600000,
        1856390400000,
        1869091200000,
        1887840000000,
        1901145600000,
        1919289600000,
        1932595200000,
        1950739200000,
        1964044800000,
        1982793600000,
        1995494400000,
        2014243200000,
        2026944000000,
        2045692800000,
        2058393600000,
        2077142400000,
        2090448000000,
        2108592000000,
        2121897600000,
        2140041600000,
        null
      ],
      "offsets": [
        -199.4,
        -180,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -240,
        -240,
        -180,
        -240,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240
      ]
    },
    {
      "name": "Asia/Bangkok",
      "abbrs": [
        "BMT",
        "ICT"
      ],
      "untils": [
        -1570084924000,
        null
      ],
      "offsets": [
        -402.0667,
        -420
      ]
    },
    {
      "name": "Asia/Beirut",
      "abbrs": [
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET"
      ],
      "untils": [
        -1570413600000,
        -1552186800000,
        -1538359200000,
        -1522551600000,
        -1507514400000,
        -1490583600000,
        -1473645600000,
        -1460948400000,
        -399866400000,
        -386650800000,
        -368330400000,
        -355114800000,
        -336794400000,
        -323578800000,
        -305172000000,
        -291956400000,
        -273636000000,
        -260420400000,
        78012000000,
        86734800000,
        105055200000,
        118270800000,
        136591200000,
        149806800000,
        168127200000,
        181342800000,
        199749600000,
        212965200000,
        231285600000,
        244501200000,
        262735200000,
        275950800000,
        452210400000,
        466722000000,
        483746400000,
        498258000000,
        515282400000,
        529794000000,
        546818400000,
        561330000000,
        581119200000,
        592952400000,
        610754400000,
        624488400000,
        641512800000,
        656024400000,
        673048800000,
        687560400000,
        704671200000,
        718146000000,
        733269600000,
        748990800000,
        764719200000,
        780440400000,
        796168800000,
        811890000000,
        828223200000,
        843944400000,
        859672800000,
        875394000000,
        891122400000,
        906843600000,
        922572000000,
        941317200000,
        954021600000,
        972766800000,
        985471200000,
        1004216400000,
        1017525600000,
        1035666000000,
        1048975200000,
        1067115600000,
        1080424800000,
        1099170000000,
        1111874400000,
        1130619600000,
        1143324000000,
        1162069200000,
        1174773600000,
        1193518800000,
        1206828000000,
        1224968400000,
        1238277600000,
        1256418000000,
        1269727200000,
        1288472400000,
        1301176800000,
        1319922000000,
        1332626400000,
        1351371600000,
        1364680800000,
        1382821200000,
        1396130400000,
        1414270800000,
        1427580000000,
        1445720400000,
        1459029600000,
        1477774800000,
        1490479200000,
        1509224400000,
        1521928800000,
        1540674000000,
        1553983200000,
        1572123600000,
        1585432800000,
        1603573200000,
        1616882400000,
        1635627600000,
        1648332000000,
        1667077200000,
        1679781600000,
        1698526800000,
        1711836000000,
        1729976400000,
        1743285600000,
        1761426000000,
        1774735200000,
        1792875600000,
        1806184800000,
        1824930000000,
        1837634400000,
        1856379600000,
        1869084000000,
        1887829200000,
        1901138400000,
        1919278800000,
        1932588000000,
        1950728400000,
        1964037600000,
        1982782800000,
        1995487200000,
        2014232400000,
        2026936800000,
        2045682000000,
        2058386400000,
        2077131600000,
        2090440800000,
        2108581200000,
        2121890400000,
        2140030800000,
        null
      ],
      "offsets": [
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120
      ]
    },
    {
      "name": "Asia/Bishkek",
      "abbrs": [
        "LMT",
        "FRUT",
        "FRUT",
        "FRUST",
        "FRUT",
        "FRUST",
        "FRUT",
        "FRUST",
        "FRUT",
        "FRUST",
        "FRUT",
        "FRUST",
        "FRUT",
        "FRUST",
        "FRUT",
        "FRUST",
        "FRUT",
        "FRUST",
        "FRUT",
        "FRUST",
        "FRUT",
        "FRUST",
        "FRUT",
        "FRUST",
        "KGT",
        "KGST",
        "KGT",
        "KGST",
        "KGT",
        "KGST",
        "KGT",
        "KGST",
        "KGT",
        "KGST",
        "KGT",
        "KGST",
        "KGT",
        "KGST",
        "KGT",
        "KGST",
        "KGT",
        "KGST",
        "KGT",
        "KGST",
        "KGT",
        "KGST",
        "KGT",
        "KGST",
        "KGT",
        "KGST",
        "KGT",
        "KGST",
        "KGT"
      ],
      "untils": [
        -1441169904000,
        -1247547600000,
        354909600000,
        370717200000,
        386445600000,
        402253200000,
        417981600000,
        433789200000,
        449604000000,
        465336000000,
        481060800000,
        496785600000,
        512510400000,
        528235200000,
        543960000000,
        559684800000,
        575409600000,
        591134400000,
        606859200000,
        622584000000,
        638308800000,
        654638400000,
        670363200000,
        683582400000,
        703018800000,
        717530400000,
        734468400000,
        748980000000,
        765918000000,
        780429600000,
        797367600000,
        811879200000,
        828817200000,
        843933600000,
        859671000000,
        877811400000,
        891120600000,
        909261000000,
        922570200000,
        941315400000,
        954019800000,
        972765000000,
        985469400000,
        1004214600000,
        1017523800000,
        1035664200000,
        1048973400000,
        1067113800000,
        1080423000000,
        1099168200000,
        1111872600000,
        1123783200000,
        null
      ],
      "offsets": [
        -298.4,
        -300,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -360
      ]
    },
    {
      "name": "Asia/Brunei",
      "abbrs": [
        "LMT",
        "BNT",
        "BNT"
      ],
      "untils": [
        -1383464380000,
        -1167636600000,
        null
      ],
      "offsets": [
        -459.6667,
        -450,
        -480
      ]
    },
    {
      "name": "Asia/Calcutta",
      "abbrs": [
        "HMT",
        "BURT",
        "IST",
        "IST",
        "IST"
      ],
      "untils": [
        -891582800000,
        -872058600000,
        -862637400000,
        -764145000000,
        null
      ],
      "offsets": [
        -353.3333,
        -390,
        -330,
        -390,
        -330
      ]
    },
    {
      "name": "Asia/Chita",
      "abbrs": [
        "LMT",
        "YAKT",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKT",
        "IRKT"
      ],
      "untils": [
        -1579419232000,
        -1247558400000,
        354898800000,
        370706400000,
        386434800000,
        402242400000,
        417970800000,
        433778400000,
        449593200000,
        465325200000,
        481050000000,
        496774800000,
        512499600000,
        528224400000,
        543949200000,
        559674000000,
        575398800000,
        591123600000,
        606848400000,
        622573200000,
        638298000000,
        654627600000,
        670352400000,
        686080800000,
        695757600000,
        701791200000,
        717512400000,
        733251600000,
        748976400000,
        764701200000,
        780426000000,
        796150800000,
        811875600000,
        828205200000,
        846349200000,
        859654800000,
        877798800000,
        891104400000,
        909248400000,
        922554000000,
        941302800000,
        954003600000,
        972752400000,
        985453200000,
        1004202000000,
        1017507600000,
        1035651600000,
        1048957200000,
        1067101200000,
        1080406800000,
        1099155600000,
        1111856400000,
        1130605200000,
        1143306000000,
        1162054800000,
        1174755600000,
        1193504400000,
        1206810000000,
        1224954000000,
        1238259600000,
        1256403600000,
        1269709200000,
        1288458000000,
        1301158800000,
        1414252800000,
        null
      ],
      "offsets": [
        -453.8667,
        -480,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -540,
        -480,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -480
      ]
    },
    {
      "name": "Asia/Choibalsan",
      "abbrs": [
        "LMT",
        "ULAT",
        "ULAT",
        "CHOST",
        "CHOT",
        "CHOST",
        "CHOT",
        "CHOST",
        "CHOT",
        "CHOST",
        "CHOT",
        "CHOST",
        "CHOT",
        "CHOST",
        "CHOT",
        "CHOST",
        "CHOT",
        "CHOST",
        "CHOT",
        "CHOST",
        "CHOT",
        "CHOST",
        "CHOT",
        "CHOST",
        "CHOT",
        "CHOST",
        "CHOT",
        "CHOST",
        "CHOT",
        "CHOST",
        "CHOT",
        "CHOST",
        "CHOT",
        "CHOST",
        "CHOT",
        "CHOST",
        "CHOT",
        "CHOST",
        "CHOT",
        "CHOST",
        "CHOT",
        "CHOST",
        "CHOT",
        "CHOST",
        "CHOT",
        "CHOST",
        "CHOT",
        "CHOT",
        "CHOST",
        "CHOT",
        "CHOST",
        "CHOT",
        "CHOST",
        "CHOT",
        "CHOST",
        "CHOT",
        "CHOST",
        "CHOT",
        "CHOST",
        "CHOT",
        "CHOST",
        "CHOT",
        "CHOST",
        "CHOT",
        "CHOST",
        "CHOT",
        "CHOST",
        "CHOT",
        "CHOST",
        "CHOT",
        "CHOST",
        "CHOT",
        "CHOST",
        "CHOT",
        "CHOST",
        "CHOT",
        "CHOST",
        "CHOT",
        "CHOST",
        "CHOT",
        "CHOST",
        "CHOT",
        "CHOST",
        "CHOT",
        "CHOST",
        "CHOT",
        "CHOST",
        "CHOT",
        "CHOST",
        "CHOT",
        "CHOST",
        "CHOT",
        "CHOST",
        "CHOT"
      ],
      "untils": [
        -2032933080000,
        252435600000,
        417974400000,
        433778400000,
        449593200000,
        465314400000,
        481042800000,
        496764000000,
        512492400000,
        528213600000,
        543942000000,
        559663200000,
        575391600000,
        591112800000,
        606841200000,
        622562400000,
        638290800000,
        654616800000,
        670345200000,
        686066400000,
        701794800000,
        717516000000,
        733244400000,
        748965600000,
        764694000000,
        780415200000,
        796143600000,
        811864800000,
        828198000000,
        843919200000,
        859647600000,
        875368800000,
        891097200000,
        906818400000,
        988390800000,
        1001692800000,
        1017421200000,
        1033142400000,
        1048870800000,
        1064592000000,
        1080320400000,
        1096041600000,
        1111770000000,
        1127491200000,
        1143219600000,
        1159545600000,
        1206889200000,
        1427479200000,
        1443193200000,
        1458928800000,
        1474642800000,
        1490378400000,
        1506697200000,
        1522432800000,
        1538146800000,
        1553882400000,
        1569596400000,
        1585332000000,
        1601046000000,
        1616781600000,
        1632495600000,
        1648231200000,
        1663945200000,
        1679680800000,
        1695999600000,
        1711735200000,
        1727449200000,
        1743184800000,
        1758898800000,
        1774634400000,
        1790348400000,
        1806084000000,
        1821798000000,
        1837533600000,
        1853852400000,
        1869588000000,
        1885302000000,
        1901037600000,
        1916751600000,
        1932487200000,
        1948201200000,
        1963936800000,
        1979650800000,
        1995386400000,
        2011100400000,
        2026836000000,
        2043154800000,
        2058890400000,
        2074604400000,
        2090340000000,
        2106054000000,
        2121789600000,
        2137503600000,
        null
      ],
      "offsets": [
        -458,
        -420,
        -480,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480
      ]
    },
    {
      "name": "Asia/Chongqing",
      "abbrs": [
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST"
      ],
      "untils": [
        -933494400000,
        -923130000000,
        -908784000000,
        -891594000000,
        515520000000,
        527007600000,
        545155200000,
        558457200000,
        576604800000,
        589906800000,
        608659200000,
        621961200000,
        640108800000,
        653410800000,
        671558400000,
        684860400000,
        null
      ],
      "offsets": [
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480
      ]
    },
    {
      "name": "Asia/Chungking",
      "abbrs": [
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST"
      ],
      "untils": [
        -933494400000,
        -923130000000,
        -908784000000,
        -891594000000,
        515520000000,
        527007600000,
        545155200000,
        558457200000,
        576604800000,
        589906800000,
        608659200000,
        621961200000,
        640108800000,
        653410800000,
        671558400000,
        684860400000,
        null
      ],
      "offsets": [
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480
      ]
    },
    {
      "name": "Asia/Colombo",
      "abbrs": [
        "MMT",
        "IST",
        "IHST",
        "IST",
        "IST",
        "LKT",
        "LKT",
        "IST"
      ],
      "untils": [
        -2019705572000,
        -883287000000,
        -862639200000,
        -764051400000,
        832962600000,
        846266400000,
        1145039400000,
        null
      ],
      "offsets": [
        -319.5333,
        -330,
        -360,
        -390,
        -330,
        -390,
        -360,
        -330
      ]
    },
    {
      "name": "Asia/Dacca",
      "abbrs": [
        "HMT",
        "BURT",
        "IST",
        "BURT",
        "DACT",
        "BDT",
        "BDST",
        "BDT"
      ],
      "untils": [
        -891582800000,
        -872058600000,
        -862637400000,
        -576138600000,
        38772000000,
        1245430800000,
        1262278800000,
        null
      ],
      "offsets": [
        -353.3333,
        -390,
        -330,
        -390,
        -360,
        -360,
        -420,
        -360
      ]
    },
    {
      "name": "Asia/Damascus",
      "abbrs": [
        "LMT",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET"
      ],
      "untils": [
        -1577931912000,
        -1568592000000,
        -1554080400000,
        -1537142400000,
        -1522630800000,
        -1505692800000,
        -1491181200000,
        -1474243200000,
        -1459126800000,
        -242265600000,
        -228877200000,
        -210556800000,
        -197427600000,
        -178934400000,
        -165718800000,
        -147398400000,
        -134269200000,
        -116467200000,
        -102646800000,
        -84326400000,
        -71110800000,
        -52704000000,
        -39488400000,
        -21168000000,
        -7952400000,
        10368000000,
        23583600000,
        41904000000,
        55119600000,
        73526400000,
        86742000000,
        105062400000,
        118278000000,
        136598400000,
        149814000000,
        168134400000,
        181350000000,
        199756800000,
        212972400000,
        231292800000,
        241916400000,
        262828800000,
        273452400000,
        418694400000,
        433810800000,
        450316800000,
        465433200000,
        508896000000,
        529196400000,
        541555200000,
        562633200000,
        574387200000,
        594255600000,
        607305600000,
        623199600000,
        638928000000,
        654649200000,
        670456800000,
        686264400000,
        702684000000,
        717886800000,
        733096800000,
        748904400000,
        765151200000,
        780958800000,
        796687200000,
        812494800000,
        828309600000,
        844117200000,
        859759200000,
        875653200000,
        891208800000,
        907189200000,
        922917600000,
        938725200000,
        954540000000,
        970347600000,
        986076000000,
        1001883600000,
        1017612000000,
        1033419600000,
        1049148000000,
        1064955600000,
        1080770400000,
        1096578000000,
        1112306400000,
        1128114000000,
        1143842400000,
        1158872400000,
        1175205600000,
        1193950800000,
        1207260000000,
        1225486800000,
        1238104800000,
        1256850000000,
        1270159200000,
        1288299600000,
        1301608800000,
        1319749200000,
        1333058400000,
        1351198800000,
        1364508000000,
        1382648400000,
        1395957600000,
        1414702800000,
        1427407200000,
        1446152400000,
        1458856800000,
        1477602000000,
        1490911200000,
        1509051600000,
        1522360800000,
        1540501200000,
        1553810400000,
        1571950800000,
        1585260000000,
        1604005200000,
        1616709600000,
        1635454800000,
        1648159200000,
        1666904400000,
        1680213600000,
        1698354000000,
        1711663200000,
        1729803600000,
        1743112800000,
        1761858000000,
        1774562400000,
        1793307600000,
        1806012000000,
        1824757200000,
        1838066400000,
        1856206800000,
        1869516000000,
        1887656400000,
        1900965600000,
        1919106000000,
        1932415200000,
        1951160400000,
        1963864800000,
        1982610000000,
        1995314400000,
        2014059600000,
        2027368800000,
        2045509200000,
        2058818400000,
        2076958800000,
        2090268000000,
        2109013200000,
        2121717600000,
        2140462800000,
        null
      ],
      "offsets": [
        -145.2,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120
      ]
    },
    {
      "name": "Asia/Dhaka",
      "abbrs": [
        "HMT",
        "BURT",
        "IST",
        "BURT",
        "DACT",
        "BDT",
        "BDST",
        "BDT"
      ],
      "untils": [
        -891582800000,
        -872058600000,
        -862637400000,
        -576138600000,
        38772000000,
        1245430800000,
        1262278800000,
        null
      ],
      "offsets": [
        -353.3333,
        -390,
        -330,
        -390,
        -360,
        -360,
        -420,
        -360
      ]
    },
    {
      "name": "Asia/Dili",
      "abbrs": [
        "LMT",
        "TLT",
        "JST",
        "TLT",
        "WITA",
        "TLT"
      ],
      "untils": [
        -1830414140000,
        -879152400000,
        -766054800000,
        199897200000,
        969120000000,
        null
      ],
      "offsets": [
        -502.3333,
        -480,
        -540,
        -540,
        -480,
        -540
      ]
    },
    {
      "name": "Asia/Dubai",
      "abbrs": [
        "LMT",
        "GST"
      ],
      "untils": [
        -1577936472000,
        null
      ],
      "offsets": [
        -221.2,
        -240
      ]
    },
    {
      "name": "Asia/Dushanbe",
      "abbrs": [
        "LMT",
        "DUST",
        "DUST",
        "DUSST",
        "DUST",
        "DUSST",
        "DUST",
        "DUSST",
        "DUST",
        "DUSST",
        "DUST",
        "DUSST",
        "DUST",
        "DUSST",
        "DUST",
        "DUSST",
        "DUST",
        "DUSST",
        "DUST",
        "DUSST",
        "DUST",
        "DUSST",
        "DUST",
        "DUSST",
        "TJT"
      ],
      "untils": [
        -1441168512000,
        -1247547600000,
        354909600000,
        370717200000,
        386445600000,
        402253200000,
        417981600000,
        433789200000,
        449604000000,
        465336000000,
        481060800000,
        496785600000,
        512510400000,
        528235200000,
        543960000000,
        559684800000,
        575409600000,
        591134400000,
        606859200000,
        622584000000,
        638308800000,
        654638400000,
        670363200000,
        684363600000,
        null
      ],
      "offsets": [
        -275.2,
        -300,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -360,
        -300
      ]
    },
    {
      "name": "Asia/Gaza",
      "abbrs": [
        "EET",
        "EET",
        "EET",
        "EET",
        "EET",
        "EET",
        "EET",
        "EET",
        "EET",
        "EET",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET"
      ],
      "untils": [
        -933645600000,
        -857358000000,
        -844300800000,
        -825822000000,
        -812685600000,
        -794199600000,
        -779853600000,
        -762656400000,
        -748310400000,
        -731127600000,
        -399088800000,
        -386650800000,
        -368330400000,
        -355114800000,
        -336790800000,
        -323654400000,
        -305168400000,
        -292032000000,
        -273632400000,
        -260496000000,
        -242096400000,
        -228960000000,
        -210560400000,
        -197424000000,
        -178938000000,
        -165801600000,
        -147402000000,
        -134265600000,
        -115866000000,
        -102643200000,
        -84330000000,
        -81313200000,
        142380000000,
        150843600000,
        167176800000,
        178664400000,
        482277600000,
        495579600000,
        516751200000,
        526424400000,
        545436000000,
        558478800000,
        576626400000,
        589323600000,
        609890400000,
        620773200000,
        638316000000,
        651618000000,
        669765600000,
        683672400000,
        701820000000,
        715726800000,
        733701600000,
        747176400000,
        765151200000,
        778021200000,
        796600800000,
        810075600000,
        820447200000,
        828655200000,
        843170400000,
        860104800000,
        874620000000,
        891554400000,
        906069600000,
        924213600000,
        939934800000,
        956268000000,
        971989200000,
        987717600000,
        1003438800000,
        1019167200000,
        1034888400000,
        1050616800000,
        1066338000000,
        1082066400000,
        1096581600000,
        1113516000000,
        1128380400000,
        1143842400000,
        1158872400000,
        1175378400000,
        1189638000000,
        1206655200000,
        1219957200000,
        1238104800000,
        1252015200000,
        1269640860000,
        1281474000000,
        1301608860000,
        1312146000000,
        1333058400000,
        1348178400000,
        1364508000000,
        1380229200000,
        1395957600000,
        1414098000000,
        1427493600000,
        1445547600000,
        1458943200000,
        1476997200000,
        1490997600000,
        1509051600000,
        1522447200000,
        1540501200000,
        1553896800000,
        1571950800000,
        1585346400000,
        1603400400000,
        1616796000000,
        1634850000000,
        1648245600000,
        1666299600000,
        1680300000000,
        1698354000000,
        1711749600000,
        1729803600000,
        1743199200000,
        1761253200000,
        1774648800000,
        1792702800000,
        1806098400000,
        1824152400000,
        1838152800000,
        1856206800000,
        1869602400000,
        1887656400000,
        1901052000000,
        1919106000000,
        1932501600000,
        1950555600000,
        1963951200000,
        1982005200000,
        1995400800000,
        2013454800000,
        2027455200000,
        2045509200000,
        2058904800000,
        2076958800000,
        2090354400000,
        2108408400000,
        2121804000000,
        2139858000000,
        null
      ],
      "offsets": [
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120
      ]
    },
    {
      "name": "Asia/Harbin",
      "abbrs": [
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST"
      ],
      "untils": [
        -933494400000,
        -923130000000,
        -908784000000,
        -891594000000,
        515520000000,
        527007600000,
        545155200000,
        558457200000,
        576604800000,
        589906800000,
        608659200000,
        621961200000,
        640108800000,
        653410800000,
        671558400000,
        684860400000,
        null
      ],
      "offsets": [
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480
      ]
    },
    {
      "name": "Asia/Hebron",
      "abbrs": [
        "EET",
        "EET",
        "EET",
        "EET",
        "EET",
        "EET",
        "EET",
        "EET",
        "EET",
        "EET",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET"
      ],
      "untils": [
        -933645600000,
        -857358000000,
        -844300800000,
        -825822000000,
        -812685600000,
        -794199600000,
        -779853600000,
        -762656400000,
        -748310400000,
        -731127600000,
        -399088800000,
        -386650800000,
        -368330400000,
        -355114800000,
        -336790800000,
        -323654400000,
        -305168400000,
        -292032000000,
        -273632400000,
        -260496000000,
        -242096400000,
        -228960000000,
        -210560400000,
        -197424000000,
        -178938000000,
        -165801600000,
        -147402000000,
        -134265600000,
        -115866000000,
        -102643200000,
        -84330000000,
        -81313200000,
        142380000000,
        150843600000,
        167176800000,
        178664400000,
        482277600000,
        495579600000,
        516751200000,
        526424400000,
        545436000000,
        558478800000,
        576626400000,
        589323600000,
        609890400000,
        620773200000,
        638316000000,
        651618000000,
        669765600000,
        683672400000,
        701820000000,
        715726800000,
        733701600000,
        747176400000,
        765151200000,
        778021200000,
        796600800000,
        810075600000,
        820447200000,
        828655200000,
        843170400000,
        860104800000,
        874620000000,
        891554400000,
        906069600000,
        924213600000,
        939934800000,
        956268000000,
        971989200000,
        987717600000,
        1003438800000,
        1019167200000,
        1034888400000,
        1050616800000,
        1066338000000,
        1082066400000,
        1096581600000,
        1113516000000,
        1128380400000,
        1143842400000,
        1158872400000,
        1175378400000,
        1189638000000,
        1206655200000,
        1220216400000,
        1238104800000,
        1252015200000,
        1269554400000,
        1281474000000,
        1301608860000,
        1312146000000,
        1314655200000,
        1317330000000,
        1333058400000,
        1348178400000,
        1364508000000,
        1380229200000,
        1395957600000,
        1414098000000,
        1427493600000,
        1445547600000,
        1458943200000,
        1476997200000,
        1490997600000,
        1509051600000,
        1522447200000,
        1540501200000,
        1553896800000,
        1571950800000,
        1585346400000,
        1603400400000,
        1616796000000,
        1634850000000,
        1648245600000,
        1666299600000,
        1680300000000,
        1698354000000,
        1711749600000,
        1729803600000,
        1743199200000,
        1761253200000,
        1774648800000,
        1792702800000,
        1806098400000,
        1824152400000,
        1838152800000,
        1856206800000,
        1869602400000,
        1887656400000,
        1901052000000,
        1919106000000,
        1932501600000,
        1950555600000,
        1963951200000,
        1982005200000,
        1995400800000,
        2013454800000,
        2027455200000,
        2045509200000,
        2058904800000,
        2076958800000,
        2090354400000,
        2108408400000,
        2121804000000,
        2139858000000,
        null
      ],
      "offsets": [
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120
      ]
    },
    {
      "name": "Asia/Ho_Chi_Minh",
      "abbrs": [
        "LMT",
        "PLMT",
        "ICT",
        "IDT",
        "JST",
        "ICT",
        "IDT",
        "ICT",
        "IDT",
        "ICT"
      ],
      "untils": [
        -2004073600000,
        -1851577590000,
        -852105600000,
        -782643600000,
        -767869200000,
        -718095600000,
        -457776000000,
        -315648000000,
        171820800000,
        null
      ],
      "offsets": [
        -426.6667,
        -426.5,
        -420,
        -480,
        -540,
        -420,
        -480,
        -420,
        -480,
        -420
      ]
    },
    {
      "name": "Asia/Hong_Kong",
      "abbrs": [
        "LMT",
        "HKT",
        "HKST",
        "HKT",
        "JST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT"
      ],
      "untils": [
        -2056693002000,
        -907389000000,
        -891667800000,
        -884246400000,
        -766746000000,
        -747981000000,
        -728544600000,
        -717049800000,
        -694503000000,
        -683785800000,
        -668064600000,
        -654755400000,
        -636615000000,
        -623305800000,
        -605165400000,
        -591856200000,
        -573715800000,
        -559801800000,
        -542352600000,
        -528352200000,
        -510211800000,
        -498112200000,
        -478762200000,
        -466662600000,
        -446707800000,
        -435213000000,
        -415258200000,
        -403158600000,
        -383808600000,
        -371709000000,
        -352359000000,
        -340259400000,
        -320909400000,
        -308809800000,
        -288855000000,
        -277360200000,
        -257405400000,
        -245910600000,
        -225955800000,
        -213856200000,
        -194506200000,
        -182406600000,
        -163056600000,
        -148537800000,
        -132816600000,
        -117088200000,
        -101367000000,
        -85638600000,
        -69312600000,
        -53584200000,
        -37863000000,
        -22134600000,
        -6413400000,
        9315000000,
        25036200000,
        40764600000,
        56485800000,
        72214200000,
        88540200000,
        104268600000,
        119989800000,
        126041400000,
        151439400000,
        167167800000,
        182889000000,
        198617400000,
        214338600000,
        295385400000,
        309292200000,
        null
      ],
      "offsets": [
        -456.7,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480
      ]
    },
    {
      "name": "Asia/Hovd",
      "abbrs": [
        "LMT",
        "HOVT",
        "HOVT",
        "HOVST",
        "HOVT",
        "HOVST",
        "HOVT",
        "HOVST",
        "HOVT",
        "HOVST",
        "HOVT",
        "HOVST",
        "HOVT",
        "HOVST",
        "HOVT",
        "HOVST",
        "HOVT",
        "HOVST",
        "HOVT",
        "HOVST",
        "HOVT",
        "HOVST",
        "HOVT",
        "HOVST",
        "HOVT",
        "HOVST",
        "HOVT",
        "HOVST",
        "HOVT",
        "HOVST",
        "HOVT",
        "HOVST",
        "HOVT",
        "HOVST",
        "HOVT",
        "HOVST",
        "HOVT",
        "HOVST",
        "HOVT",
        "HOVST",
        "HOVT",
        "HOVST",
        "HOVT",
        "HOVST",
        "HOVT",
        "HOVST",
        "HOVT",
        "HOVST",
        "HOVT",
        "HOVST",
        "HOVT",
        "HOVST",
        "HOVT",
        "HOVST",
        "HOVT",
        "HOVST",
        "HOVT",
        "HOVST",
        "HOVT",
        "HOVST",
        "HOVT",
        "HOVST",
        "HOVT",
        "HOVST",
        "HOVT",
        "HOVST",
        "HOVT",
        "HOVST",
        "HOVT",
        "HOVST",
        "HOVT",
        "HOVST",
        "HOVT",
        "HOVST",
        "HOVT",
        "HOVST",
        "HOVT",
        "HOVST",
        "HOVT",
        "HOVST",
        "HOVT",
        "HOVST",
        "HOVT",
        "HOVST",
        "HOVT",
        "HOVST",
        "HOVT",
        "HOVST",
        "HOVT",
        "HOVST",
        "HOVT",
        "HOVST",
        "HOVT"
      ],
      "untils": [
        -2032927596000,
        252439200000,
        417978000000,
        433785600000,
        449600400000,
        465321600000,
        481050000000,
        496771200000,
        512499600000,
        528220800000,
        543949200000,
        559670400000,
        575398800000,
        591120000000,
        606848400000,
        622569600000,
        638298000000,
        654624000000,
        670352400000,
        686073600000,
        701802000000,
        717523200000,
        733251600000,
        748972800000,
        764701200000,
        780422400000,
        796150800000,
        811872000000,
        828205200000,
        843926400000,
        859654800000,
        875376000000,
        891104400000,
        906825600000,
        988398000000,
        1001700000000,
        1017428400000,
        1033149600000,
        1048878000000,
        1064599200000,
        1080327600000,
        1096048800000,
        1111777200000,
        1127498400000,
        1143226800000,
        1159552800000,
        1427482800000,
        1443196800000,
        1458932400000,
        1474646400000,
        1490382000000,
        1506700800000,
        1522436400000,
        1538150400000,
        1553886000000,
        1569600000000,
        1585335600000,
        1601049600000,
        1616785200000,
        1632499200000,
        1648234800000,
        1663948800000,
        1679684400000,
        1696003200000,
        1711738800000,
        1727452800000,
        1743188400000,
        1758902400000,
        1774638000000,
        1790352000000,
        1806087600000,
        1821801600000,
        1837537200000,
        1853856000000,
        1869591600000,
        1885305600000,
        1901041200000,
        1916755200000,
        1932490800000,
        1948204800000,
        1963940400000,
        1979654400000,
        1995390000000,
        2011104000000,
        2026839600000,
        2043158400000,
        2058894000000,
        2074608000000,
        2090343600000,
        2106057600000,
        2121793200000,
        2137507200000,
        null
      ],
      "offsets": [
        -366.6,
        -360,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420
      ]
    },
    {
      "name": "Asia/Irkutsk",
      "abbrs": [
        "IMT",
        "IRKT",
        "IRKT",
        "IRKST",
        "IRKT",
        "IRKST",
        "IRKT",
        "IRKST",
        "IRKT",
        "IRKST",
        "IRKT",
        "IRKST",
        "IRKT",
        "IRKST",
        "IRKT",
        "IRKST",
        "IRKT",
        "IRKST",
        "IRKT",
        "IRKST",
        "IRKT",
        "IRKST",
        "IRKT",
        "IRKST",
        "IRKT",
        "IRKT",
        "IRKST",
        "IRKT",
        "IRKST",
        "IRKT",
        "IRKST",
        "IRKT",
        "IRKST",
        "IRKT",
        "IRKST",
        "IRKT",
        "IRKST",
        "IRKT",
        "IRKST",
        "IRKT",
        "IRKST",
        "IRKT",
        "IRKST",
        "IRKT",
        "IRKST",
        "IRKT",
        "IRKST",
        "IRKT",
        "IRKST",
        "IRKT",
        "IRKST",
        "IRKT",
        "IRKST",
        "IRKT",
        "IRKST",
        "IRKT",
        "IRKST",
        "IRKT",
        "IRKST",
        "IRKT",
        "IRKST",
        "IRKT",
        "IRKST",
        "IRKT",
        "IRKT",
        "IRKT"
      ],
      "untils": [
        -1575874625000,
        -1247554800000,
        354902400000,
        370710000000,
        386438400000,
        402246000000,
        417974400000,
        433782000000,
        449596800000,
        465328800000,
        481053600000,
        496778400000,
        512503200000,
        528228000000,
        543952800000,
        559677600000,
        575402400000,
        591127200000,
        606852000000,
        622576800000,
        638301600000,
        654631200000,
        670356000000,
        686084400000,
        695761200000,
        701794800000,
        717516000000,
        733255200000,
        748980000000,
        764704800000,
        780429600000,
        796154400000,
        811879200000,
        828208800000,
        846352800000,
        859658400000,
        877802400000,
        891108000000,
        909252000000,
        922557600000,
        941306400000,
        954007200000,
        972756000000,
        985456800000,
        1004205600000,
        1017511200000,
        1035655200000,
        1048960800000,
        1067104800000,
        1080410400000,
        1099159200000,
        1111860000000,
        1130608800000,
        1143309600000,
        1162058400000,
        1174759200000,
        1193508000000,
        1206813600000,
        1224957600000,
        1238263200000,
        1256407200000,
        1269712800000,
        1288461600000,
        1301162400000,
        1414256400000,
        null
      ],
      "offsets": [
        -417.0833,
        -420,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -480,
        -420,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480
      ]
    },
    {
      "name": "Asia/Istanbul",
      "abbrs": [
        "IMT",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "TRST",
        "TRT",
        "TRST",
        "TRT",
        "TRST",
        "TRT",
        "TRST",
        "TRT",
        "TRST",
        "TRT",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET"
      ],
      "untils": [
        -1869875816000,
        -1693706400000,
        -1680490800000,
        -1570413600000,
        -1552186800000,
        -1538359200000,
        -1522551600000,
        -1507514400000,
        -1490583600000,
        -1440208800000,
        -1428030000000,
        -1409709600000,
        -1396494000000,
        -931140000000,
        -922762800000,
        -917834400000,
        -892436400000,
        -875844000000,
        -857358000000,
        -781063200000,
        -764737200000,
        -744343200000,
        -733806000000,
        -716436000000,
        -701924400000,
        -684986400000,
        -670474800000,
        -654141600000,
        -639025200000,
        -621828000000,
        -606970800000,
        -590032800000,
        -575434800000,
        -235620000000,
        -228279600000,
        -177732000000,
        -165726000000,
        10533600000,
        23835600000,
        41983200000,
        55285200000,
        74037600000,
        87339600000,
        107910000000,
        121219200000,
        133920000000,
        152676000000,
        165362400000,
        183502800000,
        202428000000,
        215557200000,
        228866400000,
        245797200000,
        260316000000,
        277246800000,
        308779200000,
        323827200000,
        340228800000,
        354672000000,
        371678400000,
        386121600000,
        403128000000,
        428446800000,
        433886400000,
        482792400000,
        496702800000,
        512524800000,
        528249600000,
        543974400000,
        559699200000,
        575424000000,
        591148800000,
        606873600000,
        622598400000,
        638323200000,
        654652800000,
        670374000000,
        686098800000,
        701823600000,
        717548400000,
        733273200000,
        748998000000,
        764722800000,
        780447600000,
        796172400000,
        811897200000,
        828226800000,
        846370800000,
        859676400000,
        877820400000,
        891126000000,
        909270000000,
        922575600000,
        941324400000,
        954025200000,
        972774000000,
        985474800000,
        1004223600000,
        1017529200000,
        1035673200000,
        1048978800000,
        1067122800000,
        1080428400000,
        1099177200000,
        1111878000000,
        1130626800000,
        1143327600000,
        1162076400000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301274000000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396227600000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        -116.9333,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120
      ]
    },
    {
      "name": "Asia/Jakarta",
      "abbrs": [
        "BMT",
        "JAVT",
        "WIB",
        "JST",
        "WIB",
        "WIB",
        "WIB",
        "WIB"
      ],
      "untils": [
        -1451719200000,
        -1172906400000,
        -876641400000,
        -766054800000,
        -683883000000,
        -620812800000,
        -189415800000,
        null
      ],
      "offsets": [
        -427.2,
        -440,
        -450,
        -540,
        -450,
        -480,
        -450,
        -420
      ]
    },
    {
      "name": "Asia/Jayapura",
      "abbrs": [
        "LMT",
        "WIT",
        "ACST",
        "WIT"
      ],
      "untils": [
        -1172913768000,
        -799491600000,
        -189423000000,
        null
      ],
      "offsets": [
        -562.8,
        -540,
        -570,
        -540
      ]
    },
    {
      "name": "Asia/Jerusalem",
      "abbrs": [
        "JMT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDDT",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST"
      ],
      "untils": [
        -1641003640000,
        -933645600000,
        -857358000000,
        -844300800000,
        -825822000000,
        -812685600000,
        -794199600000,
        -779853600000,
        -762656400000,
        -748310400000,
        -731127600000,
        -681962400000,
        -673243200000,
        -667962000000,
        -652327200000,
        -636426000000,
        -622087200000,
        -608947200000,
        -591847200000,
        -572486400000,
        -558576000000,
        -542851200000,
        -527731200000,
        -514425600000,
        -490845600000,
        -482986800000,
        -459475200000,
        -451537200000,
        -428551200000,
        -418262400000,
        -400032000000,
        -387428400000,
        142380000000,
        150843600000,
        167176800000,
        178664400000,
        482277600000,
        495579600000,
        516751200000,
        526424400000,
        545436000000,
        558478800000,
        576626400000,
        589323600000,
        609890400000,
        620773200000,
        638316000000,
        651618000000,
        669765600000,
        683672400000,
        701820000000,
        715726800000,
        733701600000,
        747176400000,
        765151200000,
        778021200000,
        796600800000,
        810075600000,
        826840800000,
        842821200000,
        858895200000,
        874184400000,
        890344800000,
        905029200000,
        923011200000,
        936313200000,
        955670400000,
        970783200000,
        986770800000,
        1001282400000,
        1017356400000,
        1033941600000,
        1048806000000,
        1065132000000,
        1081292400000,
        1095804000000,
        1112313600000,
        1128812400000,
        1143763200000,
        1159657200000,
        1175212800000,
        1189897200000,
        1206662400000,
        1223161200000,
        1238112000000,
        1254006000000,
        1269561600000,
        1284246000000,
        1301616000000,
        1317510000000,
        1333065600000,
        1348354800000,
        1364515200000,
        1382828400000,
        1395964800000,
        1414278000000,
        1427414400000,
        1445727600000,
        1458864000000,
        1477782000000,
        1490313600000,
        1509231600000,
        1521763200000,
        1540681200000,
        1553817600000,
        1572130800000,
        1585267200000,
        1603580400000,
        1616716800000,
        1635634800000,
        1648166400000,
        1667084400000,
        1679616000000,
        1698534000000,
        1711670400000,
        1729983600000,
        1743120000000,
        1761433200000,
        1774569600000,
        1792882800000,
        1806019200000,
        1824937200000,
        1837468800000,
        1856386800000,
        1868918400000,
        1887836400000,
        1900972800000,
        1919286000000,
        1932422400000,
        1950735600000,
        1963872000000,
        1982790000000,
        1995321600000,
        2014239600000,
        2026771200000,
        2045689200000,
        2058220800000,
        2077138800000,
        2090275200000,
        2108588400000,
        2121724800000,
        2140038000000,
        null
      ],
      "offsets": [
        -140.6667,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -240,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120
      ]
    },
    {
      "name": "Asia/Kabul",
      "abbrs": [
        "AFT",
        "AFT"
      ],
      "untils": [
        -788932800000,
        null
      ],
      "offsets": [
        -240,
        -270
      ]
    },
    {
      "name": "Asia/Kamchatka",
      "abbrs": [
        "LMT",
        "PETT",
        "PETT",
        "PETST",
        "PETT",
        "PETST",
        "PETT",
        "PETST",
        "PETT",
        "PETST",
        "PETT",
        "PETST",
        "PETT",
        "PETST",
        "PETT",
        "PETST",
        "PETT",
        "PETST",
        "PETT",
        "PETST",
        "PETT",
        "PETST",
        "PETT",
        "PETST",
        "PETT",
        "PETT",
        "PETST",
        "PETT",
        "PETST",
        "PETT",
        "PETST",
        "PETT",
        "PETST",
        "PETT",
        "PETST",
        "PETT",
        "PETST",
        "PETT",
        "PETST",
        "PETT",
        "PETST",
        "PETT",
        "PETST",
        "PETT",
        "PETST",
        "PETT",
        "PETST",
        "PETT",
        "PETST",
        "PETT",
        "PETST",
        "PETT",
        "PETST",
        "PETT",
        "PETST",
        "PETT",
        "PETST",
        "PETT",
        "PETST",
        "PETT",
        "PETST",
        "PETT",
        "PETST",
        "PETT",
        "PETT"
      ],
      "untils": [
        -1487759676000,
        -1247569200000,
        354888000000,
        370695600000,
        386424000000,
        402231600000,
        417960000000,
        433767600000,
        449582400000,
        465314400000,
        481039200000,
        496764000000,
        512488800000,
        528213600000,
        543938400000,
        559663200000,
        575388000000,
        591112800000,
        606837600000,
        622562400000,
        638287200000,
        654616800000,
        670341600000,
        686070000000,
        695746800000,
        701780400000,
        717501600000,
        733240800000,
        748965600000,
        764690400000,
        780415200000,
        796140000000,
        811864800000,
        828194400000,
        846338400000,
        859644000000,
        877788000000,
        891093600000,
        909237600000,
        922543200000,
        941292000000,
        953992800000,
        972741600000,
        985442400000,
        1004191200000,
        1017496800000,
        1035640800000,
        1048946400000,
        1067090400000,
        1080396000000,
        1099144800000,
        1111845600000,
        1130594400000,
        1143295200000,
        1162044000000,
        1174744800000,
        1193493600000,
        1206799200000,
        1224943200000,
        1238248800000,
        1256392800000,
        1269698400000,
        1288450800000,
        1301151600000,
        null
      ],
      "offsets": [
        -634.6,
        -660,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -720,
        -660,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -720,
        -660,
        -720
      ]
    },
    {
      "name": "Asia/Karachi",
      "abbrs": [
        "LMT",
        "IST",
        "IST",
        "IST",
        "KART",
        "PKT",
        "PKST",
        "PKT",
        "PKST",
        "PKT",
        "PKST",
        "PKT"
      ],
      "untils": [
        -1988166492000,
        -862637400000,
        -764145000000,
        -576135000000,
        38775600000,
        1018119660000,
        1033840860000,
        1212260400000,
        1225476000000,
        1239735600000,
        1257012000000,
        null
      ],
      "offsets": [
        -268.2,
        -330,
        -390,
        -330,
        -300,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300
      ]
    },
    {
      "name": "Asia/Kashgar",
      "abbrs": [
        "LMT",
        "XJT"
      ],
      "untils": [
        -1325483420000,
        null
      ],
      "offsets": [
        -350.3333,
        -360
      ]
    },
    {
      "name": "Asia/Kathmandu",
      "abbrs": [
        "LMT",
        "IST",
        "NPT"
      ],
      "untils": [
        -1577943676000,
        504901800000,
        null
      ],
      "offsets": [
        -341.2667,
        -330,
        -345
      ]
    },
    {
      "name": "Asia/Katmandu",
      "abbrs": [
        "LMT",
        "IST",
        "NPT"
      ],
      "untils": [
        -1577943676000,
        504901800000,
        null
      ],
      "offsets": [
        -341.2667,
        -330,
        -345
      ]
    },
    {
      "name": "Asia/Khandyga",
      "abbrs": [
        "LMT",
        "YAKT",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "VLAT",
        "VLAST",
        "VLAT",
        "VLAST",
        "VLAT",
        "VLAST",
        "VLAT",
        "VLAST",
        "VLAT",
        "VLAST",
        "VLAT",
        "VLAST",
        "VLAT",
        "VLAST",
        "VLAT",
        "VLAT",
        "YAKT",
        "YAKT"
      ],
      "untils": [
        -1579424533000,
        -1247558400000,
        354898800000,
        370706400000,
        386434800000,
        402242400000,
        417970800000,
        433778400000,
        449593200000,
        465325200000,
        481050000000,
        496774800000,
        512499600000,
        528224400000,
        543949200000,
        559674000000,
        575398800000,
        591123600000,
        606848400000,
        622573200000,
        638298000000,
        654627600000,
        670352400000,
        686080800000,
        695757600000,
        701791200000,
        717512400000,
        733251600000,
        748976400000,
        764701200000,
        780426000000,
        796150800000,
        811875600000,
        828205200000,
        846349200000,
        859654800000,
        877798800000,
        891104400000,
        909248400000,
        922554000000,
        941302800000,
        954003600000,
        972752400000,
        985453200000,
        1004202000000,
        1017507600000,
        1035651600000,
        1048957200000,
        1067101200000,
        1072882800000,
        1080403200000,
        1099152000000,
        1111852800000,
        1130601600000,
        1143302400000,
        1162051200000,
        1174752000000,
        1193500800000,
        1206806400000,
        1224950400000,
        1238256000000,
        1256400000000,
        1269705600000,
        1288454400000,
        1301155200000,
        1315832400000,
        1414252800000,
        null
      ],
      "offsets": [
        -542.2167,
        -480,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -540,
        -480,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -540
      ]
    },
    {
      "name": "Asia/Kolkata",
      "abbrs": [
        "HMT",
        "BURT",
        "IST",
        "IST",
        "IST"
      ],
      "untils": [
        -891582800000,
        -872058600000,
        -862637400000,
        -764145000000,
        null
      ],
      "offsets": [
        -353.3333,
        -390,
        -330,
        -390,
        -330
      ]
    },
    {
      "name": "Asia/Krasnoyarsk",
      "abbrs": [
        "LMT",
        "KRAT",
        "KRAT",
        "KRAST",
        "KRAT",
        "KRAST",
        "KRAT",
        "KRAST",
        "KRAT",
        "KRAST",
        "KRAT",
        "KRAST",
        "KRAT",
        "KRAST",
        "KRAT",
        "KRAST",
        "KRAT",
        "KRAST",
        "KRAT",
        "KRAST",
        "KRAT",
        "KRAST",
        "KRAT",
        "KRAST",
        "KRAT",
        "KRAT",
        "KRAST",
        "KRAT",
        "KRAST",
        "KRAT",
        "KRAST",
        "KRAT",
        "KRAST",
        "KRAT",
        "KRAST",
        "KRAT",
        "KRAST",
        "KRAT",
        "KRAST",
        "KRAT",
        "KRAST",
        "KRAT",
        "KRAST",
        "KRAT",
        "KRAST",
        "KRAT",
        "KRAST",
        "KRAT",
        "KRAST",
        "KRAT",
        "KRAST",
        "KRAT",
        "KRAST",
        "KRAT",
        "KRAST",
        "KRAT",
        "KRAST",
        "KRAT",
        "KRAST",
        "KRAT",
        "KRAST",
        "KRAT",
        "KRAST",
        "KRAT",
        "KRAT",
        "KRAT"
      ],
      "untils": [
        -1577513486000,
        -1247551200000,
        354906000000,
        370713600000,
        386442000000,
        402249600000,
        417978000000,
        433785600000,
        449600400000,
        465332400000,
        481057200000,
        496782000000,
        512506800000,
        528231600000,
        543956400000,
        559681200000,
        575406000000,
        591130800000,
        606855600000,
        622580400000,
        638305200000,
        654634800000,
        670359600000,
        686088000000,
        695764800000,
        701798400000,
        717519600000,
        733258800000,
        748983600000,
        764708400000,
        780433200000,
        796158000000,
        811882800000,
        828212400000,
        846356400000,
        859662000000,
        877806000000,
        891111600000,
        909255600000,
        922561200000,
        941310000000,
        954010800000,
        972759600000,
        985460400000,
        1004209200000,
        1017514800000,
        1035658800000,
        1048964400000,
        1067108400000,
        1080414000000,
        1099162800000,
        1111863600000,
        1130612400000,
        1143313200000,
        1162062000000,
        1174762800000,
        1193511600000,
        1206817200000,
        1224961200000,
        1238266800000,
        1256410800000,
        1269716400000,
        1288465200000,
        1301166000000,
        1414260000000,
        null
      ],
      "offsets": [
        -371.4333,
        -360,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -420,
        -360,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420
      ]
    },
    {
      "name": "Asia/Kuala_Lumpur",
      "abbrs": [
        "SMT",
        "MALT",
        "MALST",
        "MALT",
        "MALT",
        "JST",
        "MALT",
        "MYT"
      ],
      "untils": [
        -2038200925000,
        -1167634800000,
        -1073028000000,
        -894180000000,
        -879665400000,
        -767005200000,
        378664200000,
        null
      ],
      "offsets": [
        -415.4167,
        -420,
        -440,
        -440,
        -450,
        -540,
        -450,
        -480
      ]
    },
    {
      "name": "Asia/Kuching",
      "abbrs": [
        "LMT",
        "BORT",
        "BORT",
        "BORTST",
        "BORT",
        "BORTST",
        "BORT",
        "BORTST",
        "BORT",
        "BORTST",
        "BORT",
        "BORTST",
        "BORT",
        "BORTST",
        "BORT",
        "BORTST",
        "BORT",
        "JST",
        "BORT",
        "MYT"
      ],
      "untils": [
        -1383463280000,
        -1167636600000,
        -1082448000000,
        -1074586800000,
        -1050825600000,
        -1042964400000,
        -1019289600000,
        -1011428400000,
        -987753600000,
        -979892400000,
        -956217600000,
        -948356400000,
        -924595200000,
        -916734000000,
        -893059200000,
        -885198000000,
        -879667200000,
        -767005200000,
        378662400000,
        null
      ],
      "offsets": [
        -441.3333,
        -450,
        -480,
        -500,
        -480,
        -500,
        -480,
        -500,
        -480,
        -500,
        -480,
        -500,
        -480,
        -500,
        -480,
        -500,
        -480,
        -540,
        -480,
        -480
      ]
    },
    {
      "name": "Asia/Kuwait",
      "abbrs": [
        "LMT",
        "AST"
      ],
      "untils": [
        -719636812000,
        null
      ],
      "offsets": [
        -186.8667,
        -180
      ]
    },
    {
      "name": "Asia/Macao",
      "abbrs": [
        "LMT",
        "MOT",
        "MOST",
        "MOT",
        "MOST",
        "MOT",
        "MOST",
        "MOT",
        "MOST",
        "MOT",
        "MOST",
        "MOT",
        "MOST",
        "MOT",
        "MOST",
        "MOT",
        "MOST",
        "MOT",
        "MOST",
        "MOT",
        "MOST",
        "MOT",
        "MOST",
        "MOT",
        "MOST",
        "MOT",
        "MOST",
        "MOT",
        "MOST",
        "MOT",
        "MOST",
        "MOT",
        "MOST",
        "MOT",
        "MOST",
        "MOT",
        "MOST",
        "MOT",
        "MOST",
        "MOT",
        "MOST",
        "MOT",
        "CST"
      ],
      "untils": [
        -1830411260000,
        -277360200000,
        -257405400000,
        -245910600000,
        -225955800000,
        -214473600000,
        -194506200000,
        -182406600000,
        -163056600000,
        -150969600000,
        -131619600000,
        -117088200000,
        -101367000000,
        -85638600000,
        -69312600000,
        -53584200000,
        -37863000000,
        -22134600000,
        -6413400000,
        9315000000,
        25036200000,
        40764600000,
        56485800000,
        72201600000,
        87922800000,
        103651200000,
        119977200000,
        135705600000,
        151439400000,
        167167800000,
        182889000000,
        198617400000,
        214338600000,
        230067000000,
        245788200000,
        261504000000,
        277225200000,
        292953600000,
        309279600000,
        325008000000,
        340729200000,
        945619200000,
        null
      ],
      "offsets": [
        -454.3333,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -480
      ]
    },
    {
      "name": "Asia/Macau",
      "abbrs": [
        "LMT",
        "MOT",
        "MOST",
        "MOT",
        "MOST",
        "MOT",
        "MOST",
        "MOT",
        "MOST",
        "MOT",
        "MOST",
        "MOT",
        "MOST",
        "MOT",
        "MOST",
        "MOT",
        "MOST",
        "MOT",
        "MOST",
        "MOT",
        "MOST",
        "MOT",
        "MOST",
        "MOT",
        "MOST",
        "MOT",
        "MOST",
        "MOT",
        "MOST",
        "MOT",
        "MOST",
        "MOT",
        "MOST",
        "MOT",
        "MOST",
        "MOT",
        "MOST",
        "MOT",
        "MOST",
        "MOT",
        "MOST",
        "MOT",
        "CST"
      ],
      "untils": [
        -1830411260000,
        -277360200000,
        -257405400000,
        -245910600000,
        -225955800000,
        -214473600000,
        -194506200000,
        -182406600000,
        -163056600000,
        -150969600000,
        -131619600000,
        -117088200000,
        -101367000000,
        -85638600000,
        -69312600000,
        -53584200000,
        -37863000000,
        -22134600000,
        -6413400000,
        9315000000,
        25036200000,
        40764600000,
        56485800000,
        72201600000,
        87922800000,
        103651200000,
        119977200000,
        135705600000,
        151439400000,
        167167800000,
        182889000000,
        198617400000,
        214338600000,
        230067000000,
        245788200000,
        261504000000,
        277225200000,
        292953600000,
        309279600000,
        325008000000,
        340729200000,
        945619200000,
        null
      ],
      "offsets": [
        -454.3333,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -480
      ]
    },
    {
      "name": "Asia/Magadan",
      "abbrs": [
        "LMT",
        "MAGT",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGT",
        "MAGT"
      ],
      "untils": [
        -1441188192000,
        -1247565600000,
        354891600000,
        370699200000,
        386427600000,
        402235200000,
        417963600000,
        433771200000,
        449586000000,
        465318000000,
        481042800000,
        496767600000,
        512492400000,
        528217200000,
        543942000000,
        559666800000,
        575391600000,
        591116400000,
        606841200000,
        622566000000,
        638290800000,
        654620400000,
        670345200000,
        686073600000,
        695750400000,
        701784000000,
        717505200000,
        733244400000,
        748969200000,
        764694000000,
        780418800000,
        796143600000,
        811868400000,
        828198000000,
        846342000000,
        859647600000,
        877791600000,
        891097200000,
        909241200000,
        922546800000,
        941295600000,
        953996400000,
        972745200000,
        985446000000,
        1004194800000,
        1017500400000,
        1035644400000,
        1048950000000,
        1067094000000,
        1080399600000,
        1099148400000,
        1111849200000,
        1130598000000,
        1143298800000,
        1162047600000,
        1174748400000,
        1193497200000,
        1206802800000,
        1224946800000,
        1238252400000,
        1256396400000,
        1269702000000,
        1288450800000,
        1301151600000,
        1414245600000,
        null
      ],
      "offsets": [
        -603.2,
        -600,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -660,
        -600,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -600
      ]
    },
    {
      "name": "Asia/Makassar",
      "abbrs": [
        "LMT",
        "MMT",
        "WITA",
        "JST",
        "WITA"
      ],
      "untils": [
        -1577951856000,
        -1172908656000,
        -880272000000,
        -766054800000,
        null
      ],
      "offsets": [
        -477.6,
        -477.6,
        -480,
        -540,
        -480
      ]
    },
    {
      "name": "Asia/Manila",
      "abbrs": [
        "PHT",
        "PHST",
        "PHT",
        "JST",
        "PHT",
        "PHST",
        "PHT",
        "PHST",
        "PHT"
      ],
      "untils": [
        -1046678400000,
        -1038733200000,
        -873273600000,
        -794221200000,
        -496224000000,
        -489315600000,
        259344000000,
        275151600000,
        null
      ],
      "offsets": [
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480
      ]
    },
    {
      "name": "Asia/Muscat",
      "abbrs": [
        "LMT",
        "GST"
      ],
      "untils": [
        -1577936472000,
        null
      ],
      "offsets": [
        -221.2,
        -240
      ]
    },
    {
      "name": "Asia/Nicosia",
      "abbrs": [
        "LMT",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET"
      ],
      "untils": [
        -1518920008000,
        166572000000,
        182293200000,
        200959200000,
        213829200000,
        228866400000,
        243982800000,
        260316000000,
        276123600000,
        291765600000,
        307486800000,
        323820000000,
        338936400000,
        354664800000,
        370386000000,
        386114400000,
        401835600000,
        417564000000,
        433285200000,
        449013600000,
        465339600000,
        481068000000,
        496789200000,
        512517600000,
        528238800000,
        543967200000,
        559688400000,
        575416800000,
        591138000000,
        606866400000,
        622587600000,
        638316000000,
        654642000000,
        670370400000,
        686091600000,
        701820000000,
        717541200000,
        733269600000,
        748990800000,
        764719200000,
        780440400000,
        796168800000,
        811890000000,
        828223200000,
        843944400000,
        859672800000,
        875394000000,
        891122400000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        -133.4667,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120
      ]
    },
    {
      "name": "Asia/Novokuznetsk",
      "abbrs": [
        "LMT",
        "KRAT",
        "KRAT",
        "KRAST",
        "KRAT",
        "KRAST",
        "KRAT",
        "KRAST",
        "KRAT",
        "KRAST",
        "KRAT",
        "KRAST",
        "KRAT",
        "KRAST",
        "KRAT",
        "KRAST",
        "KRAT",
        "KRAST",
        "KRAT",
        "KRAST",
        "KRAT",
        "KRAST",
        "KRAT",
        "KRAST",
        "KRAT",
        "KRAT",
        "KRAST",
        "KRAT",
        "KRAST",
        "KRAT",
        "KRAST",
        "KRAT",
        "KRAST",
        "KRAT",
        "KRAST",
        "KRAT",
        "KRAST",
        "KRAT",
        "KRAST",
        "KRAT",
        "KRAST",
        "KRAT",
        "KRAST",
        "KRAT",
        "KRAST",
        "KRAT",
        "KRAST",
        "KRAT",
        "KRAST",
        "KRAT",
        "KRAST",
        "KRAT",
        "KRAST",
        "KRAT",
        "KRAST",
        "KRAT",
        "KRAST",
        "KRAT",
        "KRAST",
        "KRAT",
        "KRAST",
        "KRAT",
        "NOVST",
        "NOVT",
        "NOVT",
        "KRAT"
      ],
      "untils": [
        -1441259328000,
        -1247551200000,
        354906000000,
        370713600000,
        386442000000,
        402249600000,
        417978000000,
        433785600000,
        449600400000,
        465332400000,
        481057200000,
        496782000000,
        512506800000,
        528231600000,
        543956400000,
        559681200000,
        575406000000,
        591130800000,
        606855600000,
        622580400000,
        638305200000,
        654634800000,
        670359600000,
        686088000000,
        695764800000,
        701798400000,
        717519600000,
        733258800000,
        748983600000,
        764708400000,
        780433200000,
        796158000000,
        811882800000,
        828212400000,
        846356400000,
        859662000000,
        877806000000,
        891111600000,
        909255600000,
        922561200000,
        941310000000,
        954010800000,
        972759600000,
        985460400000,
        1004209200000,
        1017514800000,
        1035658800000,
        1048964400000,
        1067108400000,
        1080414000000,
        1099162800000,
        1111863600000,
        1130612400000,
        1143313200000,
        1162062000000,
        1174762800000,
        1193511600000,
        1206817200000,
        1224961200000,
        1238266800000,
        1256410800000,
        1269716400000,
        1288468800000,
        1301169600000,
        1414263600000,
        null
      ],
      "offsets": [
        -348.8,
        -360,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -420,
        -360,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -420,
        -360,
        -420,
        -420
      ]
    },
    {
      "name": "Asia/Novosibirsk",
      "abbrs": [
        "LMT",
        "NOVT",
        "NOVT",
        "NOVST",
        "NOVT",
        "NOVST",
        "NOVT",
        "NOVST",
        "NOVT",
        "NOVST",
        "NOVT",
        "NOVST",
        "NOVT",
        "NOVST",
        "NOVT",
        "NOVST",
        "NOVT",
        "NOVST",
        "NOVT",
        "NOVST",
        "NOVT",
        "NOVST",
        "NOVT",
        "NOVST",
        "NOVT",
        "NOVT",
        "NOVST",
        "NOVT",
        "NOVST",
        "NOVST",
        "NOVT",
        "NOVST",
        "NOVT",
        "NOVST",
        "NOVT",
        "NOVST",
        "NOVT",
        "NOVST",
        "NOVT",
        "NOVST",
        "NOVT",
        "NOVST",
        "NOVT",
        "NOVST",
        "NOVT",
        "NOVST",
        "NOVT",
        "NOVST",
        "NOVT",
        "NOVST",
        "NOVT",
        "NOVST",
        "NOVT",
        "NOVST",
        "NOVT",
        "NOVST",
        "NOVT",
        "NOVST",
        "NOVT",
        "NOVST",
        "NOVT",
        "NOVST",
        "NOVT",
        "NOVST",
        "NOVT",
        "NOVT",
        "NOVT"
      ],
      "untils": [
        -1579476700000,
        -1247551200000,
        354906000000,
        370713600000,
        386442000000,
        402249600000,
        417978000000,
        433785600000,
        449600400000,
        465332400000,
        481057200000,
        496782000000,
        512506800000,
        528231600000,
        543956400000,
        559681200000,
        575406000000,
        591130800000,
        606855600000,
        622580400000,
        638305200000,
        654634800000,
        670359600000,
        686088000000,
        695764800000,
        701798400000,
        717519600000,
        733258800000,
        738086400000,
        748987200000,
        764712000000,
        780436800000,
        796161600000,
        811886400000,
        828216000000,
        846360000000,
        859665600000,
        877809600000,
        891115200000,
        909259200000,
        922564800000,
        941313600000,
        954014400000,
        972763200000,
        985464000000,
        1004212800000,
        1017518400000,
        1035662400000,
        1048968000000,
        1067112000000,
        1080417600000,
        1099166400000,
        1111867200000,
        1130616000000,
        1143316800000,
        1162065600000,
        1174766400000,
        1193515200000,
        1206820800000,
        1224964800000,
        1238270400000,
        1256414400000,
        1269720000000,
        1288468800000,
        1301169600000,
        1414263600000,
        null
      ],
      "offsets": [
        -331.6667,
        -360,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -480,
        -420,
        -420,
        -360,
        -420,
        -480,
        -420,
        -480,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360
      ]
    },
    {
      "name": "Asia/Omsk",
      "abbrs": [
        "LMT",
        "OMST",
        "OMST",
        "OMSST",
        "OMST",
        "OMSST",
        "OMST",
        "OMSST",
        "OMST",
        "OMSST",
        "OMST",
        "OMSST",
        "OMST",
        "OMSST",
        "OMST",
        "OMSST",
        "OMST",
        "OMSST",
        "OMST",
        "OMSST",
        "OMST",
        "OMSST",
        "OMST",
        "OMSST",
        "OMST",
        "OMST",
        "OMSST",
        "OMST",
        "OMSST",
        "OMST",
        "OMSST",
        "OMST",
        "OMSST",
        "OMST",
        "OMSST",
        "OMST",
        "OMSST",
        "OMST",
        "OMSST",
        "OMST",
        "OMSST",
        "OMST",
        "OMSST",
        "OMST",
        "OMSST",
        "OMST",
        "OMSST",
        "OMST",
        "OMSST",
        "OMST",
        "OMSST",
        "OMST",
        "OMSST",
        "OMST",
        "OMSST",
        "OMST",
        "OMSST",
        "OMST",
        "OMSST",
        "OMST",
        "OMSST",
        "OMST",
        "OMSST",
        "OMST",
        "OMST",
        "OMST"
      ],
      "untils": [
        -1582088010000,
        -1247547600000,
        354909600000,
        370717200000,
        386445600000,
        402253200000,
        417981600000,
        433789200000,
        449604000000,
        465336000000,
        481060800000,
        496785600000,
        512510400000,
        528235200000,
        543960000000,
        559684800000,
        575409600000,
        591134400000,
        606859200000,
        622584000000,
        638308800000,
        654638400000,
        670363200000,
        686091600000,
        695768400000,
        701802000000,
        717523200000,
        733262400000,
        748987200000,
        764712000000,
        780436800000,
        796161600000,
        811886400000,
        828216000000,
        846360000000,
        859665600000,
        877809600000,
        891115200000,
        909259200000,
        922564800000,
        941313600000,
        954014400000,
        972763200000,
        985464000000,
        1004212800000,
        1017518400000,
        1035662400000,
        1048968000000,
        1067112000000,
        1080417600000,
        1099166400000,
        1111867200000,
        1130616000000,
        1143316800000,
        1162065600000,
        1174766400000,
        1193515200000,
        1206820800000,
        1224964800000,
        1238270400000,
        1256414400000,
        1269720000000,
        1288468800000,
        1301169600000,
        1414263600000,
        null
      ],
      "offsets": [
        -293.5,
        -300,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -360,
        -300,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360
      ]
    },
    {
      "name": "Asia/Oral",
      "abbrs": [
        "LMT",
        "URAT",
        "URAT",
        "URAST",
        "URAT",
        "URAST",
        "URAT",
        "URAST",
        "URAT",
        "URAST",
        "URAT",
        "URAST",
        "URAT",
        "URAST",
        "URAT",
        "URAST",
        "URAT",
        "URAST",
        "URAT",
        "URAST",
        "URAT",
        "URAST",
        "URAT",
        "ORAT",
        "ORAST",
        "ORAT",
        "ORAST",
        "ORAT",
        "ORAST",
        "ORAT",
        "ORAST",
        "ORAT",
        "ORAST",
        "ORAT",
        "ORAST",
        "ORAT",
        "ORAST",
        "ORAT",
        "ORAST",
        "ORAT",
        "ORAST",
        "ORAT",
        "ORAST",
        "ORAT",
        "ORAST",
        "ORAT",
        "ORAST",
        "ORAT",
        "ORAST",
        "ORAT",
        "ORAT"
      ],
      "untils": [
        -1441164324000,
        -1247544000000,
        354913200000,
        370720800000,
        386445600000,
        402256800000,
        417985200000,
        433792800000,
        449607600000,
        465339600000,
        481064400000,
        496789200000,
        512514000000,
        528238800000,
        543963600000,
        559688400000,
        575413200000,
        591138000000,
        606862800000,
        622591200000,
        638316000000,
        654645600000,
        692827200000,
        701809200000,
        717530400000,
        733269600000,
        748994400000,
        764719200000,
        780444000000,
        796168800000,
        811893600000,
        828223200000,
        846367200000,
        859672800000,
        877816800000,
        891122400000,
        909266400000,
        922572000000,
        941320800000,
        954021600000,
        972770400000,
        985471200000,
        1004220000000,
        1017525600000,
        1035669600000,
        1048975200000,
        1067119200000,
        1080424800000,
        1099173600000,
        1110830400000,
        null
      ],
      "offsets": [
        -205.4,
        -240,
        -300,
        -360,
        -360,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -300,
        -240,
        -300,
        -240,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300
      ]
    },
    {
      "name": "Asia/Phnom_Penh",
      "abbrs": [
        "BMT",
        "ICT"
      ],
      "untils": [
        -1570084924000,
        null
      ],
      "offsets": [
        -402.0667,
        -420
      ]
    },
    {
      "name": "Asia/Pontianak",
      "abbrs": [
        "LMT",
        "PMT",
        "WIB",
        "JST",
        "WIB",
        "WIB",
        "WIB",
        "WITA",
        "WIB"
      ],
      "untils": [
        -1946186240000,
        -1172906240000,
        -881220600000,
        -766054800000,
        -683883000000,
        -620812800000,
        -189415800000,
        567964800000,
        null
      ],
      "offsets": [
        -437.3333,
        -437.3333,
        -450,
        -540,
        -450,
        -480,
        -450,
        -480,
        -420
      ]
    },
    {
      "name": "Asia/Pyongyang",
      "abbrs": [
        "LMT",
        "KST",
        "JCST",
        "JST",
        "KST"
      ],
      "untils": [
        -1948782180000,
        -1830414600000,
        -1017824400000,
        -768646800000,
        null
      ],
      "offsets": [
        -503,
        -510,
        -540,
        -540,
        -540
      ]
    },
    {
      "name": "Asia/Qatar",
      "abbrs": [
        "LMT",
        "GST",
        "AST"
      ],
      "untils": [
        -1577935568000,
        76190400000,
        null
      ],
      "offsets": [
        -206.1333,
        -240,
        -180
      ]
    },
    {
      "name": "Asia/Qyzylorda",
      "abbrs": [
        "LMT",
        "KIZT",
        "KIZT",
        "KIZST",
        "KIZT",
        "KIZST",
        "KIZT",
        "KIZST",
        "KIZT",
        "KIZST",
        "KIZT",
        "KIZST",
        "KIZT",
        "KIZST",
        "KIZT",
        "KIZST",
        "KIZT",
        "KIZST",
        "KIZT",
        "KIZST",
        "KIZT",
        "KIZST",
        "KIZT",
        "QYZT",
        "QYZT",
        "QYZST",
        "QYZT",
        "QYZST",
        "QYZT",
        "QYZST",
        "QYZT",
        "QYZST",
        "QYZT",
        "QYZST",
        "QYZT",
        "QYZST",
        "QYZT",
        "QYZST",
        "QYZT",
        "QYZST",
        "QYZT",
        "QYZST",
        "QYZT",
        "QYZST",
        "QYZT",
        "QYZST",
        "QYZT",
        "QYZST",
        "QYZT",
        "QYZST",
        "QYZT"
      ],
      "untils": [
        -1441167712000,
        -1247544000000,
        354913200000,
        370720800000,
        386445600000,
        402256800000,
        417985200000,
        433792800000,
        449607600000,
        465339600000,
        481064400000,
        496789200000,
        512514000000,
        528238800000,
        543963600000,
        559688400000,
        575413200000,
        591138000000,
        606862800000,
        622587600000,
        638312400000,
        654642000000,
        692823600000,
        695768400000,
        701802000000,
        717523200000,
        733262400000,
        748987200000,
        764712000000,
        780436800000,
        796161600000,
        811886400000,
        828216000000,
        846360000000,
        859665600000,
        877809600000,
        891115200000,
        909259200000,
        922564800000,
        941313600000,
        954014400000,
        972763200000,
        985464000000,
        1004212800000,
        1017518400000,
        1035662400000,
        1048968000000,
        1067112000000,
        1080417600000,
        1099166400000,
        null
      ],
      "offsets": [
        -261.8667,
        -240,
        -300,
        -360,
        -360,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -300,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360
      ]
    },
    {
      "name": "Asia/Rangoon",
      "abbrs": [
        "RMT",
        "BURT",
        "JST",
        "MMT"
      ],
      "untils": [
        -1577946280000,
        -873268200000,
        -778410000000,
        null
      ],
      "offsets": [
        -384.6667,
        -390,
        -540,
        -390
      ]
    },
    {
      "name": "Asia/Riyadh",
      "abbrs": [
        "LMT",
        "AST"
      ],
      "untils": [
        -719636812000,
        null
      ],
      "offsets": [
        -186.8667,
        -180
      ]
    },
    {
      "name": "Asia/Saigon",
      "abbrs": [
        "LMT",
        "PLMT",
        "ICT",
        "IDT",
        "JST",
        "ICT",
        "IDT",
        "ICT",
        "IDT",
        "ICT"
      ],
      "untils": [
        -2004073600000,
        -1851577590000,
        -852105600000,
        -782643600000,
        -767869200000,
        -718095600000,
        -457776000000,
        -315648000000,
        171820800000,
        null
      ],
      "offsets": [
        -426.6667,
        -426.5,
        -420,
        -480,
        -540,
        -420,
        -480,
        -420,
        -480,
        -420
      ]
    },
    {
      "name": "Asia/Sakhalin",
      "abbrs": [
        "LMT",
        "JCST",
        "JST",
        "SAKT",
        "SAKST",
        "SAKT",
        "SAKST",
        "SAKT",
        "SAKST",
        "SAKT",
        "SAKST",
        "SAKT",
        "SAKST",
        "SAKT",
        "SAKST",
        "SAKT",
        "SAKST",
        "SAKT",
        "SAKST",
        "SAKT",
        "SAKST",
        "SAKT",
        "SAKST",
        "SAKT",
        "SAKST",
        "SAKT",
        "SAKT",
        "SAKST",
        "SAKT",
        "SAKST",
        "SAKT",
        "SAKST",
        "SAKT",
        "SAKST",
        "SAKT",
        "SAKST",
        "SAKT",
        "SAKST",
        "SAKT",
        "SAKST",
        "SAKT",
        "SAKST",
        "SAKT",
        "SAKST",
        "SAKT",
        "SAKST",
        "SAKT",
        "SAKST",
        "SAKT",
        "SAKST",
        "SAKT",
        "SAKST",
        "SAKT",
        "SAKST",
        "SAKT",
        "SAKST",
        "SAKT",
        "SAKST",
        "SAKT",
        "SAKST",
        "SAKT",
        "SAKST",
        "SAKT",
        "SAKST",
        "SAKT",
        "SAKT",
        "SAKT"
      ],
      "untils": [
        -2031039048000,
        -1017824400000,
        -768560400000,
        354891600000,
        370699200000,
        386427600000,
        402235200000,
        417963600000,
        433771200000,
        449586000000,
        465318000000,
        481042800000,
        496767600000,
        512492400000,
        528217200000,
        543942000000,
        559666800000,
        575391600000,
        591116400000,
        606841200000,
        622566000000,
        638290800000,
        654620400000,
        670345200000,
        686073600000,
        695750400000,
        701784000000,
        717505200000,
        733244400000,
        748969200000,
        764694000000,
        780418800000,
        796143600000,
        811868400000,
        828198000000,
        846342000000,
        859647600000,
        877795200000,
        891100800000,
        909244800000,
        922550400000,
        941299200000,
        954000000000,
        972748800000,
        985449600000,
        1004198400000,
        1017504000000,
        1035648000000,
        1048953600000,
        1067097600000,
        1080403200000,
        1099152000000,
        1111852800000,
        1130601600000,
        1143302400000,
        1162051200000,
        1174752000000,
        1193500800000,
        1206806400000,
        1224950400000,
        1238256000000,
        1256400000000,
        1269705600000,
        1288454400000,
        1301155200000,
        1414249200000,
        null
      ],
      "offsets": [
        -570.8,
        -540,
        -540,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -660,
        -600,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600
      ]
    },
    {
      "name": "Asia/Samarkand",
      "abbrs": [
        "LMT",
        "SAMT",
        "SAMT",
        "SAMST",
        "TAST",
        "SAMST",
        "SAMT",
        "SAMST",
        "SAMT",
        "SAMST",
        "SAMT",
        "SAMST",
        "SAMT",
        "SAMST",
        "SAMT",
        "SAMST",
        "SAMT",
        "SAMST",
        "SAMT",
        "SAMST",
        "SAMT",
        "SAMST",
        "SAMT",
        "SAMST",
        "UZST",
        "UZT"
      ],
      "untils": [
        -1441168073000,
        -1247544000000,
        354913200000,
        370720800000,
        386445600000,
        402256800000,
        417985200000,
        433792800000,
        449607600000,
        465339600000,
        481064400000,
        496789200000,
        512514000000,
        528238800000,
        543963600000,
        559688400000,
        575413200000,
        591138000000,
        606862800000,
        622587600000,
        638312400000,
        654642000000,
        670366800000,
        683661600000,
        686091600000,
        null
      ],
      "offsets": [
        -267.8833,
        -240,
        -300,
        -360,
        -360,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -360,
        -300
      ]
    },
    {
      "name": "Asia/Seoul",
      "abbrs": [
        "LMT",
        "KST",
        "JCST",
        "JST",
        "KST",
        "KST",
        "KDT",
        "KST",
        "KDT",
        "KST",
        "KDT",
        "KST",
        "KDT",
        "KST",
        "KDT",
        "KST",
        "KDT",
        "KST",
        "KST",
        "KDT",
        "KST",
        "KDT",
        "KST"
      ],
      "untils": [
        -1948782472000,
        -1830414600000,
        -1017824400000,
        -767350800000,
        -498128400000,
        -462702600000,
        -451733400000,
        -429784200000,
        -418296600000,
        -399544200000,
        -387451800000,
        -368094600000,
        -356002200000,
        -336645000000,
        -324552600000,
        -305195400000,
        -293103000000,
        -264933000000,
        547578000000,
        560883600000,
        579027600000,
        592333200000,
        null
      ],
      "offsets": [
        -507.8667,
        -510,
        -540,
        -540,
        -540,
        -510,
        -570,
        -510,
        -570,
        -510,
        -570,
        -510,
        -570,
        -510,
        -570,
        -510,
        -570,
        -510,
        -540,
        -600,
        -540,
        -600,
        -540
      ]
    },
    {
      "name": "Asia/Shanghai",
      "abbrs": [
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST"
      ],
      "untils": [
        -933494400000,
        -923130000000,
        -908784000000,
        -891594000000,
        515520000000,
        527007600000,
        545155200000,
        558457200000,
        576604800000,
        589906800000,
        608659200000,
        621961200000,
        640108800000,
        653410800000,
        671558400000,
        684860400000,
        null
      ],
      "offsets": [
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480
      ]
    },
    {
      "name": "Asia/Singapore",
      "abbrs": [
        "SMT",
        "MALT",
        "MALST",
        "MALT",
        "MALT",
        "JST",
        "MALT",
        "SGT",
        "SGT"
      ],
      "untils": [
        -2038200925000,
        -1167634800000,
        -1073028000000,
        -894180000000,
        -879665400000,
        -767005200000,
        -138785400000,
        378664200000,
        null
      ],
      "offsets": [
        -415.4167,
        -420,
        -440,
        -440,
        -450,
        -540,
        -450,
        -450,
        -480
      ]
    },
    {
      "name": "Asia/Srednekolymsk",
      "abbrs": [
        "LMT",
        "MAGT",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGT",
        "SRET"
      ],
      "untils": [
        -1441188892000,
        -1247565600000,
        354891600000,
        370699200000,
        386427600000,
        402235200000,
        417963600000,
        433771200000,
        449586000000,
        465318000000,
        481042800000,
        496767600000,
        512492400000,
        528217200000,
        543942000000,
        559666800000,
        575391600000,
        591116400000,
        606841200000,
        622566000000,
        638290800000,
        654620400000,
        670345200000,
        686073600000,
        695750400000,
        701784000000,
        717505200000,
        733244400000,
        748969200000,
        764694000000,
        780418800000,
        796143600000,
        811868400000,
        828198000000,
        846342000000,
        859647600000,
        877791600000,
        891097200000,
        909241200000,
        922546800000,
        941295600000,
        953996400000,
        972745200000,
        985446000000,
        1004194800000,
        1017500400000,
        1035644400000,
        1048950000000,
        1067094000000,
        1080399600000,
        1099148400000,
        1111849200000,
        1130598000000,
        1143298800000,
        1162047600000,
        1174748400000,
        1193497200000,
        1206802800000,
        1224946800000,
        1238252400000,
        1256396400000,
        1269702000000,
        1288450800000,
        1301151600000,
        1414245600000,
        null
      ],
      "offsets": [
        -614.8667,
        -600,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -660,
        -600,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660
      ]
    },
    {
      "name": "Asia/Taipei",
      "abbrs": [
        "JWST",
        "JST",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST"
      ],
      "untils": [
        -1017820800000,
        -766224000000,
        -745833600000,
        -733827600000,
        -716889600000,
        -699613200000,
        -683884800000,
        -670669200000,
        -652348800000,
        -639133200000,
        -620812800000,
        -607597200000,
        -589276800000,
        -576061200000,
        -562924800000,
        -541760400000,
        -528710400000,
        -510224400000,
        -497174400000,
        -478688400000,
        -465638400000,
        -449830800000,
        -434016000000,
        -418208400000,
        -402480000000,
        -386672400000,
        -370944000000,
        -355136400000,
        -339408000000,
        -323600400000,
        -302515200000,
        -291978000000,
        -270979200000,
        -260442000000,
        133977600000,
        149785200000,
        165513600000,
        181321200000,
        299606400000,
        307551600000,
        null
      ],
      "offsets": [
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480
      ]
    },
    {
      "name": "Asia/Tashkent",
      "abbrs": [
        "LMT",
        "TAST",
        "TAST",
        "TASST",
        "TAST",
        "TASST",
        "TAST",
        "TASST",
        "TAST",
        "TASST",
        "TAST",
        "TASST",
        "TAST",
        "TASST",
        "TAST",
        "TASST",
        "TAST",
        "TASST",
        "TAST",
        "TASST",
        "TAST",
        "TASST",
        "TAST",
        "TASST",
        "UZST",
        "UZT"
      ],
      "untils": [
        -1441168631000,
        -1247547600000,
        354909600000,
        370717200000,
        386445600000,
        402253200000,
        417981600000,
        433789200000,
        449604000000,
        465336000000,
        481060800000,
        496785600000,
        512510400000,
        528235200000,
        543960000000,
        559684800000,
        575409600000,
        591134400000,
        606859200000,
        622584000000,
        638308800000,
        654638400000,
        670363200000,
        683661600000,
        686091600000,
        null
      ],
      "offsets": [
        -277.1833,
        -300,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -420,
        -360,
        -360,
        -360,
        -300
      ]
    },
    {
      "name": "Asia/Tbilisi",
      "abbrs": [
        "TBMT",
        "TBIT",
        "TBIT",
        "TBIST",
        "TBIT",
        "TBIST",
        "TBIT",
        "TBIST",
        "TBIT",
        "TBIST",
        "TBIT",
        "TBIST",
        "TBIT",
        "TBIST",
        "TBIT",
        "TBIST",
        "TBIT",
        "TBIST",
        "TBIT",
        "TBIST",
        "TBIT",
        "TBIST",
        "TBIT",
        "TBIST",
        "GEST",
        "GET",
        "GEST",
        "GET",
        "GEST",
        "GET",
        "GEST",
        "GET",
        "GEST",
        "GET",
        "GEST",
        "GET",
        "GEST",
        "GET",
        "GEST",
        "GET",
        "GEST",
        "GET",
        "GEST",
        "GET",
        "GEST",
        "GET",
        "GEST",
        "GET",
        "GEST",
        "GEST",
        "GET",
        "GET"
      ],
      "untils": [
        -1441162751000,
        -405140400000,
        354916800000,
        370724400000,
        386452800000,
        402260400000,
        417988800000,
        433796400000,
        449611200000,
        465343200000,
        481068000000,
        496792800000,
        512517600000,
        528242400000,
        543967200000,
        559692000000,
        575416800000,
        591141600000,
        606866400000,
        622591200000,
        638316000000,
        654645600000,
        670370400000,
        671140800000,
        686098800000,
        701816400000,
        717537600000,
        733266000000,
        748987200000,
        764715600000,
        780436800000,
        796161600000,
        811882800000,
        828216000000,
        877806000000,
        891115200000,
        909255600000,
        922564800000,
        941310000000,
        954014400000,
        972759600000,
        985464000000,
        1004209200000,
        1017518400000,
        1035658800000,
        1048968000000,
        1067108400000,
        1080417600000,
        1088276400000,
        1099177200000,
        1111878000000,
        null
      ],
      "offsets": [
        -179.1833,
        -180,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -240,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -180,
        -240
      ]
    },
    {
      "name": "Asia/Tehran",
      "abbrs": [
        "LMT",
        "TMT",
        "IRST",
        "IRST",
        "IRDT",
        "IRST",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST"
      ],
      "untils": [
        -1704165944000,
        -757394744000,
        247177800000,
        259272000000,
        277758000000,
        283982400000,
        290809800000,
        306531000000,
        322432200000,
        338499000000,
        673216200000,
        685481400000,
        701209800000,
        717103800000,
        732745800000,
        748639800000,
        764281800000,
        780175800000,
        795817800000,
        811711800000,
        827353800000,
        843247800000,
        858976200000,
        874870200000,
        890512200000,
        906406200000,
        922048200000,
        937942200000,
        953584200000,
        969478200000,
        985206600000,
        1001100600000,
        1016742600000,
        1032636600000,
        1048278600000,
        1064172600000,
        1079814600000,
        1095708600000,
        1111437000000,
        1127331000000,
        1206045000000,
        1221939000000,
        1237667400000,
        1253561400000,
        1269203400000,
        1285097400000,
        1300739400000,
        1316633400000,
        1332275400000,
        1348169400000,
        1363897800000,
        1379791800000,
        1395433800000,
        1411327800000,
        1426969800000,
        1442863800000,
        1458505800000,
        1474399800000,
        1490128200000,
        1506022200000,
        1521664200000,
        1537558200000,
        1553200200000,
        1569094200000,
        1584736200000,
        1600630200000,
        1616358600000,
        1632252600000,
        1647894600000,
        1663788600000,
        1679430600000,
        1695324600000,
        1710966600000,
        1726860600000,
        1742589000000,
        1758483000000,
        1774125000000,
        1790019000000,
        1805661000000,
        1821555000000,
        1837197000000,
        1853091000000,
        1868733000000,
        1884627000000,
        1900355400000,
        1916249400000,
        1931891400000,
        1947785400000,
        1963427400000,
        1979321400000,
        1994963400000,
        2010857400000,
        2026585800000,
        2042479800000,
        2058121800000,
        2074015800000,
        2089657800000,
        2105551800000,
        2121193800000,
        2137087800000,
        null
      ],
      "offsets": [
        -205.7333,
        -205.7333,
        -210,
        -240,
        -300,
        -240,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210
      ]
    },
    {
      "name": "Asia/Tel_Aviv",
      "abbrs": [
        "JMT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDDT",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST"
      ],
      "untils": [
        -1641003640000,
        -933645600000,
        -857358000000,
        -844300800000,
        -825822000000,
        -812685600000,
        -794199600000,
        -779853600000,
        -762656400000,
        -748310400000,
        -731127600000,
        -681962400000,
        -673243200000,
        -667962000000,
        -652327200000,
        -636426000000,
        -622087200000,
        -608947200000,
        -591847200000,
        -572486400000,
        -558576000000,
        -542851200000,
        -527731200000,
        -514425600000,
        -490845600000,
        -482986800000,
        -459475200000,
        -451537200000,
        -428551200000,
        -418262400000,
        -400032000000,
        -387428400000,
        142380000000,
        150843600000,
        167176800000,
        178664400000,
        482277600000,
        495579600000,
        516751200000,
        526424400000,
        545436000000,
        558478800000,
        576626400000,
        589323600000,
        609890400000,
        620773200000,
        638316000000,
        651618000000,
        669765600000,
        683672400000,
        701820000000,
        715726800000,
        733701600000,
        747176400000,
        765151200000,
        778021200000,
        796600800000,
        810075600000,
        826840800000,
        842821200000,
        858895200000,
        874184400000,
        890344800000,
        905029200000,
        923011200000,
        936313200000,
        955670400000,
        970783200000,
        986770800000,
        1001282400000,
        1017356400000,
        1033941600000,
        1048806000000,
        1065132000000,
        1081292400000,
        1095804000000,
        1112313600000,
        1128812400000,
        1143763200000,
        1159657200000,
        1175212800000,
        1189897200000,
        1206662400000,
        1223161200000,
        1238112000000,
        1254006000000,
        1269561600000,
        1284246000000,
        1301616000000,
        1317510000000,
        1333065600000,
        1348354800000,
        1364515200000,
        1382828400000,
        1395964800000,
        1414278000000,
        1427414400000,
        1445727600000,
        1458864000000,
        1477782000000,
        1490313600000,
        1509231600000,
        1521763200000,
        1540681200000,
        1553817600000,
        1572130800000,
        1585267200000,
        1603580400000,
        1616716800000,
        1635634800000,
        1648166400000,
        1667084400000,
        1679616000000,
        1698534000000,
        1711670400000,
        1729983600000,
        1743120000000,
        1761433200000,
        1774569600000,
        1792882800000,
        1806019200000,
        1824937200000,
        1837468800000,
        1856386800000,
        1868918400000,
        1887836400000,
        1900972800000,
        1919286000000,
        1932422400000,
        1950735600000,
        1963872000000,
        1982790000000,
        1995321600000,
        2014239600000,
        2026771200000,
        2045689200000,
        2058220800000,
        2077138800000,
        2090275200000,
        2108588400000,
        2121724800000,
        2140038000000,
        null
      ],
      "offsets": [
        -140.6667,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -240,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120
      ]
    },
    {
      "name": "Asia/Thimbu",
      "abbrs": [
        "LMT",
        "IST",
        "BTT"
      ],
      "untils": [
        -706341516000,
        560025000000,
        null
      ],
      "offsets": [
        -358.6,
        -330,
        -360
      ]
    },
    {
      "name": "Asia/Thimphu",
      "abbrs": [
        "LMT",
        "IST",
        "BTT"
      ],
      "untils": [
        -706341516000,
        560025000000,
        null
      ],
      "offsets": [
        -358.6,
        -330,
        -360
      ]
    },
    {
      "name": "Asia/Tokyo",
      "abbrs": [
        "JCST",
        "JST",
        "JDT",
        "JST",
        "JDT",
        "JST",
        "JDT",
        "JST",
        "JDT",
        "JST"
      ],
      "untils": [
        -1017824400000,
        -683794800000,
        -672393600000,
        -654764400000,
        -640944000000,
        -620290800000,
        -609494400000,
        -588841200000,
        -578044800000,
        null
      ],
      "offsets": [
        -540,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540
      ]
    },
    {
      "name": "Asia/Ujung_Pandang",
      "abbrs": [
        "LMT",
        "MMT",
        "WITA",
        "JST",
        "WITA"
      ],
      "untils": [
        -1577951856000,
        -1172908656000,
        -880272000000,
        -766054800000,
        null
      ],
      "offsets": [
        -477.6,
        -477.6,
        -480,
        -540,
        -480
      ]
    },
    {
      "name": "Asia/Ulaanbaatar",
      "abbrs": [
        "LMT",
        "ULAT",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT"
      ],
      "untils": [
        -2032931252000,
        252435600000,
        417974400000,
        433782000000,
        449596800000,
        465318000000,
        481046400000,
        496767600000,
        512496000000,
        528217200000,
        543945600000,
        559666800000,
        575395200000,
        591116400000,
        606844800000,
        622566000000,
        638294400000,
        654620400000,
        670348800000,
        686070000000,
        701798400000,
        717519600000,
        733248000000,
        748969200000,
        764697600000,
        780418800000,
        796147200000,
        811868400000,
        828201600000,
        843922800000,
        859651200000,
        875372400000,
        891100800000,
        906822000000,
        988394400000,
        1001696400000,
        1017424800000,
        1033146000000,
        1048874400000,
        1064595600000,
        1080324000000,
        1096045200000,
        1111773600000,
        1127494800000,
        1143223200000,
        1159549200000,
        1427479200000,
        1443193200000,
        1458928800000,
        1474642800000,
        1490378400000,
        1506697200000,
        1522432800000,
        1538146800000,
        1553882400000,
        1569596400000,
        1585332000000,
        1601046000000,
        1616781600000,
        1632495600000,
        1648231200000,
        1663945200000,
        1679680800000,
        1695999600000,
        1711735200000,
        1727449200000,
        1743184800000,
        1758898800000,
        1774634400000,
        1790348400000,
        1806084000000,
        1821798000000,
        1837533600000,
        1853852400000,
        1869588000000,
        1885302000000,
        1901037600000,
        1916751600000,
        1932487200000,
        1948201200000,
        1963936800000,
        1979650800000,
        1995386400000,
        2011100400000,
        2026836000000,
        2043154800000,
        2058890400000,
        2074604400000,
        2090340000000,
        2106054000000,
        2121789600000,
        2137503600000,
        null
      ],
      "offsets": [
        -427.5333,
        -420,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480
      ]
    },
    {
      "name": "Asia/Ulan_Bator",
      "abbrs": [
        "LMT",
        "ULAT",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT",
        "ULAST",
        "ULAT"
      ],
      "untils": [
        -2032931252000,
        252435600000,
        417974400000,
        433782000000,
        449596800000,
        465318000000,
        481046400000,
        496767600000,
        512496000000,
        528217200000,
        543945600000,
        559666800000,
        575395200000,
        591116400000,
        606844800000,
        622566000000,
        638294400000,
        654620400000,
        670348800000,
        686070000000,
        701798400000,
        717519600000,
        733248000000,
        748969200000,
        764697600000,
        780418800000,
        796147200000,
        811868400000,
        828201600000,
        843922800000,
        859651200000,
        875372400000,
        891100800000,
        906822000000,
        988394400000,
        1001696400000,
        1017424800000,
        1033146000000,
        1048874400000,
        1064595600000,
        1080324000000,
        1096045200000,
        1111773600000,
        1127494800000,
        1143223200000,
        1159549200000,
        1427479200000,
        1443193200000,
        1458928800000,
        1474642800000,
        1490378400000,
        1506697200000,
        1522432800000,
        1538146800000,
        1553882400000,
        1569596400000,
        1585332000000,
        1601046000000,
        1616781600000,
        1632495600000,
        1648231200000,
        1663945200000,
        1679680800000,
        1695999600000,
        1711735200000,
        1727449200000,
        1743184800000,
        1758898800000,
        1774634400000,
        1790348400000,
        1806084000000,
        1821798000000,
        1837533600000,
        1853852400000,
        1869588000000,
        1885302000000,
        1901037600000,
        1916751600000,
        1932487200000,
        1948201200000,
        1963936800000,
        1979650800000,
        1995386400000,
        2011100400000,
        2026836000000,
        2043154800000,
        2058890400000,
        2074604400000,
        2090340000000,
        2106054000000,
        2121789600000,
        2137503600000,
        null
      ],
      "offsets": [
        -427.5333,
        -420,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480
      ]
    },
    {
      "name": "Asia/Urumqi",
      "abbrs": [
        "LMT",
        "XJT"
      ],
      "untils": [
        -1325483420000,
        null
      ],
      "offsets": [
        -350.3333,
        -360
      ]
    },
    {
      "name": "Asia/Ust-Nera",
      "abbrs": [
        "LMT",
        "YAKT",
        "YAKT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGST",
        "MAGT",
        "MAGT",
        "VLAT",
        "VLAT"
      ],
      "untils": [
        -1579426374000,
        -1247558400000,
        354898800000,
        370699200000,
        386427600000,
        402235200000,
        417963600000,
        433771200000,
        449586000000,
        465318000000,
        481042800000,
        496767600000,
        512492400000,
        528217200000,
        543942000000,
        559666800000,
        575391600000,
        591116400000,
        606841200000,
        622566000000,
        638290800000,
        654620400000,
        670345200000,
        686073600000,
        695750400000,
        701784000000,
        717505200000,
        733244400000,
        748969200000,
        764694000000,
        780418800000,
        796143600000,
        811868400000,
        828198000000,
        846342000000,
        859647600000,
        877791600000,
        891097200000,
        909241200000,
        922546800000,
        941295600000,
        953996400000,
        972745200000,
        985446000000,
        1004194800000,
        1017500400000,
        1035644400000,
        1048950000000,
        1067094000000,
        1080399600000,
        1099148400000,
        1111849200000,
        1130598000000,
        1143298800000,
        1162047600000,
        1174748400000,
        1193497200000,
        1206802800000,
        1224946800000,
        1238252400000,
        1256396400000,
        1269702000000,
        1288450800000,
        1301151600000,
        1315828800000,
        1414249200000,
        null
      ],
      "offsets": [
        -572.9,
        -480,
        -540,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -660,
        -600,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -600
      ]
    },
    {
      "name": "Asia/Vientiane",
      "abbrs": [
        "BMT",
        "ICT"
      ],
      "untils": [
        -1570084924000,
        null
      ],
      "offsets": [
        -402.0667,
        -420
      ]
    },
    {
      "name": "Asia/Vladivostok",
      "abbrs": [
        "LMT",
        "VLAT",
        "VLAT",
        "VLAST",
        "VLAT",
        "VLAST",
        "VLAT",
        "VLAST",
        "VLAT",
        "VLAST",
        "VLAT",
        "VLAST",
        "VLAT",
        "VLAST",
        "VLAT",
        "VLAST",
        "VLAT",
        "VLAST",
        "VLAT",
        "VLAST",
        "VLAT",
        "VLAST",
        "VLAT",
        "VLAST",
        "VLAT",
        "VLAT",
        "VLAST",
        "VLAT",
        "VLAST",
        "VLAT",
        "VLAST",
        "VLAT",
        "VLAST",
        "VLAT",
        "VLAST",
        "VLAT",
        "VLAST",
        "VLAT",
        "VLAST",
        "VLAT",
        "VLAST",
        "VLAT",
        "VLAST",
        "VLAT",
        "VLAST",
        "VLAT",
        "VLAST",
        "VLAT",
        "VLAST",
        "VLAT",
        "VLAST",
        "VLAT",
        "VLAST",
        "VLAT",
        "VLAST",
        "VLAT",
        "VLAST",
        "VLAT",
        "VLAST",
        "VLAT",
        "VLAST",
        "VLAT",
        "VLAST",
        "VLAT",
        "VLAT",
        "VLAT"
      ],
      "untils": [
        -1487321251000,
        -1247562000000,
        354895200000,
        370702800000,
        386431200000,
        402238800000,
        417967200000,
        433774800000,
        449589600000,
        465321600000,
        481046400000,
        496771200000,
        512496000000,
        528220800000,
        543945600000,
        559670400000,
        575395200000,
        591120000000,
        606844800000,
        622569600000,
        638294400000,
        654624000000,
        670348800000,
        686077200000,
        695754000000,
        701787600000,
        717508800000,
        733248000000,
        748972800000,
        764697600000,
        780422400000,
        796147200000,
        811872000000,
        828201600000,
        846345600000,
        859651200000,
        877795200000,
        891100800000,
        909244800000,
        922550400000,
        941299200000,
        954000000000,
        972748800000,
        985449600000,
        1004198400000,
        1017504000000,
        1035648000000,
        1048953600000,
        1067097600000,
        1080403200000,
        1099152000000,
        1111852800000,
        1130601600000,
        1143302400000,
        1162051200000,
        1174752000000,
        1193500800000,
        1206806400000,
        1224950400000,
        1238256000000,
        1256400000000,
        1269705600000,
        1288454400000,
        1301155200000,
        1414249200000,
        null
      ],
      "offsets": [
        -527.5167,
        -540,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -600,
        -540,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600
      ]
    },
    {
      "name": "Asia/Yakutsk",
      "abbrs": [
        "LMT",
        "YAKT",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKST",
        "YAKT",
        "YAKT",
        "YAKT"
      ],
      "untils": [
        -1579423138000,
        -1247558400000,
        354898800000,
        370706400000,
        386434800000,
        402242400000,
        417970800000,
        433778400000,
        449593200000,
        465325200000,
        481050000000,
        496774800000,
        512499600000,
        528224400000,
        543949200000,
        559674000000,
        575398800000,
        591123600000,
        606848400000,
        622573200000,
        638298000000,
        654627600000,
        670352400000,
        686080800000,
        695757600000,
        701791200000,
        717512400000,
        733251600000,
        748976400000,
        764701200000,
        780426000000,
        796150800000,
        811875600000,
        828205200000,
        846349200000,
        859654800000,
        877798800000,
        891104400000,
        909248400000,
        922554000000,
        941302800000,
        954003600000,
        972752400000,
        985453200000,
        1004202000000,
        1017507600000,
        1035651600000,
        1048957200000,
        1067101200000,
        1080406800000,
        1099155600000,
        1111856400000,
        1130605200000,
        1143306000000,
        1162054800000,
        1174755600000,
        1193504400000,
        1206810000000,
        1224954000000,
        1238259600000,
        1256403600000,
        1269709200000,
        1288458000000,
        1301158800000,
        1414252800000,
        null
      ],
      "offsets": [
        -518.9667,
        -480,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -540,
        -480,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540
      ]
    },
    {
      "name": "Asia/Yekaterinburg",
      "abbrs": [
        "LMT",
        "PMT",
        "SVET",
        "SVET",
        "SVEST",
        "SVET",
        "SVEST",
        "SVET",
        "SVEST",
        "SVET",
        "SVEST",
        "SVET",
        "SVEST",
        "SVET",
        "SVEST",
        "SVET",
        "SVEST",
        "SVET",
        "SVEST",
        "SVET",
        "SVEST",
        "SVET",
        "SVEST",
        "SVET",
        "SVEST",
        "SVET",
        "YEKT",
        "YEKST",
        "YEKT",
        "YEKST",
        "YEKT",
        "YEKST",
        "YEKT",
        "YEKST",
        "YEKT",
        "YEKST",
        "YEKT",
        "YEKST",
        "YEKT",
        "YEKST",
        "YEKT",
        "YEKST",
        "YEKT",
        "YEKST",
        "YEKT",
        "YEKST",
        "YEKT",
        "YEKST",
        "YEKT",
        "YEKST",
        "YEKT",
        "YEKST",
        "YEKT",
        "YEKST",
        "YEKT",
        "YEKST",
        "YEKT",
        "YEKST",
        "YEKT",
        "YEKST",
        "YEKT",
        "YEKST",
        "YEKT",
        "YEKST",
        "YEKT",
        "YEKT",
        "YEKT"
      ],
      "untils": [
        -1688270553000,
        -1592610305000,
        -1247544000000,
        354913200000,
        370720800000,
        386449200000,
        402256800000,
        417985200000,
        433792800000,
        449607600000,
        465339600000,
        481064400000,
        496789200000,
        512514000000,
        528238800000,
        543963600000,
        559688400000,
        575413200000,
        591138000000,
        606862800000,
        622587600000,
        638312400000,
        654642000000,
        670366800000,
        686095200000,
        695772000000,
        701805600000,
        717526800000,
        733266000000,
        748990800000,
        764715600000,
        780440400000,
        796165200000,
        811890000000,
        828219600000,
        846363600000,
        859669200000,
        877813200000,
        891118800000,
        909262800000,
        922568400000,
        941317200000,
        954018000000,
        972766800000,
        985467600000,
        1004216400000,
        1017522000000,
        1035666000000,
        1048971600000,
        1067115600000,
        1080421200000,
        1099170000000,
        1111870800000,
        1130619600000,
        1143320400000,
        1162069200000,
        1174770000000,
        1193518800000,
        1206824400000,
        1224968400000,
        1238274000000,
        1256418000000,
        1269723600000,
        1288472400000,
        1301173200000,
        1414267200000,
        null
      ],
      "offsets": [
        -242.55,
        -225.0833,
        -240,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -300,
        -240,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300,
        -360,
        -300
      ]
    },
    {
      "name": "Asia/Yerevan",
      "abbrs": [
        "LMT",
        "YERT",
        "YERT",
        "YERST",
        "YERT",
        "YERST",
        "YERT",
        "YERST",
        "YERT",
        "YERST",
        "YERT",
        "YERST",
        "YERT",
        "YERST",
        "YERT",
        "YERST",
        "YERT",
        "YERST",
        "YERT",
        "YERST",
        "YERT",
        "YERST",
        "YERT",
        "YERST",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT"
      ],
      "untils": [
        -1441162680000,
        -405140400000,
        354916800000,
        370724400000,
        386452800000,
        402260400000,
        417988800000,
        433796400000,
        449611200000,
        465343200000,
        481068000000,
        496792800000,
        512517600000,
        528242400000,
        543967200000,
        559692000000,
        575416800000,
        591141600000,
        606866400000,
        622591200000,
        638316000000,
        654645600000,
        670370400000,
        685569600000,
        686098800000,
        701812800000,
        717534000000,
        733273200000,
        748998000000,
        764722800000,
        780447600000,
        796172400000,
        811897200000,
        859672800000,
        877816800000,
        891122400000,
        909266400000,
        922572000000,
        941320800000,
        954021600000,
        972770400000,
        985471200000,
        1004220000000,
        1017525600000,
        1035669600000,
        1048975200000,
        1067119200000,
        1080424800000,
        1099173600000,
        1111874400000,
        1130623200000,
        1143324000000,
        1162072800000,
        1174773600000,
        1193522400000,
        1206828000000,
        1224972000000,
        1238277600000,
        1256421600000,
        1269727200000,
        1288476000000,
        1301176800000,
        1319925600000,
        null
      ],
      "offsets": [
        -178,
        -180,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -240,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240
      ]
    },
    {
      "name": "Atlantic/Azores",
      "abbrs": [
        "HMT",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOMT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOMT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOMT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOMT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "WET",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT",
        "AZOST",
        "AZOT"
      ],
      "untils": [
        -1830377128000,
        -1689548400000,
        -1677794400000,
        -1667430000000,
        -1647730800000,
        -1635807600000,
        -1616194800000,
        -1604358000000,
        -1584658800000,
        -1572735600000,
        -1553036400000,
        -1541199600000,
        -1521500400000,
        -1442444400000,
        -1426806000000,
        -1379286000000,
        -1364770800000,
        -1348441200000,
        -1333321200000,
        -1316386800000,
        -1301266800000,
        -1284332400000,
        -1269817200000,
        -1221433200000,
        -1206918000000,
        -1191193200000,
        -1175468400000,
        -1127689200000,
        -1111964400000,
        -1096844400000,
        -1080514800000,
        -1063580400000,
        -1049065200000,
        -1033340400000,
        -1017615600000,
        -1002495600000,
        -986166000000,
        -969231600000,
        -950482800000,
        -942015600000,
        -922662000000,
        -906937200000,
        -891126000000,
        -877302000000,
        -873676800000,
        -864000000000,
        -857948400000,
        -845852400000,
        -842832000000,
        -831340800000,
        -825894000000,
        -814402800000,
        -810777600000,
        -799891200000,
        -794444400000,
        -782953200000,
        -779328000000,
        -768441600000,
        -762994800000,
        -749084400000,
        -733359600000,
        -717624000000,
        -701899200000,
        -686174400000,
        -670449600000,
        -654724800000,
        -639000000000,
        -591825600000,
        -575496000000,
        -559771200000,
        -544046400000,
        -528321600000,
        -512596800000,
        -496872000000,
        -481147200000,
        -465422400000,
        -449697600000,
        -433972800000,
        -417643200000,
        -401918400000,
        -386193600000,
        -370468800000,
        -354744000000,
        -339019200000,
        -323294400000,
        -307569600000,
        -291844800000,
        -276120000000,
        -260395200000,
        -244670400000,
        -228340800000,
        -212616000000,
        -196891200000,
        -181166400000,
        -165441600000,
        -149716800000,
        -133992000000,
        -118267200000,
        228272400000,
        243997200000,
        260326800000,
        276051600000,
        291776400000,
        307504800000,
        323226000000,
        338954400000,
        354679200000,
        370404000000,
        386128800000,
        401853600000,
        417582000000,
        433303200000,
        449028000000,
        465357600000,
        481082400000,
        496807200000,
        512532000000,
        528256800000,
        543981600000,
        559706400000,
        575431200000,
        591156000000,
        606880800000,
        622605600000,
        638330400000,
        654660000000,
        670384800000,
        686109600000,
        701834400000,
        717559200000,
        733280400000,
        749005200000,
        764730000000,
        780454800000,
        796179600000,
        811904400000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        114.5333,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        0,
        60,
        120,
        60,
        0,
        60,
        120,
        60,
        0,
        60,
        120,
        60,
        0,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        0,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60
      ]
    },
    {
      "name": "Atlantic/Bermuda",
      "abbrs": [
        "LMT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST"
      ],
      "untils": [
        -1262281242000,
        136360800000,
        152082000000,
        167810400000,
        183531600000,
        199260000000,
        215586000000,
        230709600000,
        247035600000,
        262764000000,
        278485200000,
        294213600000,
        309934800000,
        325663200000,
        341384400000,
        357112800000,
        372834000000,
        388562400000,
        404888400000,
        420012000000,
        436338000000,
        452066400000,
        467787600000,
        483516000000,
        499237200000,
        514965600000,
        530686800000,
        544600800000,
        562136400000,
        576050400000,
        594190800000,
        607500000000,
        625640400000,
        638949600000,
        657090000000,
        671004000000,
        688539600000,
        702453600000,
        719989200000,
        733903200000,
        752043600000,
        765352800000,
        783493200000,
        796802400000,
        814942800000,
        828856800000,
        846392400000,
        860306400000,
        877842000000,
        891756000000,
        909291600000,
        923205600000,
        941346000000,
        954655200000,
        972795600000,
        986104800000,
        1004245200000,
        1018159200000,
        1035694800000,
        1049608800000,
        1067144400000,
        1081058400000,
        1099198800000,
        1112508000000,
        1130648400000,
        1143957600000,
        1162098000000,
        1173592800000,
        1194152400000,
        1205042400000,
        1225602000000,
        1236492000000,
        1257051600000,
        1268546400000,
        1289106000000,
        1299996000000,
        1320555600000,
        1331445600000,
        1352005200000,
        1362895200000,
        1383454800000,
        1394344800000,
        1414904400000,
        1425794400000,
        1446354000000,
        1457848800000,
        1478408400000,
        1489298400000,
        1509858000000,
        1520748000000,
        1541307600000,
        1552197600000,
        1572757200000,
        1583647200000,
        1604206800000,
        1615701600000,
        1636261200000,
        1647151200000,
        1667710800000,
        1678600800000,
        1699160400000,
        1710050400000,
        1730610000000,
        1741500000000,
        1762059600000,
        1772949600000,
        1793509200000,
        1805004000000,
        1825563600000,
        1836453600000,
        1857013200000,
        1867903200000,
        1888462800000,
        1899352800000,
        1919912400000,
        1930802400000,
        1951362000000,
        1962856800000,
        1983416400000,
        1994306400000,
        2014866000000,
        2025756000000,
        2046315600000,
        2057205600000,
        2077765200000,
        2088655200000,
        2109214800000,
        2120104800000,
        2140664400000,
        null
      ],
      "offsets": [
        259.3,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240
      ]
    },
    {
      "name": "Atlantic/Canary",
      "abbrs": [
        "LMT",
        "CANT",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET"
      ],
      "untils": [
        -1509663504000,
        -733874400000,
        323827200000,
        338950800000,
        354675600000,
        370400400000,
        386125200000,
        401850000000,
        417574800000,
        433299600000,
        449024400000,
        465354000000,
        481078800000,
        496803600000,
        512528400000,
        528253200000,
        543978000000,
        559702800000,
        575427600000,
        591152400000,
        606877200000,
        622602000000,
        638326800000,
        654656400000,
        670381200000,
        686106000000,
        701830800000,
        717555600000,
        733280400000,
        749005200000,
        764730000000,
        780454800000,
        796179600000,
        811904400000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        61.6,
        60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0
      ]
    },
    {
      "name": "Atlantic/Cape_Verde",
      "abbrs": [
        "LMT",
        "CVT",
        "CVST",
        "CVT",
        "CVT"
      ],
      "untils": [
        -1988144756000,
        -862610400000,
        -764118000000,
        186120000000,
        null
      ],
      "offsets": [
        94.0667,
        120,
        60,
        120,
        60
      ]
    },
    {
      "name": "Atlantic/Faeroe",
      "abbrs": [
        "LMT",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET"
      ],
      "untils": [
        -1955748776000,
        354675600000,
        370400400000,
        386125200000,
        401850000000,
        417574800000,
        433299600000,
        449024400000,
        465354000000,
        481078800000,
        496803600000,
        512528400000,
        528253200000,
        543978000000,
        559702800000,
        575427600000,
        591152400000,
        606877200000,
        622602000000,
        638326800000,
        654656400000,
        670381200000,
        686106000000,
        701830800000,
        717555600000,
        733280400000,
        749005200000,
        764730000000,
        780454800000,
        796179600000,
        811904400000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        27.0667,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0
      ]
    },
    {
      "name": "Atlantic/Faroe",
      "abbrs": [
        "LMT",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET"
      ],
      "untils": [
        -1955748776000,
        354675600000,
        370400400000,
        386125200000,
        401850000000,
        417574800000,
        433299600000,
        449024400000,
        465354000000,
        481078800000,
        496803600000,
        512528400000,
        528253200000,
        543978000000,
        559702800000,
        575427600000,
        591152400000,
        606877200000,
        622602000000,
        638326800000,
        654656400000,
        670381200000,
        686106000000,
        701830800000,
        717555600000,
        733280400000,
        749005200000,
        764730000000,
        780454800000,
        796179600000,
        811904400000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        27.0667,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0
      ]
    },
    {
      "name": "Atlantic/Jan_Mayen",
      "abbrs": [
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET"
      ],
      "untils": [
        -1691884800000,
        -1680573600000,
        -927511200000,
        -857257200000,
        -844556400000,
        -828226800000,
        -812502000000,
        -796777200000,
        -781052400000,
        -765327600000,
        -340844400000,
        -324514800000,
        -308790000000,
        -293065200000,
        -277340400000,
        -261615600000,
        -245890800000,
        -230166000000,
        -214441200000,
        -198716400000,
        -182991600000,
        -166662000000,
        -147913200000,
        -135212400000,
        323830800000,
        338950800000,
        354675600000,
        370400400000,
        386125200000,
        401850000000,
        417574800000,
        433299600000,
        449024400000,
        465354000000,
        481078800000,
        496803600000,
        512528400000,
        528253200000,
        543978000000,
        559702800000,
        575427600000,
        591152400000,
        606877200000,
        622602000000,
        638326800000,
        654656400000,
        670381200000,
        686106000000,
        701830800000,
        717555600000,
        733280400000,
        749005200000,
        764730000000,
        780454800000,
        796179600000,
        811904400000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60
      ]
    },
    {
      "name": "Atlantic/Madeira",
      "abbrs": [
        "FMT",
        "MADT",
        "MADST",
        "MADT",
        "MADST",
        "MADT",
        "MADST",
        "MADT",
        "MADST",
        "MADT",
        "MADST",
        "MADT",
        "MADST",
        "MADT",
        "MADST",
        "MADT",
        "MADST",
        "MADT",
        "MADST",
        "MADT",
        "MADST",
        "MADT",
        "MADST",
        "MADT",
        "MADST",
        "MADT",
        "MADST",
        "MADT",
        "MADST",
        "MADT",
        "MADST",
        "MADT",
        "MADST",
        "MADT",
        "MADST",
        "MADT",
        "MADST",
        "MADT",
        "MADST",
        "MADT",
        "MADST",
        "MADT",
        "MADST",
        "MADT",
        "MADST",
        "MADMT",
        "MADST",
        "MADT",
        "MADST",
        "MADMT",
        "MADST",
        "MADT",
        "MADST",
        "MADMT",
        "MADST",
        "MADT",
        "MADST",
        "MADMT",
        "MADST",
        "MADT",
        "MADST",
        "MADT",
        "MADST",
        "MADT",
        "MADST",
        "MADT",
        "MADST",
        "MADT",
        "MADST",
        "MADT",
        "MADST",
        "MADT",
        "MADST",
        "MADT",
        "MADST",
        "MADT",
        "MADST",
        "MADT",
        "MADST",
        "MADT",
        "MADST",
        "MADT",
        "MADST",
        "MADT",
        "MADST",
        "MADT",
        "MADST",
        "MADT",
        "MADST",
        "MADT",
        "MADST",
        "MADT",
        "MADST",
        "MADT",
        "MADST",
        "MADT",
        "MADST",
        "MADT",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET"
      ],
      "untils": [
        -1830379944000,
        -1689552000000,
        -1677798000000,
        -1667433600000,
        -1647734400000,
        -1635811200000,
        -1616198400000,
        -1604361600000,
        -1584662400000,
        -1572739200000,
        -1553040000000,
        -1541203200000,
        -1521504000000,
        -1442448000000,
        -1426809600000,
        -1379289600000,
        -1364774400000,
        -1348444800000,
        -1333324800000,
        -1316390400000,
        -1301270400000,
        -1284336000000,
        -1269820800000,
        -1221436800000,
        -1206921600000,
        -1191196800000,
        -1175472000000,
        -1127692800000,
        -1111968000000,
        -1096848000000,
        -1080518400000,
        -1063584000000,
        -1049068800000,
        -1033344000000,
        -1017619200000,
        -1002499200000,
        -986169600000,
        -969235200000,
        -950486400000,
        -942019200000,
        -922665600000,
        -906940800000,
        -891129600000,
        -877305600000,
        -873680400000,
        -864003600000,
        -857952000000,
        -845856000000,
        -842835600000,
        -831344400000,
        -825897600000,
        -814406400000,
        -810781200000,
        -799894800000,
        -794448000000,
        -782956800000,
        -779331600000,
        -768445200000,
        -762998400000,
        -749088000000,
        -733363200000,
        -717627600000,
        -701902800000,
        -686178000000,
        -670453200000,
        -654728400000,
        -639003600000,
        -591829200000,
        -575499600000,
        -559774800000,
        -544050000000,
        -528325200000,
        -512600400000,
        -496875600000,
        -481150800000,
        -465426000000,
        -449701200000,
        -433976400000,
        -417646800000,
        -401922000000,
        -386197200000,
        -370472400000,
        -354747600000,
        -339022800000,
        -323298000000,
        -307573200000,
        -291848400000,
        -276123600000,
        -260398800000,
        -244674000000,
        -228344400000,
        -212619600000,
        -196894800000,
        -181170000000,
        -165445200000,
        -149720400000,
        -133995600000,
        -118270800000,
        228268800000,
        243993600000,
        260323200000,
        276048000000,
        291772800000,
        307501200000,
        323222400000,
        338950800000,
        354675600000,
        370400400000,
        386125200000,
        401850000000,
        417578400000,
        433299600000,
        449024400000,
        465354000000,
        481078800000,
        496803600000,
        512528400000,
        528253200000,
        543978000000,
        559702800000,
        575427600000,
        591152400000,
        606877200000,
        622602000000,
        638326800000,
        654656400000,
        670381200000,
        686106000000,
        701830800000,
        717555600000,
        733280400000,
        749005200000,
        764730000000,
        780454800000,
        796179600000,
        811904400000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        67.6,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        -60,
        0,
        60,
        0,
        -60,
        0,
        60,
        0,
        -60,
        0,
        60,
        0,
        -60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0
      ]
    },
    {
      "name": "Atlantic/Reykjavik",
      "abbrs": [
        "LMT",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "GMT"
      ],
      "untils": [
        -1956609120000,
        -1668211200000,
        -1647212400000,
        -1636675200000,
        -1613430000000,
        -1605139200000,
        -1581894000000,
        -1539561600000,
        -1531350000000,
        -968025600000,
        -952293600000,
        -942008400000,
        -920239200000,
        -909957600000,
        -888789600000,
        -877903200000,
        -857944800000,
        -846453600000,
        -826495200000,
        -815004000000,
        -795045600000,
        -783554400000,
        -762991200000,
        -752104800000,
        -731541600000,
        -717631200000,
        -700092000000,
        -686181600000,
        -668642400000,
        -654732000000,
        -636588000000,
        -623282400000,
        -605743200000,
        -591832800000,
        -573688800000,
        -559778400000,
        -542239200000,
        -528328800000,
        -510789600000,
        -496879200000,
        -479340000000,
        -465429600000,
        -447890400000,
        -433980000000,
        -415836000000,
        -401925600000,
        -384386400000,
        -370476000000,
        -352936800000,
        -339026400000,
        -321487200000,
        -307576800000,
        -290037600000,
        -276127200000,
        -258588000000,
        -244677600000,
        -226533600000,
        -212623200000,
        -195084000000,
        -181173600000,
        -163634400000,
        -149724000000,
        -132184800000,
        -118274400000,
        -100735200000,
        -86824800000,
        -68680800000,
        -54770400000,
        null
      ],
      "offsets": [
        88,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0
      ]
    },
    {
      "name": "Atlantic/South_Georgia",
      "abbrs": [
        "GST"
      ],
      "untils": [
        null
      ],
      "offsets": [
        120
      ]
    },
    {
      "name": "Atlantic/St_Helena",
      "abbrs": [
        "LMT",
        "GMT"
      ],
      "untils": [
        -1830383032000,
        null
      ],
      "offsets": [
        16.1333,
        0
      ]
    },
    {
      "name": "Atlantic/Stanley",
      "abbrs": [
        "SMT",
        "FKT",
        "FKST",
        "FKT",
        "FKST",
        "FKT",
        "FKST",
        "FKT",
        "FKST",
        "FKT",
        "FKST",
        "FKT",
        "FKST",
        "FKT",
        "FKT",
        "FKST",
        "FKT",
        "FKST",
        "FKT",
        "FKST",
        "FKT",
        "FKST",
        "FKT",
        "FKST",
        "FKT",
        "FKST",
        "FKT",
        "FKST",
        "FKT",
        "FKST",
        "FKT",
        "FKST",
        "FKT",
        "FKST",
        "FKT",
        "FKST",
        "FKT",
        "FKST",
        "FKT",
        "FKST",
        "FKT",
        "FKST",
        "FKT",
        "FKST",
        "FKT",
        "FKST",
        "FKT",
        "FKST",
        "FKT",
        "FKST",
        "FKT",
        "FKST",
        "FKT",
        "FKST",
        "FKT",
        "FKST",
        "FKT",
        "FKST",
        "FKT",
        "FKST",
        "FKT",
        "FKST",
        "FKT",
        "FKST",
        "FKT",
        "FKST",
        "FKT",
        "FKST",
        "FKT",
        "FKST"
      ],
      "untils": [
        -1824235716000,
        -1018209600000,
        -1003093200000,
        -986760000000,
        -971643600000,
        -954705600000,
        -939589200000,
        -923256000000,
        -908139600000,
        -891806400000,
        -876690000000,
        -860356800000,
        -852066000000,
        420609600000,
        433306800000,
        452052000000,
        464151600000,
        483501600000,
        495601200000,
        514350000000,
        527054400000,
        545799600000,
        558504000000,
        577249200000,
        589953600000,
        608698800000,
        621403200000,
        640753200000,
        652852800000,
        672202800000,
        684907200000,
        703652400000,
        716356800000,
        735102000000,
        747806400000,
        766551600000,
        779256000000,
        798001200000,
        810705600000,
        830055600000,
        842760000000,
        861505200000,
        874209600000,
        892954800000,
        905659200000,
        924404400000,
        937108800000,
        955854000000,
        968558400000,
        987310800000,
        999410400000,
        1019365200000,
        1030860000000,
        1050814800000,
        1062914400000,
        1082264400000,
        1094364000000,
        1113714000000,
        1125813600000,
        1145163600000,
        1157263200000,
        1176613200000,
        1188712800000,
        1208667600000,
        1220767200000,
        1240117200000,
        1252216800000,
        1271566800000,
        1283666400000,
        null
      ],
      "offsets": [
        231.4,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        120,
        180,
        120,
        180,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180
      ]
    },
    {
      "name": "Australia/ACT",
      "abbrs": [
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT"
      ],
      "untils": [
        -1672567140000,
        -1665392400000,
        -883641600000,
        -876128400000,
        -860400000000,
        -844678800000,
        -828345600000,
        -813229200000,
        57686400000,
        67968000000,
        89136000000,
        100022400000,
        120585600000,
        131472000000,
        152035200000,
        162921600000,
        183484800000,
        194976000000,
        215539200000,
        226425600000,
        246988800000,
        257875200000,
        278438400000,
        289324800000,
        309888000000,
        320774400000,
        341337600000,
        352224000000,
        372787200000,
        386697600000,
        404841600000,
        415728000000,
        436291200000,
        447177600000,
        467740800000,
        478627200000,
        499190400000,
        511286400000,
        530035200000,
        542736000000,
        562089600000,
        574790400000,
        594144000000,
        606240000000,
        625593600000,
        636480000000,
        657043200000,
        667929600000,
        688492800000,
        699379200000,
        719942400000,
        731433600000,
        751996800000,
        762883200000,
        783446400000,
        794332800000,
        814896000000,
        828201600000,
        846345600000,
        859651200000,
        877795200000,
        891100800000,
        909244800000,
        922550400000,
        941299200000,
        954000000000,
        967305600000,
        985449600000,
        1004198400000,
        1017504000000,
        1035648000000,
        1048953600000,
        1067097600000,
        1080403200000,
        1099152000000,
        1111852800000,
        1130601600000,
        1143907200000,
        1162051200000,
        1174752000000,
        1193500800000,
        1207411200000,
        1223136000000,
        1238860800000,
        1254585600000,
        1270310400000,
        1286035200000,
        1301760000000,
        1317484800000,
        1333209600000,
        1349539200000,
        1365264000000,
        1380988800000,
        1396713600000,
        1412438400000,
        1428163200000,
        1443888000000,
        1459612800000,
        1475337600000,
        1491062400000,
        1506787200000,
        1522512000000,
        1538841600000,
        1554566400000,
        1570291200000,
        1586016000000,
        1601740800000,
        1617465600000,
        1633190400000,
        1648915200000,
        1664640000000,
        1680364800000,
        1696089600000,
        1712419200000,
        1728144000000,
        1743868800000,
        1759593600000,
        1775318400000,
        1791043200000,
        1806768000000,
        1822492800000,
        1838217600000,
        1853942400000,
        1869667200000,
        1885996800000,
        1901721600000,
        1917446400000,
        1933171200000,
        1948896000000,
        1964620800000,
        1980345600000,
        1996070400000,
        2011795200000,
        2027520000000,
        2043244800000,
        2058969600000,
        2075299200000,
        2091024000000,
        2106748800000,
        2122473600000,
        2138198400000,
        null
      ],
      "offsets": [
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660
      ]
    },
    {
      "name": "Australia/Adelaide",
      "abbrs": [
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT"
      ],
      "untils": [
        -1672565340000,
        -1665390600000,
        -883639800000,
        -876126600000,
        -860398200000,
        -844677000000,
        -828343800000,
        -813227400000,
        57688200000,
        67969800000,
        89137800000,
        100024200000,
        120587400000,
        131473800000,
        152037000000,
        162923400000,
        183486600000,
        194977800000,
        215541000000,
        226427400000,
        246990600000,
        257877000000,
        278440200000,
        289326600000,
        309889800000,
        320776200000,
        341339400000,
        352225800000,
        372789000000,
        384280200000,
        404843400000,
        415729800000,
        436293000000,
        447179400000,
        467742600000,
        478629000000,
        499192200000,
        511288200000,
        530037000000,
        542737800000,
        562091400000,
        574792200000,
        594145800000,
        606241800000,
        625595400000,
        637691400000,
        657045000000,
        667931400000,
        688494600000,
        701195400000,
        719944200000,
        731435400000,
        751998600000,
        764094600000,
        783448200000,
        796149000000,
        814897800000,
        828203400000,
        846347400000,
        859653000000,
        877797000000,
        891102600000,
        909246600000,
        922552200000,
        941301000000,
        954001800000,
        972750600000,
        985451400000,
        1004200200000,
        1017505800000,
        1035649800000,
        1048955400000,
        1067099400000,
        1080405000000,
        1099153800000,
        1111854600000,
        1130603400000,
        1143909000000,
        1162053000000,
        1174753800000,
        1193502600000,
        1207413000000,
        1223137800000,
        1238862600000,
        1254587400000,
        1270312200000,
        1286037000000,
        1301761800000,
        1317486600000,
        1333211400000,
        1349541000000,
        1365265800000,
        1380990600000,
        1396715400000,
        1412440200000,
        1428165000000,
        1443889800000,
        1459614600000,
        1475339400000,
        1491064200000,
        1506789000000,
        1522513800000,
        1538843400000,
        1554568200000,
        1570293000000,
        1586017800000,
        1601742600000,
        1617467400000,
        1633192200000,
        1648917000000,
        1664641800000,
        1680366600000,
        1696091400000,
        1712421000000,
        1728145800000,
        1743870600000,
        1759595400000,
        1775320200000,
        1791045000000,
        1806769800000,
        1822494600000,
        1838219400000,
        1853944200000,
        1869669000000,
        1885998600000,
        1901723400000,
        1917448200000,
        1933173000000,
        1948897800000,
        1964622600000,
        1980347400000,
        1996072200000,
        2011797000000,
        2027521800000,
        2043246600000,
        2058971400000,
        2075301000000,
        2091025800000,
        2106750600000,
        2122475400000,
        2138200200000,
        null
      ],
      "offsets": [
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630
      ]
    },
    {
      "name": "Australia/Brisbane",
      "abbrs": [
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST"
      ],
      "untils": [
        -1672567140000,
        -1665392400000,
        -883641600000,
        -876128400000,
        -860400000000,
        -844678800000,
        -828345600000,
        -813229200000,
        57686400000,
        67968000000,
        625593600000,
        636480000000,
        657043200000,
        667929600000,
        688492800000,
        699379200000,
        null
      ],
      "offsets": [
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600
      ]
    },
    {
      "name": "Australia/Broken_Hill",
      "abbrs": [
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT"
      ],
      "untils": [
        -1672565340000,
        -1665390600000,
        -883639800000,
        -876126600000,
        -860398200000,
        -844677000000,
        -828343800000,
        -813227400000,
        57688200000,
        67969800000,
        89137800000,
        100024200000,
        120587400000,
        131473800000,
        152037000000,
        162923400000,
        183486600000,
        194977800000,
        215541000000,
        226427400000,
        246990600000,
        257877000000,
        278440200000,
        289326600000,
        309889800000,
        320776200000,
        341339400000,
        352225800000,
        372789000000,
        386699400000,
        404843400000,
        415729800000,
        436293000000,
        447179400000,
        467742600000,
        478629000000,
        499192200000,
        511288200000,
        530037000000,
        542737800000,
        562091400000,
        574792200000,
        594145800000,
        606241800000,
        625595400000,
        636481800000,
        657045000000,
        667931400000,
        688494600000,
        699381000000,
        719944200000,
        731435400000,
        751998600000,
        762885000000,
        783448200000,
        794334600000,
        814897800000,
        828203400000,
        846347400000,
        859653000000,
        877797000000,
        891102600000,
        909246600000,
        922552200000,
        941301000000,
        954001800000,
        972750600000,
        985451400000,
        1004200200000,
        1017505800000,
        1035649800000,
        1048955400000,
        1067099400000,
        1080405000000,
        1099153800000,
        1111854600000,
        1130603400000,
        1143909000000,
        1162053000000,
        1174753800000,
        1193502600000,
        1207413000000,
        1223137800000,
        1238862600000,
        1254587400000,
        1270312200000,
        1286037000000,
        1301761800000,
        1317486600000,
        1333211400000,
        1349541000000,
        1365265800000,
        1380990600000,
        1396715400000,
        1412440200000,
        1428165000000,
        1443889800000,
        1459614600000,
        1475339400000,
        1491064200000,
        1506789000000,
        1522513800000,
        1538843400000,
        1554568200000,
        1570293000000,
        1586017800000,
        1601742600000,
        1617467400000,
        1633192200000,
        1648917000000,
        1664641800000,
        1680366600000,
        1696091400000,
        1712421000000,
        1728145800000,
        1743870600000,
        1759595400000,
        1775320200000,
        1791045000000,
        1806769800000,
        1822494600000,
        1838219400000,
        1853944200000,
        1869669000000,
        1885998600000,
        1901723400000,
        1917448200000,
        1933173000000,
        1948897800000,
        1964622600000,
        1980347400000,
        1996072200000,
        2011797000000,
        2027521800000,
        2043246600000,
        2058971400000,
        2075301000000,
        2091025800000,
        2106750600000,
        2122475400000,
        2138200200000,
        null
      ],
      "offsets": [
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630
      ]
    },
    {
      "name": "Australia/Canberra",
      "abbrs": [
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT"
      ],
      "untils": [
        -1672567140000,
        -1665392400000,
        -883641600000,
        -876128400000,
        -860400000000,
        -844678800000,
        -828345600000,
        -813229200000,
        57686400000,
        67968000000,
        89136000000,
        100022400000,
        120585600000,
        131472000000,
        152035200000,
        162921600000,
        183484800000,
        194976000000,
        215539200000,
        226425600000,
        246988800000,
        257875200000,
        278438400000,
        289324800000,
        309888000000,
        320774400000,
        341337600000,
        352224000000,
        372787200000,
        386697600000,
        404841600000,
        415728000000,
        436291200000,
        447177600000,
        467740800000,
        478627200000,
        499190400000,
        511286400000,
        530035200000,
        542736000000,
        562089600000,
        574790400000,
        594144000000,
        606240000000,
        625593600000,
        636480000000,
        657043200000,
        667929600000,
        688492800000,
        699379200000,
        719942400000,
        731433600000,
        751996800000,
        762883200000,
        783446400000,
        794332800000,
        814896000000,
        828201600000,
        846345600000,
        859651200000,
        877795200000,
        891100800000,
        909244800000,
        922550400000,
        941299200000,
        954000000000,
        967305600000,
        985449600000,
        1004198400000,
        1017504000000,
        1035648000000,
        1048953600000,
        1067097600000,
        1080403200000,
        1099152000000,
        1111852800000,
        1130601600000,
        1143907200000,
        1162051200000,
        1174752000000,
        1193500800000,
        1207411200000,
        1223136000000,
        1238860800000,
        1254585600000,
        1270310400000,
        1286035200000,
        1301760000000,
        1317484800000,
        1333209600000,
        1349539200000,
        1365264000000,
        1380988800000,
        1396713600000,
        1412438400000,
        1428163200000,
        1443888000000,
        1459612800000,
        1475337600000,
        1491062400000,
        1506787200000,
        1522512000000,
        1538841600000,
        1554566400000,
        1570291200000,
        1586016000000,
        1601740800000,
        1617465600000,
        1633190400000,
        1648915200000,
        1664640000000,
        1680364800000,
        1696089600000,
        1712419200000,
        1728144000000,
        1743868800000,
        1759593600000,
        1775318400000,
        1791043200000,
        1806768000000,
        1822492800000,
        1838217600000,
        1853942400000,
        1869667200000,
        1885996800000,
        1901721600000,
        1917446400000,
        1933171200000,
        1948896000000,
        1964620800000,
        1980345600000,
        1996070400000,
        2011795200000,
        2027520000000,
        2043244800000,
        2058969600000,
        2075299200000,
        2091024000000,
        2106748800000,
        2122473600000,
        2138198400000,
        null
      ],
      "offsets": [
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660
      ]
    },
    {
      "name": "Australia/Currie",
      "abbrs": [
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT"
      ],
      "untils": [
        -1680508800000,
        -1665392400000,
        -883641600000,
        -876128400000,
        -860400000000,
        -844678800000,
        -828345600000,
        -813229200000,
        57686400000,
        67968000000,
        89136000000,
        100022400000,
        120585600000,
        131472000000,
        152035200000,
        162921600000,
        183484800000,
        194976000000,
        215539200000,
        226425600000,
        246988800000,
        257875200000,
        278438400000,
        289324800000,
        309888000000,
        320774400000,
        341337600000,
        352224000000,
        372787200000,
        386092800000,
        404841600000,
        417542400000,
        436291200000,
        447177600000,
        467740800000,
        478627200000,
        499190400000,
        510076800000,
        530035200000,
        542736000000,
        562089600000,
        574790400000,
        594144000000,
        606240000000,
        625593600000,
        637689600000,
        657043200000,
        670348800000,
        686678400000,
        701798400000,
        718128000000,
        733248000000,
        749577600000,
        764697600000,
        781027200000,
        796147200000,
        812476800000,
        828201600000,
        844531200000,
        859651200000,
        875980800000,
        891100800000,
        907430400000,
        922550400000,
        938880000000,
        954000000000,
        967305600000,
        985449600000,
        1002384000000,
        1017504000000,
        1033833600000,
        1048953600000,
        1065283200000,
        1080403200000,
        1096732800000,
        1111852800000,
        1128182400000,
        1143907200000,
        1159632000000,
        1174752000000,
        1191686400000,
        1207411200000,
        1223136000000,
        1238860800000,
        1254585600000,
        1270310400000,
        1286035200000,
        1301760000000,
        1317484800000,
        1333209600000,
        1349539200000,
        1365264000000,
        1380988800000,
        1396713600000,
        1412438400000,
        1428163200000,
        1443888000000,
        1459612800000,
        1475337600000,
        1491062400000,
        1506787200000,
        1522512000000,
        1538841600000,
        1554566400000,
        1570291200000,
        1586016000000,
        1601740800000,
        1617465600000,
        1633190400000,
        1648915200000,
        1664640000000,
        1680364800000,
        1696089600000,
        1712419200000,
        1728144000000,
        1743868800000,
        1759593600000,
        1775318400000,
        1791043200000,
        1806768000000,
        1822492800000,
        1838217600000,
        1853942400000,
        1869667200000,
        1885996800000,
        1901721600000,
        1917446400000,
        1933171200000,
        1948896000000,
        1964620800000,
        1980345600000,
        1996070400000,
        2011795200000,
        2027520000000,
        2043244800000,
        2058969600000,
        2075299200000,
        2091024000000,
        2106748800000,
        2122473600000,
        2138198400000,
        null
      ],
      "offsets": [
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660
      ]
    },
    {
      "name": "Australia/Darwin",
      "abbrs": [
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST"
      ],
      "untils": [
        -1672565340000,
        -1665390600000,
        -883639800000,
        -876126600000,
        -860398200000,
        -844677000000,
        -828343800000,
        -813227400000,
        null
      ],
      "offsets": [
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570
      ]
    },
    {
      "name": "Australia/Eucla",
      "abbrs": [
        "ACWST",
        "ACWDT",
        "ACWST",
        "ACWDT",
        "ACWST",
        "ACWDT",
        "ACWST",
        "ACWDT",
        "ACWST",
        "ACWDT",
        "ACWST",
        "ACWDT",
        "ACWST",
        "ACWDT",
        "ACWST",
        "ACWDT",
        "ACWST",
        "ACWDT",
        "ACWST"
      ],
      "untils": [
        -1672562640000,
        -1665387900000,
        -883637100000,
        -876123900000,
        -860395500000,
        -844674300000,
        152039700000,
        162926100000,
        436295700000,
        447182100000,
        690311700000,
        699383700000,
        1165079700000,
        1174756500000,
        1193505300000,
        1206810900000,
        1224954900000,
        1238260500000,
        null
      ],
      "offsets": [
        -525,
        -585,
        -525,
        -585,
        -525,
        -585,
        -525,
        -585,
        -525,
        -585,
        -525,
        -585,
        -525,
        -585,
        -525,
        -585,
        -525,
        -585,
        -525
      ]
    },
    {
      "name": "Australia/Hobart",
      "abbrs": [
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT"
      ],
      "untils": [
        -1680508800000,
        -1665392400000,
        -883641600000,
        -876128400000,
        -860400000000,
        -844678800000,
        -828345600000,
        -813229200000,
        -71136000000,
        -55411200000,
        -37267200000,
        -25776000000,
        -5817600000,
        5673600000,
        25632000000,
        37728000000,
        57686400000,
        67968000000,
        89136000000,
        100022400000,
        120585600000,
        131472000000,
        152035200000,
        162921600000,
        183484800000,
        194976000000,
        215539200000,
        226425600000,
        246988800000,
        257875200000,
        278438400000,
        289324800000,
        309888000000,
        320774400000,
        341337600000,
        352224000000,
        372787200000,
        386092800000,
        404841600000,
        417542400000,
        436291200000,
        447177600000,
        467740800000,
        478627200000,
        499190400000,
        510076800000,
        530035200000,
        542736000000,
        562089600000,
        574790400000,
        594144000000,
        606240000000,
        625593600000,
        637689600000,
        657043200000,
        670348800000,
        686678400000,
        701798400000,
        718128000000,
        733248000000,
        749577600000,
        764697600000,
        781027200000,
        796147200000,
        812476800000,
        828201600000,
        844531200000,
        859651200000,
        875980800000,
        891100800000,
        907430400000,
        922550400000,
        938880000000,
        954000000000,
        967305600000,
        985449600000,
        1002384000000,
        1017504000000,
        1033833600000,
        1048953600000,
        1065283200000,
        1080403200000,
        1096732800000,
        1111852800000,
        1128182400000,
        1143907200000,
        1159632000000,
        1174752000000,
        1191686400000,
        1207411200000,
        1223136000000,
        1238860800000,
        1254585600000,
        1270310400000,
        1286035200000,
        1301760000000,
        1317484800000,
        1333209600000,
        1349539200000,
        1365264000000,
        1380988800000,
        1396713600000,
        1412438400000,
        1428163200000,
        1443888000000,
        1459612800000,
        1475337600000,
        1491062400000,
        1506787200000,
        1522512000000,
        1538841600000,
        1554566400000,
        1570291200000,
        1586016000000,
        1601740800000,
        1617465600000,
        1633190400000,
        1648915200000,
        1664640000000,
        1680364800000,
        1696089600000,
        1712419200000,
        1728144000000,
        1743868800000,
        1759593600000,
        1775318400000,
        1791043200000,
        1806768000000,
        1822492800000,
        1838217600000,
        1853942400000,
        1869667200000,
        1885996800000,
        1901721600000,
        1917446400000,
        1933171200000,
        1948896000000,
        1964620800000,
        1980345600000,
        1996070400000,
        2011795200000,
        2027520000000,
        2043244800000,
        2058969600000,
        2075299200000,
        2091024000000,
        2106748800000,
        2122473600000,
        2138198400000,
        null
      ],
      "offsets": [
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660
      ]
    },
    {
      "name": "Australia/LHI",
      "abbrs": [
        "AEST",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT"
      ],
      "untils": [
        352216800000,
        372785400000,
        384273000000,
        404839800000,
        415722600000,
        436289400000,
        447172200000,
        467739000000,
        478621800000,
        499188600000,
        511282800000,
        530033400000,
        542732400000,
        562087800000,
        574786800000,
        594142200000,
        606236400000,
        625591800000,
        636476400000,
        657041400000,
        667926000000,
        688491000000,
        699375600000,
        719940600000,
        731430000000,
        751995000000,
        762879600000,
        783444600000,
        794329200000,
        814894200000,
        828198000000,
        846343800000,
        859647600000,
        877793400000,
        891097200000,
        909243000000,
        922546800000,
        941297400000,
        953996400000,
        967303800000,
        985446000000,
        1004196600000,
        1017500400000,
        1035646200000,
        1048950000000,
        1067095800000,
        1080399600000,
        1099150200000,
        1111849200000,
        1130599800000,
        1143903600000,
        1162049400000,
        1174748400000,
        1193499000000,
        1207407600000,
        1223134200000,
        1238857200000,
        1254583800000,
        1270306800000,
        1286033400000,
        1301756400000,
        1317483000000,
        1333206000000,
        1349537400000,
        1365260400000,
        1380987000000,
        1396710000000,
        1412436600000,
        1428159600000,
        1443886200000,
        1459609200000,
        1475335800000,
        1491058800000,
        1506785400000,
        1522508400000,
        1538839800000,
        1554562800000,
        1570289400000,
        1586012400000,
        1601739000000,
        1617462000000,
        1633188600000,
        1648911600000,
        1664638200000,
        1680361200000,
        1696087800000,
        1712415600000,
        1728142200000,
        1743865200000,
        1759591800000,
        1775314800000,
        1791041400000,
        1806764400000,
        1822491000000,
        1838214000000,
        1853940600000,
        1869663600000,
        1885995000000,
        1901718000000,
        1917444600000,
        1933167600000,
        1948894200000,
        1964617200000,
        1980343800000,
        1996066800000,
        2011793400000,
        2027516400000,
        2043243000000,
        2058966000000,
        2075297400000,
        2091020400000,
        2106747000000,
        2122470000000,
        2138196600000,
        null
      ],
      "offsets": [
        -600,
        -630,
        -690,
        -630,
        -690,
        -630,
        -690,
        -630,
        -690,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660
      ]
    },
    {
      "name": "Australia/Lindeman",
      "abbrs": [
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST"
      ],
      "untils": [
        -1672567140000,
        -1665392400000,
        -883641600000,
        -876128400000,
        -860400000000,
        -844678800000,
        -828345600000,
        -813229200000,
        57686400000,
        67968000000,
        625593600000,
        636480000000,
        657043200000,
        667929600000,
        688492800000,
        699379200000,
        719942400000,
        731433600000,
        751996800000,
        762883200000,
        null
      ],
      "offsets": [
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600
      ]
    },
    {
      "name": "Australia/Lord_Howe",
      "abbrs": [
        "AEST",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT",
        "LHST",
        "LHDT"
      ],
      "untils": [
        352216800000,
        372785400000,
        384273000000,
        404839800000,
        415722600000,
        436289400000,
        447172200000,
        467739000000,
        478621800000,
        499188600000,
        511282800000,
        530033400000,
        542732400000,
        562087800000,
        574786800000,
        594142200000,
        606236400000,
        625591800000,
        636476400000,
        657041400000,
        667926000000,
        688491000000,
        699375600000,
        719940600000,
        731430000000,
        751995000000,
        762879600000,
        783444600000,
        794329200000,
        814894200000,
        828198000000,
        846343800000,
        859647600000,
        877793400000,
        891097200000,
        909243000000,
        922546800000,
        941297400000,
        953996400000,
        967303800000,
        985446000000,
        1004196600000,
        1017500400000,
        1035646200000,
        1048950000000,
        1067095800000,
        1080399600000,
        1099150200000,
        1111849200000,
        1130599800000,
        1143903600000,
        1162049400000,
        1174748400000,
        1193499000000,
        1207407600000,
        1223134200000,
        1238857200000,
        1254583800000,
        1270306800000,
        1286033400000,
        1301756400000,
        1317483000000,
        1333206000000,
        1349537400000,
        1365260400000,
        1380987000000,
        1396710000000,
        1412436600000,
        1428159600000,
        1443886200000,
        1459609200000,
        1475335800000,
        1491058800000,
        1506785400000,
        1522508400000,
        1538839800000,
        1554562800000,
        1570289400000,
        1586012400000,
        1601739000000,
        1617462000000,
        1633188600000,
        1648911600000,
        1664638200000,
        1680361200000,
        1696087800000,
        1712415600000,
        1728142200000,
        1743865200000,
        1759591800000,
        1775314800000,
        1791041400000,
        1806764400000,
        1822491000000,
        1838214000000,
        1853940600000,
        1869663600000,
        1885995000000,
        1901718000000,
        1917444600000,
        1933167600000,
        1948894200000,
        1964617200000,
        1980343800000,
        1996066800000,
        2011793400000,
        2027516400000,
        2043243000000,
        2058966000000,
        2075297400000,
        2091020400000,
        2106747000000,
        2122470000000,
        2138196600000,
        null
      ],
      "offsets": [
        -600,
        -630,
        -690,
        -630,
        -690,
        -630,
        -690,
        -630,
        -690,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660,
        -630,
        -660
      ]
    },
    {
      "name": "Australia/Melbourne",
      "abbrs": [
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT"
      ],
      "untils": [
        -1672567140000,
        -1665392400000,
        -883641600000,
        -876128400000,
        -860400000000,
        -844678800000,
        -828345600000,
        -813229200000,
        57686400000,
        67968000000,
        89136000000,
        100022400000,
        120585600000,
        131472000000,
        152035200000,
        162921600000,
        183484800000,
        194976000000,
        215539200000,
        226425600000,
        246988800000,
        257875200000,
        278438400000,
        289324800000,
        309888000000,
        320774400000,
        341337600000,
        352224000000,
        372787200000,
        384278400000,
        404841600000,
        415728000000,
        436291200000,
        447177600000,
        467740800000,
        478627200000,
        499190400000,
        511286400000,
        530035200000,
        542736000000,
        561484800000,
        574790400000,
        594144000000,
        606240000000,
        625593600000,
        637689600000,
        657043200000,
        667929600000,
        688492800000,
        699379200000,
        719942400000,
        731433600000,
        751996800000,
        762883200000,
        783446400000,
        796147200000,
        814896000000,
        828201600000,
        846345600000,
        859651200000,
        877795200000,
        891100800000,
        909244800000,
        922550400000,
        941299200000,
        954000000000,
        967305600000,
        985449600000,
        1004198400000,
        1017504000000,
        1035648000000,
        1048953600000,
        1067097600000,
        1080403200000,
        1099152000000,
        1111852800000,
        1130601600000,
        1143907200000,
        1162051200000,
        1174752000000,
        1193500800000,
        1207411200000,
        1223136000000,
        1238860800000,
        1254585600000,
        1270310400000,
        1286035200000,
        1301760000000,
        1317484800000,
        1333209600000,
        1349539200000,
        1365264000000,
        1380988800000,
        1396713600000,
        1412438400000,
        1428163200000,
        1443888000000,
        1459612800000,
        1475337600000,
        1491062400000,
        1506787200000,
        1522512000000,
        1538841600000,
        1554566400000,
        1570291200000,
        1586016000000,
        1601740800000,
        1617465600000,
        1633190400000,
        1648915200000,
        1664640000000,
        1680364800000,
        1696089600000,
        1712419200000,
        1728144000000,
        1743868800000,
        1759593600000,
        1775318400000,
        1791043200000,
        1806768000000,
        1822492800000,
        1838217600000,
        1853942400000,
        1869667200000,
        1885996800000,
        1901721600000,
        1917446400000,
        1933171200000,
        1948896000000,
        1964620800000,
        1980345600000,
        1996070400000,
        2011795200000,
        2027520000000,
        2043244800000,
        2058969600000,
        2075299200000,
        2091024000000,
        2106748800000,
        2122473600000,
        2138198400000,
        null
      ],
      "offsets": [
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660
      ]
    },
    {
      "name": "Australia/NSW",
      "abbrs": [
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT"
      ],
      "untils": [
        -1672567140000,
        -1665392400000,
        -883641600000,
        -876128400000,
        -860400000000,
        -844678800000,
        -828345600000,
        -813229200000,
        57686400000,
        67968000000,
        89136000000,
        100022400000,
        120585600000,
        131472000000,
        152035200000,
        162921600000,
        183484800000,
        194976000000,
        215539200000,
        226425600000,
        246988800000,
        257875200000,
        278438400000,
        289324800000,
        309888000000,
        320774400000,
        341337600000,
        352224000000,
        372787200000,
        386697600000,
        404841600000,
        415728000000,
        436291200000,
        447177600000,
        467740800000,
        478627200000,
        499190400000,
        511286400000,
        530035200000,
        542736000000,
        562089600000,
        574790400000,
        594144000000,
        606240000000,
        625593600000,
        636480000000,
        657043200000,
        667929600000,
        688492800000,
        699379200000,
        719942400000,
        731433600000,
        751996800000,
        762883200000,
        783446400000,
        794332800000,
        814896000000,
        828201600000,
        846345600000,
        859651200000,
        877795200000,
        891100800000,
        909244800000,
        922550400000,
        941299200000,
        954000000000,
        967305600000,
        985449600000,
        1004198400000,
        1017504000000,
        1035648000000,
        1048953600000,
        1067097600000,
        1080403200000,
        1099152000000,
        1111852800000,
        1130601600000,
        1143907200000,
        1162051200000,
        1174752000000,
        1193500800000,
        1207411200000,
        1223136000000,
        1238860800000,
        1254585600000,
        1270310400000,
        1286035200000,
        1301760000000,
        1317484800000,
        1333209600000,
        1349539200000,
        1365264000000,
        1380988800000,
        1396713600000,
        1412438400000,
        1428163200000,
        1443888000000,
        1459612800000,
        1475337600000,
        1491062400000,
        1506787200000,
        1522512000000,
        1538841600000,
        1554566400000,
        1570291200000,
        1586016000000,
        1601740800000,
        1617465600000,
        1633190400000,
        1648915200000,
        1664640000000,
        1680364800000,
        1696089600000,
        1712419200000,
        1728144000000,
        1743868800000,
        1759593600000,
        1775318400000,
        1791043200000,
        1806768000000,
        1822492800000,
        1838217600000,
        1853942400000,
        1869667200000,
        1885996800000,
        1901721600000,
        1917446400000,
        1933171200000,
        1948896000000,
        1964620800000,
        1980345600000,
        1996070400000,
        2011795200000,
        2027520000000,
        2043244800000,
        2058969600000,
        2075299200000,
        2091024000000,
        2106748800000,
        2122473600000,
        2138198400000,
        null
      ],
      "offsets": [
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660
      ]
    },
    {
      "name": "Australia/North",
      "abbrs": [
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST"
      ],
      "untils": [
        -1672565340000,
        -1665390600000,
        -883639800000,
        -876126600000,
        -860398200000,
        -844677000000,
        -828343800000,
        -813227400000,
        null
      ],
      "offsets": [
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570
      ]
    },
    {
      "name": "Australia/Perth",
      "abbrs": [
        "AWST",
        "AWDT",
        "AWST",
        "AWDT",
        "AWST",
        "AWDT",
        "AWST",
        "AWDT",
        "AWST",
        "AWDT",
        "AWST",
        "AWDT",
        "AWST",
        "AWDT",
        "AWST",
        "AWDT",
        "AWST",
        "AWDT",
        "AWST"
      ],
      "untils": [
        -1672559940000,
        -1665385200000,
        -883634400000,
        -876121200000,
        -860392800000,
        -844671600000,
        152042400000,
        162928800000,
        436298400000,
        447184800000,
        690314400000,
        699386400000,
        1165082400000,
        1174759200000,
        1193508000000,
        1206813600000,
        1224957600000,
        1238263200000,
        null
      ],
      "offsets": [
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480
      ]
    },
    {
      "name": "Australia/Queensland",
      "abbrs": [
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST"
      ],
      "untils": [
        -1672567140000,
        -1665392400000,
        -883641600000,
        -876128400000,
        -860400000000,
        -844678800000,
        -828345600000,
        -813229200000,
        57686400000,
        67968000000,
        625593600000,
        636480000000,
        657043200000,
        667929600000,
        688492800000,
        699379200000,
        null
      ],
      "offsets": [
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600
      ]
    },
    {
      "name": "Australia/South",
      "abbrs": [
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT"
      ],
      "untils": [
        -1672565340000,
        -1665390600000,
        -883639800000,
        -876126600000,
        -860398200000,
        -844677000000,
        -828343800000,
        -813227400000,
        57688200000,
        67969800000,
        89137800000,
        100024200000,
        120587400000,
        131473800000,
        152037000000,
        162923400000,
        183486600000,
        194977800000,
        215541000000,
        226427400000,
        246990600000,
        257877000000,
        278440200000,
        289326600000,
        309889800000,
        320776200000,
        341339400000,
        352225800000,
        372789000000,
        384280200000,
        404843400000,
        415729800000,
        436293000000,
        447179400000,
        467742600000,
        478629000000,
        499192200000,
        511288200000,
        530037000000,
        542737800000,
        562091400000,
        574792200000,
        594145800000,
        606241800000,
        625595400000,
        637691400000,
        657045000000,
        667931400000,
        688494600000,
        701195400000,
        719944200000,
        731435400000,
        751998600000,
        764094600000,
        783448200000,
        796149000000,
        814897800000,
        828203400000,
        846347400000,
        859653000000,
        877797000000,
        891102600000,
        909246600000,
        922552200000,
        941301000000,
        954001800000,
        972750600000,
        985451400000,
        1004200200000,
        1017505800000,
        1035649800000,
        1048955400000,
        1067099400000,
        1080405000000,
        1099153800000,
        1111854600000,
        1130603400000,
        1143909000000,
        1162053000000,
        1174753800000,
        1193502600000,
        1207413000000,
        1223137800000,
        1238862600000,
        1254587400000,
        1270312200000,
        1286037000000,
        1301761800000,
        1317486600000,
        1333211400000,
        1349541000000,
        1365265800000,
        1380990600000,
        1396715400000,
        1412440200000,
        1428165000000,
        1443889800000,
        1459614600000,
        1475339400000,
        1491064200000,
        1506789000000,
        1522513800000,
        1538843400000,
        1554568200000,
        1570293000000,
        1586017800000,
        1601742600000,
        1617467400000,
        1633192200000,
        1648917000000,
        1664641800000,
        1680366600000,
        1696091400000,
        1712421000000,
        1728145800000,
        1743870600000,
        1759595400000,
        1775320200000,
        1791045000000,
        1806769800000,
        1822494600000,
        1838219400000,
        1853944200000,
        1869669000000,
        1885998600000,
        1901723400000,
        1917448200000,
        1933173000000,
        1948897800000,
        1964622600000,
        1980347400000,
        1996072200000,
        2011797000000,
        2027521800000,
        2043246600000,
        2058971400000,
        2075301000000,
        2091025800000,
        2106750600000,
        2122475400000,
        2138200200000,
        null
      ],
      "offsets": [
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630
      ]
    },
    {
      "name": "Australia/Sydney",
      "abbrs": [
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT"
      ],
      "untils": [
        -1672567140000,
        -1665392400000,
        -883641600000,
        -876128400000,
        -860400000000,
        -844678800000,
        -828345600000,
        -813229200000,
        57686400000,
        67968000000,
        89136000000,
        100022400000,
        120585600000,
        131472000000,
        152035200000,
        162921600000,
        183484800000,
        194976000000,
        215539200000,
        226425600000,
        246988800000,
        257875200000,
        278438400000,
        289324800000,
        309888000000,
        320774400000,
        341337600000,
        352224000000,
        372787200000,
        386697600000,
        404841600000,
        415728000000,
        436291200000,
        447177600000,
        467740800000,
        478627200000,
        499190400000,
        511286400000,
        530035200000,
        542736000000,
        562089600000,
        574790400000,
        594144000000,
        606240000000,
        625593600000,
        636480000000,
        657043200000,
        667929600000,
        688492800000,
        699379200000,
        719942400000,
        731433600000,
        751996800000,
        762883200000,
        783446400000,
        794332800000,
        814896000000,
        828201600000,
        846345600000,
        859651200000,
        877795200000,
        891100800000,
        909244800000,
        922550400000,
        941299200000,
        954000000000,
        967305600000,
        985449600000,
        1004198400000,
        1017504000000,
        1035648000000,
        1048953600000,
        1067097600000,
        1080403200000,
        1099152000000,
        1111852800000,
        1130601600000,
        1143907200000,
        1162051200000,
        1174752000000,
        1193500800000,
        1207411200000,
        1223136000000,
        1238860800000,
        1254585600000,
        1270310400000,
        1286035200000,
        1301760000000,
        1317484800000,
        1333209600000,
        1349539200000,
        1365264000000,
        1380988800000,
        1396713600000,
        1412438400000,
        1428163200000,
        1443888000000,
        1459612800000,
        1475337600000,
        1491062400000,
        1506787200000,
        1522512000000,
        1538841600000,
        1554566400000,
        1570291200000,
        1586016000000,
        1601740800000,
        1617465600000,
        1633190400000,
        1648915200000,
        1664640000000,
        1680364800000,
        1696089600000,
        1712419200000,
        1728144000000,
        1743868800000,
        1759593600000,
        1775318400000,
        1791043200000,
        1806768000000,
        1822492800000,
        1838217600000,
        1853942400000,
        1869667200000,
        1885996800000,
        1901721600000,
        1917446400000,
        1933171200000,
        1948896000000,
        1964620800000,
        1980345600000,
        1996070400000,
        2011795200000,
        2027520000000,
        2043244800000,
        2058969600000,
        2075299200000,
        2091024000000,
        2106748800000,
        2122473600000,
        2138198400000,
        null
      ],
      "offsets": [
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660
      ]
    },
    {
      "name": "Australia/Tasmania",
      "abbrs": [
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT"
      ],
      "untils": [
        -1680508800000,
        -1665392400000,
        -883641600000,
        -876128400000,
        -860400000000,
        -844678800000,
        -828345600000,
        -813229200000,
        -71136000000,
        -55411200000,
        -37267200000,
        -25776000000,
        -5817600000,
        5673600000,
        25632000000,
        37728000000,
        57686400000,
        67968000000,
        89136000000,
        100022400000,
        120585600000,
        131472000000,
        152035200000,
        162921600000,
        183484800000,
        194976000000,
        215539200000,
        226425600000,
        246988800000,
        257875200000,
        278438400000,
        289324800000,
        309888000000,
        320774400000,
        341337600000,
        352224000000,
        372787200000,
        386092800000,
        404841600000,
        417542400000,
        436291200000,
        447177600000,
        467740800000,
        478627200000,
        499190400000,
        510076800000,
        530035200000,
        542736000000,
        562089600000,
        574790400000,
        594144000000,
        606240000000,
        625593600000,
        637689600000,
        657043200000,
        670348800000,
        686678400000,
        701798400000,
        718128000000,
        733248000000,
        749577600000,
        764697600000,
        781027200000,
        796147200000,
        812476800000,
        828201600000,
        844531200000,
        859651200000,
        875980800000,
        891100800000,
        907430400000,
        922550400000,
        938880000000,
        954000000000,
        967305600000,
        985449600000,
        1002384000000,
        1017504000000,
        1033833600000,
        1048953600000,
        1065283200000,
        1080403200000,
        1096732800000,
        1111852800000,
        1128182400000,
        1143907200000,
        1159632000000,
        1174752000000,
        1191686400000,
        1207411200000,
        1223136000000,
        1238860800000,
        1254585600000,
        1270310400000,
        1286035200000,
        1301760000000,
        1317484800000,
        1333209600000,
        1349539200000,
        1365264000000,
        1380988800000,
        1396713600000,
        1412438400000,
        1428163200000,
        1443888000000,
        1459612800000,
        1475337600000,
        1491062400000,
        1506787200000,
        1522512000000,
        1538841600000,
        1554566400000,
        1570291200000,
        1586016000000,
        1601740800000,
        1617465600000,
        1633190400000,
        1648915200000,
        1664640000000,
        1680364800000,
        1696089600000,
        1712419200000,
        1728144000000,
        1743868800000,
        1759593600000,
        1775318400000,
        1791043200000,
        1806768000000,
        1822492800000,
        1838217600000,
        1853942400000,
        1869667200000,
        1885996800000,
        1901721600000,
        1917446400000,
        1933171200000,
        1948896000000,
        1964620800000,
        1980345600000,
        1996070400000,
        2011795200000,
        2027520000000,
        2043244800000,
        2058969600000,
        2075299200000,
        2091024000000,
        2106748800000,
        2122473600000,
        2138198400000,
        null
      ],
      "offsets": [
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660
      ]
    },
    {
      "name": "Australia/Victoria",
      "abbrs": [
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT",
        "AEST",
        "AEDT"
      ],
      "untils": [
        -1672567140000,
        -1665392400000,
        -883641600000,
        -876128400000,
        -860400000000,
        -844678800000,
        -828345600000,
        -813229200000,
        57686400000,
        67968000000,
        89136000000,
        100022400000,
        120585600000,
        131472000000,
        152035200000,
        162921600000,
        183484800000,
        194976000000,
        215539200000,
        226425600000,
        246988800000,
        257875200000,
        278438400000,
        289324800000,
        309888000000,
        320774400000,
        341337600000,
        352224000000,
        372787200000,
        384278400000,
        404841600000,
        415728000000,
        436291200000,
        447177600000,
        467740800000,
        478627200000,
        499190400000,
        511286400000,
        530035200000,
        542736000000,
        561484800000,
        574790400000,
        594144000000,
        606240000000,
        625593600000,
        637689600000,
        657043200000,
        667929600000,
        688492800000,
        699379200000,
        719942400000,
        731433600000,
        751996800000,
        762883200000,
        783446400000,
        796147200000,
        814896000000,
        828201600000,
        846345600000,
        859651200000,
        877795200000,
        891100800000,
        909244800000,
        922550400000,
        941299200000,
        954000000000,
        967305600000,
        985449600000,
        1004198400000,
        1017504000000,
        1035648000000,
        1048953600000,
        1067097600000,
        1080403200000,
        1099152000000,
        1111852800000,
        1130601600000,
        1143907200000,
        1162051200000,
        1174752000000,
        1193500800000,
        1207411200000,
        1223136000000,
        1238860800000,
        1254585600000,
        1270310400000,
        1286035200000,
        1301760000000,
        1317484800000,
        1333209600000,
        1349539200000,
        1365264000000,
        1380988800000,
        1396713600000,
        1412438400000,
        1428163200000,
        1443888000000,
        1459612800000,
        1475337600000,
        1491062400000,
        1506787200000,
        1522512000000,
        1538841600000,
        1554566400000,
        1570291200000,
        1586016000000,
        1601740800000,
        1617465600000,
        1633190400000,
        1648915200000,
        1664640000000,
        1680364800000,
        1696089600000,
        1712419200000,
        1728144000000,
        1743868800000,
        1759593600000,
        1775318400000,
        1791043200000,
        1806768000000,
        1822492800000,
        1838217600000,
        1853942400000,
        1869667200000,
        1885996800000,
        1901721600000,
        1917446400000,
        1933171200000,
        1948896000000,
        1964620800000,
        1980345600000,
        1996070400000,
        2011795200000,
        2027520000000,
        2043244800000,
        2058969600000,
        2075299200000,
        2091024000000,
        2106748800000,
        2122473600000,
        2138198400000,
        null
      ],
      "offsets": [
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660,
        -600,
        -660
      ]
    },
    {
      "name": "Australia/West",
      "abbrs": [
        "AWST",
        "AWDT",
        "AWST",
        "AWDT",
        "AWST",
        "AWDT",
        "AWST",
        "AWDT",
        "AWST",
        "AWDT",
        "AWST",
        "AWDT",
        "AWST",
        "AWDT",
        "AWST",
        "AWDT",
        "AWST",
        "AWDT",
        "AWST"
      ],
      "untils": [
        -1672559940000,
        -1665385200000,
        -883634400000,
        -876121200000,
        -860392800000,
        -844671600000,
        152042400000,
        162928800000,
        436298400000,
        447184800000,
        690314400000,
        699386400000,
        1165082400000,
        1174759200000,
        1193508000000,
        1206813600000,
        1224957600000,
        1238263200000,
        null
      ],
      "offsets": [
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480
      ]
    },
    {
      "name": "Australia/Yancowinna",
      "abbrs": [
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT",
        "ACST",
        "ACDT"
      ],
      "untils": [
        -1672565340000,
        -1665390600000,
        -883639800000,
        -876126600000,
        -860398200000,
        -844677000000,
        -828343800000,
        -813227400000,
        57688200000,
        67969800000,
        89137800000,
        100024200000,
        120587400000,
        131473800000,
        152037000000,
        162923400000,
        183486600000,
        194977800000,
        215541000000,
        226427400000,
        246990600000,
        257877000000,
        278440200000,
        289326600000,
        309889800000,
        320776200000,
        341339400000,
        352225800000,
        372789000000,
        386699400000,
        404843400000,
        415729800000,
        436293000000,
        447179400000,
        467742600000,
        478629000000,
        499192200000,
        511288200000,
        530037000000,
        542737800000,
        562091400000,
        574792200000,
        594145800000,
        606241800000,
        625595400000,
        636481800000,
        657045000000,
        667931400000,
        688494600000,
        699381000000,
        719944200000,
        731435400000,
        751998600000,
        762885000000,
        783448200000,
        794334600000,
        814897800000,
        828203400000,
        846347400000,
        859653000000,
        877797000000,
        891102600000,
        909246600000,
        922552200000,
        941301000000,
        954001800000,
        972750600000,
        985451400000,
        1004200200000,
        1017505800000,
        1035649800000,
        1048955400000,
        1067099400000,
        1080405000000,
        1099153800000,
        1111854600000,
        1130603400000,
        1143909000000,
        1162053000000,
        1174753800000,
        1193502600000,
        1207413000000,
        1223137800000,
        1238862600000,
        1254587400000,
        1270312200000,
        1286037000000,
        1301761800000,
        1317486600000,
        1333211400000,
        1349541000000,
        1365265800000,
        1380990600000,
        1396715400000,
        1412440200000,
        1428165000000,
        1443889800000,
        1459614600000,
        1475339400000,
        1491064200000,
        1506789000000,
        1522513800000,
        1538843400000,
        1554568200000,
        1570293000000,
        1586017800000,
        1601742600000,
        1617467400000,
        1633192200000,
        1648917000000,
        1664641800000,
        1680366600000,
        1696091400000,
        1712421000000,
        1728145800000,
        1743870600000,
        1759595400000,
        1775320200000,
        1791045000000,
        1806769800000,
        1822494600000,
        1838219400000,
        1853944200000,
        1869669000000,
        1885998600000,
        1901723400000,
        1917448200000,
        1933173000000,
        1948897800000,
        1964622600000,
        1980347400000,
        1996072200000,
        2011797000000,
        2027521800000,
        2043246600000,
        2058971400000,
        2075301000000,
        2091025800000,
        2106750600000,
        2122475400000,
        2138200200000,
        null
      ],
      "offsets": [
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630,
        -570,
        -630
      ]
    },
    {
      "name": "Brazil/Acre",
      "abbrs": [
        "LMT",
        "ACT",
        "ACST",
        "ACT",
        "ACST",
        "ACT",
        "ACST",
        "ACT",
        "ACST",
        "ACT",
        "ACST",
        "ACT",
        "ACST",
        "ACT",
        "ACST",
        "ACT",
        "ACST",
        "ACT",
        "ACST",
        "ACT",
        "ACST",
        "ACT",
        "ACST",
        "ACT",
        "ACST",
        "ACT",
        "ACST",
        "ACT",
        "ACST",
        "ACT",
        "AMT",
        "ACT"
      ],
      "untils": [
        -1767209328000,
        -1206950400000,
        -1191355200000,
        -1175367600000,
        -1159819200000,
        -633812400000,
        -622062000000,
        -602276400000,
        -591825600000,
        -570740400000,
        -560203200000,
        -539118000000,
        -531345600000,
        -191358000000,
        -184190400000,
        -155156400000,
        -150062400000,
        -128890800000,
        -121118400000,
        -99946800000,
        -89582400000,
        -68410800000,
        -57960000000,
        499755600000,
        511243200000,
        530600400000,
        540273600000,
        562136400000,
        571204800000,
        1214283600000,
        1384056000000,
        null
      ],
      "offsets": [
        271.2,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300
      ]
    },
    {
      "name": "Brazil/DeNoronha",
      "abbrs": [
        "LMT",
        "FNT",
        "FNST",
        "FNT",
        "FNST",
        "FNT",
        "FNST",
        "FNT",
        "FNST",
        "FNT",
        "FNST",
        "FNT",
        "FNST",
        "FNT",
        "FNST",
        "FNT",
        "FNST",
        "FNT",
        "FNST",
        "FNT",
        "FNST",
        "FNT",
        "FNST",
        "FNT",
        "FNST",
        "FNT",
        "FNST",
        "FNT",
        "FNST",
        "FNT",
        "FNST",
        "FNT",
        "FNST",
        "FNT",
        "FNST",
        "FNT",
        "FNST",
        "FNT",
        "FNST",
        "FNT"
      ],
      "untils": [
        -1767217820000,
        -1206961200000,
        -1191366000000,
        -1175378400000,
        -1159830000000,
        -633823200000,
        -622072800000,
        -602287200000,
        -591836400000,
        -570751200000,
        -560214000000,
        -539128800000,
        -531356400000,
        -191368800000,
        -184201200000,
        -155167200000,
        -150073200000,
        -128901600000,
        -121129200000,
        -99957600000,
        -89593200000,
        -68421600000,
        -57970800000,
        499744800000,
        511232400000,
        530589600000,
        540262800000,
        562125600000,
        571194000000,
        592970400000,
        602038800000,
        624420000000,
        634698000000,
        938916000000,
        951613200000,
        970970400000,
        971571600000,
        1003024800000,
        1013907600000,
        null
      ],
      "offsets": [
        129.6667,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120,
        60,
        120
      ]
    },
    {
      "name": "Brazil/East",
      "abbrs": [
        "LMT",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST",
        "BRT",
        "BRST"
      ],
      "untils": [
        -1767214412000,
        -1206957600000,
        -1191362400000,
        -1175374800000,
        -1159826400000,
        -633819600000,
        -622069200000,
        -602283600000,
        -591832800000,
        -570747600000,
        -560210400000,
        -539125200000,
        -531352800000,
        -195426000000,
        -184197600000,
        -155163600000,
        -150069600000,
        -128898000000,
        -121125600000,
        -99954000000,
        -89589600000,
        -68418000000,
        -57967200000,
        499748400000,
        511236000000,
        530593200000,
        540266400000,
        562129200000,
        571197600000,
        592974000000,
        602042400000,
        624423600000,
        634701600000,
        656478000000,
        666756000000,
        687927600000,
        697600800000,
        719982000000,
        728445600000,
        750826800000,
        761709600000,
        782276400000,
        793159200000,
        813726000000,
        824004000000,
        844570800000,
        856058400000,
        876106800000,
        888717600000,
        908074800000,
        919562400000,
        938919600000,
        951616800000,
        970974000000,
        982461600000,
        1003028400000,
        1013911200000,
        1036292400000,
        1045360800000,
        1066532400000,
        1076810400000,
        1099364400000,
        1108864800000,
        1129431600000,
        1140314400000,
        1162695600000,
        1172368800000,
        1192330800000,
        1203213600000,
        1224385200000,
        1234663200000,
        1255834800000,
        1266717600000,
        1287284400000,
        1298167200000,
        1318734000000,
        1330221600000,
        1350788400000,
        1361066400000,
        1382238000000,
        1392516000000,
        1413687600000,
        1424570400000,
        1445137200000,
        1456020000000,
        1476586800000,
        1487469600000,
        1508036400000,
        1518919200000,
        1540090800000,
        1550368800000,
        1571540400000,
        1581818400000,
        1602990000000,
        1613872800000,
        1634439600000,
        1645322400000,
        1665889200000,
        1677376800000,
        1697338800000,
        1708221600000,
        1729393200000,
        1739671200000,
        1760842800000,
        1771725600000,
        1792292400000,
        1803175200000,
        1823742000000,
        1834624800000,
        1855191600000,
        1866074400000,
        1887246000000,
        1897524000000,
        1918695600000,
        1928973600000,
        1950145200000,
        1960423200000,
        1981594800000,
        1992477600000,
        2013044400000,
        2024532000000,
        2044494000000,
        2055376800000,
        2076548400000,
        2086826400000,
        2107998000000,
        2118880800000,
        2139447600000,
        null
      ],
      "offsets": [
        186.4667,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120,
        180,
        120
      ]
    },
    {
      "name": "Brazil/West",
      "abbrs": [
        "LMT",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT",
        "AMST",
        "AMT"
      ],
      "untils": [
        -1767211196000,
        -1206954000000,
        -1191358800000,
        -1175371200000,
        -1159822800000,
        -633816000000,
        -622065600000,
        -602280000000,
        -591829200000,
        -570744000000,
        -560206800000,
        -539121600000,
        -531349200000,
        -191361600000,
        -184194000000,
        -155160000000,
        -150066000000,
        -128894400000,
        -121122000000,
        -99950400000,
        -89586000000,
        -68414400000,
        -57963600000,
        499752000000,
        511239600000,
        530596800000,
        540270000000,
        562132800000,
        571201200000,
        750830400000,
        761713200000,
        null
      ],
      "offsets": [
        240.0667,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240
      ]
    },
    {
      "name": "CET",
      "abbrs": [
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET"
      ],
      "untils": [
        -1693706400000,
        -1680483600000,
        -1663455600000,
        -1650150000000,
        -1632006000000,
        -1618700400000,
        -938905200000,
        -857257200000,
        -844556400000,
        -828226800000,
        -812502000000,
        -796777200000,
        -781052400000,
        -766623600000,
        228877200000,
        243997200000,
        260326800000,
        276051600000,
        291776400000,
        307501200000,
        323830800000,
        338950800000,
        354675600000,
        370400400000,
        386125200000,
        401850000000,
        417574800000,
        433299600000,
        449024400000,
        465354000000,
        481078800000,
        496803600000,
        512528400000,
        528253200000,
        543978000000,
        559702800000,
        575427600000,
        591152400000,
        606877200000,
        622602000000,
        638326800000,
        654656400000,
        670381200000,
        686106000000,
        701830800000,
        717555600000,
        733280400000,
        749005200000,
        764730000000,
        780454800000,
        796179600000,
        811904400000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60
      ]
    },
    {
      "name": "CST6CDT",
      "abbrs": [
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CWT",
        "CPT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST"
      ],
      "untils": [
        -1633276800000,
        -1615136400000,
        -1601827200000,
        -1583686800000,
        -880214400000,
        -769395600000,
        -765392400000,
        -84384000000,
        -68662800000,
        -52934400000,
        -37213200000,
        -21484800000,
        -5763600000,
        9964800000,
        25686000000,
        41414400000,
        57740400000,
        73468800000,
        89190000000,
        104918400000,
        120639600000,
        126691200000,
        152089200000,
        162374400000,
        183538800000,
        199267200000,
        215593200000,
        230716800000,
        247042800000,
        262771200000,
        278492400000,
        294220800000,
        309942000000,
        325670400000,
        341391600000,
        357120000000,
        372841200000,
        388569600000,
        404895600000,
        420019200000,
        436345200000,
        452073600000,
        467794800000,
        483523200000,
        499244400000,
        514972800000,
        530694000000,
        544608000000,
        562143600000,
        576057600000,
        594198000000,
        607507200000,
        625647600000,
        638956800000,
        657097200000,
        671011200000,
        688546800000,
        702460800000,
        719996400000,
        733910400000,
        752050800000,
        765360000000,
        783500400000,
        796809600000,
        814950000000,
        828864000000,
        846399600000,
        860313600000,
        877849200000,
        891763200000,
        909298800000,
        923212800000,
        941353200000,
        954662400000,
        972802800000,
        986112000000,
        1004252400000,
        1018166400000,
        1035702000000,
        1049616000000,
        1067151600000,
        1081065600000,
        1099206000000,
        1112515200000,
        1130655600000,
        1143964800000,
        1162105200000,
        1173600000000,
        1194159600000,
        1205049600000,
        1225609200000,
        1236499200000,
        1257058800000,
        1268553600000,
        1289113200000,
        1300003200000,
        1320562800000,
        1331452800000,
        1352012400000,
        1362902400000,
        1383462000000,
        1394352000000,
        1414911600000,
        1425801600000,
        1446361200000,
        1457856000000,
        1478415600000,
        1489305600000,
        1509865200000,
        1520755200000,
        1541314800000,
        1552204800000,
        1572764400000,
        1583654400000,
        1604214000000,
        1615708800000,
        1636268400000,
        1647158400000,
        1667718000000,
        1678608000000,
        1699167600000,
        1710057600000,
        1730617200000,
        1741507200000,
        1762066800000,
        1772956800000,
        1793516400000,
        1805011200000,
        1825570800000,
        1836460800000,
        1857020400000,
        1867910400000,
        1888470000000,
        1899360000000,
        1919919600000,
        1930809600000,
        1951369200000,
        1962864000000,
        1983423600000,
        1994313600000,
        2014873200000,
        2025763200000,
        2046322800000,
        2057212800000,
        2077772400000,
        2088662400000,
        2109222000000,
        2120112000000,
        2140671600000,
        null
      ],
      "offsets": [
        360,
        300,
        360,
        300,
        360,
        300,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360
      ]
    },
    {
      "name": "Canada/Atlantic",
      "abbrs": [
        "LMT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "AWT",
        "APT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST",
        "ADT",
        "AST"
      ],
      "untils": [
        -2131645536000,
        -1696276800000,
        -1680469200000,
        -1632074400000,
        -1615143600000,
        -1566763200000,
        -1557090000000,
        -1535486400000,
        -1524949200000,
        -1504468800000,
        -1493413200000,
        -1472414400000,
        -1461963600000,
        -1440964800000,
        -1429390800000,
        -1409515200000,
        -1396731600000,
        -1376856000000,
        -1366491600000,
        -1346616000000,
        -1333832400000,
        -1313956800000,
        -1303678800000,
        -1282507200000,
        -1272661200000,
        -1251057600000,
        -1240088400000,
        -1219608000000,
        -1207429200000,
        -1188763200000,
        -1175979600000,
        -1157313600000,
        -1143925200000,
        -1124049600000,
        -1113771600000,
        -1091390400000,
        -1081026000000,
        -1059854400000,
        -1050786000000,
        -1030910400000,
        -1018126800000,
        -999460800000,
        -986677200000,
        -965592000000,
        -955227600000,
        -935956800000,
        -923173200000,
        -904507200000,
        -891723600000,
        -880221600000,
        -769395600000,
        -765399600000,
        -747252000000,
        -733950000000,
        -715802400000,
        -702500400000,
        -684352800000,
        -671050800000,
        -652903200000,
        -639601200000,
        -589399200000,
        -576097200000,
        -557949600000,
        -544647600000,
        -526500000000,
        -513198000000,
        -495050400000,
        -481748400000,
        -431546400000,
        -418244400000,
        -400096800000,
        -386794800000,
        -368647200000,
        -355345200000,
        -337197600000,
        -323895600000,
        -242244000000,
        -226522800000,
        -210794400000,
        -195073200000,
        -179344800000,
        -163623600000,
        -147895200000,
        -131569200000,
        -116445600000,
        -100119600000,
        -84391200000,
        -68670000000,
        -52941600000,
        -37220400000,
        -21492000000,
        -5770800000,
        9957600000,
        25678800000,
        41407200000,
        57733200000,
        73461600000,
        89182800000,
        104911200000,
        120632400000,
        136360800000,
        152082000000,
        167810400000,
        183531600000,
        199260000000,
        215586000000,
        230709600000,
        247035600000,
        262764000000,
        278485200000,
        294213600000,
        309934800000,
        325663200000,
        341384400000,
        357112800000,
        372834000000,
        388562400000,
        404888400000,
        420012000000,
        436338000000,
        452066400000,
        467787600000,
        483516000000,
        499237200000,
        514965600000,
        530686800000,
        544600800000,
        562136400000,
        576050400000,
        594190800000,
        607500000000,
        625640400000,
        638949600000,
        657090000000,
        671004000000,
        688539600000,
        702453600000,
        719989200000,
        733903200000,
        752043600000,
        765352800000,
        783493200000,
        796802400000,
        814942800000,
        828856800000,
        846392400000,
        860306400000,
        877842000000,
        891756000000,
        909291600000,
        923205600000,
        941346000000,
        954655200000,
        972795600000,
        986104800000,
        1004245200000,
        1018159200000,
        1035694800000,
        1049608800000,
        1067144400000,
        1081058400000,
        1099198800000,
        1112508000000,
        1130648400000,
        1143957600000,
        1162098000000,
        1173592800000,
        1194152400000,
        1205042400000,
        1225602000000,
        1236492000000,
        1257051600000,
        1268546400000,
        1289106000000,
        1299996000000,
        1320555600000,
        1331445600000,
        1352005200000,
        1362895200000,
        1383454800000,
        1394344800000,
        1414904400000,
        1425794400000,
        1446354000000,
        1457848800000,
        1478408400000,
        1489298400000,
        1509858000000,
        1520748000000,
        1541307600000,
        1552197600000,
        1572757200000,
        1583647200000,
        1604206800000,
        1615701600000,
        1636261200000,
        1647151200000,
        1667710800000,
        1678600800000,
        1699160400000,
        1710050400000,
        1730610000000,
        1741500000000,
        1762059600000,
        1772949600000,
        1793509200000,
        1805004000000,
        1825563600000,
        1836453600000,
        1857013200000,
        1867903200000,
        1888462800000,
        1899352800000,
        1919912400000,
        1930802400000,
        1951362000000,
        1962856800000,
        1983416400000,
        1994306400000,
        2014866000000,
        2025756000000,
        2046315600000,
        2057205600000,
        2077765200000,
        2088655200000,
        2109214800000,
        2120104800000,
        2140664400000,
        null
      ],
      "offsets": [
        254.4,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240
      ]
    },
    {
      "name": "Canada/Central",
      "abbrs": [
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CWT",
        "CPT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST"
      ],
      "untils": [
        -1694368800000,
        -1681671600000,
        -1632067200000,
        -1615136400000,
        -1029686400000,
        -1018198800000,
        -880214400000,
        -769395600000,
        -765392400000,
        -746035200000,
        -732733200000,
        -715795200000,
        -702493200000,
        -684345600000,
        -671043600000,
        -652896000000,
        -639594000000,
        -620755200000,
        -607626000000,
        -589392000000,
        -576090000000,
        -557942400000,
        -544640400000,
        -526492800000,
        -513190800000,
        -495043200000,
        -481741200000,
        -463593600000,
        -450291600000,
        -431539200000,
        -418237200000,
        -400089600000,
        -386787600000,
        -368640000000,
        -355338000000,
        -337190400000,
        -321469200000,
        -305740800000,
        -292438800000,
        -210787200000,
        -198090000000,
        -116438400000,
        -100108800000,
        -84384000000,
        -68659200000,
        -52934400000,
        -37209600000,
        -21484800000,
        -5760000000,
        9964800000,
        25689600000,
        41414400000,
        57744000000,
        73468800000,
        89193600000,
        104918400000,
        120643200000,
        136368000000,
        152092800000,
        167817600000,
        183542400000,
        199267200000,
        215596800000,
        230716800000,
        247046400000,
        262771200000,
        278496000000,
        294220800000,
        309945600000,
        325670400000,
        341395200000,
        357120000000,
        372844800000,
        388569600000,
        404899200000,
        420019200000,
        436348800000,
        452073600000,
        467798400000,
        483523200000,
        499248000000,
        514972800000,
        530697600000,
        544608000000,
        562147200000,
        576057600000,
        594201600000,
        607507200000,
        625651200000,
        638956800000,
        657100800000,
        671011200000,
        688550400000,
        702460800000,
        720000000000,
        733910400000,
        752054400000,
        765360000000,
        783504000000,
        796809600000,
        814953600000,
        828864000000,
        846403200000,
        860313600000,
        877852800000,
        891763200000,
        909302400000,
        923212800000,
        941356800000,
        954662400000,
        972806400000,
        986112000000,
        1004256000000,
        1018166400000,
        1035705600000,
        1049616000000,
        1067155200000,
        1081065600000,
        1099209600000,
        1112515200000,
        1130659200000,
        1143964800000,
        1162105200000,
        1173600000000,
        1194159600000,
        1205049600000,
        1225609200000,
        1236499200000,
        1257058800000,
        1268553600000,
        1289113200000,
        1300003200000,
        1320562800000,
        1331452800000,
        1352012400000,
        1362902400000,
        1383462000000,
        1394352000000,
        1414911600000,
        1425801600000,
        1446361200000,
        1457856000000,
        1478415600000,
        1489305600000,
        1509865200000,
        1520755200000,
        1541314800000,
        1552204800000,
        1572764400000,
        1583654400000,
        1604214000000,
        1615708800000,
        1636268400000,
        1647158400000,
        1667718000000,
        1678608000000,
        1699167600000,
        1710057600000,
        1730617200000,
        1741507200000,
        1762066800000,
        1772956800000,
        1793516400000,
        1805011200000,
        1825570800000,
        1836460800000,
        1857020400000,
        1867910400000,
        1888470000000,
        1899360000000,
        1919919600000,
        1930809600000,
        1951369200000,
        1962864000000,
        1983423600000,
        1994313600000,
        2014873200000,
        2025763200000,
        2046322800000,
        2057212800000,
        2077772400000,
        2088662400000,
        2109222000000,
        2120112000000,
        2140671600000,
        null
      ],
      "offsets": [
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360
      ]
    },
    {
      "name": "Canada/East-Saskatchewan",
      "abbrs": [
        "LMT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MWT",
        "MPT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "CST"
      ],
      "untils": [
        -2030202084000,
        -1632063600000,
        -1615132800000,
        -1251651600000,
        -1238349600000,
        -1220202000000,
        -1206900000000,
        -1188752400000,
        -1175450400000,
        -1156698000000,
        -1144000800000,
        -1125248400000,
        -1111946400000,
        -1032714000000,
        -1016992800000,
        -1001264400000,
        -986148000000,
        -969814800000,
        -954093600000,
        -937760400000,
        -922039200000,
        -906310800000,
        -890589600000,
        -880210800000,
        -769395600000,
        -765388800000,
        -748450800000,
        -732729600000,
        -715791600000,
        -702489600000,
        -684342000000,
        -671040000000,
        -652892400000,
        -639590400000,
        -620838000000,
        -608140800000,
        -589388400000,
        -576086400000,
        -557938800000,
        -544636800000,
        -526489200000,
        -513187200000,
        -495039600000,
        -481737600000,
        -463590000000,
        -450288000000,
        -431535600000,
        -418233600000,
        -400086000000,
        -386784000000,
        -337186800000,
        -321465600000,
        -305737200000,
        null
      ],
      "offsets": [
        418.6,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360
      ]
    },
    {
      "name": "Canada/Eastern",
      "abbrs": [
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EWT",
        "EPT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST"
      ],
      "untils": [
        -1632070800000,
        -1615140000000,
        -1601753400000,
        -1583697600000,
        -1567357200000,
        -1554667200000,
        -1534698000000,
        -1524074400000,
        -1503248400000,
        -1492365600000,
        -1471798800000,
        -1460916000000,
        -1440954000000,
        -1428861600000,
        -1409504400000,
        -1397412000000,
        -1378054800000,
        -1365962400000,
        -1346605200000,
        -1333908000000,
        -1315155600000,
        -1301853600000,
        -1283706000000,
        -1270404000000,
        -1252256400000,
        -1238954400000,
        -1220806800000,
        -1207504800000,
        -1188752400000,
        -1176055200000,
        -1157302800000,
        -1144000800000,
        -1125853200000,
        -1112551200000,
        -1094403600000,
        -1081101600000,
        -1062954000000,
        -1049652000000,
        -1031504400000,
        -1018202400000,
        -1000054800000,
        -986752800000,
        -968000400000,
        -955303200000,
        -936550800000,
        -880218000000,
        -769395600000,
        -765396000000,
        -747248400000,
        -733946400000,
        -715806000000,
        -702504000000,
        -684356400000,
        -671054400000,
        -652906800000,
        -634161600000,
        -620845200000,
        -602704800000,
        -589395600000,
        -576093600000,
        -557946000000,
        -544644000000,
        -526496400000,
        -513194400000,
        -495046800000,
        -481744800000,
        -463597200000,
        -450295200000,
        -431542800000,
        -418240800000,
        -400093200000,
        -384372000000,
        -368643600000,
        -352922400000,
        -337194000000,
        -321472800000,
        -305744400000,
        -289418400000,
        -273690000000,
        -257968800000,
        -242240400000,
        -226519200000,
        -210790800000,
        -195069600000,
        -179341200000,
        -163620000000,
        -147891600000,
        -131565600000,
        -116442000000,
        -100116000000,
        -84387600000,
        -68666400000,
        -52938000000,
        -37216800000,
        -21488400000,
        -5767200000,
        9961200000,
        25682400000,
        41410800000,
        57736800000,
        73465200000,
        89186400000,
        104914800000,
        120636000000,
        136364400000,
        152085600000,
        167814000000,
        183535200000,
        199263600000,
        215589600000,
        230713200000,
        247039200000,
        262767600000,
        278488800000,
        294217200000,
        309938400000,
        325666800000,
        341388000000,
        357116400000,
        372837600000,
        388566000000,
        404892000000,
        420015600000,
        436341600000,
        452070000000,
        467791200000,
        483519600000,
        499240800000,
        514969200000,
        530690400000,
        544604400000,
        562140000000,
        576054000000,
        594194400000,
        607503600000,
        625644000000,
        638953200000,
        657093600000,
        671007600000,
        688543200000,
        702457200000,
        719992800000,
        733906800000,
        752047200000,
        765356400000,
        783496800000,
        796806000000,
        814946400000,
        828860400000,
        846396000000,
        860310000000,
        877845600000,
        891759600000,
        909295200000,
        923209200000,
        941349600000,
        954658800000,
        972799200000,
        986108400000,
        1004248800000,
        1018162800000,
        1035698400000,
        1049612400000,
        1067148000000,
        1081062000000,
        1099202400000,
        1112511600000,
        1130652000000,
        1143961200000,
        1162101600000,
        1173596400000,
        1194156000000,
        1205046000000,
        1225605600000,
        1236495600000,
        1257055200000,
        1268550000000,
        1289109600000,
        1299999600000,
        1320559200000,
        1331449200000,
        1352008800000,
        1362898800000,
        1383458400000,
        1394348400000,
        1414908000000,
        1425798000000,
        1446357600000,
        1457852400000,
        1478412000000,
        1489302000000,
        1509861600000,
        1520751600000,
        1541311200000,
        1552201200000,
        1572760800000,
        1583650800000,
        1604210400000,
        1615705200000,
        1636264800000,
        1647154800000,
        1667714400000,
        1678604400000,
        1699164000000,
        1710054000000,
        1730613600000,
        1741503600000,
        1762063200000,
        1772953200000,
        1793512800000,
        1805007600000,
        1825567200000,
        1836457200000,
        1857016800000,
        1867906800000,
        1888466400000,
        1899356400000,
        1919916000000,
        1930806000000,
        1951365600000,
        1962860400000,
        1983420000000,
        1994310000000,
        2014869600000,
        2025759600000,
        2046319200000,
        2057209200000,
        2077768800000,
        2088658800000,
        2109218400000,
        2120108400000,
        2140668000000,
        null
      ],
      "offsets": [
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        240,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300
      ]
    },
    {
      "name": "Canada/Mountain",
      "abbrs": [
        "LMT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MWT",
        "MPT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST"
      ],
      "untils": [
        -1998663968000,
        -1632063600000,
        -1615132800000,
        -1600614000000,
        -1596816000000,
        -1567954800000,
        -1551628800000,
        -1536505200000,
        -1523203200000,
        -1504450800000,
        -1491753600000,
        -1473001200000,
        -1459699200000,
        -880210800000,
        -769395600000,
        -765388800000,
        -715791600000,
        -702489600000,
        -84380400000,
        -68659200000,
        -21481200000,
        -5760000000,
        73472400000,
        89193600000,
        104922000000,
        120643200000,
        136371600000,
        152092800000,
        167821200000,
        183542400000,
        199270800000,
        215596800000,
        230720400000,
        247046400000,
        262774800000,
        278496000000,
        294224400000,
        309945600000,
        325674000000,
        341395200000,
        357123600000,
        372844800000,
        388573200000,
        404899200000,
        420022800000,
        436348800000,
        452077200000,
        467798400000,
        483526800000,
        499248000000,
        514976400000,
        530697600000,
        544611600000,
        562147200000,
        576061200000,
        594201600000,
        607510800000,
        625651200000,
        638960400000,
        657100800000,
        671014800000,
        688550400000,
        702464400000,
        720000000000,
        733914000000,
        752054400000,
        765363600000,
        783504000000,
        796813200000,
        814953600000,
        828867600000,
        846403200000,
        860317200000,
        877852800000,
        891766800000,
        909302400000,
        923216400000,
        941356800000,
        954666000000,
        972806400000,
        986115600000,
        1004256000000,
        1018170000000,
        1035705600000,
        1049619600000,
        1067155200000,
        1081069200000,
        1099209600000,
        1112518800000,
        1130659200000,
        1143968400000,
        1162108800000,
        1173603600000,
        1194163200000,
        1205053200000,
        1225612800000,
        1236502800000,
        1257062400000,
        1268557200000,
        1289116800000,
        1300006800000,
        1320566400000,
        1331456400000,
        1352016000000,
        1362906000000,
        1383465600000,
        1394355600000,
        1414915200000,
        1425805200000,
        1446364800000,
        1457859600000,
        1478419200000,
        1489309200000,
        1509868800000,
        1520758800000,
        1541318400000,
        1552208400000,
        1572768000000,
        1583658000000,
        1604217600000,
        1615712400000,
        1636272000000,
        1647162000000,
        1667721600000,
        1678611600000,
        1699171200000,
        1710061200000,
        1730620800000,
        1741510800000,
        1762070400000,
        1772960400000,
        1793520000000,
        1805014800000,
        1825574400000,
        1836464400000,
        1857024000000,
        1867914000000,
        1888473600000,
        1899363600000,
        1919923200000,
        1930813200000,
        1951372800000,
        1962867600000,
        1983427200000,
        1994317200000,
        2014876800000,
        2025766800000,
        2046326400000,
        2057216400000,
        2077776000000,
        2088666000000,
        2109225600000,
        2120115600000,
        2140675200000,
        null
      ],
      "offsets": [
        453.8667,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420
      ]
    },
    {
      "name": "Canada/Newfoundland",
      "abbrs": [
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NWT",
        "NPT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST",
        "NDT",
        "NST"
      ],
      "untils": [
        -1664130548000,
        -1650137348000,
        -1632076148000,
        -1615145348000,
        -1598650148000,
        -1590100148000,
        -1567286948000,
        -1551565748000,
        -1535837348000,
        -1520116148000,
        -1503782948000,
        -1488666548000,
        -1472333348000,
        -1457216948000,
        -1440883748000,
        -1425767348000,
        -1409434148000,
        -1394317748000,
        -1377984548000,
        -1362263348000,
        -1346534948000,
        -1330813748000,
        -1314480548000,
        -1299364148000,
        -1283030948000,
        -1267914548000,
        -1251581348000,
        -1236464948000,
        -1220131748000,
        -1205015348000,
        -1188682148000,
        -1172960948000,
        -1156627748000,
        -1141511348000,
        -1125178148000,
        -1110061748000,
        -1096921748000,
        -1093728600000,
        -1078612200000,
        -1061670600000,
        -1048973400000,
        -1030221000000,
        -1017523800000,
        -998771400000,
        -986074200000,
        -966717000000,
        -954624600000,
        -935267400000,
        -922570200000,
        -903817800000,
        -891120600000,
        -872368200000,
        -769395600000,
        -765401400000,
        -746044200000,
        -733347000000,
        -714594600000,
        -701897400000,
        -683145000000,
        -670447800000,
        -651695400000,
        -638998200000,
        -619641000000,
        -606943800000,
        -589401000000,
        -576099000000,
        -557951400000,
        -544649400000,
        -526501800000,
        -513199800000,
        -495052200000,
        -481750200000,
        -463602600000,
        -450300600000,
        -431548200000,
        -418246200000,
        -400098600000,
        -386796600000,
        -368649000000,
        -355347000000,
        -337199400000,
        -323897400000,
        -305749800000,
        -289423800000,
        -273695400000,
        -257974200000,
        -242245800000,
        -226524600000,
        -210796200000,
        -195075000000,
        -179346600000,
        -163625400000,
        -147897000000,
        -131571000000,
        -116447400000,
        -100121400000,
        -84393000000,
        -68671800000,
        -52943400000,
        -37222200000,
        -21493800000,
        -5772600000,
        9955800000,
        25677000000,
        41405400000,
        57731400000,
        73459800000,
        89181000000,
        104909400000,
        120630600000,
        136359000000,
        152080200000,
        167808600000,
        183529800000,
        199258200000,
        215584200000,
        230707800000,
        247033800000,
        262762200000,
        278483400000,
        294211800000,
        309933000000,
        325661400000,
        341382600000,
        357111000000,
        372832200000,
        388560600000,
        404886600000,
        420010200000,
        436336200000,
        452064600000,
        467785800000,
        483514200000,
        499235400000,
        514963800000,
        530685000000,
        544591860000,
        562127460000,
        576041460000,
        594178260000,
        607491060000,
        625631460000,
        638940660000,
        657081060000,
        670995060000,
        688530660000,
        702444660000,
        719980260000,
        733894260000,
        752034660000,
        765343860000,
        783484260000,
        796793460000,
        814933860000,
        828847860000,
        846383460000,
        860297460000,
        877833060000,
        891747060000,
        909282660000,
        923196660000,
        941337060000,
        954646260000,
        972786660000,
        986095860000,
        1004236260000,
        1018150260000,
        1035685860000,
        1049599860000,
        1067135460000,
        1081049460000,
        1099189860000,
        1112499060000,
        1130639460000,
        1143948660000,
        1162089060000,
        1173583860000,
        1194143460000,
        1205033460000,
        1225593060000,
        1236483060000,
        1257042660000,
        1268537460000,
        1289097060000,
        1299987060000,
        1320553800000,
        1331443800000,
        1352003400000,
        1362893400000,
        1383453000000,
        1394343000000,
        1414902600000,
        1425792600000,
        1446352200000,
        1457847000000,
        1478406600000,
        1489296600000,
        1509856200000,
        1520746200000,
        1541305800000,
        1552195800000,
        1572755400000,
        1583645400000,
        1604205000000,
        1615699800000,
        1636259400000,
        1647149400000,
        1667709000000,
        1678599000000,
        1699158600000,
        1710048600000,
        1730608200000,
        1741498200000,
        1762057800000,
        1772947800000,
        1793507400000,
        1805002200000,
        1825561800000,
        1836451800000,
        1857011400000,
        1867901400000,
        1888461000000,
        1899351000000,
        1919910600000,
        1930800600000,
        1951360200000,
        1962855000000,
        1983414600000,
        1994304600000,
        2014864200000,
        2025754200000,
        2046313800000,
        2057203800000,
        2077763400000,
        2088653400000,
        2109213000000,
        2120103000000,
        2140662600000,
        null
      ],
      "offsets": [
        210.8667,
        150.8667,
        210.8667,
        150.8667,
        210.8667,
        150.8667,
        210.8667,
        150.8667,
        210.8667,
        150.8667,
        210.8667,
        150.8667,
        210.8667,
        150.8667,
        210.8667,
        150.8667,
        210.8667,
        150.8667,
        210.8667,
        150.8667,
        210.8667,
        150.8667,
        210.8667,
        150.8667,
        210.8667,
        150.8667,
        210.8667,
        150.8667,
        210.8667,
        150.8667,
        210.8667,
        150.8667,
        210.8667,
        150.8667,
        210.8667,
        150.8667,
        210.8667,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        90,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210,
        150,
        210
      ]
    },
    {
      "name": "Canada/Pacific",
      "abbrs": [
        "PST",
        "PDT",
        "PST",
        "PWT",
        "PPT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST"
      ],
      "untils": [
        -1632060000000,
        -1615129200000,
        -880207200000,
        -769395600000,
        -765385200000,
        -747237600000,
        -732726000000,
        -715788000000,
        -702486000000,
        -684338400000,
        -671036400000,
        -652888800000,
        -639586800000,
        -620834400000,
        -608137200000,
        -589384800000,
        -576082800000,
        -557935200000,
        -544633200000,
        -526485600000,
        -513183600000,
        -495036000000,
        -481734000000,
        -463586400000,
        -450284400000,
        -431532000000,
        -418230000000,
        -400082400000,
        -386780400000,
        -368632800000,
        -355330800000,
        -337183200000,
        -323881200000,
        -305733600000,
        -292431600000,
        -273679200000,
        -260982000000,
        -242229600000,
        -226508400000,
        -210780000000,
        -195058800000,
        -179330400000,
        -163609200000,
        -147880800000,
        -131554800000,
        -116431200000,
        -100105200000,
        -84376800000,
        -68655600000,
        -52927200000,
        -37206000000,
        -21477600000,
        -5756400000,
        9972000000,
        25693200000,
        41421600000,
        57747600000,
        73476000000,
        89197200000,
        104925600000,
        120646800000,
        136375200000,
        152096400000,
        167824800000,
        183546000000,
        199274400000,
        215600400000,
        230724000000,
        247050000000,
        262778400000,
        278499600000,
        294228000000,
        309949200000,
        325677600000,
        341398800000,
        357127200000,
        372848400000,
        388576800000,
        404902800000,
        420026400000,
        436352400000,
        452080800000,
        467802000000,
        483530400000,
        499251600000,
        514980000000,
        530701200000,
        544615200000,
        562150800000,
        576064800000,
        594205200000,
        607514400000,
        625654800000,
        638964000000,
        657104400000,
        671018400000,
        688554000000,
        702468000000,
        720003600000,
        733917600000,
        752058000000,
        765367200000,
        783507600000,
        796816800000,
        814957200000,
        828871200000,
        846406800000,
        860320800000,
        877856400000,
        891770400000,
        909306000000,
        923220000000,
        941360400000,
        954669600000,
        972810000000,
        986119200000,
        1004259600000,
        1018173600000,
        1035709200000,
        1049623200000,
        1067158800000,
        1081072800000,
        1099213200000,
        1112522400000,
        1130662800000,
        1143972000000,
        1162112400000,
        1173607200000,
        1194166800000,
        1205056800000,
        1225616400000,
        1236506400000,
        1257066000000,
        1268560800000,
        1289120400000,
        1300010400000,
        1320570000000,
        1331460000000,
        1352019600000,
        1362909600000,
        1383469200000,
        1394359200000,
        1414918800000,
        1425808800000,
        1446368400000,
        1457863200000,
        1478422800000,
        1489312800000,
        1509872400000,
        1520762400000,
        1541322000000,
        1552212000000,
        1572771600000,
        1583661600000,
        1604221200000,
        1615716000000,
        1636275600000,
        1647165600000,
        1667725200000,
        1678615200000,
        1699174800000,
        1710064800000,
        1730624400000,
        1741514400000,
        1762074000000,
        1772964000000,
        1793523600000,
        1805018400000,
        1825578000000,
        1836468000000,
        1857027600000,
        1867917600000,
        1888477200000,
        1899367200000,
        1919926800000,
        1930816800000,
        1951376400000,
        1962871200000,
        1983430800000,
        1994320800000,
        2014880400000,
        2025770400000,
        2046330000000,
        2057220000000,
        2077779600000,
        2088669600000,
        2109229200000,
        2120119200000,
        2140678800000,
        null
      ],
      "offsets": [
        480,
        420,
        480,
        420,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480
      ]
    },
    {
      "name": "Canada/Saskatchewan",
      "abbrs": [
        "LMT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MWT",
        "MPT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "CST"
      ],
      "untils": [
        -2030202084000,
        -1632063600000,
        -1615132800000,
        -1251651600000,
        -1238349600000,
        -1220202000000,
        -1206900000000,
        -1188752400000,
        -1175450400000,
        -1156698000000,
        -1144000800000,
        -1125248400000,
        -1111946400000,
        -1032714000000,
        -1016992800000,
        -1001264400000,
        -986148000000,
        -969814800000,
        -954093600000,
        -937760400000,
        -922039200000,
        -906310800000,
        -890589600000,
        -880210800000,
        -769395600000,
        -765388800000,
        -748450800000,
        -732729600000,
        -715791600000,
        -702489600000,
        -684342000000,
        -671040000000,
        -652892400000,
        -639590400000,
        -620838000000,
        -608140800000,
        -589388400000,
        -576086400000,
        -557938800000,
        -544636800000,
        -526489200000,
        -513187200000,
        -495039600000,
        -481737600000,
        -463590000000,
        -450288000000,
        -431535600000,
        -418233600000,
        -400086000000,
        -386784000000,
        -337186800000,
        -321465600000,
        -305737200000,
        null
      ],
      "offsets": [
        418.6,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360
      ]
    },
    {
      "name": "Canada/Yukon",
      "abbrs": [
        "YST",
        "YDT",
        "YST",
        "YDT",
        "YST",
        "YWT",
        "YPT",
        "YST",
        "YDDT",
        "YST",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST"
      ],
      "untils": [
        -1632056400000,
        -1615125600000,
        -1596978000000,
        -1583164800000,
        -880203600000,
        -769395600000,
        -765381600000,
        -147884400000,
        -131554800000,
        -81961200000,
        325677600000,
        341398800000,
        357127200000,
        372848400000,
        388576800000,
        404902800000,
        420026400000,
        436352400000,
        452080800000,
        467802000000,
        483530400000,
        499251600000,
        514980000000,
        530701200000,
        544615200000,
        562150800000,
        576064800000,
        594205200000,
        607514400000,
        625654800000,
        638964000000,
        657104400000,
        671018400000,
        688554000000,
        702468000000,
        720003600000,
        733917600000,
        752058000000,
        765367200000,
        783507600000,
        796816800000,
        814957200000,
        828871200000,
        846406800000,
        860320800000,
        877856400000,
        891770400000,
        909306000000,
        923220000000,
        941360400000,
        954669600000,
        972810000000,
        986119200000,
        1004259600000,
        1018173600000,
        1035709200000,
        1049623200000,
        1067158800000,
        1081072800000,
        1099213200000,
        1112522400000,
        1130662800000,
        1143972000000,
        1162112400000,
        1173607200000,
        1194166800000,
        1205056800000,
        1225616400000,
        1236506400000,
        1257066000000,
        1268560800000,
        1289120400000,
        1300010400000,
        1320570000000,
        1331460000000,
        1352019600000,
        1362909600000,
        1383469200000,
        1394359200000,
        1414918800000,
        1425808800000,
        1446368400000,
        1457863200000,
        1478422800000,
        1489312800000,
        1509872400000,
        1520762400000,
        1541322000000,
        1552212000000,
        1572771600000,
        1583661600000,
        1604221200000,
        1615716000000,
        1636275600000,
        1647165600000,
        1667725200000,
        1678615200000,
        1699174800000,
        1710064800000,
        1730624400000,
        1741514400000,
        1762074000000,
        1772964000000,
        1793523600000,
        1805018400000,
        1825578000000,
        1836468000000,
        1857027600000,
        1867917600000,
        1888477200000,
        1899367200000,
        1919926800000,
        1930816800000,
        1951376400000,
        1962871200000,
        1983430800000,
        1994320800000,
        2014880400000,
        2025770400000,
        2046330000000,
        2057220000000,
        2077779600000,
        2088669600000,
        2109229200000,
        2120119200000,
        2140678800000,
        null
      ],
      "offsets": [
        540,
        480,
        540,
        480,
        540,
        480,
        480,
        540,
        420,
        540,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480
      ]
    },
    {
      "name": "Chile/Continental",
      "abbrs": [
        "SMT",
        "CLT",
        "SMT",
        "CLT",
        "SMT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLT",
        "CLT",
        "CLT",
        "CLST",
        "CLT",
        "CLT",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT",
        "CLST",
        "CLT"
      ],
      "untils": [
        -1892661434000,
        -1688410800000,
        -1619205434000,
        -1593806400000,
        -1335986234000,
        -1317585600000,
        -1304362800000,
        -1286049600000,
        -1272826800000,
        -1254513600000,
        -1241290800000,
        -1222977600000,
        -1209754800000,
        -1191355200000,
        -1178132400000,
        -870552000000,
        -865278000000,
        -740520000000,
        -736376400000,
        -718056000000,
        -713649600000,
        -36619200000,
        -23922000000,
        -3355200000,
        7527600000,
        24465600000,
        37767600000,
        55915200000,
        69217200000,
        87969600000,
        100666800000,
        118209600000,
        132116400000,
        150868800000,
        163566000000,
        182318400000,
        195620400000,
        213768000000,
        227070000000,
        245217600000,
        258519600000,
        277272000000,
        289969200000,
        308721600000,
        321418800000,
        340171200000,
        353473200000,
        371620800000,
        384922800000,
        403070400000,
        416372400000,
        434520000000,
        447822000000,
        466574400000,
        479271600000,
        498024000000,
        510721200000,
        529473600000,
        545194800000,
        560923200000,
        574225200000,
        592372800000,
        605674800000,
        624427200000,
        637124400000,
        653457600000,
        668574000000,
        687326400000,
        700628400000,
        718776000000,
        732078000000,
        750225600000,
        763527600000,
        781675200000,
        794977200000,
        813729600000,
        826426800000,
        845179200000,
        859690800000,
        876628800000,
        889930800000,
        906868800000,
        923194800000,
        939528000000,
        952830000000,
        971582400000,
        984279600000,
        1003032000000,
        1015729200000,
        1034481600000,
        1047178800000,
        1065931200000,
        1079233200000,
        1097380800000,
        1110682800000,
        1128830400000,
        1142132400000,
        1160884800000,
        1173582000000,
        1192334400000,
        1206846000000,
        1223784000000,
        1237086000000,
        1255233600000,
        1270350000000,
        1286683200000,
        1304823600000,
        1313899200000,
        1335668400000,
        1346558400000,
        1367118000000,
        1378612800000,
        1398567600000,
        1410062400000,
        1430017200000,
        null
      ],
      "offsets": [
        282.7667,
        300,
        282.7667,
        240,
        282.7667,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        180,
        240,
        300,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        240,
        180,
        180
      ]
    },
    {
      "name": "Chile/EasterIsland",
      "abbrs": [
        "EMT",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST"
      ],
      "untils": [
        -1178124152000,
        -36619200000,
        -23922000000,
        -3355200000,
        7527600000,
        24465600000,
        37767600000,
        55915200000,
        69217200000,
        87969600000,
        100666800000,
        118209600000,
        132116400000,
        150868800000,
        163566000000,
        182318400000,
        195620400000,
        213768000000,
        227070000000,
        245217600000,
        258519600000,
        277272000000,
        289969200000,
        308721600000,
        321418800000,
        340171200000,
        353473200000,
        371620800000,
        384922800000,
        403070400000,
        416372400000,
        434520000000,
        447822000000,
        466574400000,
        479271600000,
        498024000000,
        510721200000,
        529473600000,
        545194800000,
        560923200000,
        574225200000,
        592372800000,
        605674800000,
        624427200000,
        637124400000,
        653457600000,
        668574000000,
        687326400000,
        700628400000,
        718776000000,
        732078000000,
        750225600000,
        763527600000,
        781675200000,
        794977200000,
        813729600000,
        826426800000,
        845179200000,
        859690800000,
        876628800000,
        889930800000,
        906868800000,
        923194800000,
        939528000000,
        952830000000,
        971582400000,
        984279600000,
        1003032000000,
        1015729200000,
        1034481600000,
        1047178800000,
        1065931200000,
        1079233200000,
        1097380800000,
        1110682800000,
        1128830400000,
        1142132400000,
        1160884800000,
        1173582000000,
        1192334400000,
        1206846000000,
        1223784000000,
        1237086000000,
        1255233600000,
        1270350000000,
        1286683200000,
        1304823600000,
        1313899200000,
        1335668400000,
        1346558400000,
        1367118000000,
        1378612800000,
        1398567600000,
        1410062400000,
        1430017200000,
        null
      ],
      "offsets": [
        437.4667,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        300
      ]
    },
    {
      "name": "Cuba",
      "abbrs": [
        "HMT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST"
      ],
      "untils": [
        -1402813824000,
        -1311534000000,
        -1300996800000,
        -933534000000,
        -925675200000,
        -902084400000,
        -893620800000,
        -870030000000,
        -862171200000,
        -775681200000,
        -767822400000,
        -744231600000,
        -736372800000,
        -144702000000,
        -134251200000,
        -113425200000,
        -102542400000,
        -86295600000,
        -72907200000,
        -54154800000,
        -41457600000,
        -21495600000,
        -5774400000,
        9954000000,
        25675200000,
        41403600000,
        57729600000,
        73458000000,
        87364800000,
        104907600000,
        118900800000,
        136357200000,
        150436800000,
        167806800000,
        183528000000,
        199256400000,
        215582400000,
        230706000000,
        247032000000,
        263365200000,
        276667200000,
        290581200000,
        308721600000,
        322030800000,
        340171200000,
        358318800000,
        371620800000,
        389768400000,
        403070400000,
        421218000000,
        434520000000,
        452667600000,
        466574400000,
        484117200000,
        498024000000,
        511333200000,
        529473600000,
        542782800000,
        560923200000,
        574837200000,
        592372800000,
        606286800000,
        623822400000,
        638946000000,
        655876800000,
        671000400000,
        687330000000,
        702450000000,
        718779600000,
        733899600000,
        750229200000,
        765349200000,
        781678800000,
        796798800000,
        813128400000,
        828853200000,
        844578000000,
        860302800000,
        876632400000,
        891147600000,
        909291600000,
        922597200000,
        941346000000,
        954651600000,
        972795600000,
        986101200000,
        1004245200000,
        1018155600000,
        1035694800000,
        1049605200000,
        1067144400000,
        1080450000000,
        1162098000000,
        1173589200000,
        1193547600000,
        1205643600000,
        1224997200000,
        1236488400000,
        1256446800000,
        1268542800000,
        1288501200000,
        1300597200000,
        1321160400000,
        1333256400000,
        1352005200000,
        1362891600000,
        1383454800000,
        1394341200000,
        1414904400000,
        1425790800000,
        1446354000000,
        1457845200000,
        1478408400000,
        1489294800000,
        1509858000000,
        1520744400000,
        1541307600000,
        1552194000000,
        1572757200000,
        1583643600000,
        1604206800000,
        1615698000000,
        1636261200000,
        1647147600000,
        1667710800000,
        1678597200000,
        1699160400000,
        1710046800000,
        1730610000000,
        1741496400000,
        1762059600000,
        1772946000000,
        1793509200000,
        1805000400000,
        1825563600000,
        1836450000000,
        1857013200000,
        1867899600000,
        1888462800000,
        1899349200000,
        1919912400000,
        1930798800000,
        1951362000000,
        1962853200000,
        1983416400000,
        1994302800000,
        2014866000000,
        2025752400000,
        2046315600000,
        2057202000000,
        2077765200000,
        2088651600000,
        2109214800000,
        2120101200000,
        2140664400000,
        null
      ],
      "offsets": [
        329.6,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300
      ]
    },
    {
      "name": "EET",
      "abbrs": [
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET"
      ],
      "untils": [
        228877200000,
        243997200000,
        260326800000,
        276051600000,
        291776400000,
        307501200000,
        323830800000,
        338950800000,
        354675600000,
        370400400000,
        386125200000,
        401850000000,
        417574800000,
        433299600000,
        449024400000,
        465354000000,
        481078800000,
        496803600000,
        512528400000,
        528253200000,
        543978000000,
        559702800000,
        575427600000,
        591152400000,
        606877200000,
        622602000000,
        638326800000,
        654656400000,
        670381200000,
        686106000000,
        701830800000,
        717555600000,
        733280400000,
        749005200000,
        764730000000,
        780454800000,
        796179600000,
        811904400000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120
      ]
    },
    {
      "name": "EST",
      "abbrs": [
        "EST"
      ],
      "untils": [
        null
      ],
      "offsets": [
        300
      ]
    },
    {
      "name": "EST5EDT",
      "abbrs": [
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EWT",
        "EPT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST"
      ],
      "untils": [
        -1633280400000,
        -1615140000000,
        -1601830800000,
        -1583690400000,
        -880218000000,
        -769395600000,
        -765396000000,
        -84387600000,
        -68666400000,
        -52938000000,
        -37216800000,
        -21488400000,
        -5767200000,
        9961200000,
        25682400000,
        41410800000,
        57736800000,
        73465200000,
        89186400000,
        104914800000,
        120636000000,
        126687600000,
        152085600000,
        162370800000,
        183535200000,
        199263600000,
        215589600000,
        230713200000,
        247039200000,
        262767600000,
        278488800000,
        294217200000,
        309938400000,
        325666800000,
        341388000000,
        357116400000,
        372837600000,
        388566000000,
        404892000000,
        420015600000,
        436341600000,
        452070000000,
        467791200000,
        483519600000,
        499240800000,
        514969200000,
        530690400000,
        544604400000,
        562140000000,
        576054000000,
        594194400000,
        607503600000,
        625644000000,
        638953200000,
        657093600000,
        671007600000,
        688543200000,
        702457200000,
        719992800000,
        733906800000,
        752047200000,
        765356400000,
        783496800000,
        796806000000,
        814946400000,
        828860400000,
        846396000000,
        860310000000,
        877845600000,
        891759600000,
        909295200000,
        923209200000,
        941349600000,
        954658800000,
        972799200000,
        986108400000,
        1004248800000,
        1018162800000,
        1035698400000,
        1049612400000,
        1067148000000,
        1081062000000,
        1099202400000,
        1112511600000,
        1130652000000,
        1143961200000,
        1162101600000,
        1173596400000,
        1194156000000,
        1205046000000,
        1225605600000,
        1236495600000,
        1257055200000,
        1268550000000,
        1289109600000,
        1299999600000,
        1320559200000,
        1331449200000,
        1352008800000,
        1362898800000,
        1383458400000,
        1394348400000,
        1414908000000,
        1425798000000,
        1446357600000,
        1457852400000,
        1478412000000,
        1489302000000,
        1509861600000,
        1520751600000,
        1541311200000,
        1552201200000,
        1572760800000,
        1583650800000,
        1604210400000,
        1615705200000,
        1636264800000,
        1647154800000,
        1667714400000,
        1678604400000,
        1699164000000,
        1710054000000,
        1730613600000,
        1741503600000,
        1762063200000,
        1772953200000,
        1793512800000,
        1805007600000,
        1825567200000,
        1836457200000,
        1857016800000,
        1867906800000,
        1888466400000,
        1899356400000,
        1919916000000,
        1930806000000,
        1951365600000,
        1962860400000,
        1983420000000,
        1994310000000,
        2014869600000,
        2025759600000,
        2046319200000,
        2057209200000,
        2077768800000,
        2088658800000,
        2109218400000,
        2120108400000,
        2140668000000,
        null
      ],
      "offsets": [
        300,
        240,
        300,
        240,
        300,
        240,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300
      ]
    },
    {
      "name": "Egypt",
      "abbrs": [
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET"
      ],
      "untils": [
        -929844000000,
        -923108400000,
        -906170400000,
        -892868400000,
        -875844000000,
        -857790000000,
        -844308000000,
        -825822000000,
        -812685600000,
        -794199600000,
        -779853600000,
        -762663600000,
        -399088800000,
        -386650800000,
        -368330400000,
        -355114800000,
        -336790800000,
        -323654400000,
        -305168400000,
        -292032000000,
        -273632400000,
        -260496000000,
        -242096400000,
        -228960000000,
        -210560400000,
        -197424000000,
        -178938000000,
        -165801600000,
        -147402000000,
        -134265600000,
        -115866000000,
        -102643200000,
        -84330000000,
        -71107200000,
        -52707600000,
        -39484800000,
        -21171600000,
        -7948800000,
        10364400000,
        23587200000,
        41900400000,
        55123200000,
        73522800000,
        86745600000,
        105058800000,
        118281600000,
        136594800000,
        149817600000,
        168130800000,
        181353600000,
        199753200000,
        212976000000,
        231289200000,
        244512000000,
        262825200000,
        276048000000,
        294361200000,
        307584000000,
        325983600000,
        339206400000,
        357519600000,
        370742400000,
        396399600000,
        402278400000,
        426812400000,
        433814400000,
        452214000000,
        465436800000,
        483750000000,
        496972800000,
        515286000000,
        528508800000,
        546822000000,
        560044800000,
        578444400000,
        591667200000,
        610412400000,
        623203200000,
        641516400000,
        654739200000,
        673052400000,
        686275200000,
        704674800000,
        717897600000,
        736210800000,
        749433600000,
        767746800000,
        780969600000,
        799020000000,
        812322000000,
        830469600000,
        843771600000,
        861919200000,
        875221200000,
        893368800000,
        906670800000,
        925423200000,
        938725200000,
        956872800000,
        970174800000,
        988322400000,
        1001624400000,
        1019772000000,
        1033074000000,
        1051221600000,
        1064523600000,
        1083276000000,
        1096578000000,
        1114725600000,
        1128027600000,
        1146175200000,
        1158872400000,
        1177624800000,
        1189112400000,
        1209074400000,
        1219957200000,
        1240524000000,
        1250802000000,
        1272578400000,
        1281474000000,
        1284069600000,
        1285880400000,
        1400191200000,
        1403816400000,
        1406844000000,
        1411678800000,
        null
      ],
      "offsets": [
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120
      ]
    },
    {
      "name": "Eire",
      "abbrs": [
        "DMT",
        "IST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT"
      ],
      "untils": [
        -1691962479000,
        -1680471279000,
        -1664143200000,
        -1650146400000,
        -1633903200000,
        -1617487200000,
        -1601848800000,
        -1586037600000,
        -1570399200000,
        -1552168800000,
        -1538344800000,
        -1522533600000,
        -1507500000000,
        -1490565600000,
        -1473631200000,
        -1460930400000,
        -1442786400000,
        -1428876000000,
        -1410732000000,
        -1396216800000,
        -1379282400000,
        -1364767200000,
        -1348437600000,
        -1333317600000,
        -1315778400000,
        -1301263200000,
        -1284328800000,
        -1269813600000,
        -1253484000000,
        -1238364000000,
        -1221429600000,
        -1206914400000,
        -1189980000000,
        -1175464800000,
        -1159135200000,
        -1143410400000,
        -1126476000000,
        -1111960800000,
        -1095631200000,
        -1080511200000,
        -1063576800000,
        -1049061600000,
        -1032127200000,
        -1017612000000,
        -1001282400000,
        -986162400000,
        -969228000000,
        -950479200000,
        -942012000000,
        -733359600000,
        -719445600000,
        -699490800000,
        -684972000000,
        -668037600000,
        -654732000000,
        -636588000000,
        -622072800000,
        -605743200000,
        -590623200000,
        -574293600000,
        -558568800000,
        -542239200000,
        -527119200000,
        -512604000000,
        -496274400000,
        -481154400000,
        -464220000000,
        -449704800000,
        -432165600000,
        -417650400000,
        -401320800000,
        -386200800000,
        -369266400000,
        -354751200000,
        -337816800000,
        -323301600000,
        -306972000000,
        -291852000000,
        -276732000000,
        -257983200000,
        -245282400000,
        -226533600000,
        -213228000000,
        -195084000000,
        -182383200000,
        -163634400000,
        -150933600000,
        -132184800000,
        -119484000000,
        -100735200000,
        -88034400000,
        -68680800000,
        -59004000000,
        57722400000,
        69818400000,
        89172000000,
        101268000000,
        120621600000,
        132717600000,
        152071200000,
        164167200000,
        183520800000,
        196221600000,
        214970400000,
        227671200000,
        246420000000,
        259120800000,
        278474400000,
        290570400000,
        309924000000,
        322020000000,
        341373600000,
        354675600000,
        372819600000,
        386125200000,
        404269200000,
        417574800000,
        435718800000,
        449024400000,
        467773200000,
        481078800000,
        499222800000,
        512528400000,
        530672400000,
        543978000000,
        562122000000,
        575427600000,
        593571600000,
        606877200000,
        625626000000,
        638326800000,
        657075600000,
        670381200000,
        688525200000,
        701830800000,
        719974800000,
        733280400000,
        751424400000,
        764730000000,
        782874000000,
        796179600000,
        814323600000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        25.35,
        -34.65,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0
      ]
    },
    {
      "name": "Etc/GMT+0",
      "abbrs": [
        "GMT"
      ],
      "untils": [
        null
      ],
      "offsets": [
        0
      ]
    },
    {
      "name": "Etc/GMT+1",
      "abbrs": [
        "GMT+1"
      ],
      "untils": [
        null
      ],
      "offsets": [
        60
      ]
    },
    {
      "name": "Etc/GMT+10",
      "abbrs": [
        "GMT+10"
      ],
      "untils": [
        null
      ],
      "offsets": [
        600
      ]
    },
    {
      "name": "Etc/GMT+11",
      "abbrs": [
        "GMT+11"
      ],
      "untils": [
        null
      ],
      "offsets": [
        660
      ]
    },
    {
      "name": "Etc/GMT+12",
      "abbrs": [
        "GMT+12"
      ],
      "untils": [
        null
      ],
      "offsets": [
        720
      ]
    },
    {
      "name": "Etc/GMT+2",
      "abbrs": [
        "GMT+2"
      ],
      "untils": [
        null
      ],
      "offsets": [
        120
      ]
    },
    {
      "name": "Etc/GMT+3",
      "abbrs": [
        "GMT+3"
      ],
      "untils": [
        null
      ],
      "offsets": [
        180
      ]
    },
    {
      "name": "Etc/GMT+4",
      "abbrs": [
        "GMT+4"
      ],
      "untils": [
        null
      ],
      "offsets": [
        240
      ]
    },
    {
      "name": "Etc/GMT+5",
      "abbrs": [
        "GMT+5"
      ],
      "untils": [
        null
      ],
      "offsets": [
        300
      ]
    },
    {
      "name": "Etc/GMT+6",
      "abbrs": [
        "GMT+6"
      ],
      "untils": [
        null
      ],
      "offsets": [
        360
      ]
    },
    {
      "name": "Etc/GMT+7",
      "abbrs": [
        "GMT+7"
      ],
      "untils": [
        null
      ],
      "offsets": [
        420
      ]
    },
    {
      "name": "Etc/GMT+8",
      "abbrs": [
        "GMT+8"
      ],
      "untils": [
        null
      ],
      "offsets": [
        480
      ]
    },
    {
      "name": "Etc/GMT+9",
      "abbrs": [
        "GMT+9"
      ],
      "untils": [
        null
      ],
      "offsets": [
        540
      ]
    },
    {
      "name": "Etc/GMT-0",
      "abbrs": [
        "GMT"
      ],
      "untils": [
        null
      ],
      "offsets": [
        0
      ]
    },
    {
      "name": "Etc/GMT-1",
      "abbrs": [
        "GMT-1"
      ],
      "untils": [
        null
      ],
      "offsets": [
        -60
      ]
    },
    {
      "name": "Etc/GMT-10",
      "abbrs": [
        "GMT-10"
      ],
      "untils": [
        null
      ],
      "offsets": [
        -600
      ]
    },
    {
      "name": "Etc/GMT-11",
      "abbrs": [
        "GMT-11"
      ],
      "untils": [
        null
      ],
      "offsets": [
        -660
      ]
    },
    {
      "name": "Etc/GMT-12",
      "abbrs": [
        "GMT-12"
      ],
      "untils": [
        null
      ],
      "offsets": [
        -720
      ]
    },
    {
      "name": "Etc/GMT-13",
      "abbrs": [
        "GMT-13"
      ],
      "untils": [
        null
      ],
      "offsets": [
        -780
      ]
    },
    {
      "name": "Etc/GMT-14",
      "abbrs": [
        "GMT-14"
      ],
      "untils": [
        null
      ],
      "offsets": [
        -840
      ]
    },
    {
      "name": "Etc/GMT-2",
      "abbrs": [
        "GMT-2"
      ],
      "untils": [
        null
      ],
      "offsets": [
        -120
      ]
    },
    {
      "name": "Etc/GMT-3",
      "abbrs": [
        "GMT-3"
      ],
      "untils": [
        null
      ],
      "offsets": [
        -180
      ]
    },
    {
      "name": "Etc/GMT-4",
      "abbrs": [
        "GMT-4"
      ],
      "untils": [
        null
      ],
      "offsets": [
        -240
      ]
    },
    {
      "name": "Etc/GMT-5",
      "abbrs": [
        "GMT-5"
      ],
      "untils": [
        null
      ],
      "offsets": [
        -300
      ]
    },
    {
      "name": "Etc/GMT-6",
      "abbrs": [
        "GMT-6"
      ],
      "untils": [
        null
      ],
      "offsets": [
        -360
      ]
    },
    {
      "name": "Etc/GMT-7",
      "abbrs": [
        "GMT-7"
      ],
      "untils": [
        null
      ],
      "offsets": [
        -420
      ]
    },
    {
      "name": "Etc/GMT-8",
      "abbrs": [
        "GMT-8"
      ],
      "untils": [
        null
      ],
      "offsets": [
        -480
      ]
    },
    {
      "name": "Etc/GMT-9",
      "abbrs": [
        "GMT-9"
      ],
      "untils": [
        null
      ],
      "offsets": [
        -540
      ]
    },
    {
      "name": "Etc/GMT",
      "abbrs": [
        "GMT"
      ],
      "untils": [
        null
      ],
      "offsets": [
        0
      ]
    },
    {
      "name": "Etc/GMT0",
      "abbrs": [
        "GMT"
      ],
      "untils": [
        null
      ],
      "offsets": [
        0
      ]
    },
    {
      "name": "Etc/Greenwich",
      "abbrs": [
        "GMT"
      ],
      "untils": [
        null
      ],
      "offsets": [
        0
      ]
    },
    {
      "name": "Etc/UCT",
      "abbrs": [
        "UCT"
      ],
      "untils": [
        null
      ],
      "offsets": [
        0
      ]
    },
    {
      "name": "Etc/UTC",
      "abbrs": [
        "UTC"
      ],
      "untils": [
        null
      ],
      "offsets": [
        0
      ]
    },
    {
      "name": "Etc/Universal",
      "abbrs": [
        "UTC"
      ],
      "untils": [
        null
      ],
      "offsets": [
        0
      ]
    },
    {
      "name": "Etc/Zulu",
      "abbrs": [
        "UTC"
      ],
      "untils": [
        null
      ],
      "offsets": [
        0
      ]
    },
    {
      "name": "Europe/Amsterdam",
      "abbrs": [
        "AMT",
        "NST",
        "AMT",
        "NST",
        "AMT",
        "NST",
        "AMT",
        "NST",
        "AMT",
        "NST",
        "AMT",
        "NST",
        "AMT",
        "NST",
        "AMT",
        "NST",
        "AMT",
        "NST",
        "AMT",
        "NST",
        "AMT",
        "NST",
        "AMT",
        "NST",
        "AMT",
        "NST",
        "AMT",
        "NST",
        "AMT",
        "NST",
        "AMT",
        "NST",
        "AMT",
        "NST",
        "AMT",
        "NST",
        "AMT",
        "NST",
        "AMT",
        "NST",
        "AMT",
        "NST",
        "AMT",
        "NST",
        "NEST",
        "NET",
        "NEST",
        "NET",
        "NEST",
        "NET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET"
      ],
      "untils": [
        -1693700372000,
        -1680484772000,
        -1663453172000,
        -1650147572000,
        -1633213172000,
        -1617488372000,
        -1601158772000,
        -1586038772000,
        -1569709172000,
        -1554589172000,
        -1538259572000,
        -1523139572000,
        -1507501172000,
        -1490566772000,
        -1470176372000,
        -1459117172000,
        -1443997172000,
        -1427667572000,
        -1406672372000,
        -1396217972000,
        -1376950772000,
        -1364768372000,
        -1345414772000,
        -1333318772000,
        -1313792372000,
        -1301264372000,
        -1282256372000,
        -1269814772000,
        -1250720372000,
        -1238365172000,
        -1219184372000,
        -1206915572000,
        -1186957172000,
        -1175465972000,
        -1156025972000,
        -1143411572000,
        -1124489972000,
        -1111961972000,
        -1092953972000,
        -1080512372000,
        -1061331572000,
        -1049062772000,
        -1029190772000,
        -1025745572000,
        -1017613200000,
        -998259600000,
        -986163600000,
        -966723600000,
        -954109200000,
        -935022000000,
        -857257200000,
        -844556400000,
        -828226800000,
        -812502000000,
        -796777200000,
        -781052400000,
        -766623600000,
        228877200000,
        243997200000,
        260326800000,
        276051600000,
        291776400000,
        307501200000,
        323830800000,
        338950800000,
        354675600000,
        370400400000,
        386125200000,
        401850000000,
        417574800000,
        433299600000,
        449024400000,
        465354000000,
        481078800000,
        496803600000,
        512528400000,
        528253200000,
        543978000000,
        559702800000,
        575427600000,
        591152400000,
        606877200000,
        622602000000,
        638326800000,
        654656400000,
        670381200000,
        686106000000,
        701830800000,
        717555600000,
        733280400000,
        749005200000,
        764730000000,
        780454800000,
        796179600000,
        811904400000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        -19.5333,
        -79.5333,
        -19.5333,
        -79.5333,
        -19.5333,
        -79.5333,
        -19.5333,
        -79.5333,
        -19.5333,
        -79.5333,
        -19.5333,
        -79.5333,
        -19.5333,
        -79.5333,
        -19.5333,
        -79.5333,
        -19.5333,
        -79.5333,
        -19.5333,
        -79.5333,
        -19.5333,
        -79.5333,
        -19.5333,
        -79.5333,
        -19.5333,
        -79.5333,
        -19.5333,
        -79.5333,
        -19.5333,
        -79.5333,
        -19.5333,
        -79.5333,
        -19.5333,
        -79.5333,
        -19.5333,
        -79.5333,
        -19.5333,
        -79.5333,
        -19.5333,
        -79.5333,
        -19.5333,
        -79.5333,
        -19.5333,
        -79.5333,
        -80,
        -20,
        -80,
        -20,
        -80,
        -20,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60
      ]
    },
    {
      "name": "Europe/Andorra",
      "abbrs": [
        "WET",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET"
      ],
      "untils": [
        -733881600000,
        481078800000,
        496803600000,
        512528400000,
        528253200000,
        543978000000,
        559702800000,
        575427600000,
        591152400000,
        606877200000,
        622602000000,
        638326800000,
        654656400000,
        670381200000,
        686106000000,
        701830800000,
        717555600000,
        733280400000,
        749005200000,
        764730000000,
        780454800000,
        796179600000,
        811904400000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        0,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60
      ]
    },
    {
      "name": "Europe/Athens",
      "abbrs": [
        "AMT",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET"
      ],
      "untils": [
        -1686101632000,
        -1182996000000,
        -1178161200000,
        -906861600000,
        -904878000000,
        -857257200000,
        -844477200000,
        -828237600000,
        -812422800000,
        -552362400000,
        -541652400000,
        166485600000,
        186184800000,
        198028800000,
        213753600000,
        228873600000,
        244080000000,
        260323200000,
        275446800000,
        291798000000,
        307407600000,
        323388000000,
        338936400000,
        354675600000,
        370400400000,
        386125200000,
        401850000000,
        417574800000,
        433299600000,
        449024400000,
        465354000000,
        481078800000,
        496803600000,
        512528400000,
        528253200000,
        543978000000,
        559702800000,
        575427600000,
        591152400000,
        606877200000,
        622602000000,
        638326800000,
        654656400000,
        670381200000,
        686106000000,
        701830800000,
        717555600000,
        733280400000,
        749005200000,
        764730000000,
        780454800000,
        796179600000,
        811904400000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        -94.8667,
        -120,
        -180,
        -120,
        -180,
        -120,
        -60,
        -120,
        -60,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120
      ]
    },
    {
      "name": "Europe/Belfast",
      "abbrs": [
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "BDST",
        "BST",
        "BDST",
        "BST",
        "BDST",
        "BST",
        "BDST",
        "BST",
        "BDST",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "BDST",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT"
      ],
      "untils": [
        -1691964000000,
        -1680472800000,
        -1664143200000,
        -1650146400000,
        -1633903200000,
        -1617487200000,
        -1601848800000,
        -1586037600000,
        -1570399200000,
        -1552168800000,
        -1538344800000,
        -1522533600000,
        -1507500000000,
        -1490565600000,
        -1473631200000,
        -1460930400000,
        -1442786400000,
        -1428876000000,
        -1410732000000,
        -1396216800000,
        -1379282400000,
        -1364767200000,
        -1348437600000,
        -1333317600000,
        -1315778400000,
        -1301263200000,
        -1284328800000,
        -1269813600000,
        -1253484000000,
        -1238364000000,
        -1221429600000,
        -1206914400000,
        -1189980000000,
        -1175464800000,
        -1159135200000,
        -1143410400000,
        -1126476000000,
        -1111960800000,
        -1095631200000,
        -1080511200000,
        -1063576800000,
        -1049061600000,
        -1032127200000,
        -1017612000000,
        -1001282400000,
        -986162400000,
        -969228000000,
        -950479200000,
        -942012000000,
        -904518000000,
        -896050800000,
        -875487600000,
        -864601200000,
        -844038000000,
        -832546800000,
        -812588400000,
        -798073200000,
        -781052400000,
        -772066800000,
        -764805600000,
        -748476000000,
        -733356000000,
        -719445600000,
        -717030000000,
        -706748400000,
        -699487200000,
        -687996000000,
        -668037600000,
        -654732000000,
        -636588000000,
        -622072800000,
        -605743200000,
        -590623200000,
        -574293600000,
        -558568800000,
        -542239200000,
        -527119200000,
        -512604000000,
        -496274400000,
        -481154400000,
        -464220000000,
        -449704800000,
        -432165600000,
        -417650400000,
        -401320800000,
        -386200800000,
        -369266400000,
        -354751200000,
        -337816800000,
        -323301600000,
        -306972000000,
        -291852000000,
        -276732000000,
        -257983200000,
        -245282400000,
        -226533600000,
        -213228000000,
        -195084000000,
        -182383200000,
        -163634400000,
        -150933600000,
        -132184800000,
        -119484000000,
        -100735200000,
        -88034400000,
        -68680800000,
        -59004000000,
        57722400000,
        69818400000,
        89172000000,
        101268000000,
        120621600000,
        132717600000,
        152071200000,
        164167200000,
        183520800000,
        196221600000,
        214970400000,
        227671200000,
        246420000000,
        259120800000,
        278474400000,
        290570400000,
        309924000000,
        322020000000,
        341373600000,
        354675600000,
        372819600000,
        386125200000,
        404269200000,
        417574800000,
        435718800000,
        449024400000,
        467773200000,
        481078800000,
        499222800000,
        512528400000,
        530672400000,
        543978000000,
        562122000000,
        575427600000,
        593571600000,
        606877200000,
        625626000000,
        638326800000,
        657075600000,
        670381200000,
        688525200000,
        701830800000,
        719974800000,
        733280400000,
        751424400000,
        764730000000,
        782874000000,
        796179600000,
        814323600000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        0,
        -60,
        0,
        -60,
        -120,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0
      ]
    },
    {
      "name": "Europe/Belgrade",
      "abbrs": [
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET"
      ],
      "untils": [
        -905824800000,
        -857257200000,
        -844556400000,
        -828226800000,
        -812502000000,
        -796777200000,
        -777942000000,
        -766623600000,
        417574800000,
        433299600000,
        449024400000,
        465354000000,
        481078800000,
        496803600000,
        512528400000,
        528253200000,
        543978000000,
        559702800000,
        575427600000,
        591152400000,
        606877200000,
        622602000000,
        638326800000,
        654656400000,
        670381200000,
        686106000000,
        701830800000,
        717555600000,
        733280400000,
        749005200000,
        764730000000,
        780454800000,
        796179600000,
        811904400000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60
      ]
    },
    {
      "name": "Europe/Berlin",
      "abbrs": [
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CEMT",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CEMT",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET"
      ],
      "untils": [
        -1693706400000,
        -1680483600000,
        -1663455600000,
        -1650150000000,
        -1632006000000,
        -1618700400000,
        -938905200000,
        -857257200000,
        -844556400000,
        -828226800000,
        -812502000000,
        -796777200000,
        -781052400000,
        -776563200000,
        -765936000000,
        -761180400000,
        -748479600000,
        -733273200000,
        -717631200000,
        -714610800000,
        -710380800000,
        -701910000000,
        -684975600000,
        -670460400000,
        -654130800000,
        -639010800000,
        323830800000,
        338950800000,
        354675600000,
        370400400000,
        386125200000,
        401850000000,
        417574800000,
        433299600000,
        449024400000,
        465354000000,
        481078800000,
        496803600000,
        512528400000,
        528253200000,
        543978000000,
        559702800000,
        575427600000,
        591152400000,
        606877200000,
        622602000000,
        638326800000,
        654656400000,
        670381200000,
        686106000000,
        701830800000,
        717555600000,
        733280400000,
        749005200000,
        764730000000,
        780454800000,
        796179600000,
        811904400000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -180,
        -120,
        -60,
        -120,
        -60,
        -120,
        -180,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60
      ]
    },
    {
      "name": "Europe/Bratislava",
      "abbrs": [
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET"
      ],
      "untils": [
        -1693706400000,
        -1680483600000,
        -1663455600000,
        -1650150000000,
        -1632006000000,
        -1618700400000,
        -938905200000,
        -857257200000,
        -844556400000,
        -828226800000,
        -812502000000,
        -798073200000,
        -780534000000,
        -761180400000,
        -746578800000,
        -733359600000,
        -716425200000,
        -701910000000,
        -684975600000,
        -670460400000,
        -654217200000,
        -639010800000,
        291776400000,
        307501200000,
        323830800000,
        338950800000,
        354675600000,
        370400400000,
        386125200000,
        401850000000,
        417574800000,
        433299600000,
        449024400000,
        465354000000,
        481078800000,
        496803600000,
        512528400000,
        528253200000,
        543978000000,
        559702800000,
        575427600000,
        591152400000,
        606877200000,
        622602000000,
        638326800000,
        654656400000,
        670381200000,
        686106000000,
        701830800000,
        717555600000,
        733280400000,
        749005200000,
        764730000000,
        780454800000,
        796179600000,
        811904400000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60
      ]
    },
    {
      "name": "Europe/Brussels",
      "abbrs": [
        "WET",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET"
      ],
      "untils": [
        -1740355200000,
        -1693702800000,
        -1680483600000,
        -1663455600000,
        -1650150000000,
        -1632006000000,
        -1618700400000,
        -1613826000000,
        -1604278800000,
        -1585530000000,
        -1574038800000,
        -1552266000000,
        -1539997200000,
        -1520557200000,
        -1507510800000,
        -1490576400000,
        -1473642000000,
        -1459126800000,
        -1444006800000,
        -1427677200000,
        -1411952400000,
        -1396227600000,
        -1379293200000,
        -1364778000000,
        -1348448400000,
        -1333328400000,
        -1316394000000,
        -1301263200000,
        -1284328800000,
        -1269813600000,
        -1253484000000,
        -1238364000000,
        -1221429600000,
        -1206914400000,
        -1191189600000,
        -1175464800000,
        -1160344800000,
        -1143410400000,
        -1127685600000,
        -1111960800000,
        -1096840800000,
        -1080511200000,
        -1063576800000,
        -1049061600000,
        -1033336800000,
        -1017612000000,
        -1002492000000,
        -986162400000,
        -969228000000,
        -950479200000,
        -942012000000,
        -934668000000,
        -857257200000,
        -844556400000,
        -828226800000,
        -812502000000,
        -798073200000,
        -781052400000,
        -766623600000,
        -745455600000,
        -733273200000,
        228877200000,
        243997200000,
        260326800000,
        276051600000,
        291776400000,
        307501200000,
        323830800000,
        338950800000,
        354675600000,
        370400400000,
        386125200000,
        401850000000,
        417574800000,
        433299600000,
        449024400000,
        465354000000,
        481078800000,
        496803600000,
        512528400000,
        528253200000,
        543978000000,
        559702800000,
        575427600000,
        591152400000,
        606877200000,
        622602000000,
        638326800000,
        654656400000,
        670381200000,
        686106000000,
        701830800000,
        717555600000,
        733280400000,
        749005200000,
        764730000000,
        780454800000,
        796179600000,
        811904400000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        0,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60
      ]
    },
    {
      "name": "Europe/Bucharest",
      "abbrs": [
        "BMT",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET"
      ],
      "untils": [
        -1213148664000,
        -1187056800000,
        -1175479200000,
        -1159754400000,
        -1144029600000,
        -1127700000000,
        -1111975200000,
        -1096250400000,
        -1080525600000,
        -1064800800000,
        -1049076000000,
        -1033351200000,
        -1017626400000,
        -1001901600000,
        -986176800000,
        -970452000000,
        -954727200000,
        296604000000,
        307486800000,
        323816400000,
        338940000000,
        354672000000,
        370396800000,
        386121600000,
        401846400000,
        417571200000,
        433296000000,
        449020800000,
        465350400000,
        481075200000,
        496800000000,
        512524800000,
        528249600000,
        543974400000,
        559699200000,
        575424000000,
        591148800000,
        606873600000,
        622598400000,
        638323200000,
        654652800000,
        670370400000,
        686095200000,
        701820000000,
        717544800000,
        733269600000,
        748994400000,
        764719200000,
        780440400000,
        796168800000,
        811890000000,
        828223200000,
        846363600000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        -104.4,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120
      ]
    },
    {
      "name": "Europe/Budapest",
      "abbrs": [
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET"
      ],
      "untils": [
        -1693706400000,
        -1680483600000,
        -1663455600000,
        -1650150000000,
        -1633212000000,
        -1618700400000,
        -1600466400000,
        -1581202800000,
        -906771600000,
        -857257200000,
        -844556400000,
        -828226800000,
        -812502000000,
        -796777200000,
        -778471200000,
        -762660000000,
        -749689200000,
        -733359600000,
        -717634800000,
        -701910000000,
        -686185200000,
        -670460400000,
        -654130800000,
        -639010800000,
        -621990000000,
        -605660400000,
        -492656400000,
        -481168800000,
        -461120400000,
        -449632800000,
        -428547600000,
        -418269600000,
        -397094400000,
        -386809200000,
        323827200000,
        338950800000,
        354675600000,
        370400400000,
        386125200000,
        401850000000,
        417574800000,
        433299600000,
        449024400000,
        465354000000,
        481078800000,
        496803600000,
        512528400000,
        528253200000,
        543978000000,
        559702800000,
        575427600000,
        591152400000,
        606877200000,
        622602000000,
        638326800000,
        654656400000,
        670381200000,
        686106000000,
        701830800000,
        717555600000,
        733280400000,
        749005200000,
        764730000000,
        780454800000,
        796179600000,
        811904400000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60
      ]
    },
    {
      "name": "Europe/Busingen",
      "abbrs": [
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET"
      ],
      "untils": [
        -904435200000,
        -891129600000,
        -872985600000,
        -859680000000,
        354675600000,
        370400400000,
        386125200000,
        401850000000,
        417574800000,
        433299600000,
        449024400000,
        465354000000,
        481078800000,
        496803600000,
        512528400000,
        528253200000,
        543978000000,
        559702800000,
        575427600000,
        591152400000,
        606877200000,
        622602000000,
        638326800000,
        654656400000,
        670381200000,
        686106000000,
        701830800000,
        717555600000,
        733280400000,
        749005200000,
        764730000000,
        780454800000,
        796179600000,
        811904400000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60
      ]
    },
    {
      "name": "Europe/Chisinau",
      "abbrs": [
        "CMT",
        "BMT",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET"
      ],
      "untils": [
        -1637114100000,
        -1213148664000,
        -1187056800000,
        -1175479200000,
        -1159754400000,
        -1144029600000,
        -1127700000000,
        -1111975200000,
        -1096250400000,
        -1080525600000,
        -1064800800000,
        -1049076000000,
        -1033351200000,
        -1017626400000,
        -1001901600000,
        -986176800000,
        -970452000000,
        -954727200000,
        -927165600000,
        -898138800000,
        -857257200000,
        -844556400000,
        -828226800000,
        -812502000000,
        -800157600000,
        354920400000,
        370728000000,
        386456400000,
        402264000000,
        417992400000,
        433800000000,
        449614800000,
        465346800000,
        481071600000,
        496796400000,
        512521200000,
        528246000000,
        543970800000,
        559695600000,
        575420400000,
        591145200000,
        606870000000,
        622594800000,
        641941200000,
        670377600000,
        686102400000,
        701820000000,
        717541200000,
        733269600000,
        748990800000,
        764719200000,
        780440400000,
        796168800000,
        811890000000,
        828223200000,
        846363600000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        -115,
        -104.4,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -60,
        -120,
        -60,
        -120,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120
      ]
    },
    {
      "name": "Europe/Copenhagen",
      "abbrs": [
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET"
      ],
      "untils": [
        -1692496800000,
        -1680490800000,
        -935110800000,
        -857257200000,
        -844556400000,
        -828226800000,
        -812502000000,
        -796777200000,
        -781052400000,
        -769388400000,
        -747010800000,
        -736383600000,
        -715215600000,
        -706748400000,
        -683161200000,
        -675298800000,
        323830800000,
        338950800000,
        354675600000,
        370400400000,
        386125200000,
        401850000000,
        417574800000,
        433299600000,
        449024400000,
        465354000000,
        481078800000,
        496803600000,
        512528400000,
        528253200000,
        543978000000,
        559702800000,
        575427600000,
        591152400000,
        606877200000,
        622602000000,
        638326800000,
        654656400000,
        670381200000,
        686106000000,
        701830800000,
        717555600000,
        733280400000,
        749005200000,
        764730000000,
        780454800000,
        796179600000,
        811904400000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60
      ]
    },
    {
      "name": "Europe/Dublin",
      "abbrs": [
        "DMT",
        "IST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT",
        "IST",
        "GMT"
      ],
      "untils": [
        -1691962479000,
        -1680471279000,
        -1664143200000,
        -1650146400000,
        -1633903200000,
        -1617487200000,
        -1601848800000,
        -1586037600000,
        -1570399200000,
        -1552168800000,
        -1538344800000,
        -1522533600000,
        -1507500000000,
        -1490565600000,
        -1473631200000,
        -1460930400000,
        -1442786400000,
        -1428876000000,
        -1410732000000,
        -1396216800000,
        -1379282400000,
        -1364767200000,
        -1348437600000,
        -1333317600000,
        -1315778400000,
        -1301263200000,
        -1284328800000,
        -1269813600000,
        -1253484000000,
        -1238364000000,
        -1221429600000,
        -1206914400000,
        -1189980000000,
        -1175464800000,
        -1159135200000,
        -1143410400000,
        -1126476000000,
        -1111960800000,
        -1095631200000,
        -1080511200000,
        -1063576800000,
        -1049061600000,
        -1032127200000,
        -1017612000000,
        -1001282400000,
        -986162400000,
        -969228000000,
        -950479200000,
        -942012000000,
        -733359600000,
        -719445600000,
        -699490800000,
        -684972000000,
        -668037600000,
        -654732000000,
        -636588000000,
        -622072800000,
        -605743200000,
        -590623200000,
        -574293600000,
        -558568800000,
        -542239200000,
        -527119200000,
        -512604000000,
        -496274400000,
        -481154400000,
        -464220000000,
        -449704800000,
        -432165600000,
        -417650400000,
        -401320800000,
        -386200800000,
        -369266400000,
        -354751200000,
        -337816800000,
        -323301600000,
        -306972000000,
        -291852000000,
        -276732000000,
        -257983200000,
        -245282400000,
        -226533600000,
        -213228000000,
        -195084000000,
        -182383200000,
        -163634400000,
        -150933600000,
        -132184800000,
        -119484000000,
        -100735200000,
        -88034400000,
        -68680800000,
        -59004000000,
        57722400000,
        69818400000,
        89172000000,
        101268000000,
        120621600000,
        132717600000,
        152071200000,
        164167200000,
        183520800000,
        196221600000,
        214970400000,
        227671200000,
        246420000000,
        259120800000,
        278474400000,
        290570400000,
        309924000000,
        322020000000,
        341373600000,
        354675600000,
        372819600000,
        386125200000,
        404269200000,
        417574800000,
        435718800000,
        449024400000,
        467773200000,
        481078800000,
        499222800000,
        512528400000,
        530672400000,
        543978000000,
        562122000000,
        575427600000,
        593571600000,
        606877200000,
        625626000000,
        638326800000,
        657075600000,
        670381200000,
        688525200000,
        701830800000,
        719974800000,
        733280400000,
        751424400000,
        764730000000,
        782874000000,
        796179600000,
        814323600000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        25.35,
        -34.65,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0
      ]
    },
    {
      "name": "Europe/Gibraltar",
      "abbrs": [
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "BDST",
        "BST",
        "BDST",
        "BST",
        "BDST",
        "BST",
        "BDST",
        "BST",
        "BDST",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "BDST",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET"
      ],
      "untils": [
        -1691964000000,
        -1680472800000,
        -1664143200000,
        -1650146400000,
        -1633903200000,
        -1617487200000,
        -1601848800000,
        -1586037600000,
        -1570399200000,
        -1552168800000,
        -1538344800000,
        -1522533600000,
        -1507500000000,
        -1490565600000,
        -1473631200000,
        -1460930400000,
        -1442786400000,
        -1428876000000,
        -1410732000000,
        -1396216800000,
        -1379282400000,
        -1364767200000,
        -1348437600000,
        -1333317600000,
        -1315778400000,
        -1301263200000,
        -1284328800000,
        -1269813600000,
        -1253484000000,
        -1238364000000,
        -1221429600000,
        -1206914400000,
        -1189980000000,
        -1175464800000,
        -1159135200000,
        -1143410400000,
        -1126476000000,
        -1111960800000,
        -1095631200000,
        -1080511200000,
        -1063576800000,
        -1049061600000,
        -1032127200000,
        -1017612000000,
        -1001282400000,
        -986162400000,
        -969228000000,
        -950479200000,
        -942012000000,
        -904518000000,
        -896050800000,
        -875487600000,
        -864601200000,
        -844038000000,
        -832546800000,
        -812588400000,
        -798073200000,
        -781052400000,
        -772066800000,
        -764805600000,
        -748476000000,
        -733356000000,
        -719445600000,
        -717030000000,
        -706748400000,
        -699487200000,
        -687996000000,
        -668037600000,
        -654732000000,
        -636588000000,
        -622072800000,
        -605743200000,
        -590623200000,
        -574293600000,
        -558568800000,
        -542239200000,
        -527119200000,
        -512604000000,
        -496274400000,
        -481154400000,
        -464220000000,
        -449704800000,
        -432165600000,
        -417650400000,
        -401320800000,
        386125200000,
        401850000000,
        417574800000,
        433299600000,
        449024400000,
        465354000000,
        481078800000,
        496803600000,
        512528400000,
        528253200000,
        543978000000,
        559702800000,
        575427600000,
        591152400000,
        606877200000,
        622602000000,
        638326800000,
        654656400000,
        670381200000,
        686106000000,
        701830800000,
        717555600000,
        733280400000,
        749005200000,
        764730000000,
        780454800000,
        796179600000,
        811904400000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        0,
        -60,
        0,
        -60,
        -120,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60
      ]
    },
    {
      "name": "Europe/Guernsey",
      "abbrs": [
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "BDST",
        "BST",
        "BDST",
        "BST",
        "BDST",
        "BST",
        "BDST",
        "BST",
        "BDST",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "BDST",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT"
      ],
      "untils": [
        -1691964000000,
        -1680472800000,
        -1664143200000,
        -1650146400000,
        -1633903200000,
        -1617487200000,
        -1601848800000,
        -1586037600000,
        -1570399200000,
        -1552168800000,
        -1538344800000,
        -1522533600000,
        -1507500000000,
        -1490565600000,
        -1473631200000,
        -1460930400000,
        -1442786400000,
        -1428876000000,
        -1410732000000,
        -1396216800000,
        -1379282400000,
        -1364767200000,
        -1348437600000,
        -1333317600000,
        -1315778400000,
        -1301263200000,
        -1284328800000,
        -1269813600000,
        -1253484000000,
        -1238364000000,
        -1221429600000,
        -1206914400000,
        -1189980000000,
        -1175464800000,
        -1159135200000,
        -1143410400000,
        -1126476000000,
        -1111960800000,
        -1095631200000,
        -1080511200000,
        -1063576800000,
        -1049061600000,
        -1032127200000,
        -1017612000000,
        -1001282400000,
        -986162400000,
        -969228000000,
        -950479200000,
        -942012000000,
        -904518000000,
        -896050800000,
        -875487600000,
        -864601200000,
        -844038000000,
        -832546800000,
        -812588400000,
        -798073200000,
        -781052400000,
        -772066800000,
        -764805600000,
        -748476000000,
        -733356000000,
        -719445600000,
        -717030000000,
        -706748400000,
        -699487200000,
        -687996000000,
        -668037600000,
        -654732000000,
        -636588000000,
        -622072800000,
        -605743200000,
        -590623200000,
        -574293600000,
        -558568800000,
        -542239200000,
        -527119200000,
        -512604000000,
        -496274400000,
        -481154400000,
        -464220000000,
        -449704800000,
        -432165600000,
        -417650400000,
        -401320800000,
        -386200800000,
        -369266400000,
        -354751200000,
        -337816800000,
        -323301600000,
        -306972000000,
        -291852000000,
        -276732000000,
        -257983200000,
        -245282400000,
        -226533600000,
        -213228000000,
        -195084000000,
        -182383200000,
        -163634400000,
        -150933600000,
        -132184800000,
        -119484000000,
        -100735200000,
        -88034400000,
        -68680800000,
        -59004000000,
        57722400000,
        69818400000,
        89172000000,
        101268000000,
        120621600000,
        132717600000,
        152071200000,
        164167200000,
        183520800000,
        196221600000,
        214970400000,
        227671200000,
        246420000000,
        259120800000,
        278474400000,
        290570400000,
        309924000000,
        322020000000,
        341373600000,
        354675600000,
        372819600000,
        386125200000,
        404269200000,
        417574800000,
        435718800000,
        449024400000,
        467773200000,
        481078800000,
        499222800000,
        512528400000,
        530672400000,
        543978000000,
        562122000000,
        575427600000,
        593571600000,
        606877200000,
        625626000000,
        638326800000,
        657075600000,
        670381200000,
        688525200000,
        701830800000,
        719974800000,
        733280400000,
        751424400000,
        764730000000,
        782874000000,
        796179600000,
        814323600000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        0,
        -60,
        0,
        -60,
        -120,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0
      ]
    },
    {
      "name": "Europe/Helsinki",
      "abbrs": [
        "HMT",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET"
      ],
      "untils": [
        -1535938789000,
        -875671200000,
        -859773600000,
        354672000000,
        370396800000,
        386121600000,
        401846400000,
        417574800000,
        433299600000,
        449024400000,
        465354000000,
        481078800000,
        496803600000,
        512528400000,
        528253200000,
        543978000000,
        559702800000,
        575427600000,
        591152400000,
        606877200000,
        622602000000,
        638326800000,
        654656400000,
        670381200000,
        686106000000,
        701830800000,
        717555600000,
        733280400000,
        749005200000,
        764730000000,
        780454800000,
        796179600000,
        811904400000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        -99.8167,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120
      ]
    },
    {
      "name": "Europe/Isle_of_Man",
      "abbrs": [
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "BDST",
        "BST",
        "BDST",
        "BST",
        "BDST",
        "BST",
        "BDST",
        "BST",
        "BDST",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "BDST",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT"
      ],
      "untils": [
        -1691964000000,
        -1680472800000,
        -1664143200000,
        -1650146400000,
        -1633903200000,
        -1617487200000,
        -1601848800000,
        -1586037600000,
        -1570399200000,
        -1552168800000,
        -1538344800000,
        -1522533600000,
        -1507500000000,
        -1490565600000,
        -1473631200000,
        -1460930400000,
        -1442786400000,
        -1428876000000,
        -1410732000000,
        -1396216800000,
        -1379282400000,
        -1364767200000,
        -1348437600000,
        -1333317600000,
        -1315778400000,
        -1301263200000,
        -1284328800000,
        -1269813600000,
        -1253484000000,
        -1238364000000,
        -1221429600000,
        -1206914400000,
        -1189980000000,
        -1175464800000,
        -1159135200000,
        -1143410400000,
        -1126476000000,
        -1111960800000,
        -1095631200000,
        -1080511200000,
        -1063576800000,
        -1049061600000,
        -1032127200000,
        -1017612000000,
        -1001282400000,
        -986162400000,
        -969228000000,
        -950479200000,
        -942012000000,
        -904518000000,
        -896050800000,
        -875487600000,
        -864601200000,
        -844038000000,
        -832546800000,
        -812588400000,
        -798073200000,
        -781052400000,
        -772066800000,
        -764805600000,
        -748476000000,
        -733356000000,
        -719445600000,
        -717030000000,
        -706748400000,
        -699487200000,
        -687996000000,
        -668037600000,
        -654732000000,
        -636588000000,
        -622072800000,
        -605743200000,
        -590623200000,
        -574293600000,
        -558568800000,
        -542239200000,
        -527119200000,
        -512604000000,
        -496274400000,
        -481154400000,
        -464220000000,
        -449704800000,
        -432165600000,
        -417650400000,
        -401320800000,
        -386200800000,
        -369266400000,
        -354751200000,
        -337816800000,
        -323301600000,
        -306972000000,
        -291852000000,
        -276732000000,
        -257983200000,
        -245282400000,
        -226533600000,
        -213228000000,
        -195084000000,
        -182383200000,
        -163634400000,
        -150933600000,
        -132184800000,
        -119484000000,
        -100735200000,
        -88034400000,
        -68680800000,
        -59004000000,
        57722400000,
        69818400000,
        89172000000,
        101268000000,
        120621600000,
        132717600000,
        152071200000,
        164167200000,
        183520800000,
        196221600000,
        214970400000,
        227671200000,
        246420000000,
        259120800000,
        278474400000,
        290570400000,
        309924000000,
        322020000000,
        341373600000,
        354675600000,
        372819600000,
        386125200000,
        404269200000,
        417574800000,
        435718800000,
        449024400000,
        467773200000,
        481078800000,
        499222800000,
        512528400000,
        530672400000,
        543978000000,
        562122000000,
        575427600000,
        593571600000,
        606877200000,
        625626000000,
        638326800000,
        657075600000,
        670381200000,
        688525200000,
        701830800000,
        719974800000,
        733280400000,
        751424400000,
        764730000000,
        782874000000,
        796179600000,
        814323600000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        0,
        -60,
        0,
        -60,
        -120,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0
      ]
    },
    {
      "name": "Europe/Istanbul",
      "abbrs": [
        "IMT",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "TRST",
        "TRT",
        "TRST",
        "TRT",
        "TRST",
        "TRT",
        "TRST",
        "TRT",
        "TRST",
        "TRT",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET"
      ],
      "untils": [
        -1869875816000,
        -1693706400000,
        -1680490800000,
        -1570413600000,
        -1552186800000,
        -1538359200000,
        -1522551600000,
        -1507514400000,
        -1490583600000,
        -1440208800000,
        -1428030000000,
        -1409709600000,
        -1396494000000,
        -931140000000,
        -922762800000,
        -917834400000,
        -892436400000,
        -875844000000,
        -857358000000,
        -781063200000,
        -764737200000,
        -744343200000,
        -733806000000,
        -716436000000,
        -701924400000,
        -684986400000,
        -670474800000,
        -654141600000,
        -639025200000,
        -621828000000,
        -606970800000,
        -590032800000,
        -575434800000,
        -235620000000,
        -228279600000,
        -177732000000,
        -165726000000,
        10533600000,
        23835600000,
        41983200000,
        55285200000,
        74037600000,
        87339600000,
        107910000000,
        121219200000,
        133920000000,
        152676000000,
        165362400000,
        183502800000,
        202428000000,
        215557200000,
        228866400000,
        245797200000,
        260316000000,
        277246800000,
        308779200000,
        323827200000,
        340228800000,
        354672000000,
        371678400000,
        386121600000,
        403128000000,
        428446800000,
        433886400000,
        482792400000,
        496702800000,
        512524800000,
        528249600000,
        543974400000,
        559699200000,
        575424000000,
        591148800000,
        606873600000,
        622598400000,
        638323200000,
        654652800000,
        670374000000,
        686098800000,
        701823600000,
        717548400000,
        733273200000,
        748998000000,
        764722800000,
        780447600000,
        796172400000,
        811897200000,
        828226800000,
        846370800000,
        859676400000,
        877820400000,
        891126000000,
        909270000000,
        922575600000,
        941324400000,
        954025200000,
        972774000000,
        985474800000,
        1004223600000,
        1017529200000,
        1035673200000,
        1048978800000,
        1067122800000,
        1080428400000,
        1099177200000,
        1111878000000,
        1130626800000,
        1143327600000,
        1162076400000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301274000000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396227600000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        -116.9333,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120
      ]
    },
    {
      "name": "Europe/Jersey",
      "abbrs": [
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "BDST",
        "BST",
        "BDST",
        "BST",
        "BDST",
        "BST",
        "BDST",
        "BST",
        "BDST",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "BDST",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT"
      ],
      "untils": [
        -1691964000000,
        -1680472800000,
        -1664143200000,
        -1650146400000,
        -1633903200000,
        -1617487200000,
        -1601848800000,
        -1586037600000,
        -1570399200000,
        -1552168800000,
        -1538344800000,
        -1522533600000,
        -1507500000000,
        -1490565600000,
        -1473631200000,
        -1460930400000,
        -1442786400000,
        -1428876000000,
        -1410732000000,
        -1396216800000,
        -1379282400000,
        -1364767200000,
        -1348437600000,
        -1333317600000,
        -1315778400000,
        -1301263200000,
        -1284328800000,
        -1269813600000,
        -1253484000000,
        -1238364000000,
        -1221429600000,
        -1206914400000,
        -1189980000000,
        -1175464800000,
        -1159135200000,
        -1143410400000,
        -1126476000000,
        -1111960800000,
        -1095631200000,
        -1080511200000,
        -1063576800000,
        -1049061600000,
        -1032127200000,
        -1017612000000,
        -1001282400000,
        -986162400000,
        -969228000000,
        -950479200000,
        -942012000000,
        -904518000000,
        -896050800000,
        -875487600000,
        -864601200000,
        -844038000000,
        -832546800000,
        -812588400000,
        -798073200000,
        -781052400000,
        -772066800000,
        -764805600000,
        -748476000000,
        -733356000000,
        -719445600000,
        -717030000000,
        -706748400000,
        -699487200000,
        -687996000000,
        -668037600000,
        -654732000000,
        -636588000000,
        -622072800000,
        -605743200000,
        -590623200000,
        -574293600000,
        -558568800000,
        -542239200000,
        -527119200000,
        -512604000000,
        -496274400000,
        -481154400000,
        -464220000000,
        -449704800000,
        -432165600000,
        -417650400000,
        -401320800000,
        -386200800000,
        -369266400000,
        -354751200000,
        -337816800000,
        -323301600000,
        -306972000000,
        -291852000000,
        -276732000000,
        -257983200000,
        -245282400000,
        -226533600000,
        -213228000000,
        -195084000000,
        -182383200000,
        -163634400000,
        -150933600000,
        -132184800000,
        -119484000000,
        -100735200000,
        -88034400000,
        -68680800000,
        -59004000000,
        57722400000,
        69818400000,
        89172000000,
        101268000000,
        120621600000,
        132717600000,
        152071200000,
        164167200000,
        183520800000,
        196221600000,
        214970400000,
        227671200000,
        246420000000,
        259120800000,
        278474400000,
        290570400000,
        309924000000,
        322020000000,
        341373600000,
        354675600000,
        372819600000,
        386125200000,
        404269200000,
        417574800000,
        435718800000,
        449024400000,
        467773200000,
        481078800000,
        499222800000,
        512528400000,
        530672400000,
        543978000000,
        562122000000,
        575427600000,
        593571600000,
        606877200000,
        625626000000,
        638326800000,
        657075600000,
        670381200000,
        688525200000,
        701830800000,
        719974800000,
        733280400000,
        751424400000,
        764730000000,
        782874000000,
        796179600000,
        814323600000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        0,
        -60,
        0,
        -60,
        -120,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0
      ]
    },
    {
      "name": "Europe/Kaliningrad",
      "abbrs": [
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CET",
        "CEST",
        "CET",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "FET",
        "EET"
      ],
      "untils": [
        -1693706400000,
        -1680483600000,
        -1663455600000,
        -1650150000000,
        -1632006000000,
        -1618700400000,
        -938905200000,
        -857257200000,
        -844556400000,
        -828226800000,
        -812502000000,
        -796777200000,
        -788922000000,
        -778730400000,
        -762663600000,
        -757389600000,
        354920400000,
        370728000000,
        386456400000,
        402264000000,
        417992400000,
        433800000000,
        449614800000,
        465346800000,
        481071600000,
        496796400000,
        512521200000,
        528246000000,
        543970800000,
        559695600000,
        575420400000,
        591145200000,
        606870000000,
        622594800000,
        638319600000,
        654649200000,
        670374000000,
        686102400000,
        701816400000,
        717537600000,
        733276800000,
        749001600000,
        764726400000,
        780451200000,
        796176000000,
        811900800000,
        828230400000,
        846374400000,
        859680000000,
        877824000000,
        891129600000,
        909273600000,
        922579200000,
        941328000000,
        954028800000,
        972777600000,
        985478400000,
        1004227200000,
        1017532800000,
        1035676800000,
        1048982400000,
        1067126400000,
        1080432000000,
        1099180800000,
        1111881600000,
        1130630400000,
        1143331200000,
        1162080000000,
        1174780800000,
        1193529600000,
        1206835200000,
        1224979200000,
        1238284800000,
        1256428800000,
        1269734400000,
        1288483200000,
        1301184000000,
        1414278000000,
        null
      ],
      "offsets": [
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -180,
        -120,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120
      ]
    },
    {
      "name": "Europe/Kiev",
      "abbrs": [
        "KMT",
        "EET",
        "MSK",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET"
      ],
      "untils": [
        -1441159324000,
        -1247536800000,
        -892522800000,
        -857257200000,
        -844556400000,
        -828226800000,
        -825382800000,
        354920400000,
        370728000000,
        386456400000,
        402264000000,
        417992400000,
        433800000000,
        449614800000,
        465346800000,
        481071600000,
        496796400000,
        512521200000,
        528246000000,
        543970800000,
        559695600000,
        575420400000,
        591145200000,
        606870000000,
        622594800000,
        638319600000,
        646783200000,
        686102400000,
        701820000000,
        717541200000,
        733269600000,
        748990800000,
        764719200000,
        780440400000,
        796179600000,
        811904400000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        -122.0667,
        -120,
        -180,
        -120,
        -60,
        -120,
        -60,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120
      ]
    },
    {
      "name": "Europe/Lisbon",
      "abbrs": [
        "LMT",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WEMT",
        "WEST",
        "WET",
        "WEST",
        "WEMT",
        "WEST",
        "WET",
        "WEST",
        "WEMT",
        "WEST",
        "WET",
        "WEST",
        "WEMT",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "CET",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET"
      ],
      "untils": [
        -1830381795000,
        -1689555600000,
        -1677801600000,
        -1667437200000,
        -1647738000000,
        -1635814800000,
        -1616202000000,
        -1604365200000,
        -1584666000000,
        -1572742800000,
        -1553043600000,
        -1541206800000,
        -1521507600000,
        -1442451600000,
        -1426813200000,
        -1379293200000,
        -1364778000000,
        -1348448400000,
        -1333328400000,
        -1316394000000,
        -1301274000000,
        -1284339600000,
        -1269824400000,
        -1221440400000,
        -1206925200000,
        -1191200400000,
        -1175475600000,
        -1127696400000,
        -1111971600000,
        -1096851600000,
        -1080522000000,
        -1063587600000,
        -1049072400000,
        -1033347600000,
        -1017622800000,
        -1002502800000,
        -986173200000,
        -969238800000,
        -950490000000,
        -942022800000,
        -922669200000,
        -906944400000,
        -891133200000,
        -877309200000,
        -873684000000,
        -864007200000,
        -857955600000,
        -845859600000,
        -842839200000,
        -831348000000,
        -825901200000,
        -814410000000,
        -810784800000,
        -799898400000,
        -794451600000,
        -782960400000,
        -779335200000,
        -768448800000,
        -763002000000,
        -749091600000,
        -733366800000,
        -717631200000,
        -701906400000,
        -686181600000,
        -670456800000,
        -654732000000,
        -639007200000,
        -591832800000,
        -575503200000,
        -559778400000,
        -544053600000,
        -528328800000,
        -512604000000,
        -496879200000,
        -481154400000,
        -465429600000,
        -449704800000,
        -433980000000,
        -417650400000,
        -401925600000,
        -386200800000,
        -370476000000,
        -354751200000,
        -339026400000,
        -323301600000,
        -307576800000,
        -291852000000,
        -276127200000,
        -260402400000,
        -244677600000,
        -228348000000,
        -212623200000,
        -196898400000,
        -181173600000,
        -165448800000,
        -149724000000,
        -133999200000,
        -118274400000,
        212544000000,
        228268800000,
        243993600000,
        260323200000,
        276048000000,
        291772800000,
        307501200000,
        323222400000,
        338950800000,
        354675600000,
        370400400000,
        386125200000,
        401850000000,
        417578400000,
        433299600000,
        449024400000,
        465354000000,
        481078800000,
        496803600000,
        512528400000,
        528253200000,
        543978000000,
        559702800000,
        575427600000,
        591152400000,
        606877200000,
        622602000000,
        638326800000,
        654656400000,
        670381200000,
        686106000000,
        701830800000,
        717555600000,
        733280400000,
        749005200000,
        764730000000,
        780454800000,
        796179600000,
        811904400000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        36.75,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        -120,
        -60,
        0,
        -60,
        -120,
        -60,
        0,
        -60,
        -120,
        -60,
        0,
        -60,
        -120,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0
      ]
    },
    {
      "name": "Europe/Ljubljana",
      "abbrs": [
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET"
      ],
      "untils": [
        -905824800000,
        -857257200000,
        -844556400000,
        -828226800000,
        -812502000000,
        -796777200000,
        -777942000000,
        -766623600000,
        417574800000,
        433299600000,
        449024400000,
        465354000000,
        481078800000,
        496803600000,
        512528400000,
        528253200000,
        543978000000,
        559702800000,
        575427600000,
        591152400000,
        606877200000,
        622602000000,
        638326800000,
        654656400000,
        670381200000,
        686106000000,
        701830800000,
        717555600000,
        733280400000,
        749005200000,
        764730000000,
        780454800000,
        796179600000,
        811904400000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60
      ]
    },
    {
      "name": "Europe/London",
      "abbrs": [
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "BDST",
        "BST",
        "BDST",
        "BST",
        "BDST",
        "BST",
        "BDST",
        "BST",
        "BDST",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "BDST",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT"
      ],
      "untils": [
        -1691964000000,
        -1680472800000,
        -1664143200000,
        -1650146400000,
        -1633903200000,
        -1617487200000,
        -1601848800000,
        -1586037600000,
        -1570399200000,
        -1552168800000,
        -1538344800000,
        -1522533600000,
        -1507500000000,
        -1490565600000,
        -1473631200000,
        -1460930400000,
        -1442786400000,
        -1428876000000,
        -1410732000000,
        -1396216800000,
        -1379282400000,
        -1364767200000,
        -1348437600000,
        -1333317600000,
        -1315778400000,
        -1301263200000,
        -1284328800000,
        -1269813600000,
        -1253484000000,
        -1238364000000,
        -1221429600000,
        -1206914400000,
        -1189980000000,
        -1175464800000,
        -1159135200000,
        -1143410400000,
        -1126476000000,
        -1111960800000,
        -1095631200000,
        -1080511200000,
        -1063576800000,
        -1049061600000,
        -1032127200000,
        -1017612000000,
        -1001282400000,
        -986162400000,
        -969228000000,
        -950479200000,
        -942012000000,
        -904518000000,
        -896050800000,
        -875487600000,
        -864601200000,
        -844038000000,
        -832546800000,
        -812588400000,
        -798073200000,
        -781052400000,
        -772066800000,
        -764805600000,
        -748476000000,
        -733356000000,
        -719445600000,
        -717030000000,
        -706748400000,
        -699487200000,
        -687996000000,
        -668037600000,
        -654732000000,
        -636588000000,
        -622072800000,
        -605743200000,
        -590623200000,
        -574293600000,
        -558568800000,
        -542239200000,
        -527119200000,
        -512604000000,
        -496274400000,
        -481154400000,
        -464220000000,
        -449704800000,
        -432165600000,
        -417650400000,
        -401320800000,
        -386200800000,
        -369266400000,
        -354751200000,
        -337816800000,
        -323301600000,
        -306972000000,
        -291852000000,
        -276732000000,
        -257983200000,
        -245282400000,
        -226533600000,
        -213228000000,
        -195084000000,
        -182383200000,
        -163634400000,
        -150933600000,
        -132184800000,
        -119484000000,
        -100735200000,
        -88034400000,
        -68680800000,
        -59004000000,
        57722400000,
        69818400000,
        89172000000,
        101268000000,
        120621600000,
        132717600000,
        152071200000,
        164167200000,
        183520800000,
        196221600000,
        214970400000,
        227671200000,
        246420000000,
        259120800000,
        278474400000,
        290570400000,
        309924000000,
        322020000000,
        341373600000,
        354675600000,
        372819600000,
        386125200000,
        404269200000,
        417574800000,
        435718800000,
        449024400000,
        467773200000,
        481078800000,
        499222800000,
        512528400000,
        530672400000,
        543978000000,
        562122000000,
        575427600000,
        593571600000,
        606877200000,
        625626000000,
        638326800000,
        657075600000,
        670381200000,
        688525200000,
        701830800000,
        719974800000,
        733280400000,
        751424400000,
        764730000000,
        782874000000,
        796179600000,
        814323600000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        0,
        -60,
        0,
        -60,
        -120,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0
      ]
    },
    {
      "name": "Europe/Luxembourg",
      "abbrs": [
        "LMT",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET"
      ],
      "untils": [
        -2069713476000,
        -1692496800000,
        -1680483600000,
        -1662343200000,
        -1650157200000,
        -1632006000000,
        -1618700400000,
        -1612659600000,
        -1604278800000,
        -1585519200000,
        -1574038800000,
        -1552258800000,
        -1539997200000,
        -1520550000000,
        -1507510800000,
        -1490572800000,
        -1473642000000,
        -1459119600000,
        -1444006800000,
        -1427673600000,
        -1411866000000,
        -1396224000000,
        -1379293200000,
        -1364774400000,
        -1348448400000,
        -1333324800000,
        -1316394000000,
        -1301270400000,
        -1284339600000,
        -1269813600000,
        -1253484000000,
        -1238364000000,
        -1221429600000,
        -1206914400000,
        -1191189600000,
        -1175464800000,
        -1160344800000,
        -1143410400000,
        -1127685600000,
        -1111960800000,
        -1096840800000,
        -1080511200000,
        -1063576800000,
        -1049061600000,
        -1033336800000,
        -1017612000000,
        -1002492000000,
        -986162400000,
        -969228000000,
        -950479200000,
        -942012000000,
        -935186400000,
        -857257200000,
        -844556400000,
        -828226800000,
        -812502000000,
        -797986800000,
        -781052400000,
        -766623600000,
        -745455600000,
        -733273200000,
        228877200000,
        243997200000,
        260326800000,
        276051600000,
        291776400000,
        307501200000,
        323830800000,
        338950800000,
        354675600000,
        370400400000,
        386125200000,
        401850000000,
        417574800000,
        433299600000,
        449024400000,
        465354000000,
        481078800000,
        496803600000,
        512528400000,
        528253200000,
        543978000000,
        559702800000,
        575427600000,
        591152400000,
        606877200000,
        622602000000,
        638326800000,
        654656400000,
        670381200000,
        686106000000,
        701830800000,
        717555600000,
        733280400000,
        749005200000,
        764730000000,
        780454800000,
        796179600000,
        811904400000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        -24.6,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60
      ]
    },
    {
      "name": "Europe/Madrid",
      "abbrs": [
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WEMT",
        "WEST",
        "WEMT",
        "WEST",
        "WEMT",
        "WEST",
        "WEMT",
        "WEST",
        "WEMT",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET"
      ],
      "untils": [
        -1661734800000,
        -1648429200000,
        -1631926800000,
        -1616893200000,
        -1601254800000,
        -1585357200000,
        -1442451600000,
        -1427677200000,
        -1379293200000,
        -1364778000000,
        -1348448400000,
        -1333328400000,
        -1316394000000,
        -1301274000000,
        -1284339600000,
        -1269824400000,
        -1029114000000,
        -1017622800000,
        -1002848400000,
        -986173200000,
        -969238800000,
        -954118800000,
        -940208400000,
        -873079200000,
        -862538400000,
        -842839200000,
        -828237600000,
        -811389600000,
        -796010400000,
        -779940000000,
        -765421200000,
        -748490400000,
        -733888800000,
        -652327200000,
        -639190800000,
        135122400000,
        150246000000,
        167176800000,
        181695600000,
        196812000000,
        212540400000,
        228866400000,
        243990000000,
        260402400000,
        276044400000,
        291776400000,
        307501200000,
        323830800000,
        338950800000,
        354675600000,
        370400400000,
        386125200000,
        401850000000,
        417574800000,
        433299600000,
        449024400000,
        465354000000,
        481078800000,
        496803600000,
        512528400000,
        528253200000,
        543978000000,
        559702800000,
        575427600000,
        591152400000,
        606877200000,
        622602000000,
        638326800000,
        654656400000,
        670381200000,
        686106000000,
        701830800000,
        717555600000,
        733280400000,
        749005200000,
        764730000000,
        780454800000,
        796179600000,
        811904400000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60
      ]
    },
    {
      "name": "Europe/Malta",
      "abbrs": [
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET"
      ],
      "untils": [
        -1690851600000,
        -1680483600000,
        -1664758800000,
        -1649034000000,
        -1635123600000,
        -1616979600000,
        -1604278800000,
        -1585530000000,
        -1571014800000,
        -1555290000000,
        -932432400000,
        -857257200000,
        -844556400000,
        -828226800000,
        -812502000000,
        -796777200000,
        -781052400000,
        -766717200000,
        -750898800000,
        -733359600000,
        -719456400000,
        -701917200000,
        -689209200000,
        -670460400000,
        -114051600000,
        -103168800000,
        -81997200000,
        -71719200000,
        -50547600000,
        -40269600000,
        -18493200000,
        -8215200000,
        12956400000,
        23234400000,
        43801200000,
        54687600000,
        75855600000,
        86738400000,
        102380400000,
        118105200000,
        135730800000,
        148518000000,
        167187600000,
        180489600000,
        198637200000,
        211939200000,
        230086800000,
        243388800000,
        261536400000,
        274838400000,
        292986000000,
        306288000000,
        323312400000,
        338342400000,
        354675600000,
        370400400000,
        386125200000,
        401850000000,
        417574800000,
        433299600000,
        449024400000,
        465354000000,
        481078800000,
        496803600000,
        512528400000,
        528253200000,
        543978000000,
        559702800000,
        575427600000,
        591152400000,
        606877200000,
        622602000000,
        638326800000,
        654656400000,
        670381200000,
        686106000000,
        701830800000,
        717555600000,
        733280400000,
        749005200000,
        764730000000,
        780454800000,
        796179600000,
        811904400000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60
      ]
    },
    {
      "name": "Europe/Mariehamn",
      "abbrs": [
        "HMT",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET"
      ],
      "untils": [
        -1535938789000,
        -875671200000,
        -859773600000,
        354672000000,
        370396800000,
        386121600000,
        401846400000,
        417574800000,
        433299600000,
        449024400000,
        465354000000,
        481078800000,
        496803600000,
        512528400000,
        528253200000,
        543978000000,
        559702800000,
        575427600000,
        591152400000,
        606877200000,
        622602000000,
        638326800000,
        654656400000,
        670381200000,
        686106000000,
        701830800000,
        717555600000,
        733280400000,
        749005200000,
        764730000000,
        780454800000,
        796179600000,
        811904400000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        -99.8167,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120
      ]
    },
    {
      "name": "Europe/Minsk",
      "abbrs": [
        "MMT",
        "EET",
        "MSK",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "FET",
        "MSK"
      ],
      "untils": [
        -1441158600000,
        -1247536800000,
        -899780400000,
        -857257200000,
        -844556400000,
        -828226800000,
        -812502000000,
        -804650400000,
        354920400000,
        370728000000,
        386456400000,
        402264000000,
        417992400000,
        433800000000,
        449614800000,
        465346800000,
        481071600000,
        496796400000,
        512521200000,
        528246000000,
        543970800000,
        559695600000,
        575420400000,
        591145200000,
        606870000000,
        622594800000,
        670374000000,
        686102400000,
        701820000000,
        717544800000,
        733276800000,
        749001600000,
        764726400000,
        780451200000,
        796176000000,
        811900800000,
        828230400000,
        846374400000,
        859680000000,
        877824000000,
        891129600000,
        909273600000,
        922579200000,
        941328000000,
        954028800000,
        972777600000,
        985478400000,
        1004227200000,
        1017532800000,
        1035676800000,
        1048982400000,
        1067126400000,
        1080432000000,
        1099180800000,
        1111881600000,
        1130630400000,
        1143331200000,
        1162080000000,
        1174780800000,
        1193529600000,
        1206835200000,
        1224979200000,
        1238284800000,
        1256428800000,
        1269734400000,
        1288483200000,
        1301184000000,
        1414274400000,
        null
      ],
      "offsets": [
        -110,
        -120,
        -180,
        -120,
        -60,
        -120,
        -60,
        -120,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -180
      ]
    },
    {
      "name": "Europe/Monaco",
      "abbrs": [
        "PMT",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WEMT",
        "WEST",
        "WEMT",
        "WEST",
        "WEMT",
        "WEST",
        "WEMT",
        "WEST",
        "WEMT",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET"
      ],
      "untils": [
        -1855958961000,
        -1689814800000,
        -1680397200000,
        -1665363600000,
        -1648342800000,
        -1635123600000,
        -1616893200000,
        -1604278800000,
        -1585443600000,
        -1574038800000,
        -1552266000000,
        -1539997200000,
        -1520557200000,
        -1507510800000,
        -1490576400000,
        -1470618000000,
        -1459126800000,
        -1444006800000,
        -1427677200000,
        -1411952400000,
        -1396227600000,
        -1379293200000,
        -1364778000000,
        -1348448400000,
        -1333328400000,
        -1316394000000,
        -1301274000000,
        -1284339600000,
        -1269824400000,
        -1253494800000,
        -1238374800000,
        -1221440400000,
        -1206925200000,
        -1191200400000,
        -1175475600000,
        -1160355600000,
        -1143421200000,
        -1127696400000,
        -1111971600000,
        -1096851600000,
        -1080522000000,
        -1063587600000,
        -1049072400000,
        -1033347600000,
        -1017622800000,
        -1002502800000,
        -986173200000,
        -969238800000,
        -950490000000,
        -942012000000,
        -904438800000,
        -891136800000,
        -877827600000,
        -857257200000,
        -844556400000,
        -828226800000,
        -812502000000,
        -796266000000,
        -781052400000,
        -766623600000,
        196819200000,
        212540400000,
        228877200000,
        243997200000,
        260326800000,
        276051600000,
        291776400000,
        307501200000,
        323830800000,
        338950800000,
        354675600000,
        370400400000,
        386125200000,
        401850000000,
        417574800000,
        433299600000,
        449024400000,
        465354000000,
        481078800000,
        496803600000,
        512528400000,
        528253200000,
        543978000000,
        559702800000,
        575427600000,
        591152400000,
        606877200000,
        622602000000,
        638326800000,
        654656400000,
        670381200000,
        686106000000,
        701830800000,
        717555600000,
        733280400000,
        749005200000,
        764730000000,
        780454800000,
        796179600000,
        811904400000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        -9.35,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60
      ]
    },
    {
      "name": "Europe/Moscow",
      "abbrs": [
        "MMT",
        "MMT",
        "MST",
        "MMT",
        "MDST",
        "MST",
        "MDST",
        "MSD",
        "MSK",
        "MSD",
        "MSM",
        "MSD",
        "MSK",
        "EET",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "EEST",
        "EET",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSK",
        "MSK"
      ],
      "untils": [
        -1688265017000,
        -1656819079000,
        -1641353479000,
        -1627965079000,
        -1618716679000,
        -1596429079000,
        -1593829879000,
        -1589860800000,
        -1542427200000,
        -1539493200000,
        -1525323600000,
        -1522728000000,
        -1491188400000,
        -1247536800000,
        354920400000,
        370728000000,
        386456400000,
        402264000000,
        417992400000,
        433800000000,
        449614800000,
        465346800000,
        481071600000,
        496796400000,
        512521200000,
        528246000000,
        543970800000,
        559695600000,
        575420400000,
        591145200000,
        606870000000,
        622594800000,
        638319600000,
        654649200000,
        670374000000,
        686102400000,
        695779200000,
        701812800000,
        717534000000,
        733273200000,
        748998000000,
        764722800000,
        780447600000,
        796172400000,
        811897200000,
        828226800000,
        846370800000,
        859676400000,
        877820400000,
        891126000000,
        909270000000,
        922575600000,
        941324400000,
        954025200000,
        972774000000,
        985474800000,
        1004223600000,
        1017529200000,
        1035673200000,
        1048978800000,
        1067122800000,
        1080428400000,
        1099177200000,
        1111878000000,
        1130626800000,
        1143327600000,
        1162076400000,
        1174777200000,
        1193526000000,
        1206831600000,
        1224975600000,
        1238281200000,
        1256425200000,
        1269730800000,
        1288479600000,
        1301180400000,
        1414274400000,
        null
      ],
      "offsets": [
        -150.2833,
        -151.3167,
        -211.3167,
        -151.3167,
        -271.3167,
        -211.3167,
        -271.3167,
        -240,
        -180,
        -240,
        -300,
        -240,
        -180,
        -120,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -180,
        -120,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180
      ]
    },
    {
      "name": "Europe/Nicosia",
      "abbrs": [
        "LMT",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET"
      ],
      "untils": [
        -1518920008000,
        166572000000,
        182293200000,
        200959200000,
        213829200000,
        228866400000,
        243982800000,
        260316000000,
        276123600000,
        291765600000,
        307486800000,
        323820000000,
        338936400000,
        354664800000,
        370386000000,
        386114400000,
        401835600000,
        417564000000,
        433285200000,
        449013600000,
        465339600000,
        481068000000,
        496789200000,
        512517600000,
        528238800000,
        543967200000,
        559688400000,
        575416800000,
        591138000000,
        606866400000,
        622587600000,
        638316000000,
        654642000000,
        670370400000,
        686091600000,
        701820000000,
        717541200000,
        733269600000,
        748990800000,
        764719200000,
        780440400000,
        796168800000,
        811890000000,
        828223200000,
        843944400000,
        859672800000,
        875394000000,
        891122400000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        -133.4667,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120
      ]
    },
    {
      "name": "Europe/Oslo",
      "abbrs": [
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET"
      ],
      "untils": [
        -1691884800000,
        -1680573600000,
        -927511200000,
        -857257200000,
        -844556400000,
        -828226800000,
        -812502000000,
        -796777200000,
        -781052400000,
        -765327600000,
        -340844400000,
        -324514800000,
        -308790000000,
        -293065200000,
        -277340400000,
        -261615600000,
        -245890800000,
        -230166000000,
        -214441200000,
        -198716400000,
        -182991600000,
        -166662000000,
        -147913200000,
        -135212400000,
        323830800000,
        338950800000,
        354675600000,
        370400400000,
        386125200000,
        401850000000,
        417574800000,
        433299600000,
        449024400000,
        465354000000,
        481078800000,
        496803600000,
        512528400000,
        528253200000,
        543978000000,
        559702800000,
        575427600000,
        591152400000,
        606877200000,
        622602000000,
        638326800000,
        654656400000,
        670381200000,
        686106000000,
        701830800000,
        717555600000,
        733280400000,
        749005200000,
        764730000000,
        780454800000,
        796179600000,
        811904400000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60
      ]
    },
    {
      "name": "Europe/Paris",
      "abbrs": [
        "PMT",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "WEMT",
        "WEST",
        "WEMT",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET"
      ],
      "untils": [
        -1855958901000,
        -1689814800000,
        -1680397200000,
        -1665363600000,
        -1648342800000,
        -1635123600000,
        -1616893200000,
        -1604278800000,
        -1585443600000,
        -1574038800000,
        -1552266000000,
        -1539997200000,
        -1520557200000,
        -1507510800000,
        -1490576400000,
        -1470618000000,
        -1459126800000,
        -1444006800000,
        -1427677200000,
        -1411952400000,
        -1396227600000,
        -1379293200000,
        -1364778000000,
        -1348448400000,
        -1333328400000,
        -1316394000000,
        -1301274000000,
        -1284339600000,
        -1269824400000,
        -1253494800000,
        -1238374800000,
        -1221440400000,
        -1206925200000,
        -1191200400000,
        -1175475600000,
        -1160355600000,
        -1143421200000,
        -1127696400000,
        -1111971600000,
        -1096851600000,
        -1080522000000,
        -1063587600000,
        -1049072400000,
        -1033347600000,
        -1017622800000,
        -1002502800000,
        -986173200000,
        -969238800000,
        -950490000000,
        -942012000000,
        -932436000000,
        -857257200000,
        -844556400000,
        -828226800000,
        -812502000000,
        -800071200000,
        -796266000000,
        -781052400000,
        -766623600000,
        196819200000,
        212540400000,
        228877200000,
        243997200000,
        260326800000,
        276051600000,
        291776400000,
        307501200000,
        323830800000,
        338950800000,
        354675600000,
        370400400000,
        386125200000,
        401850000000,
        417574800000,
        433299600000,
        449024400000,
        465354000000,
        481078800000,
        496803600000,
        512528400000,
        528253200000,
        543978000000,
        559702800000,
        575427600000,
        591152400000,
        606877200000,
        622602000000,
        638326800000,
        654656400000,
        670381200000,
        686106000000,
        701830800000,
        717555600000,
        733280400000,
        749005200000,
        764730000000,
        780454800000,
        796179600000,
        811904400000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        -9.35,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60
      ]
    },
    {
      "name": "Europe/Podgorica",
      "abbrs": [
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET"
      ],
      "untils": [
        -905824800000,
        -857257200000,
        -844556400000,
        -828226800000,
        -812502000000,
        -796777200000,
        -777942000000,
        -766623600000,
        417574800000,
        433299600000,
        449024400000,
        465354000000,
        481078800000,
        496803600000,
        512528400000,
        528253200000,
        543978000000,
        559702800000,
        575427600000,
        591152400000,
        606877200000,
        622602000000,
        638326800000,
        654656400000,
        670381200000,
        686106000000,
        701830800000,
        717555600000,
        733280400000,
        749005200000,
        764730000000,
        780454800000,
        796179600000,
        811904400000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60
      ]
    },
    {
      "name": "Europe/Prague",
      "abbrs": [
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET"
      ],
      "untils": [
        -1693706400000,
        -1680483600000,
        -1663455600000,
        -1650150000000,
        -1632006000000,
        -1618700400000,
        -938905200000,
        -857257200000,
        -844556400000,
        -828226800000,
        -812502000000,
        -798073200000,
        -780534000000,
        -761180400000,
        -746578800000,
        -733359600000,
        -716425200000,
        -701910000000,
        -684975600000,
        -670460400000,
        -654217200000,
        -639010800000,
        291776400000,
        307501200000,
        323830800000,
        338950800000,
        354675600000,
        370400400000,
        386125200000,
        401850000000,
        417574800000,
        433299600000,
        449024400000,
        465354000000,
        481078800000,
        496803600000,
        512528400000,
        528253200000,
        543978000000,
        559702800000,
        575427600000,
        591152400000,
        606877200000,
        622602000000,
        638326800000,
        654656400000,
        670381200000,
        686106000000,
        701830800000,
        717555600000,
        733280400000,
        749005200000,
        764730000000,
        780454800000,
        796179600000,
        811904400000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60
      ]
    },
    {
      "name": "Europe/Riga",
      "abbrs": [
        "RMT",
        "LST",
        "RMT",
        "LST",
        "RMT",
        "EET",
        "MSK",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET"
      ],
      "untils": [
        -1632008194000,
        -1618702594000,
        -1601681794000,
        -1597275394000,
        -1377308194000,
        -928029600000,
        -899521200000,
        -857257200000,
        -844556400000,
        -828226800000,
        -812502000000,
        -796777200000,
        -795834000000,
        354920400000,
        370728000000,
        386456400000,
        402264000000,
        417992400000,
        433800000000,
        449614800000,
        465346800000,
        481071600000,
        496796400000,
        512521200000,
        528246000000,
        543970800000,
        559695600000,
        575420400000,
        591145200000,
        606870000000,
        622598400000,
        638323200000,
        654652800000,
        670377600000,
        686102400000,
        701827200000,
        717552000000,
        733276800000,
        749001600000,
        764726400000,
        780451200000,
        796176000000,
        811900800000,
        828230400000,
        843955200000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        -96.5667,
        -156.5667,
        -96.5667,
        -156.5667,
        -96.5667,
        -120,
        -180,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120
      ]
    },
    {
      "name": "Europe/Rome",
      "abbrs": [
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET"
      ],
      "untils": [
        -1690851600000,
        -1680483600000,
        -1664758800000,
        -1649034000000,
        -1635123600000,
        -1616979600000,
        -1604278800000,
        -1585530000000,
        -1571014800000,
        -1555290000000,
        -932432400000,
        -857257200000,
        -844556400000,
        -828226800000,
        -812502000000,
        -798080400000,
        -781052400000,
        -766717200000,
        -750898800000,
        -733359600000,
        -719456400000,
        -701917200000,
        -689209200000,
        -670460400000,
        -114051600000,
        -103168800000,
        -81997200000,
        -71719200000,
        -50547600000,
        -40269600000,
        -18493200000,
        -8215200000,
        12956400000,
        23234400000,
        43801200000,
        54687600000,
        75855600000,
        86738400000,
        107910000000,
        118188000000,
        138754800000,
        149637600000,
        170809200000,
        181090800000,
        202258800000,
        212540400000,
        233103600000,
        243990000000,
        265158000000,
        276044400000,
        296607600000,
        307494000000,
        323830800000,
        338950800000,
        354675600000,
        370400400000,
        386125200000,
        401850000000,
        417574800000,
        433299600000,
        449024400000,
        465354000000,
        481078800000,
        496803600000,
        512528400000,
        528253200000,
        543978000000,
        559702800000,
        575427600000,
        591152400000,
        606877200000,
        622602000000,
        638326800000,
        654656400000,
        670381200000,
        686106000000,
        701830800000,
        717555600000,
        733280400000,
        749005200000,
        764730000000,
        780454800000,
        796179600000,
        811904400000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60
      ]
    },
    {
      "name": "Europe/Samara",
      "abbrs": [
        "LMT",
        "SAMT",
        "SAMT",
        "KUYT",
        "KUYST",
        "KUYT",
        "KUYST",
        "KUYT",
        "KUYST",
        "KUYT",
        "KUYST",
        "KUYT",
        "KUYST",
        "KUYT",
        "KUYST",
        "KUYT",
        "KUYST",
        "KUYT",
        "KUYST",
        "KUYT",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "EEST",
        "KUYT",
        "SAMT",
        "SAMST",
        "SAMT",
        "SAMST",
        "SAMT",
        "SAMST",
        "SAMT",
        "SAMST",
        "SAMT",
        "SAMST",
        "SAMT",
        "SAMST",
        "SAMT",
        "SAMST",
        "SAMT",
        "SAMST",
        "SAMT",
        "SAMST",
        "SAMT",
        "SAMST",
        "SAMT",
        "SAMST",
        "SAMT",
        "SAMST",
        "SAMT",
        "SAMST",
        "SAMT",
        "SAMST",
        "SAMT",
        "SAMST",
        "SAMT",
        "SAMST",
        "SAMT",
        "SAMST",
        "SAMT",
        "SAMST",
        "SAMT",
        "SAMST",
        "SAMT",
        "SAMT"
      ],
      "untils": [
        -1593825620000,
        -1247540400000,
        -1102305600000,
        354916800000,
        370724400000,
        386452800000,
        402260400000,
        417988800000,
        433796400000,
        449611200000,
        465343200000,
        481068000000,
        496792800000,
        512517600000,
        528242400000,
        543967200000,
        559692000000,
        575416800000,
        591141600000,
        606866400000,
        622594800000,
        638319600000,
        654649200000,
        670374000000,
        686102400000,
        687916800000,
        701809200000,
        717530400000,
        733269600000,
        748994400000,
        764719200000,
        780444000000,
        796168800000,
        811893600000,
        828223200000,
        846367200000,
        859672800000,
        877816800000,
        891122400000,
        909266400000,
        922572000000,
        941320800000,
        954021600000,
        972770400000,
        985471200000,
        1004220000000,
        1017525600000,
        1035669600000,
        1048975200000,
        1067119200000,
        1080424800000,
        1099173600000,
        1111874400000,
        1130623200000,
        1143324000000,
        1162072800000,
        1174773600000,
        1193522400000,
        1206828000000,
        1224972000000,
        1238277600000,
        1256421600000,
        1269727200000,
        1288479600000,
        1301180400000,
        null
      ],
      "offsets": [
        -200.3333,
        -180,
        -240,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -240,
        -180,
        -240,
        -180,
        -180,
        -180,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -240,
        -180,
        -240
      ]
    },
    {
      "name": "Europe/San_Marino",
      "abbrs": [
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET"
      ],
      "untils": [
        -1690851600000,
        -1680483600000,
        -1664758800000,
        -1649034000000,
        -1635123600000,
        -1616979600000,
        -1604278800000,
        -1585530000000,
        -1571014800000,
        -1555290000000,
        -932432400000,
        -857257200000,
        -844556400000,
        -828226800000,
        -812502000000,
        -798080400000,
        -781052400000,
        -766717200000,
        -750898800000,
        -733359600000,
        -719456400000,
        -701917200000,
        -689209200000,
        -670460400000,
        -114051600000,
        -103168800000,
        -81997200000,
        -71719200000,
        -50547600000,
        -40269600000,
        -18493200000,
        -8215200000,
        12956400000,
        23234400000,
        43801200000,
        54687600000,
        75855600000,
        86738400000,
        107910000000,
        118188000000,
        138754800000,
        149637600000,
        170809200000,
        181090800000,
        202258800000,
        212540400000,
        233103600000,
        243990000000,
        265158000000,
        276044400000,
        296607600000,
        307494000000,
        323830800000,
        338950800000,
        354675600000,
        370400400000,
        386125200000,
        401850000000,
        417574800000,
        433299600000,
        449024400000,
        465354000000,
        481078800000,
        496803600000,
        512528400000,
        528253200000,
        543978000000,
        559702800000,
        575427600000,
        591152400000,
        606877200000,
        622602000000,
        638326800000,
        654656400000,
        670381200000,
        686106000000,
        701830800000,
        717555600000,
        733280400000,
        749005200000,
        764730000000,
        780454800000,
        796179600000,
        811904400000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60
      ]
    },
    {
      "name": "Europe/Sarajevo",
      "abbrs": [
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET"
      ],
      "untils": [
        -905824800000,
        -857257200000,
        -844556400000,
        -828226800000,
        -812502000000,
        -796777200000,
        -777942000000,
        -766623600000,
        417574800000,
        433299600000,
        449024400000,
        465354000000,
        481078800000,
        496803600000,
        512528400000,
        528253200000,
        543978000000,
        559702800000,
        575427600000,
        591152400000,
        606877200000,
        622602000000,
        638326800000,
        654656400000,
        670381200000,
        686106000000,
        701830800000,
        717555600000,
        733280400000,
        749005200000,
        764730000000,
        780454800000,
        796179600000,
        811904400000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60
      ]
    },
    {
      "name": "Europe/Simferopol",
      "abbrs": [
        "SMT",
        "EET",
        "MSK",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "MSK",
        "MSK"
      ],
      "untils": [
        -1441160160000,
        -1247536800000,
        -888894000000,
        -857257200000,
        -844556400000,
        -828226800000,
        -812502000000,
        -811648800000,
        354920400000,
        370728000000,
        386456400000,
        402264000000,
        417992400000,
        433800000000,
        449614800000,
        465346800000,
        481071600000,
        496796400000,
        512521200000,
        528246000000,
        543970800000,
        559695600000,
        575420400000,
        591145200000,
        606870000000,
        622594800000,
        646786800000,
        701820000000,
        717541200000,
        733269600000,
        748990800000,
        764719200000,
        767739600000,
        780436800000,
        796165200000,
        811886400000,
        828219600000,
        846374400000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396137600000,
        1414274400000,
        null
      ],
      "offsets": [
        -136,
        -120,
        -180,
        -120,
        -60,
        -120,
        -60,
        -120,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -240,
        -180
      ]
    },
    {
      "name": "Europe/Skopje",
      "abbrs": [
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET"
      ],
      "untils": [
        -905824800000,
        -857257200000,
        -844556400000,
        -828226800000,
        -812502000000,
        -796777200000,
        -777942000000,
        -766623600000,
        417574800000,
        433299600000,
        449024400000,
        465354000000,
        481078800000,
        496803600000,
        512528400000,
        528253200000,
        543978000000,
        559702800000,
        575427600000,
        591152400000,
        606877200000,
        622602000000,
        638326800000,
        654656400000,
        670381200000,
        686106000000,
        701830800000,
        717555600000,
        733280400000,
        749005200000,
        764730000000,
        780454800000,
        796179600000,
        811904400000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60
      ]
    },
    {
      "name": "Europe/Sofia",
      "abbrs": [
        "EET",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET"
      ],
      "untils": [
        -857257200000,
        -844556400000,
        -828226800000,
        -812502000000,
        -796777200000,
        -781048800000,
        291762000000,
        307576800000,
        323816400000,
        339026400000,
        355266000000,
        370393200000,
        386715600000,
        401846400000,
        417571200000,
        433296000000,
        449020800000,
        465350400000,
        481075200000,
        496800000000,
        512524800000,
        528249600000,
        543974400000,
        559699200000,
        575424000000,
        591148800000,
        606873600000,
        622598400000,
        638323200000,
        654652800000,
        670370400000,
        686091600000,
        701820000000,
        717541200000,
        733269600000,
        748990800000,
        764719200000,
        780440400000,
        796168800000,
        811890000000,
        828223200000,
        846363600000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120
      ]
    },
    {
      "name": "Europe/Stockholm",
      "abbrs": [
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET"
      ],
      "untils": [
        -1692496800000,
        -1680483600000,
        323830800000,
        338950800000,
        354675600000,
        370400400000,
        386125200000,
        401850000000,
        417574800000,
        433299600000,
        449024400000,
        465354000000,
        481078800000,
        496803600000,
        512528400000,
        528253200000,
        543978000000,
        559702800000,
        575427600000,
        591152400000,
        606877200000,
        622602000000,
        638326800000,
        654656400000,
        670381200000,
        686106000000,
        701830800000,
        717555600000,
        733280400000,
        749005200000,
        764730000000,
        780454800000,
        796179600000,
        811904400000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60
      ]
    },
    {
      "name": "Europe/Tallinn",
      "abbrs": [
        "TMT",
        "CET",
        "CEST",
        "CET",
        "TMT",
        "EET",
        "MSK",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET"
      ],
      "untils": [
        -1638322740000,
        -1632006000000,
        -1618700400000,
        -1593824400000,
        -1535938740000,
        -927943200000,
        -892954800000,
        -857257200000,
        -844556400000,
        -828226800000,
        -812502000000,
        -797652000000,
        354920400000,
        370728000000,
        386456400000,
        402264000000,
        417992400000,
        433800000000,
        449614800000,
        465346800000,
        481071600000,
        496796400000,
        512521200000,
        528246000000,
        543970800000,
        559695600000,
        575420400000,
        591145200000,
        606870000000,
        622598400000,
        638323200000,
        654652800000,
        670377600000,
        686102400000,
        701827200000,
        717552000000,
        733276800000,
        749001600000,
        764726400000,
        780451200000,
        796176000000,
        811900800000,
        828230400000,
        846374400000,
        859680000000,
        877824000000,
        891129600000,
        909277200000,
        922582800000,
        941331600000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        -99,
        -60,
        -120,
        -60,
        -99,
        -120,
        -180,
        -120,
        -60,
        -120,
        -60,
        -120,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120
      ]
    },
    {
      "name": "Europe/Tirane",
      "abbrs": [
        "LMT",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET"
      ],
      "untils": [
        -1767230360000,
        -932346000000,
        -857257200000,
        -844556400000,
        -843519600000,
        136854000000,
        149896800000,
        168130800000,
        181432800000,
        199839600000,
        213141600000,
        231894000000,
        244591200000,
        263257200000,
        276040800000,
        294706800000,
        307490400000,
        326156400000,
        339458400000,
        357087600000,
        370389600000,
        389142000000,
        402444000000,
        419468400000,
        433807200000,
        449622000000,
        465354000000,
        481078800000,
        496803600000,
        512528400000,
        528253200000,
        543978000000,
        559702800000,
        575427600000,
        591152400000,
        606877200000,
        622602000000,
        638326800000,
        654656400000,
        670381200000,
        686106000000,
        701830800000,
        717555600000,
        733280400000,
        749005200000,
        764730000000,
        780454800000,
        796179600000,
        811904400000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        -79.3333,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60
      ]
    },
    {
      "name": "Europe/Tiraspol",
      "abbrs": [
        "CMT",
        "BMT",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET"
      ],
      "untils": [
        -1637114100000,
        -1213148664000,
        -1187056800000,
        -1175479200000,
        -1159754400000,
        -1144029600000,
        -1127700000000,
        -1111975200000,
        -1096250400000,
        -1080525600000,
        -1064800800000,
        -1049076000000,
        -1033351200000,
        -1017626400000,
        -1001901600000,
        -986176800000,
        -970452000000,
        -954727200000,
        -927165600000,
        -898138800000,
        -857257200000,
        -844556400000,
        -828226800000,
        -812502000000,
        -800157600000,
        354920400000,
        370728000000,
        386456400000,
        402264000000,
        417992400000,
        433800000000,
        449614800000,
        465346800000,
        481071600000,
        496796400000,
        512521200000,
        528246000000,
        543970800000,
        559695600000,
        575420400000,
        591145200000,
        606870000000,
        622594800000,
        641941200000,
        670377600000,
        686102400000,
        701820000000,
        717541200000,
        733269600000,
        748990800000,
        764719200000,
        780440400000,
        796168800000,
        811890000000,
        828223200000,
        846363600000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        -115,
        -104.4,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -60,
        -120,
        -60,
        -120,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120
      ]
    },
    {
      "name": "Europe/Uzhgorod",
      "abbrs": [
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "CET",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET"
      ],
      "untils": [
        -938905200000,
        -857257200000,
        -844556400000,
        -828226800000,
        -812502000000,
        -794714400000,
        -773456400000,
        354920400000,
        370728000000,
        386456400000,
        402264000000,
        417992400000,
        433800000000,
        449614800000,
        465346800000,
        481071600000,
        496796400000,
        512521200000,
        528246000000,
        543970800000,
        559695600000,
        575420400000,
        591145200000,
        606870000000,
        622594800000,
        646786800000,
        670384800000,
        701820000000,
        717541200000,
        733269600000,
        748990800000,
        764719200000,
        780440400000,
        796179600000,
        811904400000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -60,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120
      ]
    },
    {
      "name": "Europe/Vaduz",
      "abbrs": [
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET"
      ],
      "untils": [
        -904435200000,
        -891129600000,
        -872985600000,
        -859680000000,
        354675600000,
        370400400000,
        386125200000,
        401850000000,
        417574800000,
        433299600000,
        449024400000,
        465354000000,
        481078800000,
        496803600000,
        512528400000,
        528253200000,
        543978000000,
        559702800000,
        575427600000,
        591152400000,
        606877200000,
        622602000000,
        638326800000,
        654656400000,
        670381200000,
        686106000000,
        701830800000,
        717555600000,
        733280400000,
        749005200000,
        764730000000,
        780454800000,
        796179600000,
        811904400000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60
      ]
    },
    {
      "name": "Europe/Vatican",
      "abbrs": [
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET"
      ],
      "untils": [
        -1690851600000,
        -1680483600000,
        -1664758800000,
        -1649034000000,
        -1635123600000,
        -1616979600000,
        -1604278800000,
        -1585530000000,
        -1571014800000,
        -1555290000000,
        -932432400000,
        -857257200000,
        -844556400000,
        -828226800000,
        -812502000000,
        -798080400000,
        -781052400000,
        -766717200000,
        -750898800000,
        -733359600000,
        -719456400000,
        -701917200000,
        -689209200000,
        -670460400000,
        -114051600000,
        -103168800000,
        -81997200000,
        -71719200000,
        -50547600000,
        -40269600000,
        -18493200000,
        -8215200000,
        12956400000,
        23234400000,
        43801200000,
        54687600000,
        75855600000,
        86738400000,
        107910000000,
        118188000000,
        138754800000,
        149637600000,
        170809200000,
        181090800000,
        202258800000,
        212540400000,
        233103600000,
        243990000000,
        265158000000,
        276044400000,
        296607600000,
        307494000000,
        323830800000,
        338950800000,
        354675600000,
        370400400000,
        386125200000,
        401850000000,
        417574800000,
        433299600000,
        449024400000,
        465354000000,
        481078800000,
        496803600000,
        512528400000,
        528253200000,
        543978000000,
        559702800000,
        575427600000,
        591152400000,
        606877200000,
        622602000000,
        638326800000,
        654656400000,
        670381200000,
        686106000000,
        701830800000,
        717555600000,
        733280400000,
        749005200000,
        764730000000,
        780454800000,
        796179600000,
        811904400000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60
      ]
    },
    {
      "name": "Europe/Vienna",
      "abbrs": [
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET"
      ],
      "untils": [
        -1693706400000,
        -1680483600000,
        -1663455600000,
        -1650150000000,
        -1632006000000,
        -1618700400000,
        -1569711600000,
        -1555801200000,
        -938905200000,
        -857257200000,
        -844556400000,
        -828226800000,
        -812502000000,
        -796777200000,
        -781052400000,
        -780188400000,
        -748479600000,
        -733359600000,
        -717634800000,
        -701910000000,
        -684975600000,
        -670460400000,
        323823600000,
        338940000000,
        354675600000,
        370400400000,
        386125200000,
        401850000000,
        417574800000,
        433299600000,
        449024400000,
        465354000000,
        481078800000,
        496803600000,
        512528400000,
        528253200000,
        543978000000,
        559702800000,
        575427600000,
        591152400000,
        606877200000,
        622602000000,
        638326800000,
        654656400000,
        670381200000,
        686106000000,
        701830800000,
        717555600000,
        733280400000,
        749005200000,
        764730000000,
        780454800000,
        796179600000,
        811904400000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60
      ]
    },
    {
      "name": "Europe/Vilnius",
      "abbrs": [
        "WMT",
        "KMT",
        "CET",
        "EET",
        "CET",
        "MSK",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "CEST",
        "CET",
        "CEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET"
      ],
      "untils": [
        -1672536240000,
        -1585100136000,
        -1561251600000,
        -1553565600000,
        -928198800000,
        -900126000000,
        -857257200000,
        -844556400000,
        -828226800000,
        -812502000000,
        -802144800000,
        354920400000,
        370728000000,
        386456400000,
        402264000000,
        417992400000,
        433800000000,
        449614800000,
        465346800000,
        481071600000,
        496796400000,
        512521200000,
        528246000000,
        543970800000,
        559695600000,
        575420400000,
        591145200000,
        606870000000,
        622594800000,
        638319600000,
        654649200000,
        670374000000,
        686102400000,
        701827200000,
        717552000000,
        733276800000,
        749001600000,
        764726400000,
        780451200000,
        796176000000,
        811900800000,
        828230400000,
        846374400000,
        859680000000,
        877824000000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        -84,
        -95.6,
        -60,
        -120,
        -60,
        -180,
        -120,
        -60,
        -120,
        -60,
        -120,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -120,
        -60,
        -120,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120
      ]
    },
    {
      "name": "Europe/Volgograd",
      "abbrs": [
        "LMT",
        "TSAT",
        "STAT",
        "STAT",
        "VOLT",
        "VOLST",
        "VOLT",
        "VOLST",
        "VOLT",
        "VOLST",
        "VOLT",
        "VOLST",
        "VOLT",
        "VOLST",
        "VOLT",
        "VOLST",
        "VOLT",
        "VOLST",
        "VOLT",
        "VOLST",
        "VOLT",
        "VOLST",
        "VOLT",
        "VOLST",
        "VOLT",
        "VOLT",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSK",
        "MSK"
      ],
      "untils": [
        -1577761060000,
        -1411873200000,
        -1247540400000,
        -256881600000,
        354916800000,
        370724400000,
        386452800000,
        402260400000,
        417988800000,
        433796400000,
        449611200000,
        465343200000,
        481068000000,
        496792800000,
        512517600000,
        528242400000,
        543967200000,
        559692000000,
        575416800000,
        591141600000,
        606866400000,
        622594800000,
        638319600000,
        654649200000,
        670374000000,
        701820000000,
        717534000000,
        733273200000,
        748998000000,
        764722800000,
        780447600000,
        796172400000,
        811897200000,
        828226800000,
        846370800000,
        859676400000,
        877820400000,
        891126000000,
        909270000000,
        922575600000,
        941324400000,
        954025200000,
        972774000000,
        985474800000,
        1004223600000,
        1017529200000,
        1035673200000,
        1048978800000,
        1067122800000,
        1080428400000,
        1099177200000,
        1111878000000,
        1130626800000,
        1143327600000,
        1162076400000,
        1174777200000,
        1193526000000,
        1206831600000,
        1224975600000,
        1238281200000,
        1256425200000,
        1269730800000,
        1288479600000,
        1301180400000,
        1414274400000,
        null
      ],
      "offsets": [
        -177.6667,
        -180,
        -180,
        -240,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -300,
        -240,
        -240,
        -180,
        -240,
        -180,
        -240,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180
      ]
    },
    {
      "name": "Europe/Warsaw",
      "abbrs": [
        "WMT",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "EET",
        "EEST",
        "EET",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET"
      ],
      "untils": [
        -1717032240000,
        -1693706400000,
        -1680483600000,
        -1663455600000,
        -1650150000000,
        -1632006000000,
        -1618700400000,
        -1600473600000,
        -1587168000000,
        -1501725600000,
        -931734000000,
        -857257200000,
        -844556400000,
        -828226800000,
        -812502000000,
        -796608000000,
        -778726800000,
        -762660000000,
        -748486800000,
        -733273200000,
        -715215600000,
        -701910000000,
        -684975600000,
        -670460400000,
        -654130800000,
        -639010800000,
        -397094400000,
        -386812800000,
        -371088000000,
        -355363200000,
        -334195200000,
        -323308800000,
        -307584000000,
        -291859200000,
        -271296000000,
        -260409600000,
        -239846400000,
        -228960000000,
        -208396800000,
        -197510400000,
        -176342400000,
        -166060800000,
        228873600000,
        243993600000,
        260323200000,
        276048000000,
        291772800000,
        307497600000,
        323827200000,
        338947200000,
        354672000000,
        370396800000,
        386121600000,
        401846400000,
        417571200000,
        433296000000,
        449020800000,
        465350400000,
        481075200000,
        496800000000,
        512524800000,
        528249600000,
        543974400000,
        559699200000,
        575427600000,
        591152400000,
        606877200000,
        622602000000,
        638326800000,
        654656400000,
        670381200000,
        686106000000,
        701830800000,
        717555600000,
        733280400000,
        749005200000,
        764730000000,
        780454800000,
        796179600000,
        811904400000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        -84,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -120,
        -180,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60
      ]
    },
    {
      "name": "Europe/Zagreb",
      "abbrs": [
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET"
      ],
      "untils": [
        -905824800000,
        -857257200000,
        -844556400000,
        -828226800000,
        -812502000000,
        -796777200000,
        -777942000000,
        -766623600000,
        417574800000,
        433299600000,
        449024400000,
        465354000000,
        481078800000,
        496803600000,
        512528400000,
        528253200000,
        543978000000,
        559702800000,
        575427600000,
        591152400000,
        606877200000,
        622602000000,
        638326800000,
        654656400000,
        670381200000,
        686106000000,
        701830800000,
        717555600000,
        733280400000,
        749005200000,
        764730000000,
        780454800000,
        796179600000,
        811904400000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60
      ]
    },
    {
      "name": "Europe/Zaporozhye",
      "abbrs": [
        "CUT",
        "EET",
        "MSK",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET"
      ],
      "untils": [
        -1441160400000,
        -1247536800000,
        -894769200000,
        -857257200000,
        -844556400000,
        -828226800000,
        -826419600000,
        354920400000,
        370728000000,
        386456400000,
        402264000000,
        417992400000,
        433800000000,
        449614800000,
        465346800000,
        481071600000,
        496796400000,
        512521200000,
        528246000000,
        543970800000,
        559695600000,
        575420400000,
        591145200000,
        606870000000,
        622594800000,
        638319600000,
        654649200000,
        670374000000,
        686091600000,
        701820000000,
        717541200000,
        733269600000,
        748990800000,
        764719200000,
        780440400000,
        796179600000,
        811904400000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        -140,
        -120,
        -180,
        -120,
        -60,
        -120,
        -60,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120
      ]
    },
    {
      "name": "Europe/Zurich",
      "abbrs": [
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET"
      ],
      "untils": [
        -904435200000,
        -891129600000,
        -872985600000,
        -859680000000,
        354675600000,
        370400400000,
        386125200000,
        401850000000,
        417574800000,
        433299600000,
        449024400000,
        465354000000,
        481078800000,
        496803600000,
        512528400000,
        528253200000,
        543978000000,
        559702800000,
        575427600000,
        591152400000,
        606877200000,
        622602000000,
        638326800000,
        654656400000,
        670381200000,
        686106000000,
        701830800000,
        717555600000,
        733280400000,
        749005200000,
        764730000000,
        780454800000,
        796179600000,
        811904400000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60
      ]
    },
    {
      "name": "GB-Eire",
      "abbrs": [
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "BDST",
        "BST",
        "BDST",
        "BST",
        "BDST",
        "BST",
        "BDST",
        "BST",
        "BDST",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "BDST",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT"
      ],
      "untils": [
        -1691964000000,
        -1680472800000,
        -1664143200000,
        -1650146400000,
        -1633903200000,
        -1617487200000,
        -1601848800000,
        -1586037600000,
        -1570399200000,
        -1552168800000,
        -1538344800000,
        -1522533600000,
        -1507500000000,
        -1490565600000,
        -1473631200000,
        -1460930400000,
        -1442786400000,
        -1428876000000,
        -1410732000000,
        -1396216800000,
        -1379282400000,
        -1364767200000,
        -1348437600000,
        -1333317600000,
        -1315778400000,
        -1301263200000,
        -1284328800000,
        -1269813600000,
        -1253484000000,
        -1238364000000,
        -1221429600000,
        -1206914400000,
        -1189980000000,
        -1175464800000,
        -1159135200000,
        -1143410400000,
        -1126476000000,
        -1111960800000,
        -1095631200000,
        -1080511200000,
        -1063576800000,
        -1049061600000,
        -1032127200000,
        -1017612000000,
        -1001282400000,
        -986162400000,
        -969228000000,
        -950479200000,
        -942012000000,
        -904518000000,
        -896050800000,
        -875487600000,
        -864601200000,
        -844038000000,
        -832546800000,
        -812588400000,
        -798073200000,
        -781052400000,
        -772066800000,
        -764805600000,
        -748476000000,
        -733356000000,
        -719445600000,
        -717030000000,
        -706748400000,
        -699487200000,
        -687996000000,
        -668037600000,
        -654732000000,
        -636588000000,
        -622072800000,
        -605743200000,
        -590623200000,
        -574293600000,
        -558568800000,
        -542239200000,
        -527119200000,
        -512604000000,
        -496274400000,
        -481154400000,
        -464220000000,
        -449704800000,
        -432165600000,
        -417650400000,
        -401320800000,
        -386200800000,
        -369266400000,
        -354751200000,
        -337816800000,
        -323301600000,
        -306972000000,
        -291852000000,
        -276732000000,
        -257983200000,
        -245282400000,
        -226533600000,
        -213228000000,
        -195084000000,
        -182383200000,
        -163634400000,
        -150933600000,
        -132184800000,
        -119484000000,
        -100735200000,
        -88034400000,
        -68680800000,
        -59004000000,
        57722400000,
        69818400000,
        89172000000,
        101268000000,
        120621600000,
        132717600000,
        152071200000,
        164167200000,
        183520800000,
        196221600000,
        214970400000,
        227671200000,
        246420000000,
        259120800000,
        278474400000,
        290570400000,
        309924000000,
        322020000000,
        341373600000,
        354675600000,
        372819600000,
        386125200000,
        404269200000,
        417574800000,
        435718800000,
        449024400000,
        467773200000,
        481078800000,
        499222800000,
        512528400000,
        530672400000,
        543978000000,
        562122000000,
        575427600000,
        593571600000,
        606877200000,
        625626000000,
        638326800000,
        657075600000,
        670381200000,
        688525200000,
        701830800000,
        719974800000,
        733280400000,
        751424400000,
        764730000000,
        782874000000,
        796179600000,
        814323600000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        0,
        -60,
        0,
        -60,
        -120,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0
      ]
    },
    {
      "name": "GB",
      "abbrs": [
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "BDST",
        "BST",
        "BDST",
        "BST",
        "BDST",
        "BST",
        "BDST",
        "BST",
        "BDST",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "BDST",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT",
        "BST",
        "GMT"
      ],
      "untils": [
        -1691964000000,
        -1680472800000,
        -1664143200000,
        -1650146400000,
        -1633903200000,
        -1617487200000,
        -1601848800000,
        -1586037600000,
        -1570399200000,
        -1552168800000,
        -1538344800000,
        -1522533600000,
        -1507500000000,
        -1490565600000,
        -1473631200000,
        -1460930400000,
        -1442786400000,
        -1428876000000,
        -1410732000000,
        -1396216800000,
        -1379282400000,
        -1364767200000,
        -1348437600000,
        -1333317600000,
        -1315778400000,
        -1301263200000,
        -1284328800000,
        -1269813600000,
        -1253484000000,
        -1238364000000,
        -1221429600000,
        -1206914400000,
        -1189980000000,
        -1175464800000,
        -1159135200000,
        -1143410400000,
        -1126476000000,
        -1111960800000,
        -1095631200000,
        -1080511200000,
        -1063576800000,
        -1049061600000,
        -1032127200000,
        -1017612000000,
        -1001282400000,
        -986162400000,
        -969228000000,
        -950479200000,
        -942012000000,
        -904518000000,
        -896050800000,
        -875487600000,
        -864601200000,
        -844038000000,
        -832546800000,
        -812588400000,
        -798073200000,
        -781052400000,
        -772066800000,
        -764805600000,
        -748476000000,
        -733356000000,
        -719445600000,
        -717030000000,
        -706748400000,
        -699487200000,
        -687996000000,
        -668037600000,
        -654732000000,
        -636588000000,
        -622072800000,
        -605743200000,
        -590623200000,
        -574293600000,
        -558568800000,
        -542239200000,
        -527119200000,
        -512604000000,
        -496274400000,
        -481154400000,
        -464220000000,
        -449704800000,
        -432165600000,
        -417650400000,
        -401320800000,
        -386200800000,
        -369266400000,
        -354751200000,
        -337816800000,
        -323301600000,
        -306972000000,
        -291852000000,
        -276732000000,
        -257983200000,
        -245282400000,
        -226533600000,
        -213228000000,
        -195084000000,
        -182383200000,
        -163634400000,
        -150933600000,
        -132184800000,
        -119484000000,
        -100735200000,
        -88034400000,
        -68680800000,
        -59004000000,
        57722400000,
        69818400000,
        89172000000,
        101268000000,
        120621600000,
        132717600000,
        152071200000,
        164167200000,
        183520800000,
        196221600000,
        214970400000,
        227671200000,
        246420000000,
        259120800000,
        278474400000,
        290570400000,
        309924000000,
        322020000000,
        341373600000,
        354675600000,
        372819600000,
        386125200000,
        404269200000,
        417574800000,
        435718800000,
        449024400000,
        467773200000,
        481078800000,
        499222800000,
        512528400000,
        530672400000,
        543978000000,
        562122000000,
        575427600000,
        593571600000,
        606877200000,
        625626000000,
        638326800000,
        657075600000,
        670381200000,
        688525200000,
        701830800000,
        719974800000,
        733280400000,
        751424400000,
        764730000000,
        782874000000,
        796179600000,
        814323600000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        0,
        -60,
        0,
        -60,
        -120,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0
      ]
    },
    {
      "name": "GMT+0",
      "abbrs": [
        "GMT"
      ],
      "untils": [
        null
      ],
      "offsets": [
        0
      ]
    },
    {
      "name": "GMT-0",
      "abbrs": [
        "GMT"
      ],
      "untils": [
        null
      ],
      "offsets": [
        0
      ]
    },
    {
      "name": "GMT",
      "abbrs": [
        "GMT"
      ],
      "untils": [
        null
      ],
      "offsets": [
        0
      ]
    },
    {
      "name": "GMT0",
      "abbrs": [
        "GMT"
      ],
      "untils": [
        null
      ],
      "offsets": [
        0
      ]
    },
    {
      "name": "Greenwich",
      "abbrs": [
        "GMT"
      ],
      "untils": [
        null
      ],
      "offsets": [
        0
      ]
    },
    {
      "name": "HST",
      "abbrs": [
        "HST"
      ],
      "untils": [
        null
      ],
      "offsets": [
        600
      ]
    },
    {
      "name": "Hongkong",
      "abbrs": [
        "LMT",
        "HKT",
        "HKST",
        "HKT",
        "JST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT",
        "HKST",
        "HKT"
      ],
      "untils": [
        -2056693002000,
        -907389000000,
        -891667800000,
        -884246400000,
        -766746000000,
        -747981000000,
        -728544600000,
        -717049800000,
        -694503000000,
        -683785800000,
        -668064600000,
        -654755400000,
        -636615000000,
        -623305800000,
        -605165400000,
        -591856200000,
        -573715800000,
        -559801800000,
        -542352600000,
        -528352200000,
        -510211800000,
        -498112200000,
        -478762200000,
        -466662600000,
        -446707800000,
        -435213000000,
        -415258200000,
        -403158600000,
        -383808600000,
        -371709000000,
        -352359000000,
        -340259400000,
        -320909400000,
        -308809800000,
        -288855000000,
        -277360200000,
        -257405400000,
        -245910600000,
        -225955800000,
        -213856200000,
        -194506200000,
        -182406600000,
        -163056600000,
        -148537800000,
        -132816600000,
        -117088200000,
        -101367000000,
        -85638600000,
        -69312600000,
        -53584200000,
        -37863000000,
        -22134600000,
        -6413400000,
        9315000000,
        25036200000,
        40764600000,
        56485800000,
        72214200000,
        88540200000,
        104268600000,
        119989800000,
        126041400000,
        151439400000,
        167167800000,
        182889000000,
        198617400000,
        214338600000,
        295385400000,
        309292200000,
        null
      ],
      "offsets": [
        -456.7,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480
      ]
    },
    {
      "name": "Iceland",
      "abbrs": [
        "LMT",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "ISST",
        "IST",
        "GMT"
      ],
      "untils": [
        -1956609120000,
        -1668211200000,
        -1647212400000,
        -1636675200000,
        -1613430000000,
        -1605139200000,
        -1581894000000,
        -1539561600000,
        -1531350000000,
        -968025600000,
        -952293600000,
        -942008400000,
        -920239200000,
        -909957600000,
        -888789600000,
        -877903200000,
        -857944800000,
        -846453600000,
        -826495200000,
        -815004000000,
        -795045600000,
        -783554400000,
        -762991200000,
        -752104800000,
        -731541600000,
        -717631200000,
        -700092000000,
        -686181600000,
        -668642400000,
        -654732000000,
        -636588000000,
        -623282400000,
        -605743200000,
        -591832800000,
        -573688800000,
        -559778400000,
        -542239200000,
        -528328800000,
        -510789600000,
        -496879200000,
        -479340000000,
        -465429600000,
        -447890400000,
        -433980000000,
        -415836000000,
        -401925600000,
        -384386400000,
        -370476000000,
        -352936800000,
        -339026400000,
        -321487200000,
        -307576800000,
        -290037600000,
        -276127200000,
        -258588000000,
        -244677600000,
        -226533600000,
        -212623200000,
        -195084000000,
        -181173600000,
        -163634400000,
        -149724000000,
        -132184800000,
        -118274400000,
        -100735200000,
        -86824800000,
        -68680800000,
        -54770400000,
        null
      ],
      "offsets": [
        88,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0,
        60,
        0
      ]
    },
    {
      "name": "Indian/Antananarivo",
      "abbrs": [
        "LMT",
        "EAT",
        "BEAT",
        "BEAUT",
        "EAT"
      ],
      "untils": [
        -1309746436000,
        -1262314800000,
        -946780200000,
        -315629100000,
        null
      ],
      "offsets": [
        -147.2667,
        -180,
        -150,
        -165,
        -180
      ]
    },
    {
      "name": "Indian/Chagos",
      "abbrs": [
        "LMT",
        "IOT",
        "IOT"
      ],
      "untils": [
        -1988167780000,
        820436400000,
        null
      ],
      "offsets": [
        -289.6667,
        -300,
        -360
      ]
    },
    {
      "name": "Indian/Christmas",
      "abbrs": [
        "CXT"
      ],
      "untils": [
        null
      ],
      "offsets": [
        -420
      ]
    },
    {
      "name": "Indian/Cocos",
      "abbrs": [
        "CCT"
      ],
      "untils": [
        null
      ],
      "offsets": [
        -390
      ]
    },
    {
      "name": "Indian/Comoro",
      "abbrs": [
        "LMT",
        "EAT",
        "BEAT",
        "BEAUT",
        "EAT"
      ],
      "untils": [
        -1309746436000,
        -1262314800000,
        -946780200000,
        -315629100000,
        null
      ],
      "offsets": [
        -147.2667,
        -180,
        -150,
        -165,
        -180
      ]
    },
    {
      "name": "Indian/Kerguelen",
      "abbrs": [
        "zzz",
        "TFT"
      ],
      "untils": [
        -631152000000,
        null
      ],
      "offsets": [
        0,
        -300
      ]
    },
    {
      "name": "Indian/Mahe",
      "abbrs": [
        "LMT",
        "SCT"
      ],
      "untils": [
        -2006653308000,
        null
      ],
      "offsets": [
        -221.8,
        -240
      ]
    },
    {
      "name": "Indian/Maldives",
      "abbrs": [
        "MMT",
        "MVT"
      ],
      "untils": [
        -315636840000,
        null
      ],
      "offsets": [
        -294,
        -300
      ]
    },
    {
      "name": "Indian/Mauritius",
      "abbrs": [
        "LMT",
        "MUT",
        "MUST",
        "MUT",
        "MUST",
        "MUT"
      ],
      "untils": [
        -1988164200000,
        403041600000,
        417034800000,
        1224972000000,
        1238274000000,
        null
      ],
      "offsets": [
        -230,
        -240,
        -300,
        -240,
        -300,
        -240
      ]
    },
    {
      "name": "Indian/Mayotte",
      "abbrs": [
        "LMT",
        "EAT",
        "BEAT",
        "BEAUT",
        "EAT"
      ],
      "untils": [
        -1309746436000,
        -1262314800000,
        -946780200000,
        -315629100000,
        null
      ],
      "offsets": [
        -147.2667,
        -180,
        -150,
        -165,
        -180
      ]
    },
    {
      "name": "Indian/Reunion",
      "abbrs": [
        "LMT",
        "RET"
      ],
      "untils": [
        -1848886912000,
        null
      ],
      "offsets": [
        -221.8667,
        -240
      ]
    },
    {
      "name": "Iran",
      "abbrs": [
        "LMT",
        "TMT",
        "IRST",
        "IRST",
        "IRDT",
        "IRST",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST",
        "IRDT",
        "IRST"
      ],
      "untils": [
        -1704165944000,
        -757394744000,
        247177800000,
        259272000000,
        277758000000,
        283982400000,
        290809800000,
        306531000000,
        322432200000,
        338499000000,
        673216200000,
        685481400000,
        701209800000,
        717103800000,
        732745800000,
        748639800000,
        764281800000,
        780175800000,
        795817800000,
        811711800000,
        827353800000,
        843247800000,
        858976200000,
        874870200000,
        890512200000,
        906406200000,
        922048200000,
        937942200000,
        953584200000,
        969478200000,
        985206600000,
        1001100600000,
        1016742600000,
        1032636600000,
        1048278600000,
        1064172600000,
        1079814600000,
        1095708600000,
        1111437000000,
        1127331000000,
        1206045000000,
        1221939000000,
        1237667400000,
        1253561400000,
        1269203400000,
        1285097400000,
        1300739400000,
        1316633400000,
        1332275400000,
        1348169400000,
        1363897800000,
        1379791800000,
        1395433800000,
        1411327800000,
        1426969800000,
        1442863800000,
        1458505800000,
        1474399800000,
        1490128200000,
        1506022200000,
        1521664200000,
        1537558200000,
        1553200200000,
        1569094200000,
        1584736200000,
        1600630200000,
        1616358600000,
        1632252600000,
        1647894600000,
        1663788600000,
        1679430600000,
        1695324600000,
        1710966600000,
        1726860600000,
        1742589000000,
        1758483000000,
        1774125000000,
        1790019000000,
        1805661000000,
        1821555000000,
        1837197000000,
        1853091000000,
        1868733000000,
        1884627000000,
        1900355400000,
        1916249400000,
        1931891400000,
        1947785400000,
        1963427400000,
        1979321400000,
        1994963400000,
        2010857400000,
        2026585800000,
        2042479800000,
        2058121800000,
        2074015800000,
        2089657800000,
        2105551800000,
        2121193800000,
        2137087800000,
        null
      ],
      "offsets": [
        -205.7333,
        -205.7333,
        -210,
        -240,
        -300,
        -240,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210,
        -270,
        -210
      ]
    },
    {
      "name": "Israel",
      "abbrs": [
        "JMT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDDT",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST",
        "IDT",
        "IST"
      ],
      "untils": [
        -1641003640000,
        -933645600000,
        -857358000000,
        -844300800000,
        -825822000000,
        -812685600000,
        -794199600000,
        -779853600000,
        -762656400000,
        -748310400000,
        -731127600000,
        -681962400000,
        -673243200000,
        -667962000000,
        -652327200000,
        -636426000000,
        -622087200000,
        -608947200000,
        -591847200000,
        -572486400000,
        -558576000000,
        -542851200000,
        -527731200000,
        -514425600000,
        -490845600000,
        -482986800000,
        -459475200000,
        -451537200000,
        -428551200000,
        -418262400000,
        -400032000000,
        -387428400000,
        142380000000,
        150843600000,
        167176800000,
        178664400000,
        482277600000,
        495579600000,
        516751200000,
        526424400000,
        545436000000,
        558478800000,
        576626400000,
        589323600000,
        609890400000,
        620773200000,
        638316000000,
        651618000000,
        669765600000,
        683672400000,
        701820000000,
        715726800000,
        733701600000,
        747176400000,
        765151200000,
        778021200000,
        796600800000,
        810075600000,
        826840800000,
        842821200000,
        858895200000,
        874184400000,
        890344800000,
        905029200000,
        923011200000,
        936313200000,
        955670400000,
        970783200000,
        986770800000,
        1001282400000,
        1017356400000,
        1033941600000,
        1048806000000,
        1065132000000,
        1081292400000,
        1095804000000,
        1112313600000,
        1128812400000,
        1143763200000,
        1159657200000,
        1175212800000,
        1189897200000,
        1206662400000,
        1223161200000,
        1238112000000,
        1254006000000,
        1269561600000,
        1284246000000,
        1301616000000,
        1317510000000,
        1333065600000,
        1348354800000,
        1364515200000,
        1382828400000,
        1395964800000,
        1414278000000,
        1427414400000,
        1445727600000,
        1458864000000,
        1477782000000,
        1490313600000,
        1509231600000,
        1521763200000,
        1540681200000,
        1553817600000,
        1572130800000,
        1585267200000,
        1603580400000,
        1616716800000,
        1635634800000,
        1648166400000,
        1667084400000,
        1679616000000,
        1698534000000,
        1711670400000,
        1729983600000,
        1743120000000,
        1761433200000,
        1774569600000,
        1792882800000,
        1806019200000,
        1824937200000,
        1837468800000,
        1856386800000,
        1868918400000,
        1887836400000,
        1900972800000,
        1919286000000,
        1932422400000,
        1950735600000,
        1963872000000,
        1982790000000,
        1995321600000,
        2014239600000,
        2026771200000,
        2045689200000,
        2058220800000,
        2077138800000,
        2090275200000,
        2108588400000,
        2121724800000,
        2140038000000,
        null
      ],
      "offsets": [
        -140.6667,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -240,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120
      ]
    },
    {
      "name": "Jamaica",
      "abbrs": [
        "KMT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST"
      ],
      "untils": [
        -1827687169000,
        126687600000,
        152085600000,
        162370800000,
        183535200000,
        199263600000,
        215589600000,
        230713200000,
        247039200000,
        262767600000,
        278488800000,
        294217200000,
        309938400000,
        325666800000,
        341388000000,
        357116400000,
        372837600000,
        388566000000,
        404892000000,
        420015600000,
        436341600000,
        null
      ],
      "offsets": [
        307.1833,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300
      ]
    },
    {
      "name": "Japan",
      "abbrs": [
        "JCST",
        "JST",
        "JDT",
        "JST",
        "JDT",
        "JST",
        "JDT",
        "JST",
        "JDT",
        "JST"
      ],
      "untils": [
        -1017824400000,
        -683794800000,
        -672393600000,
        -654764400000,
        -640944000000,
        -620290800000,
        -609494400000,
        -588841200000,
        -578044800000,
        null
      ],
      "offsets": [
        -540,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540,
        -600,
        -540
      ]
    },
    {
      "name": "Kwajalein",
      "abbrs": [
        "MHT",
        "KWAT",
        "MHT"
      ],
      "untils": [
        -7988400000,
        745848000000,
        null
      ],
      "offsets": [
        -660,
        720,
        -720
      ]
    },
    {
      "name": "Libya",
      "abbrs": [
        "LMT",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "EET",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "EET",
        "CET",
        "CEST",
        "EET",
        "CET",
        "CEST",
        "EET"
      ],
      "untils": [
        -1577926364000,
        -574902000000,
        -568087200000,
        -512175600000,
        -504928800000,
        -449888400000,
        -441856800000,
        -347158800000,
        378684000000,
        386463600000,
        402271200000,
        417999600000,
        433807200000,
        449622000000,
        465429600000,
        481590000000,
        496965600000,
        512953200000,
        528674400000,
        544230000000,
        560037600000,
        575852400000,
        591660000000,
        607388400000,
        623196000000,
        641775600000,
        844034400000,
        860108400000,
        875916000000,
        1352505600000,
        1364515200000,
        1382659200000,
        null
      ],
      "offsets": [
        -52.7333,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -120,
        -60,
        -120,
        -120
      ]
    },
    {
      "name": "MET",
      "abbrs": [
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET",
        "MEST",
        "MET"
      ],
      "untils": [
        -1693706400000,
        -1680483600000,
        -1663455600000,
        -1650150000000,
        -1632006000000,
        -1618700400000,
        -938905200000,
        -857257200000,
        -844556400000,
        -828226800000,
        -812502000000,
        -796777200000,
        -781052400000,
        -766623600000,
        228877200000,
        243997200000,
        260326800000,
        276051600000,
        291776400000,
        307501200000,
        323830800000,
        338950800000,
        354675600000,
        370400400000,
        386125200000,
        401850000000,
        417574800000,
        433299600000,
        449024400000,
        465354000000,
        481078800000,
        496803600000,
        512528400000,
        528253200000,
        543978000000,
        559702800000,
        575427600000,
        591152400000,
        606877200000,
        622602000000,
        638326800000,
        654656400000,
        670381200000,
        686106000000,
        701830800000,
        717555600000,
        733280400000,
        749005200000,
        764730000000,
        780454800000,
        796179600000,
        811904400000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60
      ]
    },
    {
      "name": "MST",
      "abbrs": [
        "MST"
      ],
      "untils": [
        null
      ],
      "offsets": [
        420
      ]
    },
    {
      "name": "MST7MDT",
      "abbrs": [
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MWT",
        "MPT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST"
      ],
      "untils": [
        -1633273200000,
        -1615132800000,
        -1601823600000,
        -1583683200000,
        -880210800000,
        -769395600000,
        -765388800000,
        -84380400000,
        -68659200000,
        -52930800000,
        -37209600000,
        -21481200000,
        -5760000000,
        9968400000,
        25689600000,
        41418000000,
        57744000000,
        73472400000,
        89193600000,
        104922000000,
        120643200000,
        126694800000,
        152092800000,
        162378000000,
        183542400000,
        199270800000,
        215596800000,
        230720400000,
        247046400000,
        262774800000,
        278496000000,
        294224400000,
        309945600000,
        325674000000,
        341395200000,
        357123600000,
        372844800000,
        388573200000,
        404899200000,
        420022800000,
        436348800000,
        452077200000,
        467798400000,
        483526800000,
        499248000000,
        514976400000,
        530697600000,
        544611600000,
        562147200000,
        576061200000,
        594201600000,
        607510800000,
        625651200000,
        638960400000,
        657100800000,
        671014800000,
        688550400000,
        702464400000,
        720000000000,
        733914000000,
        752054400000,
        765363600000,
        783504000000,
        796813200000,
        814953600000,
        828867600000,
        846403200000,
        860317200000,
        877852800000,
        891766800000,
        909302400000,
        923216400000,
        941356800000,
        954666000000,
        972806400000,
        986115600000,
        1004256000000,
        1018170000000,
        1035705600000,
        1049619600000,
        1067155200000,
        1081069200000,
        1099209600000,
        1112518800000,
        1130659200000,
        1143968400000,
        1162108800000,
        1173603600000,
        1194163200000,
        1205053200000,
        1225612800000,
        1236502800000,
        1257062400000,
        1268557200000,
        1289116800000,
        1300006800000,
        1320566400000,
        1331456400000,
        1352016000000,
        1362906000000,
        1383465600000,
        1394355600000,
        1414915200000,
        1425805200000,
        1446364800000,
        1457859600000,
        1478419200000,
        1489309200000,
        1509868800000,
        1520758800000,
        1541318400000,
        1552208400000,
        1572768000000,
        1583658000000,
        1604217600000,
        1615712400000,
        1636272000000,
        1647162000000,
        1667721600000,
        1678611600000,
        1699171200000,
        1710061200000,
        1730620800000,
        1741510800000,
        1762070400000,
        1772960400000,
        1793520000000,
        1805014800000,
        1825574400000,
        1836464400000,
        1857024000000,
        1867914000000,
        1888473600000,
        1899363600000,
        1919923200000,
        1930813200000,
        1951372800000,
        1962867600000,
        1983427200000,
        1994317200000,
        2014876800000,
        2025766800000,
        2046326400000,
        2057216400000,
        2077776000000,
        2088666000000,
        2109225600000,
        2120115600000,
        2140675200000,
        null
      ],
      "offsets": [
        420,
        360,
        420,
        360,
        420,
        360,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420
      ]
    },
    {
      "name": "Mexico/BajaNorte",
      "abbrs": [
        "LMT",
        "MST",
        "PST",
        "MST",
        "PST",
        "PDT",
        "PST",
        "PWT",
        "PPT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST"
      ],
      "untils": [
        -1514736000000,
        -1451667600000,
        -1343062800000,
        -1234803600000,
        -1222963200000,
        -1207242000000,
        -873820800000,
        -769395600000,
        -761677200000,
        -686073600000,
        -661539600000,
        -495036000000,
        -481734000000,
        -463586400000,
        -450284400000,
        -431532000000,
        -418230000000,
        -400082400000,
        -386780400000,
        -368632800000,
        -355330800000,
        -337183200000,
        -323881200000,
        -305733600000,
        -292431600000,
        199274400000,
        215600400000,
        230724000000,
        247050000000,
        262778400000,
        278499600000,
        294228000000,
        309949200000,
        325677600000,
        341398800000,
        357127200000,
        372848400000,
        388576800000,
        404902800000,
        420026400000,
        436352400000,
        452080800000,
        467802000000,
        483530400000,
        499251600000,
        514980000000,
        530701200000,
        544615200000,
        562150800000,
        576064800000,
        594205200000,
        607514400000,
        625654800000,
        638964000000,
        657104400000,
        671018400000,
        688554000000,
        702468000000,
        720003600000,
        733917600000,
        752058000000,
        765367200000,
        783507600000,
        796816800000,
        814957200000,
        828871200000,
        846406800000,
        860320800000,
        877856400000,
        891770400000,
        909306000000,
        923220000000,
        941360400000,
        954669600000,
        972810000000,
        986119200000,
        1004259600000,
        1018173600000,
        1035709200000,
        1049623200000,
        1067158800000,
        1081072800000,
        1099213200000,
        1112522400000,
        1130662800000,
        1143972000000,
        1162112400000,
        1175421600000,
        1193562000000,
        1207476000000,
        1225011600000,
        1238925600000,
        1256461200000,
        1268560800000,
        1289120400000,
        1300010400000,
        1320570000000,
        1331460000000,
        1352019600000,
        1362909600000,
        1383469200000,
        1394359200000,
        1414918800000,
        1425808800000,
        1446368400000,
        1457863200000,
        1478422800000,
        1489312800000,
        1509872400000,
        1520762400000,
        1541322000000,
        1552212000000,
        1572771600000,
        1583661600000,
        1604221200000,
        1615716000000,
        1636275600000,
        1647165600000,
        1667725200000,
        1678615200000,
        1699174800000,
        1710064800000,
        1730624400000,
        1741514400000,
        1762074000000,
        1772964000000,
        1793523600000,
        1805018400000,
        1825578000000,
        1836468000000,
        1857027600000,
        1867917600000,
        1888477200000,
        1899367200000,
        1919926800000,
        1930816800000,
        1951376400000,
        1962871200000,
        1983430800000,
        1994320800000,
        2014880400000,
        2025770400000,
        2046330000000,
        2057220000000,
        2077779600000,
        2088669600000,
        2109229200000,
        2120119200000,
        2140678800000,
        null
      ],
      "offsets": [
        468.0667,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480
      ]
    },
    {
      "name": "Mexico/BajaSur",
      "abbrs": [
        "LMT",
        "MST",
        "CST",
        "MST",
        "CST",
        "MST",
        "CST",
        "MST",
        "PST",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST"
      ],
      "untils": [
        -1514739600000,
        -1343066400000,
        -1234807200000,
        -1220292000000,
        -1207159200000,
        -1191344400000,
        -873828000000,
        -661539600000,
        28800000,
        828867600000,
        846403200000,
        860317200000,
        877852800000,
        891766800000,
        909302400000,
        923216400000,
        941356800000,
        954666000000,
        972806400000,
        989139600000,
        1001836800000,
        1018170000000,
        1035705600000,
        1049619600000,
        1067155200000,
        1081069200000,
        1099209600000,
        1112518800000,
        1130659200000,
        1143968400000,
        1162108800000,
        1175418000000,
        1193558400000,
        1207472400000,
        1225008000000,
        1238922000000,
        1256457600000,
        1270371600000,
        1288512000000,
        1301821200000,
        1319961600000,
        1333270800000,
        1351411200000,
        1365325200000,
        1382860800000,
        1396774800000,
        1414310400000,
        1428224400000,
        1445760000000,
        1459674000000,
        1477814400000,
        1491123600000,
        1509264000000,
        1522573200000,
        1540713600000,
        1554627600000,
        1572163200000,
        1586077200000,
        1603612800000,
        1617526800000,
        1635667200000,
        1648976400000,
        1667116800000,
        1680426000000,
        1698566400000,
        1712480400000,
        1730016000000,
        1743930000000,
        1761465600000,
        1775379600000,
        1792915200000,
        1806829200000,
        1824969600000,
        1838278800000,
        1856419200000,
        1869728400000,
        1887868800000,
        1901782800000,
        1919318400000,
        1933232400000,
        1950768000000,
        1964682000000,
        1982822400000,
        1996131600000,
        2014272000000,
        2027581200000,
        2045721600000,
        2059030800000,
        2077171200000,
        2091085200000,
        2108620800000,
        2122534800000,
        2140070400000,
        null
      ],
      "offsets": [
        425.6667,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        480,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420
      ]
    },
    {
      "name": "Mexico/General",
      "abbrs": [
        "LMT",
        "MST",
        "CST",
        "MST",
        "CST",
        "MST",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CWT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST"
      ],
      "untils": [
        -1514739600000,
        -1343066400000,
        -1234807200000,
        -1220292000000,
        -1207159200000,
        -1191344400000,
        -975261600000,
        -963169200000,
        -917114400000,
        -907354800000,
        -821901600000,
        -810068400000,
        -627501600000,
        -612990000000,
        828864000000,
        846399600000,
        860313600000,
        877849200000,
        891763200000,
        909298800000,
        923212800000,
        941353200000,
        954662400000,
        972802800000,
        989136000000,
        1001833200000,
        1018166400000,
        1035702000000,
        1049616000000,
        1067151600000,
        1081065600000,
        1099206000000,
        1112515200000,
        1130655600000,
        1143964800000,
        1162105200000,
        1175414400000,
        1193554800000,
        1207468800000,
        1225004400000,
        1238918400000,
        1256454000000,
        1270368000000,
        1288508400000,
        1301817600000,
        1319958000000,
        1333267200000,
        1351407600000,
        1365321600000,
        1382857200000,
        1396771200000,
        1414306800000,
        1428220800000,
        1445756400000,
        1459670400000,
        1477810800000,
        1491120000000,
        1509260400000,
        1522569600000,
        1540710000000,
        1554624000000,
        1572159600000,
        1586073600000,
        1603609200000,
        1617523200000,
        1635663600000,
        1648972800000,
        1667113200000,
        1680422400000,
        1698562800000,
        1712476800000,
        1730012400000,
        1743926400000,
        1761462000000,
        1775376000000,
        1792911600000,
        1806825600000,
        1824966000000,
        1838275200000,
        1856415600000,
        1869724800000,
        1887865200000,
        1901779200000,
        1919314800000,
        1933228800000,
        1950764400000,
        1964678400000,
        1982818800000,
        1996128000000,
        2014268400000,
        2027577600000,
        2045718000000,
        2059027200000,
        2077167600000,
        2091081600000,
        2108617200000,
        2122531200000,
        2140066800000,
        null
      ],
      "offsets": [
        396.6,
        420,
        360,
        420,
        360,
        420,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360
      ]
    },
    {
      "name": "NZ-CHAT",
      "abbrs": [
        "CHAST",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT"
      ],
      "untils": [
        -757426500000,
        152632800000,
        162309600000,
        183477600000,
        194968800000,
        215532000000,
        226418400000,
        246981600000,
        257868000000,
        278431200000,
        289317600000,
        309880800000,
        320767200000,
        341330400000,
        352216800000,
        372780000000,
        384271200000,
        404834400000,
        415720800000,
        436284000000,
        447170400000,
        467733600000,
        478620000000,
        499183200000,
        510069600000,
        530632800000,
        541519200000,
        562082400000,
        573573600000,
        594136800000,
        605023200000,
        623772000000,
        637682400000,
        655221600000,
        669132000000,
        686671200000,
        700581600000,
        718120800000,
        732636000000,
        749570400000,
        764085600000,
        781020000000,
        795535200000,
        812469600000,
        826984800000,
        844524000000,
        858434400000,
        875973600000,
        889884000000,
        907423200000,
        921938400000,
        938872800000,
        953388000000,
        970322400000,
        984837600000,
        1002376800000,
        1016287200000,
        1033826400000,
        1047736800000,
        1065276000000,
        1079791200000,
        1096725600000,
        1111240800000,
        1128175200000,
        1142690400000,
        1159624800000,
        1174140000000,
        1191074400000,
        1207404000000,
        1222524000000,
        1238853600000,
        1253973600000,
        1270303200000,
        1285423200000,
        1301752800000,
        1316872800000,
        1333202400000,
        1348927200000,
        1365256800000,
        1380376800000,
        1396706400000,
        1411826400000,
        1428156000000,
        1443276000000,
        1459605600000,
        1474725600000,
        1491055200000,
        1506175200000,
        1522504800000,
        1538229600000,
        1554559200000,
        1569679200000,
        1586008800000,
        1601128800000,
        1617458400000,
        1632578400000,
        1648908000000,
        1664028000000,
        1680357600000,
        1695477600000,
        1712412000000,
        1727532000000,
        1743861600000,
        1758981600000,
        1775311200000,
        1790431200000,
        1806760800000,
        1821880800000,
        1838210400000,
        1853330400000,
        1869660000000,
        1885384800000,
        1901714400000,
        1916834400000,
        1933164000000,
        1948284000000,
        1964613600000,
        1979733600000,
        1996063200000,
        2011183200000,
        2027512800000,
        2042632800000,
        2058962400000,
        2074687200000,
        2091016800000,
        2106136800000,
        2122466400000,
        2137586400000,
        null
      ],
      "offsets": [
        -735,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825
      ]
    },
    {
      "name": "NZ",
      "abbrs": [
        "NZMT",
        "NZST",
        "NZMT",
        "NZST",
        "NZMT",
        "NZST",
        "NZMT",
        "NZST",
        "NZMT",
        "NZST",
        "NZMT",
        "NZST",
        "NZMT",
        "NZST",
        "NZMT",
        "NZST",
        "NZMT",
        "NZST",
        "NZMT",
        "NZST",
        "NZMT",
        "NZST",
        "NZMT",
        "NZST",
        "NZMT",
        "NZST",
        "NZMT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT"
      ],
      "untils": [
        -1330335000000,
        -1320057000000,
        -1300699800000,
        -1287396000000,
        -1269250200000,
        -1255946400000,
        -1237800600000,
        -1224496800000,
        -1206351000000,
        -1192442400000,
        -1174901400000,
        -1160992800000,
        -1143451800000,
        -1125914400000,
        -1112607000000,
        -1094464800000,
        -1081157400000,
        -1063015200000,
        -1049707800000,
        -1031565600000,
        -1018258200000,
        -1000116000000,
        -986808600000,
        -968061600000,
        -955359000000,
        -936612000000,
        -923304600000,
        152632800000,
        162309600000,
        183477600000,
        194968800000,
        215532000000,
        226418400000,
        246981600000,
        257868000000,
        278431200000,
        289317600000,
        309880800000,
        320767200000,
        341330400000,
        352216800000,
        372780000000,
        384271200000,
        404834400000,
        415720800000,
        436284000000,
        447170400000,
        467733600000,
        478620000000,
        499183200000,
        510069600000,
        530632800000,
        541519200000,
        562082400000,
        573573600000,
        594136800000,
        605023200000,
        623772000000,
        637682400000,
        655221600000,
        669132000000,
        686671200000,
        700581600000,
        718120800000,
        732636000000,
        749570400000,
        764085600000,
        781020000000,
        795535200000,
        812469600000,
        826984800000,
        844524000000,
        858434400000,
        875973600000,
        889884000000,
        907423200000,
        921938400000,
        938872800000,
        953388000000,
        970322400000,
        984837600000,
        1002376800000,
        1016287200000,
        1033826400000,
        1047736800000,
        1065276000000,
        1079791200000,
        1096725600000,
        1111240800000,
        1128175200000,
        1142690400000,
        1159624800000,
        1174140000000,
        1191074400000,
        1207404000000,
        1222524000000,
        1238853600000,
        1253973600000,
        1270303200000,
        1285423200000,
        1301752800000,
        1316872800000,
        1333202400000,
        1348927200000,
        1365256800000,
        1380376800000,
        1396706400000,
        1411826400000,
        1428156000000,
        1443276000000,
        1459605600000,
        1474725600000,
        1491055200000,
        1506175200000,
        1522504800000,
        1538229600000,
        1554559200000,
        1569679200000,
        1586008800000,
        1601128800000,
        1617458400000,
        1632578400000,
        1648908000000,
        1664028000000,
        1680357600000,
        1695477600000,
        1712412000000,
        1727532000000,
        1743861600000,
        1758981600000,
        1775311200000,
        1790431200000,
        1806760800000,
        1821880800000,
        1838210400000,
        1853330400000,
        1869660000000,
        1885384800000,
        1901714400000,
        1916834400000,
        1933164000000,
        1948284000000,
        1964613600000,
        1979733600000,
        1996063200000,
        2011183200000,
        2027512800000,
        2042632800000,
        2058962400000,
        2074687200000,
        2091016800000,
        2106136800000,
        2122466400000,
        2137586400000,
        null
      ],
      "offsets": [
        -690,
        -750,
        -690,
        -720,
        -690,
        -720,
        -690,
        -720,
        -690,
        -720,
        -690,
        -720,
        -690,
        -720,
        -690,
        -720,
        -690,
        -720,
        -690,
        -720,
        -690,
        -720,
        -690,
        -720,
        -690,
        -720,
        -690,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780
      ]
    },
    {
      "name": "Navajo",
      "abbrs": [
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MWT",
        "MPT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST"
      ],
      "untils": [
        -1633273200000,
        -1615132800000,
        -1601823600000,
        -1583683200000,
        -1570374000000,
        -1551628800000,
        -1538924400000,
        -1534089600000,
        -880210800000,
        -769395600000,
        -765388800000,
        -147884400000,
        -131558400000,
        -116434800000,
        -100108800000,
        -84380400000,
        -68659200000,
        -52930800000,
        -37209600000,
        -21481200000,
        -5760000000,
        9968400000,
        25689600000,
        41418000000,
        57744000000,
        73472400000,
        89193600000,
        104922000000,
        120643200000,
        126694800000,
        152092800000,
        162378000000,
        183542400000,
        199270800000,
        215596800000,
        230720400000,
        247046400000,
        262774800000,
        278496000000,
        294224400000,
        309945600000,
        325674000000,
        341395200000,
        357123600000,
        372844800000,
        388573200000,
        404899200000,
        420022800000,
        436348800000,
        452077200000,
        467798400000,
        483526800000,
        499248000000,
        514976400000,
        530697600000,
        544611600000,
        562147200000,
        576061200000,
        594201600000,
        607510800000,
        625651200000,
        638960400000,
        657100800000,
        671014800000,
        688550400000,
        702464400000,
        720000000000,
        733914000000,
        752054400000,
        765363600000,
        783504000000,
        796813200000,
        814953600000,
        828867600000,
        846403200000,
        860317200000,
        877852800000,
        891766800000,
        909302400000,
        923216400000,
        941356800000,
        954666000000,
        972806400000,
        986115600000,
        1004256000000,
        1018170000000,
        1035705600000,
        1049619600000,
        1067155200000,
        1081069200000,
        1099209600000,
        1112518800000,
        1130659200000,
        1143968400000,
        1162108800000,
        1173603600000,
        1194163200000,
        1205053200000,
        1225612800000,
        1236502800000,
        1257062400000,
        1268557200000,
        1289116800000,
        1300006800000,
        1320566400000,
        1331456400000,
        1352016000000,
        1362906000000,
        1383465600000,
        1394355600000,
        1414915200000,
        1425805200000,
        1446364800000,
        1457859600000,
        1478419200000,
        1489309200000,
        1509868800000,
        1520758800000,
        1541318400000,
        1552208400000,
        1572768000000,
        1583658000000,
        1604217600000,
        1615712400000,
        1636272000000,
        1647162000000,
        1667721600000,
        1678611600000,
        1699171200000,
        1710061200000,
        1730620800000,
        1741510800000,
        1762070400000,
        1772960400000,
        1793520000000,
        1805014800000,
        1825574400000,
        1836464400000,
        1857024000000,
        1867914000000,
        1888473600000,
        1899363600000,
        1919923200000,
        1930813200000,
        1951372800000,
        1962867600000,
        1983427200000,
        1994317200000,
        2014876800000,
        2025766800000,
        2046326400000,
        2057216400000,
        2077776000000,
        2088666000000,
        2109225600000,
        2120115600000,
        2140675200000,
        null
      ],
      "offsets": [
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420
      ]
    },
    {
      "name": "PRC",
      "abbrs": [
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST"
      ],
      "untils": [
        -933494400000,
        -923130000000,
        -908784000000,
        -891594000000,
        515520000000,
        527007600000,
        545155200000,
        558457200000,
        576604800000,
        589906800000,
        608659200000,
        621961200000,
        640108800000,
        653410800000,
        671558400000,
        684860400000,
        null
      ],
      "offsets": [
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480
      ]
    },
    {
      "name": "PST8PDT",
      "abbrs": [
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PWT",
        "PPT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST"
      ],
      "untils": [
        -1633269600000,
        -1615129200000,
        -1601820000000,
        -1583679600000,
        -880207200000,
        -769395600000,
        -765385200000,
        -84376800000,
        -68655600000,
        -52927200000,
        -37206000000,
        -21477600000,
        -5756400000,
        9972000000,
        25693200000,
        41421600000,
        57747600000,
        73476000000,
        89197200000,
        104925600000,
        120646800000,
        126698400000,
        152096400000,
        162381600000,
        183546000000,
        199274400000,
        215600400000,
        230724000000,
        247050000000,
        262778400000,
        278499600000,
        294228000000,
        309949200000,
        325677600000,
        341398800000,
        357127200000,
        372848400000,
        388576800000,
        404902800000,
        420026400000,
        436352400000,
        452080800000,
        467802000000,
        483530400000,
        499251600000,
        514980000000,
        530701200000,
        544615200000,
        562150800000,
        576064800000,
        594205200000,
        607514400000,
        625654800000,
        638964000000,
        657104400000,
        671018400000,
        688554000000,
        702468000000,
        720003600000,
        733917600000,
        752058000000,
        765367200000,
        783507600000,
        796816800000,
        814957200000,
        828871200000,
        846406800000,
        860320800000,
        877856400000,
        891770400000,
        909306000000,
        923220000000,
        941360400000,
        954669600000,
        972810000000,
        986119200000,
        1004259600000,
        1018173600000,
        1035709200000,
        1049623200000,
        1067158800000,
        1081072800000,
        1099213200000,
        1112522400000,
        1130662800000,
        1143972000000,
        1162112400000,
        1173607200000,
        1194166800000,
        1205056800000,
        1225616400000,
        1236506400000,
        1257066000000,
        1268560800000,
        1289120400000,
        1300010400000,
        1320570000000,
        1331460000000,
        1352019600000,
        1362909600000,
        1383469200000,
        1394359200000,
        1414918800000,
        1425808800000,
        1446368400000,
        1457863200000,
        1478422800000,
        1489312800000,
        1509872400000,
        1520762400000,
        1541322000000,
        1552212000000,
        1572771600000,
        1583661600000,
        1604221200000,
        1615716000000,
        1636275600000,
        1647165600000,
        1667725200000,
        1678615200000,
        1699174800000,
        1710064800000,
        1730624400000,
        1741514400000,
        1762074000000,
        1772964000000,
        1793523600000,
        1805018400000,
        1825578000000,
        1836468000000,
        1857027600000,
        1867917600000,
        1888477200000,
        1899367200000,
        1919926800000,
        1930816800000,
        1951376400000,
        1962871200000,
        1983430800000,
        1994320800000,
        2014880400000,
        2025770400000,
        2046330000000,
        2057220000000,
        2077779600000,
        2088669600000,
        2109229200000,
        2120119200000,
        2140678800000,
        null
      ],
      "offsets": [
        480,
        420,
        480,
        420,
        480,
        420,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480
      ]
    },
    {
      "name": "Pacific/Apia",
      "abbrs": [
        "LMT",
        "WSST",
        "SST",
        "SDT",
        "SST",
        "SDT",
        "WSDT",
        "WSST",
        "WSDT",
        "WSST",
        "WSDT",
        "WSST",
        "WSDT",
        "WSST",
        "WSDT",
        "WSST",
        "WSDT",
        "WSST",
        "WSDT",
        "WSST",
        "WSDT",
        "WSST",
        "WSDT",
        "WSST",
        "WSDT",
        "WSST",
        "WSDT",
        "WSST",
        "WSDT",
        "WSST",
        "WSDT",
        "WSST",
        "WSDT",
        "WSST",
        "WSDT",
        "WSST",
        "WSDT",
        "WSST",
        "WSDT",
        "WSST",
        "WSDT",
        "WSST",
        "WSDT",
        "WSST",
        "WSDT",
        "WSST",
        "WSDT",
        "WSST",
        "WSDT",
        "WSST",
        "WSDT",
        "WSST",
        "WSDT",
        "WSST",
        "WSDT",
        "WSST",
        "WSDT",
        "WSST",
        "WSDT"
      ],
      "untils": [
        -1861878784000,
        -631110600000,
        1285498800000,
        1301752800000,
        1316872800000,
        1325239200000,
        1333202400000,
        1348927200000,
        1365256800000,
        1380376800000,
        1396706400000,
        1411826400000,
        1428156000000,
        1443276000000,
        1459605600000,
        1474725600000,
        1491055200000,
        1506175200000,
        1522504800000,
        1538229600000,
        1554559200000,
        1569679200000,
        1586008800000,
        1601128800000,
        1617458400000,
        1632578400000,
        1648908000000,
        1664028000000,
        1680357600000,
        1695477600000,
        1712412000000,
        1727532000000,
        1743861600000,
        1758981600000,
        1775311200000,
        1790431200000,
        1806760800000,
        1821880800000,
        1838210400000,
        1853330400000,
        1869660000000,
        1885384800000,
        1901714400000,
        1916834400000,
        1933164000000,
        1948284000000,
        1964613600000,
        1979733600000,
        1996063200000,
        2011183200000,
        2027512800000,
        2042632800000,
        2058962400000,
        2074687200000,
        2091016800000,
        2106136800000,
        2122466400000,
        2137586400000,
        null
      ],
      "offsets": [
        686.9333,
        690,
        660,
        600,
        660,
        600,
        -840,
        -780,
        -840,
        -780,
        -840,
        -780,
        -840,
        -780,
        -840,
        -780,
        -840,
        -780,
        -840,
        -780,
        -840,
        -780,
        -840,
        -780,
        -840,
        -780,
        -840,
        -780,
        -840,
        -780,
        -840,
        -780,
        -840,
        -780,
        -840,
        -780,
        -840,
        -780,
        -840,
        -780,
        -840,
        -780,
        -840,
        -780,
        -840,
        -780,
        -840,
        -780,
        -840,
        -780,
        -840,
        -780,
        -840,
        -780,
        -840,
        -780,
        -840,
        -780,
        -840
      ]
    },
    {
      "name": "Pacific/Auckland",
      "abbrs": [
        "NZMT",
        "NZST",
        "NZMT",
        "NZST",
        "NZMT",
        "NZST",
        "NZMT",
        "NZST",
        "NZMT",
        "NZST",
        "NZMT",
        "NZST",
        "NZMT",
        "NZST",
        "NZMT",
        "NZST",
        "NZMT",
        "NZST",
        "NZMT",
        "NZST",
        "NZMT",
        "NZST",
        "NZMT",
        "NZST",
        "NZMT",
        "NZST",
        "NZMT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT",
        "NZST",
        "NZDT"
      ],
      "untils": [
        -1330335000000,
        -1320057000000,
        -1300699800000,
        -1287396000000,
        -1269250200000,
        -1255946400000,
        -1237800600000,
        -1224496800000,
        -1206351000000,
        -1192442400000,
        -1174901400000,
        -1160992800000,
        -1143451800000,
        -1125914400000,
        -1112607000000,
        -1094464800000,
        -1081157400000,
        -1063015200000,
        -1049707800000,
        -1031565600000,
        -1018258200000,
        -1000116000000,
        -986808600000,
        -968061600000,
        -955359000000,
        -936612000000,
        -923304600000,
        152632800000,
        162309600000,
        183477600000,
        194968800000,
        215532000000,
        226418400000,
        246981600000,
        257868000000,
        278431200000,
        289317600000,
        309880800000,
        320767200000,
        341330400000,
        352216800000,
        372780000000,
        384271200000,
        404834400000,
        415720800000,
        436284000000,
        447170400000,
        467733600000,
        478620000000,
        499183200000,
        510069600000,
        530632800000,
        541519200000,
        562082400000,
        573573600000,
        594136800000,
        605023200000,
        623772000000,
        637682400000,
        655221600000,
        669132000000,
        686671200000,
        700581600000,
        718120800000,
        732636000000,
        749570400000,
        764085600000,
        781020000000,
        795535200000,
        812469600000,
        826984800000,
        844524000000,
        858434400000,
        875973600000,
        889884000000,
        907423200000,
        921938400000,
        938872800000,
        953388000000,
        970322400000,
        984837600000,
        1002376800000,
        1016287200000,
        1033826400000,
        1047736800000,
        1065276000000,
        1079791200000,
        1096725600000,
        1111240800000,
        1128175200000,
        1142690400000,
        1159624800000,
        1174140000000,
        1191074400000,
        1207404000000,
        1222524000000,
        1238853600000,
        1253973600000,
        1270303200000,
        1285423200000,
        1301752800000,
        1316872800000,
        1333202400000,
        1348927200000,
        1365256800000,
        1380376800000,
        1396706400000,
        1411826400000,
        1428156000000,
        1443276000000,
        1459605600000,
        1474725600000,
        1491055200000,
        1506175200000,
        1522504800000,
        1538229600000,
        1554559200000,
        1569679200000,
        1586008800000,
        1601128800000,
        1617458400000,
        1632578400000,
        1648908000000,
        1664028000000,
        1680357600000,
        1695477600000,
        1712412000000,
        1727532000000,
        1743861600000,
        1758981600000,
        1775311200000,
        1790431200000,
        1806760800000,
        1821880800000,
        1838210400000,
        1853330400000,
        1869660000000,
        1885384800000,
        1901714400000,
        1916834400000,
        1933164000000,
        1948284000000,
        1964613600000,
        1979733600000,
        1996063200000,
        2011183200000,
        2027512800000,
        2042632800000,
        2058962400000,
        2074687200000,
        2091016800000,
        2106136800000,
        2122466400000,
        2137586400000,
        null
      ],
      "offsets": [
        -690,
        -750,
        -690,
        -720,
        -690,
        -720,
        -690,
        -720,
        -690,
        -720,
        -690,
        -720,
        -690,
        -720,
        -690,
        -720,
        -690,
        -720,
        -690,
        -720,
        -690,
        -720,
        -690,
        -720,
        -690,
        -720,
        -690,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780
      ]
    },
    {
      "name": "Pacific/Bougainville",
      "abbrs": [
        "PGT",
        "JST",
        "PGT",
        "BST"
      ],
      "untils": [
        -868010400000,
        -768906000000,
        1419696000000,
        null
      ],
      "offsets": [
        -600,
        -540,
        -600,
        -660
      ]
    },
    {
      "name": "Pacific/Chatham",
      "abbrs": [
        "CHAST",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT",
        "CHAST",
        "CHADT"
      ],
      "untils": [
        -757426500000,
        152632800000,
        162309600000,
        183477600000,
        194968800000,
        215532000000,
        226418400000,
        246981600000,
        257868000000,
        278431200000,
        289317600000,
        309880800000,
        320767200000,
        341330400000,
        352216800000,
        372780000000,
        384271200000,
        404834400000,
        415720800000,
        436284000000,
        447170400000,
        467733600000,
        478620000000,
        499183200000,
        510069600000,
        530632800000,
        541519200000,
        562082400000,
        573573600000,
        594136800000,
        605023200000,
        623772000000,
        637682400000,
        655221600000,
        669132000000,
        686671200000,
        700581600000,
        718120800000,
        732636000000,
        749570400000,
        764085600000,
        781020000000,
        795535200000,
        812469600000,
        826984800000,
        844524000000,
        858434400000,
        875973600000,
        889884000000,
        907423200000,
        921938400000,
        938872800000,
        953388000000,
        970322400000,
        984837600000,
        1002376800000,
        1016287200000,
        1033826400000,
        1047736800000,
        1065276000000,
        1079791200000,
        1096725600000,
        1111240800000,
        1128175200000,
        1142690400000,
        1159624800000,
        1174140000000,
        1191074400000,
        1207404000000,
        1222524000000,
        1238853600000,
        1253973600000,
        1270303200000,
        1285423200000,
        1301752800000,
        1316872800000,
        1333202400000,
        1348927200000,
        1365256800000,
        1380376800000,
        1396706400000,
        1411826400000,
        1428156000000,
        1443276000000,
        1459605600000,
        1474725600000,
        1491055200000,
        1506175200000,
        1522504800000,
        1538229600000,
        1554559200000,
        1569679200000,
        1586008800000,
        1601128800000,
        1617458400000,
        1632578400000,
        1648908000000,
        1664028000000,
        1680357600000,
        1695477600000,
        1712412000000,
        1727532000000,
        1743861600000,
        1758981600000,
        1775311200000,
        1790431200000,
        1806760800000,
        1821880800000,
        1838210400000,
        1853330400000,
        1869660000000,
        1885384800000,
        1901714400000,
        1916834400000,
        1933164000000,
        1948284000000,
        1964613600000,
        1979733600000,
        1996063200000,
        2011183200000,
        2027512800000,
        2042632800000,
        2058962400000,
        2074687200000,
        2091016800000,
        2106136800000,
        2122466400000,
        2137586400000,
        null
      ],
      "offsets": [
        -735,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825,
        -765,
        -825
      ]
    },
    {
      "name": "Pacific/Chuuk",
      "abbrs": [
        "CHUT"
      ],
      "untils": [
        null
      ],
      "offsets": [
        -600
      ]
    },
    {
      "name": "Pacific/Easter",
      "abbrs": [
        "EMT",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST",
        "EASST",
        "EAST"
      ],
      "untils": [
        -1178124152000,
        -36619200000,
        -23922000000,
        -3355200000,
        7527600000,
        24465600000,
        37767600000,
        55915200000,
        69217200000,
        87969600000,
        100666800000,
        118209600000,
        132116400000,
        150868800000,
        163566000000,
        182318400000,
        195620400000,
        213768000000,
        227070000000,
        245217600000,
        258519600000,
        277272000000,
        289969200000,
        308721600000,
        321418800000,
        340171200000,
        353473200000,
        371620800000,
        384922800000,
        403070400000,
        416372400000,
        434520000000,
        447822000000,
        466574400000,
        479271600000,
        498024000000,
        510721200000,
        529473600000,
        545194800000,
        560923200000,
        574225200000,
        592372800000,
        605674800000,
        624427200000,
        637124400000,
        653457600000,
        668574000000,
        687326400000,
        700628400000,
        718776000000,
        732078000000,
        750225600000,
        763527600000,
        781675200000,
        794977200000,
        813729600000,
        826426800000,
        845179200000,
        859690800000,
        876628800000,
        889930800000,
        906868800000,
        923194800000,
        939528000000,
        952830000000,
        971582400000,
        984279600000,
        1003032000000,
        1015729200000,
        1034481600000,
        1047178800000,
        1065931200000,
        1079233200000,
        1097380800000,
        1110682800000,
        1128830400000,
        1142132400000,
        1160884800000,
        1173582000000,
        1192334400000,
        1206846000000,
        1223784000000,
        1237086000000,
        1255233600000,
        1270350000000,
        1286683200000,
        1304823600000,
        1313899200000,
        1335668400000,
        1346558400000,
        1367118000000,
        1378612800000,
        1398567600000,
        1410062400000,
        1430017200000,
        null
      ],
      "offsets": [
        437.4667,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        300
      ]
    },
    {
      "name": "Pacific/Efate",
      "abbrs": [
        "LMT",
        "VUT",
        "VUST",
        "VUT",
        "VUST",
        "VUT",
        "VUST",
        "VUT",
        "VUST",
        "VUT",
        "VUST",
        "VUT",
        "VUST",
        "VUT",
        "VUST",
        "VUT",
        "VUST",
        "VUT",
        "VUST",
        "VUT",
        "VUST",
        "VUT"
      ],
      "untils": [
        -1829387596000,
        433256400000,
        448977600000,
        467298000000,
        480427200000,
        496760400000,
        511876800000,
        528210000000,
        543931200000,
        559659600000,
        575380800000,
        591109200000,
        606830400000,
        622558800000,
        638280000000,
        654008400000,
        669729600000,
        686062800000,
        696340800000,
        719931600000,
        727790400000,
        null
      ],
      "offsets": [
        -673.2667,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660
      ]
    },
    {
      "name": "Pacific/Enderbury",
      "abbrs": [
        "PHOT",
        "PHOT",
        "PHOT"
      ],
      "untils": [
        307627200000,
        788958000000,
        null
      ],
      "offsets": [
        720,
        660,
        -780
      ]
    },
    {
      "name": "Pacific/Fakaofo",
      "abbrs": [
        "TKT",
        "TKT"
      ],
      "untils": [
        1325242800000,
        null
      ],
      "offsets": [
        660,
        -780
      ]
    },
    {
      "name": "Pacific/Fiji",
      "abbrs": [
        "LMT",
        "FJT",
        "FJST",
        "FJT",
        "FJST",
        "FJT",
        "FJST",
        "FJT",
        "FJST",
        "FJT",
        "FJST",
        "FJT",
        "FJST",
        "FJT",
        "FJST",
        "FJT",
        "FJST",
        "FJT",
        "FJST",
        "FJT",
        "FJST",
        "FJT",
        "FJST",
        "FJT",
        "FJST",
        "FJT",
        "FJST",
        "FJT",
        "FJST",
        "FJT",
        "FJST",
        "FJT",
        "FJST",
        "FJT",
        "FJST",
        "FJT",
        "FJST",
        "FJT",
        "FJST",
        "FJT",
        "FJST",
        "FJT",
        "FJST",
        "FJT",
        "FJST",
        "FJT",
        "FJST",
        "FJT",
        "FJST",
        "FJT",
        "FJST",
        "FJT",
        "FJST",
        "FJT",
        "FJST",
        "FJT",
        "FJST",
        "FJT",
        "FJST",
        "FJT",
        "FJST",
        "FJT",
        "FJST"
      ],
      "untils": [
        -1709985344000,
        909842400000,
        920124000000,
        941896800000,
        951573600000,
        1259416800000,
        1269698400000,
        1287842400000,
        1299333600000,
        1319292000000,
        1327154400000,
        1350741600000,
        1358604000000,
        1382796000000,
        1390050000000,
        1414850400000,
        1421503200000,
        1446300000000,
        1453557600000,
        1478354400000,
        1485007200000,
        1509804000000,
        1516456800000,
        1541253600000,
        1547906400000,
        1572703200000,
        1579356000000,
        1604152800000,
        1611410400000,
        1636207200000,
        1642860000000,
        1667656800000,
        1674309600000,
        1699106400000,
        1705759200000,
        1730556000000,
        1737208800000,
        1762005600000,
        1768658400000,
        1793455200000,
        1800712800000,
        1825509600000,
        1832162400000,
        1856959200000,
        1863612000000,
        1888408800000,
        1895061600000,
        1919858400000,
        1926511200000,
        1951308000000,
        1957960800000,
        1983362400000,
        1990015200000,
        2014812000000,
        2021464800000,
        2046261600000,
        2052914400000,
        2077711200000,
        2084364000000,
        2109160800000,
        2115813600000,
        2140610400000,
        null
      ],
      "offsets": [
        -715.7333,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780,
        -720,
        -780
      ]
    },
    {
      "name": "Pacific/Funafuti",
      "abbrs": [
        "TVT"
      ],
      "untils": [
        null
      ],
      "offsets": [
        -720
      ]
    },
    {
      "name": "Pacific/Galapagos",
      "abbrs": [
        "LMT",
        "ECT",
        "GALT"
      ],
      "untils": [
        -1230746496000,
        504939600000,
        null
      ],
      "offsets": [
        358.4,
        300,
        360
      ]
    },
    {
      "name": "Pacific/Gambier",
      "abbrs": [
        "LMT",
        "GAMT"
      ],
      "untils": [
        -1806678012000,
        null
      ],
      "offsets": [
        539.8,
        540
      ]
    },
    {
      "name": "Pacific/Guadalcanal",
      "abbrs": [
        "LMT",
        "SBT"
      ],
      "untils": [
        -1806748788000,
        null
      ],
      "offsets": [
        -639.8,
        -660
      ]
    },
    {
      "name": "Pacific/Guam",
      "abbrs": [
        "GST",
        "ChST"
      ],
      "untils": [
        977493600000,
        null
      ],
      "offsets": [
        -600,
        -600
      ]
    },
    {
      "name": "Pacific/Honolulu",
      "abbrs": [
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HST"
      ],
      "untils": [
        -1157283000000,
        -1155436200000,
        -880198200000,
        -765376200000,
        -712150200000,
        null
      ],
      "offsets": [
        630,
        570,
        630,
        570,
        630,
        600
      ]
    },
    {
      "name": "Pacific/Johnston",
      "abbrs": [
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HST"
      ],
      "untils": [
        -1157283000000,
        -1155436200000,
        -880198200000,
        -765376200000,
        -712150200000,
        null
      ],
      "offsets": [
        630,
        570,
        630,
        570,
        630,
        600
      ]
    },
    {
      "name": "Pacific/Kiritimati",
      "abbrs": [
        "LINT",
        "LINT",
        "LINT"
      ],
      "untils": [
        307622400000,
        788954400000,
        null
      ],
      "offsets": [
        640,
        600,
        -840
      ]
    },
    {
      "name": "Pacific/Kosrae",
      "abbrs": [
        "KOST",
        "KOST",
        "KOST"
      ],
      "untils": [
        -7988400000,
        915105600000,
        null
      ],
      "offsets": [
        -660,
        -720,
        -660
      ]
    },
    {
      "name": "Pacific/Kwajalein",
      "abbrs": [
        "MHT",
        "KWAT",
        "MHT"
      ],
      "untils": [
        -7988400000,
        745848000000,
        null
      ],
      "offsets": [
        -660,
        720,
        -720
      ]
    },
    {
      "name": "Pacific/Majuro",
      "abbrs": [
        "MHT",
        "MHT"
      ],
      "untils": [
        -7988400000,
        null
      ],
      "offsets": [
        -660,
        -720
      ]
    },
    {
      "name": "Pacific/Marquesas",
      "abbrs": [
        "LMT",
        "MART"
      ],
      "untils": [
        -1806676920000,
        null
      ],
      "offsets": [
        558,
        570
      ]
    },
    {
      "name": "Pacific/Midway",
      "abbrs": [
        "LMT",
        "NST",
        "BST",
        "SST"
      ],
      "untils": [
        -1861879032000,
        -86878800000,
        439038000000,
        null
      ],
      "offsets": [
        682.8,
        660,
        660,
        660
      ]
    },
    {
      "name": "Pacific/Nauru",
      "abbrs": [
        "LMT",
        "NRT",
        "JST",
        "NRT",
        "NRT"
      ],
      "untils": [
        -1545131260000,
        -877347000000,
        -800960400000,
        294323400000,
        null
      ],
      "offsets": [
        -667.6667,
        -690,
        -540,
        -690,
        -720
      ]
    },
    {
      "name": "Pacific/Niue",
      "abbrs": [
        "NUT",
        "NUT",
        "NUT"
      ],
      "untils": [
        -599575200000,
        276089400000,
        null
      ],
      "offsets": [
        680,
        690,
        660
      ]
    },
    {
      "name": "Pacific/Norfolk",
      "abbrs": [
        "NMT",
        "NFT"
      ],
      "untils": [
        -599656320000,
        null
      ],
      "offsets": [
        -672,
        -690
      ]
    },
    {
      "name": "Pacific/Noumea",
      "abbrs": [
        "LMT",
        "NCT",
        "NCST",
        "NCT",
        "NCST",
        "NCT",
        "NCST",
        "NCT"
      ],
      "untils": [
        -1829387148000,
        250002000000,
        257342400000,
        281451600000,
        288878400000,
        849366000000,
        857228400000,
        null
      ],
      "offsets": [
        -665.8,
        -660,
        -720,
        -660,
        -720,
        -660,
        -720,
        -660
      ]
    },
    {
      "name": "Pacific/Pago_Pago",
      "abbrs": [
        "LMT",
        "NST",
        "BST",
        "SST"
      ],
      "untils": [
        -1861879032000,
        -86878800000,
        439038000000,
        null
      ],
      "offsets": [
        682.8,
        660,
        660,
        660
      ]
    },
    {
      "name": "Pacific/Palau",
      "abbrs": [
        "PWT"
      ],
      "untils": [
        null
      ],
      "offsets": [
        -540
      ]
    },
    {
      "name": "Pacific/Pitcairn",
      "abbrs": [
        "PNT",
        "PST"
      ],
      "untils": [
        893665800000,
        null
      ],
      "offsets": [
        510,
        480
      ]
    },
    {
      "name": "Pacific/Pohnpei",
      "abbrs": [
        "PONT"
      ],
      "untils": [
        null
      ],
      "offsets": [
        -660
      ]
    },
    {
      "name": "Pacific/Ponape",
      "abbrs": [
        "PONT"
      ],
      "untils": [
        null
      ],
      "offsets": [
        -660
      ]
    },
    {
      "name": "Pacific/Port_Moresby",
      "abbrs": [
        "PGT"
      ],
      "untils": [
        null
      ],
      "offsets": [
        -600
      ]
    },
    {
      "name": "Pacific/Rarotonga",
      "abbrs": [
        "CKT",
        "CKHST",
        "CKT",
        "CKHST",
        "CKT",
        "CKHST",
        "CKT",
        "CKHST",
        "CKT",
        "CKHST",
        "CKT",
        "CKHST",
        "CKT",
        "CKHST",
        "CKT",
        "CKHST",
        "CKT",
        "CKHST",
        "CKT",
        "CKHST",
        "CKT",
        "CKHST",
        "CKT",
        "CKHST",
        "CKT",
        "CKHST",
        "CKT"
      ],
      "untils": [
        279714600000,
        289387800000,
        309952800000,
        320837400000,
        341402400000,
        352287000000,
        372852000000,
        384341400000,
        404906400000,
        415791000000,
        436356000000,
        447240600000,
        467805600000,
        478690200000,
        499255200000,
        510139800000,
        530704800000,
        541589400000,
        562154400000,
        573643800000,
        594208800000,
        605093400000,
        625658400000,
        636543000000,
        657108000000,
        667992600000,
        null
      ],
      "offsets": [
        630,
        570,
        600,
        570,
        600,
        570,
        600,
        570,
        600,
        570,
        600,
        570,
        600,
        570,
        600,
        570,
        600,
        570,
        600,
        570,
        600,
        570,
        600,
        570,
        600,
        570,
        600
      ]
    },
    {
      "name": "Pacific/Saipan",
      "abbrs": [
        "GST",
        "ChST"
      ],
      "untils": [
        977493600000,
        null
      ],
      "offsets": [
        -600,
        -600
      ]
    },
    {
      "name": "Pacific/Samoa",
      "abbrs": [
        "LMT",
        "NST",
        "BST",
        "SST"
      ],
      "untils": [
        -1861879032000,
        -86878800000,
        439038000000,
        null
      ],
      "offsets": [
        682.8,
        660,
        660,
        660
      ]
    },
    {
      "name": "Pacific/Tahiti",
      "abbrs": [
        "LMT",
        "TAHT"
      ],
      "untils": [
        -1806674504000,
        null
      ],
      "offsets": [
        598.2667,
        600
      ]
    },
    {
      "name": "Pacific/Tarawa",
      "abbrs": [
        "GILT"
      ],
      "untils": [
        null
      ],
      "offsets": [
        -720
      ]
    },
    {
      "name": "Pacific/Tongatapu",
      "abbrs": [
        "TOT",
        "TOT",
        "TOST",
        "TOT",
        "TOST",
        "TOT",
        "TOST",
        "TOT"
      ],
      "untils": [
        -915193200000,
        939214800000,
        953384400000,
        973342800000,
        980596800000,
        1004792400000,
        1012046400000,
        null
      ],
      "offsets": [
        -740,
        -780,
        -840,
        -780,
        -840,
        -780,
        -840,
        -780
      ]
    },
    {
      "name": "Pacific/Truk",
      "abbrs": [
        "CHUT"
      ],
      "untils": [
        null
      ],
      "offsets": [
        -600
      ]
    },
    {
      "name": "Pacific/Wake",
      "abbrs": [
        "WAKT"
      ],
      "untils": [
        null
      ],
      "offsets": [
        -720
      ]
    },
    {
      "name": "Pacific/Wallis",
      "abbrs": [
        "WFT"
      ],
      "untils": [
        null
      ],
      "offsets": [
        -720
      ]
    },
    {
      "name": "Pacific/Yap",
      "abbrs": [
        "CHUT"
      ],
      "untils": [
        null
      ],
      "offsets": [
        -600
      ]
    },
    {
      "name": "Poland",
      "abbrs": [
        "WMT",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "EET",
        "EEST",
        "EET",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET"
      ],
      "untils": [
        -1717032240000,
        -1693706400000,
        -1680483600000,
        -1663455600000,
        -1650150000000,
        -1632006000000,
        -1618700400000,
        -1600473600000,
        -1587168000000,
        -1501725600000,
        -931734000000,
        -857257200000,
        -844556400000,
        -828226800000,
        -812502000000,
        -796608000000,
        -778726800000,
        -762660000000,
        -748486800000,
        -733273200000,
        -715215600000,
        -701910000000,
        -684975600000,
        -670460400000,
        -654130800000,
        -639010800000,
        -397094400000,
        -386812800000,
        -371088000000,
        -355363200000,
        -334195200000,
        -323308800000,
        -307584000000,
        -291859200000,
        -271296000000,
        -260409600000,
        -239846400000,
        -228960000000,
        -208396800000,
        -197510400000,
        -176342400000,
        -166060800000,
        228873600000,
        243993600000,
        260323200000,
        276048000000,
        291772800000,
        307497600000,
        323827200000,
        338947200000,
        354672000000,
        370396800000,
        386121600000,
        401846400000,
        417571200000,
        433296000000,
        449020800000,
        465350400000,
        481075200000,
        496800000000,
        512524800000,
        528249600000,
        543974400000,
        559699200000,
        575427600000,
        591152400000,
        606877200000,
        622602000000,
        638326800000,
        654656400000,
        670381200000,
        686106000000,
        701830800000,
        717555600000,
        733280400000,
        749005200000,
        764730000000,
        780454800000,
        796179600000,
        811904400000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        -84,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -120,
        -180,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60
      ]
    },
    {
      "name": "Portugal",
      "abbrs": [
        "LMT",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WEMT",
        "WEST",
        "WET",
        "WEST",
        "WEMT",
        "WEST",
        "WET",
        "WEST",
        "WEMT",
        "WEST",
        "WET",
        "WEST",
        "WEMT",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "CET",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "CEST",
        "CET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET"
      ],
      "untils": [
        -1830381795000,
        -1689555600000,
        -1677801600000,
        -1667437200000,
        -1647738000000,
        -1635814800000,
        -1616202000000,
        -1604365200000,
        -1584666000000,
        -1572742800000,
        -1553043600000,
        -1541206800000,
        -1521507600000,
        -1442451600000,
        -1426813200000,
        -1379293200000,
        -1364778000000,
        -1348448400000,
        -1333328400000,
        -1316394000000,
        -1301274000000,
        -1284339600000,
        -1269824400000,
        -1221440400000,
        -1206925200000,
        -1191200400000,
        -1175475600000,
        -1127696400000,
        -1111971600000,
        -1096851600000,
        -1080522000000,
        -1063587600000,
        -1049072400000,
        -1033347600000,
        -1017622800000,
        -1002502800000,
        -986173200000,
        -969238800000,
        -950490000000,
        -942022800000,
        -922669200000,
        -906944400000,
        -891133200000,
        -877309200000,
        -873684000000,
        -864007200000,
        -857955600000,
        -845859600000,
        -842839200000,
        -831348000000,
        -825901200000,
        -814410000000,
        -810784800000,
        -799898400000,
        -794451600000,
        -782960400000,
        -779335200000,
        -768448800000,
        -763002000000,
        -749091600000,
        -733366800000,
        -717631200000,
        -701906400000,
        -686181600000,
        -670456800000,
        -654732000000,
        -639007200000,
        -591832800000,
        -575503200000,
        -559778400000,
        -544053600000,
        -528328800000,
        -512604000000,
        -496879200000,
        -481154400000,
        -465429600000,
        -449704800000,
        -433980000000,
        -417650400000,
        -401925600000,
        -386200800000,
        -370476000000,
        -354751200000,
        -339026400000,
        -323301600000,
        -307576800000,
        -291852000000,
        -276127200000,
        -260402400000,
        -244677600000,
        -228348000000,
        -212623200000,
        -196898400000,
        -181173600000,
        -165448800000,
        -149724000000,
        -133999200000,
        -118274400000,
        212544000000,
        228268800000,
        243993600000,
        260323200000,
        276048000000,
        291772800000,
        307501200000,
        323222400000,
        338950800000,
        354675600000,
        370400400000,
        386125200000,
        401850000000,
        417578400000,
        433299600000,
        449024400000,
        465354000000,
        481078800000,
        496803600000,
        512528400000,
        528253200000,
        543978000000,
        559702800000,
        575427600000,
        591152400000,
        606877200000,
        622602000000,
        638326800000,
        654656400000,
        670381200000,
        686106000000,
        701830800000,
        717555600000,
        733280400000,
        749005200000,
        764730000000,
        780454800000,
        796179600000,
        811904400000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        36.75,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        -120,
        -60,
        0,
        -60,
        -120,
        -60,
        0,
        -60,
        -120,
        -60,
        0,
        -60,
        -120,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        -60,
        -120,
        -60,
        -120,
        -60,
        -120,
        -60,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0
      ]
    },
    {
      "name": "ROC",
      "abbrs": [
        "JWST",
        "JST",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST"
      ],
      "untils": [
        -1017820800000,
        -766224000000,
        -745833600000,
        -733827600000,
        -716889600000,
        -699613200000,
        -683884800000,
        -670669200000,
        -652348800000,
        -639133200000,
        -620812800000,
        -607597200000,
        -589276800000,
        -576061200000,
        -562924800000,
        -541760400000,
        -528710400000,
        -510224400000,
        -497174400000,
        -478688400000,
        -465638400000,
        -449830800000,
        -434016000000,
        -418208400000,
        -402480000000,
        -386672400000,
        -370944000000,
        -355136400000,
        -339408000000,
        -323600400000,
        -302515200000,
        -291978000000,
        -270979200000,
        -260442000000,
        133977600000,
        149785200000,
        165513600000,
        181321200000,
        299606400000,
        307551600000,
        null
      ],
      "offsets": [
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480,
        -540,
        -480
      ]
    },
    {
      "name": "ROK",
      "abbrs": [
        "LMT",
        "KST",
        "JCST",
        "JST",
        "KST",
        "KST",
        "KDT",
        "KST",
        "KDT",
        "KST",
        "KDT",
        "KST",
        "KDT",
        "KST",
        "KDT",
        "KST",
        "KDT",
        "KST",
        "KST",
        "KDT",
        "KST",
        "KDT",
        "KST"
      ],
      "untils": [
        -1948782472000,
        -1830414600000,
        -1017824400000,
        -767350800000,
        -498128400000,
        -462702600000,
        -451733400000,
        -429784200000,
        -418296600000,
        -399544200000,
        -387451800000,
        -368094600000,
        -356002200000,
        -336645000000,
        -324552600000,
        -305195400000,
        -293103000000,
        -264933000000,
        547578000000,
        560883600000,
        579027600000,
        592333200000,
        null
      ],
      "offsets": [
        -507.8667,
        -510,
        -540,
        -540,
        -540,
        -510,
        -570,
        -510,
        -570,
        -510,
        -570,
        -510,
        -570,
        -510,
        -570,
        -510,
        -570,
        -510,
        -540,
        -600,
        -540,
        -600,
        -540
      ]
    },
    {
      "name": "Singapore",
      "abbrs": [
        "SMT",
        "MALT",
        "MALST",
        "MALT",
        "MALT",
        "JST",
        "MALT",
        "SGT",
        "SGT"
      ],
      "untils": [
        -2038200925000,
        -1167634800000,
        -1073028000000,
        -894180000000,
        -879665400000,
        -767005200000,
        -138785400000,
        378664200000,
        null
      ],
      "offsets": [
        -415.4167,
        -420,
        -440,
        -440,
        -450,
        -540,
        -450,
        -450,
        -480
      ]
    },
    {
      "name": "Turkey",
      "abbrs": [
        "IMT",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "TRST",
        "TRT",
        "TRST",
        "TRT",
        "TRST",
        "TRT",
        "TRST",
        "TRT",
        "TRST",
        "TRT",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET",
        "EEST",
        "EET"
      ],
      "untils": [
        -1869875816000,
        -1693706400000,
        -1680490800000,
        -1570413600000,
        -1552186800000,
        -1538359200000,
        -1522551600000,
        -1507514400000,
        -1490583600000,
        -1440208800000,
        -1428030000000,
        -1409709600000,
        -1396494000000,
        -931140000000,
        -922762800000,
        -917834400000,
        -892436400000,
        -875844000000,
        -857358000000,
        -781063200000,
        -764737200000,
        -744343200000,
        -733806000000,
        -716436000000,
        -701924400000,
        -684986400000,
        -670474800000,
        -654141600000,
        -639025200000,
        -621828000000,
        -606970800000,
        -590032800000,
        -575434800000,
        -235620000000,
        -228279600000,
        -177732000000,
        -165726000000,
        10533600000,
        23835600000,
        41983200000,
        55285200000,
        74037600000,
        87339600000,
        107910000000,
        121219200000,
        133920000000,
        152676000000,
        165362400000,
        183502800000,
        202428000000,
        215557200000,
        228866400000,
        245797200000,
        260316000000,
        277246800000,
        308779200000,
        323827200000,
        340228800000,
        354672000000,
        371678400000,
        386121600000,
        403128000000,
        428446800000,
        433886400000,
        482792400000,
        496702800000,
        512524800000,
        528249600000,
        543974400000,
        559699200000,
        575424000000,
        591148800000,
        606873600000,
        622598400000,
        638323200000,
        654652800000,
        670374000000,
        686098800000,
        701823600000,
        717548400000,
        733273200000,
        748998000000,
        764722800000,
        780447600000,
        796172400000,
        811897200000,
        828226800000,
        846370800000,
        859676400000,
        877820400000,
        891126000000,
        909270000000,
        922575600000,
        941324400000,
        954025200000,
        972774000000,
        985474800000,
        1004223600000,
        1017529200000,
        1035673200000,
        1048978800000,
        1067122800000,
        1080428400000,
        1099177200000,
        1111878000000,
        1130626800000,
        1143327600000,
        1162076400000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301274000000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396227600000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        -116.9333,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120,
        -180,
        -120
      ]
    },
    {
      "name": "UCT",
      "abbrs": [
        "UCT"
      ],
      "untils": [
        null
      ],
      "offsets": [
        0
      ]
    },
    {
      "name": "US/Alaska",
      "abbrs": [
        "CAT",
        "CAWT",
        "CAPT",
        "CAT",
        "AHST",
        "AHDT",
        "AHST",
        "AHDT",
        "AHST",
        "AHDT",
        "AHST",
        "AHDT",
        "AHST",
        "AHDT",
        "AHST",
        "AHDT",
        "AHST",
        "AHDT",
        "AHST",
        "AHDT",
        "AHST",
        "AHDT",
        "AHST",
        "AHDT",
        "AHST",
        "AHDT",
        "AHST",
        "AHDT",
        "AHST",
        "AHDT",
        "AHST",
        "AHDT",
        "AHST",
        "AHDT",
        "YST",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST",
        "AKDT",
        "AKST"
      ],
      "untils": [
        -880200000000,
        -769395600000,
        -765378000000,
        -86882400000,
        -21470400000,
        -5749200000,
        9979200000,
        25700400000,
        41428800000,
        57754800000,
        73483200000,
        89204400000,
        104932800000,
        120654000000,
        126705600000,
        152103600000,
        162388800000,
        183553200000,
        199281600000,
        215607600000,
        230731200000,
        247057200000,
        262785600000,
        278506800000,
        294235200000,
        309956400000,
        325684800000,
        341406000000,
        357134400000,
        372855600000,
        388584000000,
        404910000000,
        420033600000,
        436359600000,
        439030800000,
        452084400000,
        467805600000,
        483534000000,
        499255200000,
        514983600000,
        530704800000,
        544618800000,
        562154400000,
        576068400000,
        594208800000,
        607518000000,
        625658400000,
        638967600000,
        657108000000,
        671022000000,
        688557600000,
        702471600000,
        720007200000,
        733921200000,
        752061600000,
        765370800000,
        783511200000,
        796820400000,
        814960800000,
        828874800000,
        846410400000,
        860324400000,
        877860000000,
        891774000000,
        909309600000,
        923223600000,
        941364000000,
        954673200000,
        972813600000,
        986122800000,
        1004263200000,
        1018177200000,
        1035712800000,
        1049626800000,
        1067162400000,
        1081076400000,
        1099216800000,
        1112526000000,
        1130666400000,
        1143975600000,
        1162116000000,
        1173610800000,
        1194170400000,
        1205060400000,
        1225620000000,
        1236510000000,
        1257069600000,
        1268564400000,
        1289124000000,
        1300014000000,
        1320573600000,
        1331463600000,
        1352023200000,
        1362913200000,
        1383472800000,
        1394362800000,
        1414922400000,
        1425812400000,
        1446372000000,
        1457866800000,
        1478426400000,
        1489316400000,
        1509876000000,
        1520766000000,
        1541325600000,
        1552215600000,
        1572775200000,
        1583665200000,
        1604224800000,
        1615719600000,
        1636279200000,
        1647169200000,
        1667728800000,
        1678618800000,
        1699178400000,
        1710068400000,
        1730628000000,
        1741518000000,
        1762077600000,
        1772967600000,
        1793527200000,
        1805022000000,
        1825581600000,
        1836471600000,
        1857031200000,
        1867921200000,
        1888480800000,
        1899370800000,
        1919930400000,
        1930820400000,
        1951380000000,
        1962874800000,
        1983434400000,
        1994324400000,
        2014884000000,
        2025774000000,
        2046333600000,
        2057223600000,
        2077783200000,
        2088673200000,
        2109232800000,
        2120122800000,
        2140682400000,
        null
      ],
      "offsets": [
        600,
        540,
        540,
        600,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        540,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540,
        480,
        540
      ]
    },
    {
      "name": "US/Aleutian",
      "abbrs": [
        "NST",
        "NWT",
        "NPT",
        "NST",
        "BST",
        "BDT",
        "BST",
        "BDT",
        "BST",
        "BDT",
        "BST",
        "BDT",
        "BST",
        "BDT",
        "BST",
        "BDT",
        "BST",
        "BDT",
        "BST",
        "BDT",
        "BST",
        "BDT",
        "BST",
        "BDT",
        "BST",
        "BDT",
        "BST",
        "BDT",
        "BST",
        "BDT",
        "BST",
        "BDT",
        "BST",
        "BDT",
        "AHST",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST"
      ],
      "untils": [
        -880196400000,
        -769395600000,
        -765374400000,
        -86878800000,
        -21466800000,
        -5745600000,
        9982800000,
        25704000000,
        41432400000,
        57758400000,
        73486800000,
        89208000000,
        104936400000,
        120657600000,
        126709200000,
        152107200000,
        162392400000,
        183556800000,
        199285200000,
        215611200000,
        230734800000,
        247060800000,
        262789200000,
        278510400000,
        294238800000,
        309960000000,
        325688400000,
        341409600000,
        357138000000,
        372859200000,
        388587600000,
        404913600000,
        420037200000,
        436363200000,
        439034400000,
        452088000000,
        467809200000,
        483537600000,
        499258800000,
        514987200000,
        530708400000,
        544622400000,
        562158000000,
        576072000000,
        594212400000,
        607521600000,
        625662000000,
        638971200000,
        657111600000,
        671025600000,
        688561200000,
        702475200000,
        720010800000,
        733924800000,
        752065200000,
        765374400000,
        783514800000,
        796824000000,
        814964400000,
        828878400000,
        846414000000,
        860328000000,
        877863600000,
        891777600000,
        909313200000,
        923227200000,
        941367600000,
        954676800000,
        972817200000,
        986126400000,
        1004266800000,
        1018180800000,
        1035716400000,
        1049630400000,
        1067166000000,
        1081080000000,
        1099220400000,
        1112529600000,
        1130670000000,
        1143979200000,
        1162119600000,
        1173614400000,
        1194174000000,
        1205064000000,
        1225623600000,
        1236513600000,
        1257073200000,
        1268568000000,
        1289127600000,
        1300017600000,
        1320577200000,
        1331467200000,
        1352026800000,
        1362916800000,
        1383476400000,
        1394366400000,
        1414926000000,
        1425816000000,
        1446375600000,
        1457870400000,
        1478430000000,
        1489320000000,
        1509879600000,
        1520769600000,
        1541329200000,
        1552219200000,
        1572778800000,
        1583668800000,
        1604228400000,
        1615723200000,
        1636282800000,
        1647172800000,
        1667732400000,
        1678622400000,
        1699182000000,
        1710072000000,
        1730631600000,
        1741521600000,
        1762081200000,
        1772971200000,
        1793530800000,
        1805025600000,
        1825585200000,
        1836475200000,
        1857034800000,
        1867924800000,
        1888484400000,
        1899374400000,
        1919934000000,
        1930824000000,
        1951383600000,
        1962878400000,
        1983438000000,
        1994328000000,
        2014887600000,
        2025777600000,
        2046337200000,
        2057227200000,
        2077786800000,
        2088676800000,
        2109236400000,
        2120126400000,
        2140686000000,
        null
      ],
      "offsets": [
        660,
        600,
        600,
        660,
        660,
        600,
        660,
        600,
        660,
        600,
        660,
        600,
        660,
        600,
        660,
        600,
        660,
        600,
        660,
        600,
        660,
        600,
        660,
        600,
        660,
        600,
        660,
        600,
        660,
        600,
        660,
        600,
        660,
        600,
        600,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600,
        540,
        600
      ]
    },
    {
      "name": "US/Arizona",
      "abbrs": [
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MWT",
        "MST",
        "MWT",
        "MST",
        "MDT",
        "MST"
      ],
      "untils": [
        -1633273200000,
        -1615132800000,
        -1601823600000,
        -1583683200000,
        -880210800000,
        -820519140000,
        -812653140000,
        -796845540000,
        -84380400000,
        -68659200000,
        null
      ],
      "offsets": [
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420
      ]
    },
    {
      "name": "US/Central",
      "abbrs": [
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "EST",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CWT",
        "CPT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST"
      ],
      "untils": [
        -1633276800000,
        -1615136400000,
        -1601827200000,
        -1583686800000,
        -1563724800000,
        -1551632400000,
        -1538928000000,
        -1520182800000,
        -1504454400000,
        -1491757200000,
        -1473004800000,
        -1459702800000,
        -1441555200000,
        -1428253200000,
        -1410105600000,
        -1396803600000,
        -1378656000000,
        -1365354000000,
        -1347206400000,
        -1333904400000,
        -1315152000000,
        -1301850000000,
        -1283702400000,
        -1270400400000,
        -1252252800000,
        -1238950800000,
        -1220803200000,
        -1207501200000,
        -1189353600000,
        -1176051600000,
        -1157299200000,
        -1144602000000,
        -1125849600000,
        -1112547600000,
        -1094400000000,
        -1081098000000,
        -1067788800000,
        -1045414800000,
        -1031500800000,
        -1018198800000,
        -1000051200000,
        -986749200000,
        -967996800000,
        -955299600000,
        -936547200000,
        -923245200000,
        -905097600000,
        -891795600000,
        -880214400000,
        -769395600000,
        -765392400000,
        -747244800000,
        -733942800000,
        -715795200000,
        -702493200000,
        -684345600000,
        -671043600000,
        -652896000000,
        -639594000000,
        -620841600000,
        -608144400000,
        -589392000000,
        -576090000000,
        -557942400000,
        -544640400000,
        -526492800000,
        -513190800000,
        -495043200000,
        -481741200000,
        -463593600000,
        -447267600000,
        -431539200000,
        -415818000000,
        -400089600000,
        -384368400000,
        -368640000000,
        -352918800000,
        -337190400000,
        -321469200000,
        -305740800000,
        -289414800000,
        -273686400000,
        -257965200000,
        -242236800000,
        -226515600000,
        -210787200000,
        -195066000000,
        -179337600000,
        -163616400000,
        -147888000000,
        -131562000000,
        -116438400000,
        -100112400000,
        -84384000000,
        -68662800000,
        -52934400000,
        -37213200000,
        -21484800000,
        -5763600000,
        9964800000,
        25686000000,
        41414400000,
        57740400000,
        73468800000,
        89190000000,
        104918400000,
        120639600000,
        126691200000,
        152089200000,
        162374400000,
        183538800000,
        199267200000,
        215593200000,
        230716800000,
        247042800000,
        262771200000,
        278492400000,
        294220800000,
        309942000000,
        325670400000,
        341391600000,
        357120000000,
        372841200000,
        388569600000,
        404895600000,
        420019200000,
        436345200000,
        452073600000,
        467794800000,
        483523200000,
        499244400000,
        514972800000,
        530694000000,
        544608000000,
        562143600000,
        576057600000,
        594198000000,
        607507200000,
        625647600000,
        638956800000,
        657097200000,
        671011200000,
        688546800000,
        702460800000,
        719996400000,
        733910400000,
        752050800000,
        765360000000,
        783500400000,
        796809600000,
        814950000000,
        828864000000,
        846399600000,
        860313600000,
        877849200000,
        891763200000,
        909298800000,
        923212800000,
        941353200000,
        954662400000,
        972802800000,
        986112000000,
        1004252400000,
        1018166400000,
        1035702000000,
        1049616000000,
        1067151600000,
        1081065600000,
        1099206000000,
        1112515200000,
        1130655600000,
        1143964800000,
        1162105200000,
        1173600000000,
        1194159600000,
        1205049600000,
        1225609200000,
        1236499200000,
        1257058800000,
        1268553600000,
        1289113200000,
        1300003200000,
        1320562800000,
        1331452800000,
        1352012400000,
        1362902400000,
        1383462000000,
        1394352000000,
        1414911600000,
        1425801600000,
        1446361200000,
        1457856000000,
        1478415600000,
        1489305600000,
        1509865200000,
        1520755200000,
        1541314800000,
        1552204800000,
        1572764400000,
        1583654400000,
        1604214000000,
        1615708800000,
        1636268400000,
        1647158400000,
        1667718000000,
        1678608000000,
        1699167600000,
        1710057600000,
        1730617200000,
        1741507200000,
        1762066800000,
        1772956800000,
        1793516400000,
        1805011200000,
        1825570800000,
        1836460800000,
        1857020400000,
        1867910400000,
        1888470000000,
        1899360000000,
        1919919600000,
        1930809600000,
        1951369200000,
        1962864000000,
        1983423600000,
        1994313600000,
        2014873200000,
        2025763200000,
        2046322800000,
        2057212800000,
        2077772400000,
        2088662400000,
        2109222000000,
        2120112000000,
        2140671600000,
        null
      ],
      "offsets": [
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360
      ]
    },
    {
      "name": "US/East-Indiana",
      "abbrs": [
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CWT",
        "CPT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "EST",
        "CST",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST"
      ],
      "untils": [
        -1633276800000,
        -1615136400000,
        -1601827200000,
        -1583686800000,
        -900259200000,
        -891795600000,
        -880214400000,
        -769395600000,
        -765392400000,
        -747244800000,
        -733942800000,
        -715795200000,
        -702493200000,
        -684345600000,
        -671043600000,
        -652896000000,
        -639594000000,
        -620841600000,
        -608144400000,
        -589392000000,
        -576090000000,
        -557942400000,
        -544640400000,
        -526492800000,
        -513190800000,
        -495043200000,
        -481741200000,
        -463593600000,
        -386787600000,
        -368640000000,
        -21488400000,
        -5767200000,
        9961200000,
        25682400000,
        1143961200000,
        1162101600000,
        1173596400000,
        1194156000000,
        1205046000000,
        1225605600000,
        1236495600000,
        1257055200000,
        1268550000000,
        1289109600000,
        1299999600000,
        1320559200000,
        1331449200000,
        1352008800000,
        1362898800000,
        1383458400000,
        1394348400000,
        1414908000000,
        1425798000000,
        1446357600000,
        1457852400000,
        1478412000000,
        1489302000000,
        1509861600000,
        1520751600000,
        1541311200000,
        1552201200000,
        1572760800000,
        1583650800000,
        1604210400000,
        1615705200000,
        1636264800000,
        1647154800000,
        1667714400000,
        1678604400000,
        1699164000000,
        1710054000000,
        1730613600000,
        1741503600000,
        1762063200000,
        1772953200000,
        1793512800000,
        1805007600000,
        1825567200000,
        1836457200000,
        1857016800000,
        1867906800000,
        1888466400000,
        1899356400000,
        1919916000000,
        1930806000000,
        1951365600000,
        1962860400000,
        1983420000000,
        1994310000000,
        2014869600000,
        2025759600000,
        2046319200000,
        2057209200000,
        2077768800000,
        2088658800000,
        2109218400000,
        2120108400000,
        2140668000000,
        null
      ],
      "offsets": [
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300
      ]
    },
    {
      "name": "US/Eastern",
      "abbrs": [
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EWT",
        "EPT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST"
      ],
      "untils": [
        -1633280400000,
        -1615140000000,
        -1601830800000,
        -1583690400000,
        -1570381200000,
        -1551636000000,
        -1536512400000,
        -1523210400000,
        -1504458000000,
        -1491760800000,
        -1473008400000,
        -1459706400000,
        -1441558800000,
        -1428256800000,
        -1410109200000,
        -1396807200000,
        -1378659600000,
        -1365357600000,
        -1347210000000,
        -1333908000000,
        -1315155600000,
        -1301853600000,
        -1283706000000,
        -1270404000000,
        -1252256400000,
        -1238954400000,
        -1220806800000,
        -1207504800000,
        -1189357200000,
        -1176055200000,
        -1157302800000,
        -1144605600000,
        -1125853200000,
        -1112551200000,
        -1094403600000,
        -1081101600000,
        -1062954000000,
        -1049652000000,
        -1031504400000,
        -1018202400000,
        -1000054800000,
        -986752800000,
        -968000400000,
        -955303200000,
        -936550800000,
        -923248800000,
        -905101200000,
        -891799200000,
        -880218000000,
        -769395600000,
        -765396000000,
        -747248400000,
        -733946400000,
        -715798800000,
        -702496800000,
        -684349200000,
        -671047200000,
        -652899600000,
        -639597600000,
        -620845200000,
        -608148000000,
        -589395600000,
        -576093600000,
        -557946000000,
        -544644000000,
        -526496400000,
        -513194400000,
        -495046800000,
        -481744800000,
        -463597200000,
        -447271200000,
        -431542800000,
        -415821600000,
        -400093200000,
        -384372000000,
        -368643600000,
        -352922400000,
        -337194000000,
        -321472800000,
        -305744400000,
        -289418400000,
        -273690000000,
        -257968800000,
        -242240400000,
        -226519200000,
        -210790800000,
        -195069600000,
        -179341200000,
        -163620000000,
        -147891600000,
        -131565600000,
        -116442000000,
        -100116000000,
        -84387600000,
        -68666400000,
        -52938000000,
        -37216800000,
        -21488400000,
        -5767200000,
        9961200000,
        25682400000,
        41410800000,
        57736800000,
        73465200000,
        89186400000,
        104914800000,
        120636000000,
        126687600000,
        152085600000,
        162370800000,
        183535200000,
        199263600000,
        215589600000,
        230713200000,
        247039200000,
        262767600000,
        278488800000,
        294217200000,
        309938400000,
        325666800000,
        341388000000,
        357116400000,
        372837600000,
        388566000000,
        404892000000,
        420015600000,
        436341600000,
        452070000000,
        467791200000,
        483519600000,
        499240800000,
        514969200000,
        530690400000,
        544604400000,
        562140000000,
        576054000000,
        594194400000,
        607503600000,
        625644000000,
        638953200000,
        657093600000,
        671007600000,
        688543200000,
        702457200000,
        719992800000,
        733906800000,
        752047200000,
        765356400000,
        783496800000,
        796806000000,
        814946400000,
        828860400000,
        846396000000,
        860310000000,
        877845600000,
        891759600000,
        909295200000,
        923209200000,
        941349600000,
        954658800000,
        972799200000,
        986108400000,
        1004248800000,
        1018162800000,
        1035698400000,
        1049612400000,
        1067148000000,
        1081062000000,
        1099202400000,
        1112511600000,
        1130652000000,
        1143961200000,
        1162101600000,
        1173596400000,
        1194156000000,
        1205046000000,
        1225605600000,
        1236495600000,
        1257055200000,
        1268550000000,
        1289109600000,
        1299999600000,
        1320559200000,
        1331449200000,
        1352008800000,
        1362898800000,
        1383458400000,
        1394348400000,
        1414908000000,
        1425798000000,
        1446357600000,
        1457852400000,
        1478412000000,
        1489302000000,
        1509861600000,
        1520751600000,
        1541311200000,
        1552201200000,
        1572760800000,
        1583650800000,
        1604210400000,
        1615705200000,
        1636264800000,
        1647154800000,
        1667714400000,
        1678604400000,
        1699164000000,
        1710054000000,
        1730613600000,
        1741503600000,
        1762063200000,
        1772953200000,
        1793512800000,
        1805007600000,
        1825567200000,
        1836457200000,
        1857016800000,
        1867906800000,
        1888466400000,
        1899356400000,
        1919916000000,
        1930806000000,
        1951365600000,
        1962860400000,
        1983420000000,
        1994310000000,
        2014869600000,
        2025759600000,
        2046319200000,
        2057209200000,
        2077768800000,
        2088658800000,
        2109218400000,
        2120108400000,
        2140668000000,
        null
      ],
      "offsets": [
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300
      ]
    },
    {
      "name": "US/Hawaii",
      "abbrs": [
        "HST",
        "HDT",
        "HST",
        "HDT",
        "HST",
        "HST"
      ],
      "untils": [
        -1157283000000,
        -1155436200000,
        -880198200000,
        -765376200000,
        -712150200000,
        null
      ],
      "offsets": [
        630,
        570,
        630,
        570,
        630,
        600
      ]
    },
    {
      "name": "US/Indiana-Starke",
      "abbrs": [
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CWT",
        "CPT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "EST",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "EST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST",
        "CDT",
        "CST"
      ],
      "untils": [
        -1633276800000,
        -1615136400000,
        -1601827200000,
        -1583686800000,
        -880214400000,
        -769395600000,
        -765392400000,
        -715795200000,
        -702493200000,
        -684345600000,
        -671043600000,
        -652896000000,
        -639594000000,
        -620841600000,
        -608144400000,
        -589392000000,
        -576090000000,
        -557942400000,
        -544640400000,
        -526492800000,
        -513190800000,
        -495043200000,
        -481741200000,
        -463593600000,
        -447267600000,
        -431539200000,
        -415818000000,
        -400089600000,
        -386787600000,
        -368640000000,
        -355338000000,
        -337190400000,
        -321469200000,
        -305740800000,
        -289414800000,
        -273686400000,
        -257965200000,
        -242236800000,
        -195066000000,
        -84384000000,
        -68662800000,
        -52934400000,
        -37213200000,
        -21484800000,
        -5763600000,
        9964800000,
        25686000000,
        41414400000,
        57740400000,
        73468800000,
        89190000000,
        104918400000,
        120639600000,
        126691200000,
        152089200000,
        162374400000,
        183538800000,
        199267200000,
        215593200000,
        230716800000,
        247042800000,
        262771200000,
        278492400000,
        294220800000,
        309942000000,
        325670400000,
        341391600000,
        357120000000,
        372841200000,
        388569600000,
        404895600000,
        420019200000,
        436345200000,
        452073600000,
        467794800000,
        483523200000,
        499244400000,
        514972800000,
        530694000000,
        544608000000,
        562143600000,
        576057600000,
        594198000000,
        607507200000,
        625647600000,
        638956800000,
        657097200000,
        671011200000,
        688546800000,
        1143961200000,
        1162105200000,
        1173600000000,
        1194159600000,
        1205049600000,
        1225609200000,
        1236499200000,
        1257058800000,
        1268553600000,
        1289113200000,
        1300003200000,
        1320562800000,
        1331452800000,
        1352012400000,
        1362902400000,
        1383462000000,
        1394352000000,
        1414911600000,
        1425801600000,
        1446361200000,
        1457856000000,
        1478415600000,
        1489305600000,
        1509865200000,
        1520755200000,
        1541314800000,
        1552204800000,
        1572764400000,
        1583654400000,
        1604214000000,
        1615708800000,
        1636268400000,
        1647158400000,
        1667718000000,
        1678608000000,
        1699167600000,
        1710057600000,
        1730617200000,
        1741507200000,
        1762066800000,
        1772956800000,
        1793516400000,
        1805011200000,
        1825570800000,
        1836460800000,
        1857020400000,
        1867910400000,
        1888470000000,
        1899360000000,
        1919919600000,
        1930809600000,
        1951369200000,
        1962864000000,
        1983423600000,
        1994313600000,
        2014873200000,
        2025763200000,
        2046322800000,
        2057212800000,
        2077772400000,
        2088662400000,
        2109222000000,
        2120112000000,
        2140671600000,
        null
      ],
      "offsets": [
        360,
        300,
        360,
        300,
        360,
        300,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        300,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360,
        300,
        360
      ]
    },
    {
      "name": "US/Michigan",
      "abbrs": [
        "LMT",
        "CST",
        "EST",
        "EWT",
        "EPT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST",
        "EDT",
        "EST"
      ],
      "untils": [
        -2051202469000,
        -1724083200000,
        -880218000000,
        -769395600000,
        -765396000000,
        -684349200000,
        -671047200000,
        -80499600000,
        -68666400000,
        104914800000,
        120636000000,
        126687600000,
        152085600000,
        167814000000,
        183535200000,
        199263600000,
        215589600000,
        230713200000,
        247039200000,
        262767600000,
        278488800000,
        294217200000,
        309938400000,
        325666800000,
        341388000000,
        357116400000,
        372837600000,
        388566000000,
        404892000000,
        420015600000,
        436341600000,
        452070000000,
        467791200000,
        483519600000,
        499240800000,
        514969200000,
        530690400000,
        544604400000,
        562140000000,
        576054000000,
        594194400000,
        607503600000,
        625644000000,
        638953200000,
        657093600000,
        671007600000,
        688543200000,
        702457200000,
        719992800000,
        733906800000,
        752047200000,
        765356400000,
        783496800000,
        796806000000,
        814946400000,
        828860400000,
        846396000000,
        860310000000,
        877845600000,
        891759600000,
        909295200000,
        923209200000,
        941349600000,
        954658800000,
        972799200000,
        986108400000,
        1004248800000,
        1018162800000,
        1035698400000,
        1049612400000,
        1067148000000,
        1081062000000,
        1099202400000,
        1112511600000,
        1130652000000,
        1143961200000,
        1162101600000,
        1173596400000,
        1194156000000,
        1205046000000,
        1225605600000,
        1236495600000,
        1257055200000,
        1268550000000,
        1289109600000,
        1299999600000,
        1320559200000,
        1331449200000,
        1352008800000,
        1362898800000,
        1383458400000,
        1394348400000,
        1414908000000,
        1425798000000,
        1446357600000,
        1457852400000,
        1478412000000,
        1489302000000,
        1509861600000,
        1520751600000,
        1541311200000,
        1552201200000,
        1572760800000,
        1583650800000,
        1604210400000,
        1615705200000,
        1636264800000,
        1647154800000,
        1667714400000,
        1678604400000,
        1699164000000,
        1710054000000,
        1730613600000,
        1741503600000,
        1762063200000,
        1772953200000,
        1793512800000,
        1805007600000,
        1825567200000,
        1836457200000,
        1857016800000,
        1867906800000,
        1888466400000,
        1899356400000,
        1919916000000,
        1930806000000,
        1951365600000,
        1962860400000,
        1983420000000,
        1994310000000,
        2014869600000,
        2025759600000,
        2046319200000,
        2057209200000,
        2077768800000,
        2088658800000,
        2109218400000,
        2120108400000,
        2140668000000,
        null
      ],
      "offsets": [
        332.1833,
        360,
        300,
        240,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300,
        240,
        300
      ]
    },
    {
      "name": "US/Mountain",
      "abbrs": [
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MWT",
        "MPT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST",
        "MDT",
        "MST"
      ],
      "untils": [
        -1633273200000,
        -1615132800000,
        -1601823600000,
        -1583683200000,
        -1570374000000,
        -1551628800000,
        -1538924400000,
        -1534089600000,
        -880210800000,
        -769395600000,
        -765388800000,
        -147884400000,
        -131558400000,
        -116434800000,
        -100108800000,
        -84380400000,
        -68659200000,
        -52930800000,
        -37209600000,
        -21481200000,
        -5760000000,
        9968400000,
        25689600000,
        41418000000,
        57744000000,
        73472400000,
        89193600000,
        104922000000,
        120643200000,
        126694800000,
        152092800000,
        162378000000,
        183542400000,
        199270800000,
        215596800000,
        230720400000,
        247046400000,
        262774800000,
        278496000000,
        294224400000,
        309945600000,
        325674000000,
        341395200000,
        357123600000,
        372844800000,
        388573200000,
        404899200000,
        420022800000,
        436348800000,
        452077200000,
        467798400000,
        483526800000,
        499248000000,
        514976400000,
        530697600000,
        544611600000,
        562147200000,
        576061200000,
        594201600000,
        607510800000,
        625651200000,
        638960400000,
        657100800000,
        671014800000,
        688550400000,
        702464400000,
        720000000000,
        733914000000,
        752054400000,
        765363600000,
        783504000000,
        796813200000,
        814953600000,
        828867600000,
        846403200000,
        860317200000,
        877852800000,
        891766800000,
        909302400000,
        923216400000,
        941356800000,
        954666000000,
        972806400000,
        986115600000,
        1004256000000,
        1018170000000,
        1035705600000,
        1049619600000,
        1067155200000,
        1081069200000,
        1099209600000,
        1112518800000,
        1130659200000,
        1143968400000,
        1162108800000,
        1173603600000,
        1194163200000,
        1205053200000,
        1225612800000,
        1236502800000,
        1257062400000,
        1268557200000,
        1289116800000,
        1300006800000,
        1320566400000,
        1331456400000,
        1352016000000,
        1362906000000,
        1383465600000,
        1394355600000,
        1414915200000,
        1425805200000,
        1446364800000,
        1457859600000,
        1478419200000,
        1489309200000,
        1509868800000,
        1520758800000,
        1541318400000,
        1552208400000,
        1572768000000,
        1583658000000,
        1604217600000,
        1615712400000,
        1636272000000,
        1647162000000,
        1667721600000,
        1678611600000,
        1699171200000,
        1710061200000,
        1730620800000,
        1741510800000,
        1762070400000,
        1772960400000,
        1793520000000,
        1805014800000,
        1825574400000,
        1836464400000,
        1857024000000,
        1867914000000,
        1888473600000,
        1899363600000,
        1919923200000,
        1930813200000,
        1951372800000,
        1962867600000,
        1983427200000,
        1994317200000,
        2014876800000,
        2025766800000,
        2046326400000,
        2057216400000,
        2077776000000,
        2088666000000,
        2109225600000,
        2120115600000,
        2140675200000,
        null
      ],
      "offsets": [
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420,
        360,
        420
      ]
    },
    {
      "name": "US/Pacific-New",
      "abbrs": [
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PWT",
        "PPT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST"
      ],
      "untils": [
        -1633269600000,
        -1615129200000,
        -1601820000000,
        -1583679600000,
        -880207200000,
        -769395600000,
        -765385200000,
        -687967200000,
        -662655600000,
        -620834400000,
        -608137200000,
        -589384800000,
        -576082800000,
        -557935200000,
        -544633200000,
        -526485600000,
        -513183600000,
        -495036000000,
        -481734000000,
        -463586400000,
        -450284400000,
        -431532000000,
        -418230000000,
        -400082400000,
        -386780400000,
        -368632800000,
        -355330800000,
        -337183200000,
        -323881200000,
        -305733600000,
        -292431600000,
        -273679200000,
        -260982000000,
        -242229600000,
        -226508400000,
        -210780000000,
        -195058800000,
        -179330400000,
        -163609200000,
        -147880800000,
        -131554800000,
        -116431200000,
        -100105200000,
        -84376800000,
        -68655600000,
        -52927200000,
        -37206000000,
        -21477600000,
        -5756400000,
        9972000000,
        25693200000,
        41421600000,
        57747600000,
        73476000000,
        89197200000,
        104925600000,
        120646800000,
        126698400000,
        152096400000,
        162381600000,
        183546000000,
        199274400000,
        215600400000,
        230724000000,
        247050000000,
        262778400000,
        278499600000,
        294228000000,
        309949200000,
        325677600000,
        341398800000,
        357127200000,
        372848400000,
        388576800000,
        404902800000,
        420026400000,
        436352400000,
        452080800000,
        467802000000,
        483530400000,
        499251600000,
        514980000000,
        530701200000,
        544615200000,
        562150800000,
        576064800000,
        594205200000,
        607514400000,
        625654800000,
        638964000000,
        657104400000,
        671018400000,
        688554000000,
        702468000000,
        720003600000,
        733917600000,
        752058000000,
        765367200000,
        783507600000,
        796816800000,
        814957200000,
        828871200000,
        846406800000,
        860320800000,
        877856400000,
        891770400000,
        909306000000,
        923220000000,
        941360400000,
        954669600000,
        972810000000,
        986119200000,
        1004259600000,
        1018173600000,
        1035709200000,
        1049623200000,
        1067158800000,
        1081072800000,
        1099213200000,
        1112522400000,
        1130662800000,
        1143972000000,
        1162112400000,
        1173607200000,
        1194166800000,
        1205056800000,
        1225616400000,
        1236506400000,
        1257066000000,
        1268560800000,
        1289120400000,
        1300010400000,
        1320570000000,
        1331460000000,
        1352019600000,
        1362909600000,
        1383469200000,
        1394359200000,
        1414918800000,
        1425808800000,
        1446368400000,
        1457863200000,
        1478422800000,
        1489312800000,
        1509872400000,
        1520762400000,
        1541322000000,
        1552212000000,
        1572771600000,
        1583661600000,
        1604221200000,
        1615716000000,
        1636275600000,
        1647165600000,
        1667725200000,
        1678615200000,
        1699174800000,
        1710064800000,
        1730624400000,
        1741514400000,
        1762074000000,
        1772964000000,
        1793523600000,
        1805018400000,
        1825578000000,
        1836468000000,
        1857027600000,
        1867917600000,
        1888477200000,
        1899367200000,
        1919926800000,
        1930816800000,
        1951376400000,
        1962871200000,
        1983430800000,
        1994320800000,
        2014880400000,
        2025770400000,
        2046330000000,
        2057220000000,
        2077779600000,
        2088669600000,
        2109229200000,
        2120119200000,
        2140678800000,
        null
      ],
      "offsets": [
        480,
        420,
        480,
        420,
        480,
        420,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480
      ]
    },
    {
      "name": "US/Pacific",
      "abbrs": [
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PWT",
        "PPT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST",
        "PDT",
        "PST"
      ],
      "untils": [
        -1633269600000,
        -1615129200000,
        -1601820000000,
        -1583679600000,
        -880207200000,
        -769395600000,
        -765385200000,
        -687967200000,
        -662655600000,
        -620834400000,
        -608137200000,
        -589384800000,
        -576082800000,
        -557935200000,
        -544633200000,
        -526485600000,
        -513183600000,
        -495036000000,
        -481734000000,
        -463586400000,
        -450284400000,
        -431532000000,
        -418230000000,
        -400082400000,
        -386780400000,
        -368632800000,
        -355330800000,
        -337183200000,
        -323881200000,
        -305733600000,
        -292431600000,
        -273679200000,
        -260982000000,
        -242229600000,
        -226508400000,
        -210780000000,
        -195058800000,
        -179330400000,
        -163609200000,
        -147880800000,
        -131554800000,
        -116431200000,
        -100105200000,
        -84376800000,
        -68655600000,
        -52927200000,
        -37206000000,
        -21477600000,
        -5756400000,
        9972000000,
        25693200000,
        41421600000,
        57747600000,
        73476000000,
        89197200000,
        104925600000,
        120646800000,
        126698400000,
        152096400000,
        162381600000,
        183546000000,
        199274400000,
        215600400000,
        230724000000,
        247050000000,
        262778400000,
        278499600000,
        294228000000,
        309949200000,
        325677600000,
        341398800000,
        357127200000,
        372848400000,
        388576800000,
        404902800000,
        420026400000,
        436352400000,
        452080800000,
        467802000000,
        483530400000,
        499251600000,
        514980000000,
        530701200000,
        544615200000,
        562150800000,
        576064800000,
        594205200000,
        607514400000,
        625654800000,
        638964000000,
        657104400000,
        671018400000,
        688554000000,
        702468000000,
        720003600000,
        733917600000,
        752058000000,
        765367200000,
        783507600000,
        796816800000,
        814957200000,
        828871200000,
        846406800000,
        860320800000,
        877856400000,
        891770400000,
        909306000000,
        923220000000,
        941360400000,
        954669600000,
        972810000000,
        986119200000,
        1004259600000,
        1018173600000,
        1035709200000,
        1049623200000,
        1067158800000,
        1081072800000,
        1099213200000,
        1112522400000,
        1130662800000,
        1143972000000,
        1162112400000,
        1173607200000,
        1194166800000,
        1205056800000,
        1225616400000,
        1236506400000,
        1257066000000,
        1268560800000,
        1289120400000,
        1300010400000,
        1320570000000,
        1331460000000,
        1352019600000,
        1362909600000,
        1383469200000,
        1394359200000,
        1414918800000,
        1425808800000,
        1446368400000,
        1457863200000,
        1478422800000,
        1489312800000,
        1509872400000,
        1520762400000,
        1541322000000,
        1552212000000,
        1572771600000,
        1583661600000,
        1604221200000,
        1615716000000,
        1636275600000,
        1647165600000,
        1667725200000,
        1678615200000,
        1699174800000,
        1710064800000,
        1730624400000,
        1741514400000,
        1762074000000,
        1772964000000,
        1793523600000,
        1805018400000,
        1825578000000,
        1836468000000,
        1857027600000,
        1867917600000,
        1888477200000,
        1899367200000,
        1919926800000,
        1930816800000,
        1951376400000,
        1962871200000,
        1983430800000,
        1994320800000,
        2014880400000,
        2025770400000,
        2046330000000,
        2057220000000,
        2077779600000,
        2088669600000,
        2109229200000,
        2120119200000,
        2140678800000,
        null
      ],
      "offsets": [
        480,
        420,
        480,
        420,
        480,
        420,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480,
        420,
        480
      ]
    },
    {
      "name": "US/Samoa",
      "abbrs": [
        "LMT",
        "NST",
        "BST",
        "SST"
      ],
      "untils": [
        -1861879032000,
        -86878800000,
        439038000000,
        null
      ],
      "offsets": [
        682.8,
        660,
        660,
        660
      ]
    },
    {
      "name": "UTC",
      "abbrs": [
        "UTC"
      ],
      "untils": [
        null
      ],
      "offsets": [
        0
      ]
    },
    {
      "name": "Universal",
      "abbrs": [
        "UTC"
      ],
      "untils": [
        null
      ],
      "offsets": [
        0
      ]
    },
    {
      "name": "W-SU",
      "abbrs": [
        "MMT",
        "MMT",
        "MST",
        "MMT",
        "MDST",
        "MST",
        "MDST",
        "MSD",
        "MSK",
        "MSD",
        "MSM",
        "MSD",
        "MSK",
        "EET",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "EEST",
        "EET",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSD",
        "MSK",
        "MSK",
        "MSK"
      ],
      "untils": [
        -1688265017000,
        -1656819079000,
        -1641353479000,
        -1627965079000,
        -1618716679000,
        -1596429079000,
        -1593829879000,
        -1589860800000,
        -1542427200000,
        -1539493200000,
        -1525323600000,
        -1522728000000,
        -1491188400000,
        -1247536800000,
        354920400000,
        370728000000,
        386456400000,
        402264000000,
        417992400000,
        433800000000,
        449614800000,
        465346800000,
        481071600000,
        496796400000,
        512521200000,
        528246000000,
        543970800000,
        559695600000,
        575420400000,
        591145200000,
        606870000000,
        622594800000,
        638319600000,
        654649200000,
        670374000000,
        686102400000,
        695779200000,
        701812800000,
        717534000000,
        733273200000,
        748998000000,
        764722800000,
        780447600000,
        796172400000,
        811897200000,
        828226800000,
        846370800000,
        859676400000,
        877820400000,
        891126000000,
        909270000000,
        922575600000,
        941324400000,
        954025200000,
        972774000000,
        985474800000,
        1004223600000,
        1017529200000,
        1035673200000,
        1048978800000,
        1067122800000,
        1080428400000,
        1099177200000,
        1111878000000,
        1130626800000,
        1143327600000,
        1162076400000,
        1174777200000,
        1193526000000,
        1206831600000,
        1224975600000,
        1238281200000,
        1256425200000,
        1269730800000,
        1288479600000,
        1301180400000,
        1414274400000,
        null
      ],
      "offsets": [
        -150.2833,
        -151.3167,
        -211.3167,
        -151.3167,
        -271.3167,
        -211.3167,
        -271.3167,
        -240,
        -180,
        -240,
        -300,
        -240,
        -180,
        -120,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -180,
        -120,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180,
        -240,
        -180
      ]
    },
    {
      "name": "WET",
      "abbrs": [
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET",
        "WEST",
        "WET"
      ],
      "untils": [
        228877200000,
        243997200000,
        260326800000,
        276051600000,
        291776400000,
        307501200000,
        323830800000,
        338950800000,
        354675600000,
        370400400000,
        386125200000,
        401850000000,
        417574800000,
        433299600000,
        449024400000,
        465354000000,
        481078800000,
        496803600000,
        512528400000,
        528253200000,
        543978000000,
        559702800000,
        575427600000,
        591152400000,
        606877200000,
        622602000000,
        638326800000,
        654656400000,
        670381200000,
        686106000000,
        701830800000,
        717555600000,
        733280400000,
        749005200000,
        764730000000,
        780454800000,
        796179600000,
        811904400000,
        828234000000,
        846378000000,
        859683600000,
        877827600000,
        891133200000,
        909277200000,
        922582800000,
        941331600000,
        954032400000,
        972781200000,
        985482000000,
        1004230800000,
        1017536400000,
        1035680400000,
        1048986000000,
        1067130000000,
        1080435600000,
        1099184400000,
        1111885200000,
        1130634000000,
        1143334800000,
        1162083600000,
        1174784400000,
        1193533200000,
        1206838800000,
        1224982800000,
        1238288400000,
        1256432400000,
        1269738000000,
        1288486800000,
        1301187600000,
        1319936400000,
        1332637200000,
        1351386000000,
        1364691600000,
        1382835600000,
        1396141200000,
        1414285200000,
        1427590800000,
        1445734800000,
        1459040400000,
        1477789200000,
        1490490000000,
        1509238800000,
        1521939600000,
        1540688400000,
        1553994000000,
        1572138000000,
        1585443600000,
        1603587600000,
        1616893200000,
        1635642000000,
        1648342800000,
        1667091600000,
        1679792400000,
        1698541200000,
        1711846800000,
        1729990800000,
        1743296400000,
        1761440400000,
        1774746000000,
        1792890000000,
        1806195600000,
        1824944400000,
        1837645200000,
        1856394000000,
        1869094800000,
        1887843600000,
        1901149200000,
        1919293200000,
        1932598800000,
        1950742800000,
        1964048400000,
        1982797200000,
        1995498000000,
        2014246800000,
        2026947600000,
        2045696400000,
        2058397200000,
        2077146000000,
        2090451600000,
        2108595600000,
        2121901200000,
        2140045200000,
        null
      ],
      "offsets": [
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0,
        -60,
        0
      ]
    },
    {
      "name": "Zulu",
      "abbrs": [
        "UTC"
      ],
      "untils": [
        null
      ],
      "offsets": [
        0
      ]
    }
  ],
  "links": []
}
},{}],146:[function(require,module,exports){
var moment = module.exports = require("./moment-timezone");
moment.tz.load(require('./data/packed/latest.json'));

},{"./data/packed/latest.json":144,"./moment-timezone":147}],147:[function(require,module,exports){
//! moment-timezone.js
//! version : 0.4.0
//! author : Tim Wood
//! license : MIT
//! github.com/moment/moment-timezone

(function (root, factory) {
	"use strict";

	/*global define*/
	if (typeof define === 'function' && define.amd) {
		define(['moment'], factory);                 // AMD
	} else if (typeof exports === 'object') {
		module.exports = factory(require('moment')); // Node
	} else {
		factory(root.moment);                        // Browser
	}
}(this, function (moment) {
	"use strict";

	// Do not load moment-timezone a second time.
	if (moment.tz !== undefined) {
		logError('Moment Timezone ' + moment.tz.version + ' was already loaded ' + (moment.tz.dataVersion ? 'with data from ' : 'without any data') + moment.tz.dataVersion);
		return moment;
	}

	var VERSION = "0.4.0",
		zones = {},
		links = {},
		names = {},

		momentVersion = moment.version.split('.'),
		major = +momentVersion[0],
		minor = +momentVersion[1];

	// Moment.js version check
	if (major < 2 || (major === 2 && minor < 6)) {
		logError('Moment Timezone requires Moment.js >= 2.6.0. You are using Moment.js ' + moment.version + '. See momentjs.com');
	}

	/************************************
		Unpacking
	************************************/

	function charCodeToInt(charCode) {
		if (charCode > 96) {
			return charCode - 87;
		} else if (charCode > 64) {
			return charCode - 29;
		}
		return charCode - 48;
	}

	function unpackBase60(string) {
		var i = 0,
			parts = string.split('.'),
			whole = parts[0],
			fractional = parts[1] || '',
			multiplier = 1,
			num,
			out = 0,
			sign = 1;

		// handle negative numbers
		if (string.charCodeAt(0) === 45) {
			i = 1;
			sign = -1;
		}

		// handle digits before the decimal
		for (i; i < whole.length; i++) {
			num = charCodeToInt(whole.charCodeAt(i));
			out = 60 * out + num;
		}

		// handle digits after the decimal
		for (i = 0; i < fractional.length; i++) {
			multiplier = multiplier / 60;
			num = charCodeToInt(fractional.charCodeAt(i));
			out += num * multiplier;
		}

		return out * sign;
	}

	function arrayToInt (array) {
		for (var i = 0; i < array.length; i++) {
			array[i] = unpackBase60(array[i]);
		}
	}

	function intToUntil (array, length) {
		for (var i = 0; i < length; i++) {
			array[i] = Math.round((array[i - 1] || 0) + (array[i] * 60000)); // minutes to milliseconds
		}

		array[length - 1] = Infinity;
	}

	function mapIndices (source, indices) {
		var out = [], i;

		for (i = 0; i < indices.length; i++) {
			out[i] = source[indices[i]];
		}

		return out;
	}

	function unpack (string) {
		var data = string.split('|'),
			offsets = data[2].split(' '),
			indices = data[3].split(''),
			untils  = data[4].split(' ');

		arrayToInt(offsets);
		arrayToInt(indices);
		arrayToInt(untils);

		intToUntil(untils, indices.length);

		return {
			name    : data[0],
			abbrs   : mapIndices(data[1].split(' '), indices),
			offsets : mapIndices(offsets, indices),
			untils  : untils
		};
	}

	/************************************
		Zone object
	************************************/

	function Zone (packedString) {
		if (packedString) {
			this._set(unpack(packedString));
		}
	}

	Zone.prototype = {
		_set : function (unpacked) {
			this.name    = unpacked.name;
			this.abbrs   = unpacked.abbrs;
			this.untils  = unpacked.untils;
			this.offsets = unpacked.offsets;
		},

		_index : function (timestamp) {
			var target = +timestamp,
				untils = this.untils,
				i;

			for (i = 0; i < untils.length; i++) {
				if (target < untils[i]) {
					return i;
				}
			}
		},

		parse : function (timestamp) {
			var target  = +timestamp,
				offsets = this.offsets,
				untils  = this.untils,
				max     = untils.length - 1,
				offset, offsetNext, offsetPrev, i;

			for (i = 0; i < max; i++) {
				offset     = offsets[i];
				offsetNext = offsets[i + 1];
				offsetPrev = offsets[i ? i - 1 : i];

				if (offset < offsetNext && tz.moveAmbiguousForward) {
					offset = offsetNext;
				} else if (offset > offsetPrev && tz.moveInvalidForward) {
					offset = offsetPrev;
				}

				if (target < untils[i] - (offset * 60000)) {
					return offsets[i];
				}
			}

			return offsets[max];
		},

		abbr : function (mom) {
			return this.abbrs[this._index(mom)];
		},

		offset : function (mom) {
			return this.offsets[this._index(mom)];
		}
	};

	/************************************
		Global Methods
	************************************/

	function normalizeName (name) {
		return (name || '').toLowerCase().replace(/\//g, '_');
	}

	function addZone (packed) {
		var i, name, normalized;

		if (typeof packed === "string") {
			packed = [packed];
		}

		for (i = 0; i < packed.length; i++) {
			name = packed[i].split('|')[0];
			normalized = normalizeName(name);
			zones[normalized] = packed[i];
			names[normalized] = name;
		}
	}

	function getZone (name, caller) {
		name = normalizeName(name);

		var zone = zones[name];
		var link;
		
		if (zone instanceof Zone) {
			return zone;
		}

		if (typeof zone === 'string') {
			zone = new Zone(zone);
			zones[name] = zone;
			return zone;
		}

		// Pass getZone to prevent recursion more than 1 level deep
		if (links[name] && caller !== getZone && (link = getZone(links[name], getZone))) {
			zone = zones[name] = new Zone();
			zone._set(link);
			zone.name = names[name];
			return zone;
		}

		return null;
	}

	function getNames () {
		var i, out = [];

		for (i in names) {
			if (names.hasOwnProperty(i) && (zones[i] || zones[links[i]]) && names[i]) {
				out.push(names[i]);
			}
		}

		return out.sort();
	}

	function addLink (aliases) {
		var i, alias, normal0, normal1;

		if (typeof aliases === "string") {
			aliases = [aliases];
		}

		for (i = 0; i < aliases.length; i++) {
			alias = aliases[i].split('|');

			normal0 = normalizeName(alias[0]);
			normal1 = normalizeName(alias[1]);

			links[normal0] = normal1;
			names[normal0] = alias[0];

			links[normal1] = normal0;
			names[normal1] = alias[1];
		}
	}

	function loadData (data) {
		addZone(data.zones);
		addLink(data.links);
		tz.dataVersion = data.version;
	}

	function zoneExists (name) {
		if (!zoneExists.didShowError) {
			zoneExists.didShowError = true;
				logError("moment.tz.zoneExists('" + name + "') has been deprecated in favor of !moment.tz.zone('" + name + "')");
		}
		return !!getZone(name);
	}

	function needsOffset (m) {
		return !!(m._a && (m._tzm === undefined));
	}

	function logError (message) {
		if (typeof console !== 'undefined' && typeof console.error === 'function') {
			console.error(message);
		}
	}

	/************************************
		moment.tz namespace
	************************************/

	function tz (input) {
		var args = Array.prototype.slice.call(arguments, 0, -1),
			name = arguments[arguments.length - 1],
			zone = getZone(name),
			out  = moment.utc.apply(null, args);

		if (zone && !moment.isMoment(input) && needsOffset(out)) {
			out.add(zone.parse(out), 'minutes');
		}

		out.tz(name);

		return out;
	}

	tz.version      = VERSION;
	tz.dataVersion  = '';
	tz._zones       = zones;
	tz._links       = links;
	tz._names       = names;
	tz.add          = addZone;
	tz.link         = addLink;
	tz.load         = loadData;
	tz.zone         = getZone;
	tz.zoneExists   = zoneExists; // deprecated in 0.1.0
	tz.names        = getNames;
	tz.Zone         = Zone;
	tz.unpack       = unpack;
	tz.unpackBase60 = unpackBase60;
	tz.needsOffset  = needsOffset;
	tz.moveInvalidForward   = true;
	tz.moveAmbiguousForward = false;

	/************************************
		Interface with Moment.js
	************************************/

	var fn = moment.fn;

	moment.tz = tz;

	moment.defaultZone = null;

	moment.updateOffset = function (mom, keepTime) {
		var zone = moment.defaultZone,
			offset;

		if (mom._z === undefined) {
			if (zone && needsOffset(mom) && !mom._isUTC) {
				mom._d = moment.utc(mom._a)._d;
				mom.utc().add(zone.parse(mom), 'minutes');
			}
			mom._z = zone;
		}
		if (mom._z) {
			offset = mom._z.offset(mom);
			if (Math.abs(offset) < 16) {
				offset = offset / 60;
			}
			if (mom.utcOffset !== undefined) {
				mom.utcOffset(-offset, keepTime);
			} else {
				mom.zone(offset, keepTime);
			}
		}
	};

	fn.tz = function (name) {
		if (name) {
			this._z = getZone(name);
			if (this._z) {
				moment.updateOffset(this);
			} else {
				logError("Moment Timezone has no data for " + name + ". See http://momentjs.com/timezone/docs/#/data-loading/.");
			}
			return this;
		}
		if (this._z) { return this._z.name; }
	};

	function abbrWrap (old) {
		return function () {
			if (this._z) { return this._z.abbr(this); }
			return old.call(this);
		};
	}

	function resetZoneWrap (old) {
		return function () {
			this._z = null;
			return old.apply(this, arguments);
		};
	}

	fn.zoneName = abbrWrap(fn.zoneName);
	fn.zoneAbbr = abbrWrap(fn.zoneAbbr);
	fn.utc      = resetZoneWrap(fn.utc);

	moment.tz.setDefault = function(name) {
		if (major < 2 || (major === 2 && minor < 9)) {
			logError('Moment Timezone setDefault() requires Moment.js >= 2.9.0. You are using Moment.js ' + moment.version + '.');
		}
		moment.defaultZone = name ? getZone(name) : null;
		return moment;
	};

	// Cloning a moment should include the _z property.
	var momentProperties = moment.momentProperties;
	if (Object.prototype.toString.call(momentProperties) === '[object Array]') {
		// moment 2.8.1+
		momentProperties.push('_z');
		momentProperties.push('_a');
	} else if (momentProperties) {
		// moment 2.7.0
		momentProperties._z = null;
	}

	// INJECT DATA

	return moment;
}));

},{"moment":149}],148:[function(require,module,exports){
(function (global, factory) {
   typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('../moment')) :
   typeof define === 'function' && define.amd ? define(['moment'], factory) :
   factory(global.moment)
}(this, function (moment) { 'use strict';

    //! moment.js locale configuration
    //! locale : afrikaans (af)
    //! author : Werner Mollentze : https://github.com/wernerm

    var af = moment.defineLocale('af', {
        months : 'Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember'.split('_'),
        monthsShort : 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des'.split('_'),
        weekdays : 'Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag'.split('_'),
        weekdaysShort : 'Son_Maa_Din_Woe_Don_Vry_Sat'.split('_'),
        weekdaysMin : 'So_Ma_Di_Wo_Do_Vr_Sa'.split('_'),
        meridiemParse: /vm|nm/i,
        isPM : function (input) {
            return /^nm$/i.test(input);
        },
        meridiem : function (hours, minutes, isLower) {
            if (hours < 12) {
                return isLower ? 'vm' : 'VM';
            } else {
                return isLower ? 'nm' : 'NM';
            }
        },
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[Vandag om] LT',
            nextDay : '[Môre om] LT',
            nextWeek : 'dddd [om] LT',
            lastDay : '[Gister om] LT',
            lastWeek : '[Laas] dddd [om] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'oor %s',
            past : '%s gelede',
            s : '\'n paar sekondes',
            m : '\'n minuut',
            mm : '%d minute',
            h : '\'n uur',
            hh : '%d ure',
            d : '\'n dag',
            dd : '%d dae',
            M : '\'n maand',
            MM : '%d maande',
            y : '\'n jaar',
            yy : '%d jaar'
        },
        ordinalParse: /\d{1,2}(ste|de)/,
        ordinal : function (number) {
            return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de'); // Thanks to Joris Röling : https://github.com/jjupiter
        },
        week : {
            dow : 1, // Maandag is die eerste dag van die week.
            doy : 4  // Die week wat die 4de Januarie bevat is die eerste week van die jaar.
        }
    });

    //! moment.js locale configuration
    //! locale : Moroccan Arabic (ar-ma)
    //! author : ElFadili Yassine : https://github.com/ElFadiliY
    //! author : Abdel Said : https://github.com/abdelsaid

    var ar_ma = moment.defineLocale('ar-ma', {
        months : 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
        monthsShort : 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
        weekdays : 'الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort : 'احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[اليوم على الساعة] LT',
            nextDay: '[غدا على الساعة] LT',
            nextWeek: 'dddd [على الساعة] LT',
            lastDay: '[أمس على الساعة] LT',
            lastWeek: 'dddd [على الساعة] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'في %s',
            past : 'منذ %s',
            s : 'ثوان',
            m : 'دقيقة',
            mm : '%d دقائق',
            h : 'ساعة',
            hh : '%d ساعات',
            d : 'يوم',
            dd : '%d أيام',
            M : 'شهر',
            MM : '%d أشهر',
            y : 'سنة',
            yy : '%d سنوات'
        },
        week : {
            dow : 6, // Saturday is the first day of the week.
            doy : 12  // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : Arabic Saudi Arabia (ar-sa)
    //! author : Suhail Alkowaileet : https://github.com/xsoh

    var ar_sa__symbolMap = {
        '1': '١',
        '2': '٢',
        '3': '٣',
        '4': '٤',
        '5': '٥',
        '6': '٦',
        '7': '٧',
        '8': '٨',
        '9': '٩',
        '0': '٠'
    }, ar_sa__numberMap = {
        '١': '1',
        '٢': '2',
        '٣': '3',
        '٤': '4',
        '٥': '5',
        '٦': '6',
        '٧': '7',
        '٨': '8',
        '٩': '9',
        '٠': '0'
    };

    var ar_sa = moment.defineLocale('ar-sa', {
        months : 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
        monthsShort : 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
        weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort : 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        meridiemParse: /ص|م/,
        isPM : function (input) {
            return 'م' === input;
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ص';
            } else {
                return 'م';
            }
        },
        calendar : {
            sameDay: '[اليوم على الساعة] LT',
            nextDay: '[غدا على الساعة] LT',
            nextWeek: 'dddd [على الساعة] LT',
            lastDay: '[أمس على الساعة] LT',
            lastWeek: 'dddd [على الساعة] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'في %s',
            past : 'منذ %s',
            s : 'ثوان',
            m : 'دقيقة',
            mm : '%d دقائق',
            h : 'ساعة',
            hh : '%d ساعات',
            d : 'يوم',
            dd : '%d أيام',
            M : 'شهر',
            MM : '%d أشهر',
            y : 'سنة',
            yy : '%d سنوات'
        },
        preparse: function (string) {
            return string.replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
                return ar_sa__numberMap[match];
            }).replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return ar_sa__symbolMap[match];
            }).replace(/,/g, '،');
        },
        week : {
            dow : 6, // Saturday is the first day of the week.
            doy : 12  // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale  : Tunisian Arabic (ar-tn)

    var ar_tn = moment.defineLocale('ar-tn', {
        months: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
        monthsShort: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[اليوم على الساعة] LT',
            nextDay: '[غدا على الساعة] LT',
            nextWeek: 'dddd [على الساعة] LT',
            lastDay: '[أمس على الساعة] LT',
            lastWeek: 'dddd [على الساعة] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'في %s',
            past: 'منذ %s',
            s: 'ثوان',
            m: 'دقيقة',
            mm: '%d دقائق',
            h: 'ساعة',
            hh: '%d ساعات',
            d: 'يوم',
            dd: '%d أيام',
            M: 'شهر',
            MM: '%d أشهر',
            y: 'سنة',
            yy: '%d سنوات'
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! Locale: Arabic (ar)
    //! Author: Abdel Said: https://github.com/abdelsaid
    //! Changes in months, weekdays: Ahmed Elkhatib
    //! Native plural forms: forabi https://github.com/forabi

    var ar__symbolMap = {
        '1': '١',
        '2': '٢',
        '3': '٣',
        '4': '٤',
        '5': '٥',
        '6': '٦',
        '7': '٧',
        '8': '٨',
        '9': '٩',
        '0': '٠'
    }, ar__numberMap = {
        '١': '1',
        '٢': '2',
        '٣': '3',
        '٤': '4',
        '٥': '5',
        '٦': '6',
        '٧': '7',
        '٨': '8',
        '٩': '9',
        '٠': '0'
    }, pluralForm = function (n) {
        return n === 0 ? 0 : n === 1 ? 1 : n === 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5;
    }, plurals = {
        s : ['أقل من ثانية', 'ثانية واحدة', ['ثانيتان', 'ثانيتين'], '%d ثوان', '%d ثانية', '%d ثانية'],
        m : ['أقل من دقيقة', 'دقيقة واحدة', ['دقيقتان', 'دقيقتين'], '%d دقائق', '%d دقيقة', '%d دقيقة'],
        h : ['أقل من ساعة', 'ساعة واحدة', ['ساعتان', 'ساعتين'], '%d ساعات', '%d ساعة', '%d ساعة'],
        d : ['أقل من يوم', 'يوم واحد', ['يومان', 'يومين'], '%d أيام', '%d يومًا', '%d يوم'],
        M : ['أقل من شهر', 'شهر واحد', ['شهران', 'شهرين'], '%d أشهر', '%d شهرا', '%d شهر'],
        y : ['أقل من عام', 'عام واحد', ['عامان', 'عامين'], '%d أعوام', '%d عامًا', '%d عام']
    }, pluralize = function (u) {
        return function (number, withoutSuffix, string, isFuture) {
            var f = pluralForm(number),
                str = plurals[u][pluralForm(number)];
            if (f === 2) {
                str = str[withoutSuffix ? 0 : 1];
            }
            return str.replace(/%d/i, number);
        };
    }, ar__months = [
        'كانون الثاني يناير',
        'شباط فبراير',
        'آذار مارس',
        'نيسان أبريل',
        'أيار مايو',
        'حزيران يونيو',
        'تموز يوليو',
        'آب أغسطس',
        'أيلول سبتمبر',
        'تشرين الأول أكتوبر',
        'تشرين الثاني نوفمبر',
        'كانون الأول ديسمبر'
    ];

    var ar = moment.defineLocale('ar', {
        months : ar__months,
        monthsShort : ar__months,
        weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort : 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'D/\u200FM/\u200FYYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        meridiemParse: /ص|م/,
        isPM : function (input) {
            return 'م' === input;
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ص';
            } else {
                return 'م';
            }
        },
        calendar : {
            sameDay: '[اليوم عند الساعة] LT',
            nextDay: '[غدًا عند الساعة] LT',
            nextWeek: 'dddd [عند الساعة] LT',
            lastDay: '[أمس عند الساعة] LT',
            lastWeek: 'dddd [عند الساعة] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'بعد %s',
            past : 'منذ %s',
            s : pluralize('s'),
            m : pluralize('m'),
            mm : pluralize('m'),
            h : pluralize('h'),
            hh : pluralize('h'),
            d : pluralize('d'),
            dd : pluralize('d'),
            M : pluralize('M'),
            MM : pluralize('M'),
            y : pluralize('y'),
            yy : pluralize('y')
        },
        preparse: function (string) {
            return string.replace(/\u200f/g, '').replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
                return ar__numberMap[match];
            }).replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return ar__symbolMap[match];
            }).replace(/,/g, '،');
        },
        week : {
            dow : 6, // Saturday is the first day of the week.
            doy : 12  // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : azerbaijani (az)
    //! author : topchiyev : https://github.com/topchiyev

    var az__suffixes = {
        1: '-inci',
        5: '-inci',
        8: '-inci',
        70: '-inci',
        80: '-inci',
        2: '-nci',
        7: '-nci',
        20: '-nci',
        50: '-nci',
        3: '-üncü',
        4: '-üncü',
        100: '-üncü',
        6: '-ncı',
        9: '-uncu',
        10: '-uncu',
        30: '-uncu',
        60: '-ıncı',
        90: '-ıncı'
    };

    var az = moment.defineLocale('az', {
        months : 'yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr'.split('_'),
        monthsShort : 'yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek'.split('_'),
        weekdays : 'Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə'.split('_'),
        weekdaysShort : 'Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən'.split('_'),
        weekdaysMin : 'Bz_BE_ÇA_Çə_CA_Cü_Şə'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[bugün saat] LT',
            nextDay : '[sabah saat] LT',
            nextWeek : '[gələn həftə] dddd [saat] LT',
            lastDay : '[dünən] LT',
            lastWeek : '[keçən həftə] dddd [saat] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s sonra',
            past : '%s əvvəl',
            s : 'birneçə saniyyə',
            m : 'bir dəqiqə',
            mm : '%d dəqiqə',
            h : 'bir saat',
            hh : '%d saat',
            d : 'bir gün',
            dd : '%d gün',
            M : 'bir ay',
            MM : '%d ay',
            y : 'bir il',
            yy : '%d il'
        },
        meridiemParse: /gecə|səhər|gündüz|axşam/,
        isPM : function (input) {
            return /^(gündüz|axşam)$/.test(input);
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return 'gecə';
            } else if (hour < 12) {
                return 'səhər';
            } else if (hour < 17) {
                return 'gündüz';
            } else {
                return 'axşam';
            }
        },
        ordinalParse: /\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,
        ordinal : function (number) {
            if (number === 0) {  // special case for zero
                return number + '-ıncı';
            }
            var a = number % 10,
                b = number % 100 - a,
                c = number >= 100 ? 100 : null;
            return number + (az__suffixes[a] || az__suffixes[b] || az__suffixes[c]);
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : belarusian (be)
    //! author : Dmitry Demidov : https://github.com/demidov91
    //! author: Praleska: http://praleska.pro/
    //! Author : Menelion Elensúle : https://github.com/Oire

    function be__plural(word, num) {
        var forms = word.split('_');
        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
    }
    function be__relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
            'mm': withoutSuffix ? 'хвіліна_хвіліны_хвілін' : 'хвіліну_хвіліны_хвілін',
            'hh': withoutSuffix ? 'гадзіна_гадзіны_гадзін' : 'гадзіну_гадзіны_гадзін',
            'dd': 'дзень_дні_дзён',
            'MM': 'месяц_месяцы_месяцаў',
            'yy': 'год_гады_гадоў'
        };
        if (key === 'm') {
            return withoutSuffix ? 'хвіліна' : 'хвіліну';
        }
        else if (key === 'h') {
            return withoutSuffix ? 'гадзіна' : 'гадзіну';
        }
        else {
            return number + ' ' + be__plural(format[key], +number);
        }
    }
    function be__monthsCaseReplace(m, format) {
        var months = {
            'nominative': 'студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань'.split('_'),
            'accusative': 'студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня'.split('_')
        },
        nounCase = (/D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/).test(format) ?
            'accusative' :
            'nominative';
        return months[nounCase][m.month()];
    }
    function be__weekdaysCaseReplace(m, format) {
        var weekdays = {
            'nominative': 'нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота'.split('_'),
            'accusative': 'нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу'.split('_')
        },
        nounCase = (/\[ ?[Вв] ?(?:мінулую|наступную)? ?\] ?dddd/).test(format) ?
            'accusative' :
            'nominative';
        return weekdays[nounCase][m.day()];
    }

    var be = moment.defineLocale('be', {
        months : be__monthsCaseReplace,
        monthsShort : 'студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж'.split('_'),
        weekdays : be__weekdaysCaseReplace,
        weekdaysShort : 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
        weekdaysMin : 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D MMMM YYYY г.',
            LLL : 'D MMMM YYYY г., HH:mm',
            LLLL : 'dddd, D MMMM YYYY г., HH:mm'
        },
        calendar : {
            sameDay: '[Сёння ў] LT',
            nextDay: '[Заўтра ў] LT',
            lastDay: '[Учора ў] LT',
            nextWeek: function () {
                return '[У] dddd [ў] LT';
            },
            lastWeek: function () {
                switch (this.day()) {
                case 0:
                case 3:
                case 5:
                case 6:
                    return '[У мінулую] dddd [ў] LT';
                case 1:
                case 2:
                case 4:
                    return '[У мінулы] dddd [ў] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : 'праз %s',
            past : '%s таму',
            s : 'некалькі секунд',
            m : be__relativeTimeWithPlural,
            mm : be__relativeTimeWithPlural,
            h : be__relativeTimeWithPlural,
            hh : be__relativeTimeWithPlural,
            d : 'дзень',
            dd : be__relativeTimeWithPlural,
            M : 'месяц',
            MM : be__relativeTimeWithPlural,
            y : 'год',
            yy : be__relativeTimeWithPlural
        },
        meridiemParse: /ночы|раніцы|дня|вечара/,
        isPM : function (input) {
            return /^(дня|вечара)$/.test(input);
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return 'ночы';
            } else if (hour < 12) {
                return 'раніцы';
            } else if (hour < 17) {
                return 'дня';
            } else {
                return 'вечара';
            }
        },
        ordinalParse: /\d{1,2}-(і|ы|га)/,
        ordinal: function (number, period) {
            switch (period) {
            case 'M':
            case 'd':
            case 'DDD':
            case 'w':
            case 'W':
                return (number % 10 === 2 || number % 10 === 3) && (number % 100 !== 12 && number % 100 !== 13) ? number + '-і' : number + '-ы';
            case 'D':
                return number + '-га';
            default:
                return number;
            }
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : bulgarian (bg)
    //! author : Krasen Borisov : https://github.com/kraz

    var bg = moment.defineLocale('bg', {
        months : 'януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември'.split('_'),
        monthsShort : 'янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек'.split('_'),
        weekdays : 'неделя_понеделник_вторник_сряда_четвъртък_петък_събота'.split('_'),
        weekdaysShort : 'нед_пон_вто_сря_чет_пет_съб'.split('_'),
        weekdaysMin : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
        longDateFormat : {
            LT : 'H:mm',
            LTS : 'H:mm:ss',
            L : 'D.MM.YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY H:mm',
            LLLL : 'dddd, D MMMM YYYY H:mm'
        },
        calendar : {
            sameDay : '[Днес в] LT',
            nextDay : '[Утре в] LT',
            nextWeek : 'dddd [в] LT',
            lastDay : '[Вчера в] LT',
            lastWeek : function () {
                switch (this.day()) {
                case 0:
                case 3:
                case 6:
                    return '[В изминалата] dddd [в] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[В изминалия] dddd [в] LT';
                }
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : 'след %s',
            past : 'преди %s',
            s : 'няколко секунди',
            m : 'минута',
            mm : '%d минути',
            h : 'час',
            hh : '%d часа',
            d : 'ден',
            dd : '%d дни',
            M : 'месец',
            MM : '%d месеца',
            y : 'година',
            yy : '%d години'
        },
        ordinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
        ordinal : function (number) {
            var lastDigit = number % 10,
                last2Digits = number % 100;
            if (number === 0) {
                return number + '-ев';
            } else if (last2Digits === 0) {
                return number + '-ен';
            } else if (last2Digits > 10 && last2Digits < 20) {
                return number + '-ти';
            } else if (lastDigit === 1) {
                return number + '-ви';
            } else if (lastDigit === 2) {
                return number + '-ри';
            } else if (lastDigit === 7 || lastDigit === 8) {
                return number + '-ми';
            } else {
                return number + '-ти';
            }
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : Bengali (bn)
    //! author : Kaushik Gandhi : https://github.com/kaushikgandhi

    var bn__symbolMap = {
        '1': '১',
        '2': '২',
        '3': '৩',
        '4': '৪',
        '5': '৫',
        '6': '৬',
        '7': '৭',
        '8': '৮',
        '9': '৯',
        '0': '০'
    },
    bn__numberMap = {
        '১': '1',
        '২': '2',
        '৩': '3',
        '৪': '4',
        '৫': '5',
        '৬': '6',
        '৭': '7',
        '৮': '8',
        '৯': '9',
        '০': '0'
    };

    var bn = moment.defineLocale('bn', {
        months : 'জানুয়ারী_ফেবুয়ারী_মার্চ_এপ্রিল_মে_জুন_জুলাই_অগাস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর'.split('_'),
        monthsShort : 'জানু_ফেব_মার্চ_এপর_মে_জুন_জুল_অগ_সেপ্ট_অক্টো_নভ_ডিসেম্'.split('_'),
        weekdays : 'রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পত্তিবার_শুক্রুবার_শনিবার'.split('_'),
        weekdaysShort : 'রবি_সোম_মঙ্গল_বুধ_বৃহস্পত্তি_শুক্রু_শনি'.split('_'),
        weekdaysMin : 'রব_সম_মঙ্গ_বু_ব্রিহ_শু_শনি'.split('_'),
        longDateFormat : {
            LT : 'A h:mm সময়',
            LTS : 'A h:mm:ss সময়',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY, A h:mm সময়',
            LLLL : 'dddd, D MMMM YYYY, A h:mm সময়'
        },
        calendar : {
            sameDay : '[আজ] LT',
            nextDay : '[আগামীকাল] LT',
            nextWeek : 'dddd, LT',
            lastDay : '[গতকাল] LT',
            lastWeek : '[গত] dddd, LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s পরে',
            past : '%s আগে',
            s : 'কএক সেকেন্ড',
            m : 'এক মিনিট',
            mm : '%d মিনিট',
            h : 'এক ঘন্টা',
            hh : '%d ঘন্টা',
            d : 'এক দিন',
            dd : '%d দিন',
            M : 'এক মাস',
            MM : '%d মাস',
            y : 'এক বছর',
            yy : '%d বছর'
        },
        preparse: function (string) {
            return string.replace(/[১২৩৪৫৬৭৮৯০]/g, function (match) {
                return bn__numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return bn__symbolMap[match];
            });
        },
        meridiemParse: /রাত|সকাল|দুপুর|বিকেল|রাত/,
        isPM: function (input) {
            return /^(দুপুর|বিকেল|রাত)$/.test(input);
        },
        //Bengali is a vast language its spoken
        //in different forms in various parts of the world.
        //I have just generalized with most common one used
        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return 'রাত';
            } else if (hour < 10) {
                return 'সকাল';
            } else if (hour < 17) {
                return 'দুপুর';
            } else if (hour < 20) {
                return 'বিকেল';
            } else {
                return 'রাত';
            }
        },
        week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : tibetan (bo)
    //! author : Thupten N. Chakrishar : https://github.com/vajradog

    var bo__symbolMap = {
        '1': '༡',
        '2': '༢',
        '3': '༣',
        '4': '༤',
        '5': '༥',
        '6': '༦',
        '7': '༧',
        '8': '༨',
        '9': '༩',
        '0': '༠'
    },
    bo__numberMap = {
        '༡': '1',
        '༢': '2',
        '༣': '3',
        '༤': '4',
        '༥': '5',
        '༦': '6',
        '༧': '7',
        '༨': '8',
        '༩': '9',
        '༠': '0'
    };

    var bo = moment.defineLocale('bo', {
        months : 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split('_'),
        monthsShort : 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split('_'),
        weekdays : 'གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་'.split('_'),
        weekdaysShort : 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split('_'),
        weekdaysMin : 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split('_'),
        longDateFormat : {
            LT : 'A h:mm',
            LTS : 'A h:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY, A h:mm',
            LLLL : 'dddd, D MMMM YYYY, A h:mm'
        },
        calendar : {
            sameDay : '[དི་རིང] LT',
            nextDay : '[སང་ཉིན] LT',
            nextWeek : '[བདུན་ཕྲག་རྗེས་མ], LT',
            lastDay : '[ཁ་སང] LT',
            lastWeek : '[བདུན་ཕྲག་མཐའ་མ] dddd, LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s ལ་',
            past : '%s སྔན་ལ',
            s : 'ལམ་སང',
            m : 'སྐར་མ་གཅིག',
            mm : '%d སྐར་མ',
            h : 'ཆུ་ཚོད་གཅིག',
            hh : '%d ཆུ་ཚོད',
            d : 'ཉིན་གཅིག',
            dd : '%d ཉིན་',
            M : 'ཟླ་བ་གཅིག',
            MM : '%d ཟླ་བ',
            y : 'ལོ་གཅིག',
            yy : '%d ལོ'
        },
        preparse: function (string) {
            return string.replace(/[༡༢༣༤༥༦༧༨༩༠]/g, function (match) {
                return bo__numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return bo__symbolMap[match];
            });
        },
        meridiemParse: /མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,
        isPM: function (input) {
            return /^(ཉིན་གུང|དགོང་དག|མཚན་མོ)$/.test(input);
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return 'མཚན་མོ';
            } else if (hour < 10) {
                return 'ཞོགས་ཀས';
            } else if (hour < 17) {
                return 'ཉིན་གུང';
            } else if (hour < 20) {
                return 'དགོང་དག';
            } else {
                return 'མཚན་མོ';
            }
        },
        week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : breton (br)
    //! author : Jean-Baptiste Le Duigou : https://github.com/jbleduigou

    function relativeTimeWithMutation(number, withoutSuffix, key) {
        var format = {
            'mm': 'munutenn',
            'MM': 'miz',
            'dd': 'devezh'
        };
        return number + ' ' + mutation(format[key], number);
    }
    function specialMutationForYears(number) {
        switch (lastNumber(number)) {
        case 1:
        case 3:
        case 4:
        case 5:
        case 9:
            return number + ' bloaz';
        default:
            return number + ' vloaz';
        }
    }
    function lastNumber(number) {
        if (number > 9) {
            return lastNumber(number % 10);
        }
        return number;
    }
    function mutation(text, number) {
        if (number === 2) {
            return softMutation(text);
        }
        return text;
    }
    function softMutation(text) {
        var mutationTable = {
            'm': 'v',
            'b': 'v',
            'd': 'z'
        };
        if (mutationTable[text.charAt(0)] === undefined) {
            return text;
        }
        return mutationTable[text.charAt(0)] + text.substring(1);
    }

    var br = moment.defineLocale('br', {
        months : 'Genver_C\'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu'.split('_'),
        monthsShort : 'Gen_C\'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker'.split('_'),
        weekdays : 'Sul_Lun_Meurzh_Merc\'her_Yaou_Gwener_Sadorn'.split('_'),
        weekdaysShort : 'Sul_Lun_Meu_Mer_Yao_Gwe_Sad'.split('_'),
        weekdaysMin : 'Su_Lu_Me_Mer_Ya_Gw_Sa'.split('_'),
        longDateFormat : {
            LT : 'h[e]mm A',
            LTS : 'h[e]mm:ss A',
            L : 'DD/MM/YYYY',
            LL : 'D [a viz] MMMM YYYY',
            LLL : 'D [a viz] MMMM YYYY h[e]mm A',
            LLLL : 'dddd, D [a viz] MMMM YYYY h[e]mm A'
        },
        calendar : {
            sameDay : '[Hiziv da] LT',
            nextDay : '[Warc\'hoazh da] LT',
            nextWeek : 'dddd [da] LT',
            lastDay : '[Dec\'h da] LT',
            lastWeek : 'dddd [paset da] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'a-benn %s',
            past : '%s \'zo',
            s : 'un nebeud segondennoù',
            m : 'ur vunutenn',
            mm : relativeTimeWithMutation,
            h : 'un eur',
            hh : '%d eur',
            d : 'un devezh',
            dd : relativeTimeWithMutation,
            M : 'ur miz',
            MM : relativeTimeWithMutation,
            y : 'ur bloaz',
            yy : specialMutationForYears
        },
        ordinalParse: /\d{1,2}(añ|vet)/,
        ordinal : function (number) {
            var output = (number === 1) ? 'añ' : 'vet';
            return number + output;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : bosnian (bs)
    //! author : Nedim Cholich : https://github.com/frontyard
    //! based on (hr) translation by Bojan Marković

    function bs__translate(number, withoutSuffix, key) {
        var result = number + ' ';
        switch (key) {
        case 'm':
            return withoutSuffix ? 'jedna minuta' : 'jedne minute';
        case 'mm':
            if (number === 1) {
                result += 'minuta';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'minute';
            } else {
                result += 'minuta';
            }
            return result;
        case 'h':
            return withoutSuffix ? 'jedan sat' : 'jednog sata';
        case 'hh':
            if (number === 1) {
                result += 'sat';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'sata';
            } else {
                result += 'sati';
            }
            return result;
        case 'dd':
            if (number === 1) {
                result += 'dan';
            } else {
                result += 'dana';
            }
            return result;
        case 'MM':
            if (number === 1) {
                result += 'mjesec';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'mjeseca';
            } else {
                result += 'mjeseci';
            }
            return result;
        case 'yy':
            if (number === 1) {
                result += 'godina';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'godine';
            } else {
                result += 'godina';
            }
            return result;
        }
    }

    var bs = moment.defineLocale('bs', {
        months : 'januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar'.split('_'),
        monthsShort : 'jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.'.split('_'),
        weekdays : 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
        weekdaysShort : 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
        weekdaysMin : 'ne_po_ut_sr_če_pe_su'.split('_'),
        longDateFormat : {
            LT : 'H:mm',
            LTS : 'H:mm:ss',
            L : 'DD. MM. YYYY',
            LL : 'D. MMMM YYYY',
            LLL : 'D. MMMM YYYY H:mm',
            LLLL : 'dddd, D. MMMM YYYY H:mm'
        },
        calendar : {
            sameDay  : '[danas u] LT',
            nextDay  : '[sutra u] LT',
            nextWeek : function () {
                switch (this.day()) {
                case 0:
                    return '[u] [nedjelju] [u] LT';
                case 3:
                    return '[u] [srijedu] [u] LT';
                case 6:
                    return '[u] [subotu] [u] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[u] dddd [u] LT';
                }
            },
            lastDay  : '[jučer u] LT',
            lastWeek : function () {
                switch (this.day()) {
                case 0:
                case 3:
                    return '[prošlu] dddd [u] LT';
                case 6:
                    return '[prošle] [subote] [u] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[prošli] dddd [u] LT';
                }
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : 'za %s',
            past   : 'prije %s',
            s      : 'par sekundi',
            m      : bs__translate,
            mm     : bs__translate,
            h      : bs__translate,
            hh     : bs__translate,
            d      : 'dan',
            dd     : bs__translate,
            M      : 'mjesec',
            MM     : bs__translate,
            y      : 'godinu',
            yy     : bs__translate
        },
        ordinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : catalan (ca)
    //! author : Juan G. Hurtado : https://github.com/juanghurtado

    var ca = moment.defineLocale('ca', {
        months : 'gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre'.split('_'),
        monthsShort : 'gen._febr._mar._abr._mai._jun._jul._ag._set._oct._nov._des.'.split('_'),
        weekdays : 'diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte'.split('_'),
        weekdaysShort : 'dg._dl._dt._dc._dj._dv._ds.'.split('_'),
        weekdaysMin : 'Dg_Dl_Dt_Dc_Dj_Dv_Ds'.split('_'),
        longDateFormat : {
            LT : 'H:mm',
            LTS : 'LT:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY H:mm',
            LLLL : 'dddd D MMMM YYYY H:mm'
        },
        calendar : {
            sameDay : function () {
                return '[avui a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
            },
            nextDay : function () {
                return '[demà a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
            },
            nextWeek : function () {
                return 'dddd [a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
            },
            lastDay : function () {
                return '[ahir a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
            },
            lastWeek : function () {
                return '[el] dddd [passat a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : 'en %s',
            past : 'fa %s',
            s : 'uns segons',
            m : 'un minut',
            mm : '%d minuts',
            h : 'una hora',
            hh : '%d hores',
            d : 'un dia',
            dd : '%d dies',
            M : 'un mes',
            MM : '%d mesos',
            y : 'un any',
            yy : '%d anys'
        },
        ordinalParse: /\d{1,2}(r|n|t|è|a)/,
        ordinal : function (number, period) {
            var output = (number === 1) ? 'r' :
                (number === 2) ? 'n' :
                (number === 3) ? 'r' :
                (number === 4) ? 't' : 'è';
            if (period === 'w' || period === 'W') {
                output = 'a';
            }
            return number + output;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : czech (cs)
    //! author : petrbela : https://github.com/petrbela

    var cs__months = 'leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec'.split('_'),
        cs__monthsShort = 'led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro'.split('_');
    function cs__plural(n) {
        return (n > 1) && (n < 5) && (~~(n / 10) !== 1);
    }
    function cs__translate(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        switch (key) {
        case 's':  // a few seconds / in a few seconds / a few seconds ago
            return (withoutSuffix || isFuture) ? 'pár sekund' : 'pár sekundami';
        case 'm':  // a minute / in a minute / a minute ago
            return withoutSuffix ? 'minuta' : (isFuture ? 'minutu' : 'minutou');
        case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
            if (withoutSuffix || isFuture) {
                return result + (cs__plural(number) ? 'minuty' : 'minut');
            } else {
                return result + 'minutami';
            }
            break;
        case 'h':  // an hour / in an hour / an hour ago
            return withoutSuffix ? 'hodina' : (isFuture ? 'hodinu' : 'hodinou');
        case 'hh': // 9 hours / in 9 hours / 9 hours ago
            if (withoutSuffix || isFuture) {
                return result + (cs__plural(number) ? 'hodiny' : 'hodin');
            } else {
                return result + 'hodinami';
            }
            break;
        case 'd':  // a day / in a day / a day ago
            return (withoutSuffix || isFuture) ? 'den' : 'dnem';
        case 'dd': // 9 days / in 9 days / 9 days ago
            if (withoutSuffix || isFuture) {
                return result + (cs__plural(number) ? 'dny' : 'dní');
            } else {
                return result + 'dny';
            }
            break;
        case 'M':  // a month / in a month / a month ago
            return (withoutSuffix || isFuture) ? 'měsíc' : 'měsícem';
        case 'MM': // 9 months / in 9 months / 9 months ago
            if (withoutSuffix || isFuture) {
                return result + (cs__plural(number) ? 'měsíce' : 'měsíců');
            } else {
                return result + 'měsíci';
            }
            break;
        case 'y':  // a year / in a year / a year ago
            return (withoutSuffix || isFuture) ? 'rok' : 'rokem';
        case 'yy': // 9 years / in 9 years / 9 years ago
            if (withoutSuffix || isFuture) {
                return result + (cs__plural(number) ? 'roky' : 'let');
            } else {
                return result + 'lety';
            }
            break;
        }
    }

    var cs = moment.defineLocale('cs', {
        months : cs__months,
        monthsShort : cs__monthsShort,
        monthsParse : (function (months, monthsShort) {
            var i, _monthsParse = [];
            for (i = 0; i < 12; i++) {
                // use custom parser to solve problem with July (červenec)
                _monthsParse[i] = new RegExp('^' + months[i] + '$|^' + monthsShort[i] + '$', 'i');
            }
            return _monthsParse;
        }(cs__months, cs__monthsShort)),
        weekdays : 'neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota'.split('_'),
        weekdaysShort : 'ne_po_út_st_čt_pá_so'.split('_'),
        weekdaysMin : 'ne_po_út_st_čt_pá_so'.split('_'),
        longDateFormat : {
            LT: 'H:mm',
            LTS : 'H:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D. MMMM YYYY',
            LLL : 'D. MMMM YYYY H:mm',
            LLLL : 'dddd D. MMMM YYYY H:mm'
        },
        calendar : {
            sameDay: '[dnes v] LT',
            nextDay: '[zítra v] LT',
            nextWeek: function () {
                switch (this.day()) {
                case 0:
                    return '[v neděli v] LT';
                case 1:
                case 2:
                    return '[v] dddd [v] LT';
                case 3:
                    return '[ve středu v] LT';
                case 4:
                    return '[ve čtvrtek v] LT';
                case 5:
                    return '[v pátek v] LT';
                case 6:
                    return '[v sobotu v] LT';
                }
            },
            lastDay: '[včera v] LT',
            lastWeek: function () {
                switch (this.day()) {
                case 0:
                    return '[minulou neděli v] LT';
                case 1:
                case 2:
                    return '[minulé] dddd [v] LT';
                case 3:
                    return '[minulou středu v] LT';
                case 4:
                case 5:
                    return '[minulý] dddd [v] LT';
                case 6:
                    return '[minulou sobotu v] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : 'za %s',
            past : 'před %s',
            s : cs__translate,
            m : cs__translate,
            mm : cs__translate,
            h : cs__translate,
            hh : cs__translate,
            d : cs__translate,
            dd : cs__translate,
            M : cs__translate,
            MM : cs__translate,
            y : cs__translate,
            yy : cs__translate
        },
        ordinalParse : /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : chuvash (cv)
    //! author : Anatoly Mironov : https://github.com/mirontoli

    var cv = moment.defineLocale('cv', {
        months : 'кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав'.split('_'),
        monthsShort : 'кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш'.split('_'),
        weekdays : 'вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун'.split('_'),
        weekdaysShort : 'выр_тун_ытл_юн_кӗҫ_эрн_шӑм'.split('_'),
        weekdaysMin : 'вр_тн_ыт_юн_кҫ_эр_шм'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD-MM-YYYY',
            LL : 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]',
            LLL : 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm',
            LLLL : 'dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm'
        },
        calendar : {
            sameDay: '[Паян] LT [сехетре]',
            nextDay: '[Ыран] LT [сехетре]',
            lastDay: '[Ӗнер] LT [сехетре]',
            nextWeek: '[Ҫитес] dddd LT [сехетре]',
            lastWeek: '[Иртнӗ] dddd LT [сехетре]',
            sameElse: 'L'
        },
        relativeTime : {
            future : function (output) {
                var affix = /сехет$/i.exec(output) ? 'рен' : /ҫул$/i.exec(output) ? 'тан' : 'ран';
                return output + affix;
            },
            past : '%s каялла',
            s : 'пӗр-ик ҫеккунт',
            m : 'пӗр минут',
            mm : '%d минут',
            h : 'пӗр сехет',
            hh : '%d сехет',
            d : 'пӗр кун',
            dd : '%d кун',
            M : 'пӗр уйӑх',
            MM : '%d уйӑх',
            y : 'пӗр ҫул',
            yy : '%d ҫул'
        },
        ordinalParse: /\d{1,2}-мӗш/,
        ordinal : '%d-мӗш',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : Welsh (cy)
    //! author : Robert Allen

    var cy = moment.defineLocale('cy', {
        months: 'Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr'.split('_'),
        monthsShort: 'Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag'.split('_'),
        weekdays: 'Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn'.split('_'),
        weekdaysShort: 'Sul_Llun_Maw_Mer_Iau_Gwe_Sad'.split('_'),
        weekdaysMin: 'Su_Ll_Ma_Me_Ia_Gw_Sa'.split('_'),
        // time formats are the same as en-gb
        longDateFormat: {
            LT: 'HH:mm',
            LTS : 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[Heddiw am] LT',
            nextDay: '[Yfory am] LT',
            nextWeek: 'dddd [am] LT',
            lastDay: '[Ddoe am] LT',
            lastWeek: 'dddd [diwethaf am] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'mewn %s',
            past: '%s yn ôl',
            s: 'ychydig eiliadau',
            m: 'munud',
            mm: '%d munud',
            h: 'awr',
            hh: '%d awr',
            d: 'diwrnod',
            dd: '%d diwrnod',
            M: 'mis',
            MM: '%d mis',
            y: 'blwyddyn',
            yy: '%d flynedd'
        },
        ordinalParse: /\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,
        // traditional ordinal numbers above 31 are not commonly used in colloquial Welsh
        ordinal: function (number) {
            var b = number,
                output = '',
                lookup = [
                    '', 'af', 'il', 'ydd', 'ydd', 'ed', 'ed', 'ed', 'fed', 'fed', 'fed', // 1af to 10fed
                    'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'fed' // 11eg to 20fed
                ];
            if (b > 20) {
                if (b === 40 || b === 50 || b === 60 || b === 80 || b === 100) {
                    output = 'fed'; // not 30ain, 70ain or 90ain
                } else {
                    output = 'ain';
                }
            } else if (b > 0) {
                output = lookup[b];
            }
            return number + output;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : danish (da)
    //! author : Ulrik Nielsen : https://github.com/mrbase

    var da = moment.defineLocale('da', {
        months : 'januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december'.split('_'),
        monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
        weekdays : 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
        weekdaysShort : 'søn_man_tir_ons_tor_fre_lør'.split('_'),
        weekdaysMin : 'sø_ma_ti_on_to_fr_lø'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D. MMMM YYYY',
            LLL : 'D. MMMM YYYY HH:mm',
            LLLL : 'dddd [d.] D. MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[I dag kl.] LT',
            nextDay : '[I morgen kl.] LT',
            nextWeek : 'dddd [kl.] LT',
            lastDay : '[I går kl.] LT',
            lastWeek : '[sidste] dddd [kl] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'om %s',
            past : '%s siden',
            s : 'få sekunder',
            m : 'et minut',
            mm : '%d minutter',
            h : 'en time',
            hh : '%d timer',
            d : 'en dag',
            dd : '%d dage',
            M : 'en måned',
            MM : '%d måneder',
            y : 'et år',
            yy : '%d år'
        },
        ordinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : austrian german (de-at)
    //! author : lluchs : https://github.com/lluchs
    //! author: Menelion Elensúle: https://github.com/Oire
    //! author : Martin Groller : https://github.com/MadMG

    function de_at__processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            'm': ['eine Minute', 'einer Minute'],
            'h': ['eine Stunde', 'einer Stunde'],
            'd': ['ein Tag', 'einem Tag'],
            'dd': [number + ' Tage', number + ' Tagen'],
            'M': ['ein Monat', 'einem Monat'],
            'MM': [number + ' Monate', number + ' Monaten'],
            'y': ['ein Jahr', 'einem Jahr'],
            'yy': [number + ' Jahre', number + ' Jahren']
        };
        return withoutSuffix ? format[key][0] : format[key][1];
    }

    var de_at = moment.defineLocale('de-at', {
        months : 'Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
        monthsShort : 'Jän._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
        weekdays : 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
        weekdaysShort : 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
        weekdaysMin : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
        longDateFormat : {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D. MMMM YYYY',
            LLL : 'D. MMMM YYYY HH:mm',
            LLLL : 'dddd, D. MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[Heute um] LT [Uhr]',
            sameElse: 'L',
            nextDay: '[Morgen um] LT [Uhr]',
            nextWeek: 'dddd [um] LT [Uhr]',
            lastDay: '[Gestern um] LT [Uhr]',
            lastWeek: '[letzten] dddd [um] LT [Uhr]'
        },
        relativeTime : {
            future : 'in %s',
            past : 'vor %s',
            s : 'ein paar Sekunden',
            m : de_at__processRelativeTime,
            mm : '%d Minuten',
            h : de_at__processRelativeTime,
            hh : '%d Stunden',
            d : de_at__processRelativeTime,
            dd : de_at__processRelativeTime,
            M : de_at__processRelativeTime,
            MM : de_at__processRelativeTime,
            y : de_at__processRelativeTime,
            yy : de_at__processRelativeTime
        },
        ordinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : german (de)
    //! author : lluchs : https://github.com/lluchs
    //! author: Menelion Elensúle: https://github.com/Oire

    function de__processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            'm': ['eine Minute', 'einer Minute'],
            'h': ['eine Stunde', 'einer Stunde'],
            'd': ['ein Tag', 'einem Tag'],
            'dd': [number + ' Tage', number + ' Tagen'],
            'M': ['ein Monat', 'einem Monat'],
            'MM': [number + ' Monate', number + ' Monaten'],
            'y': ['ein Jahr', 'einem Jahr'],
            'yy': [number + ' Jahre', number + ' Jahren']
        };
        return withoutSuffix ? format[key][0] : format[key][1];
    }

    var de = moment.defineLocale('de', {
        months : 'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
        monthsShort : 'Jan._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
        weekdays : 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
        weekdaysShort : 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
        weekdaysMin : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
        longDateFormat : {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D. MMMM YYYY',
            LLL : 'D. MMMM YYYY HH:mm',
            LLLL : 'dddd, D. MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[Heute um] LT [Uhr]',
            sameElse: 'L',
            nextDay: '[Morgen um] LT [Uhr]',
            nextWeek: 'dddd [um] LT [Uhr]',
            lastDay: '[Gestern um] LT [Uhr]',
            lastWeek: '[letzten] dddd [um] LT [Uhr]'
        },
        relativeTime : {
            future : 'in %s',
            past : 'vor %s',
            s : 'ein paar Sekunden',
            m : de__processRelativeTime,
            mm : '%d Minuten',
            h : de__processRelativeTime,
            hh : '%d Stunden',
            d : de__processRelativeTime,
            dd : de__processRelativeTime,
            M : de__processRelativeTime,
            MM : de__processRelativeTime,
            y : de__processRelativeTime,
            yy : de__processRelativeTime
        },
        ordinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : modern greek (el)
    //! author : Aggelos Karalias : https://github.com/mehiel

    var el = moment.defineLocale('el', {
        monthsNominativeEl : 'Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος'.split('_'),
        monthsGenitiveEl : 'Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου'.split('_'),
        months : function (momentToFormat, format) {
            if (/D/.test(format.substring(0, format.indexOf('MMMM')))) { // if there is a day number before 'MMMM'
                return this._monthsGenitiveEl[momentToFormat.month()];
            } else {
                return this._monthsNominativeEl[momentToFormat.month()];
            }
        },
        monthsShort : 'Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ'.split('_'),
        weekdays : 'Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο'.split('_'),
        weekdaysShort : 'Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ'.split('_'),
        weekdaysMin : 'Κυ_Δε_Τρ_Τε_Πε_Πα_Σα'.split('_'),
        meridiem : function (hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'μμ' : 'ΜΜ';
            } else {
                return isLower ? 'πμ' : 'ΠΜ';
            }
        },
        isPM : function (input) {
            return ((input + '').toLowerCase()[0] === 'μ');
        },
        meridiemParse : /[ΠΜ]\.?Μ?\.?/i,
        longDateFormat : {
            LT : 'h:mm A',
            LTS : 'h:mm:ss A',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY h:mm A',
            LLLL : 'dddd, D MMMM YYYY h:mm A'
        },
        calendarEl : {
            sameDay : '[Σήμερα {}] LT',
            nextDay : '[Αύριο {}] LT',
            nextWeek : 'dddd [{}] LT',
            lastDay : '[Χθες {}] LT',
            lastWeek : function () {
                switch (this.day()) {
                    case 6:
                        return '[το προηγούμενο] dddd [{}] LT';
                    default:
                        return '[την προηγούμενη] dddd [{}] LT';
                }
            },
            sameElse : 'L'
        },
        calendar : function (key, mom) {
            var output = this._calendarEl[key],
                hours = mom && mom.hours();
            if (typeof output === 'function') {
                output = output.apply(mom);
            }
            return output.replace('{}', (hours % 12 === 1 ? 'στη' : 'στις'));
        },
        relativeTime : {
            future : 'σε %s',
            past : '%s πριν',
            s : 'λίγα δευτερόλεπτα',
            m : 'ένα λεπτό',
            mm : '%d λεπτά',
            h : 'μία ώρα',
            hh : '%d ώρες',
            d : 'μία μέρα',
            dd : '%d μέρες',
            M : 'ένας μήνας',
            MM : '%d μήνες',
            y : 'ένας χρόνος',
            yy : '%d χρόνια'
        },
        ordinalParse: /\d{1,2}η/,
        ordinal: '%dη',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : australian english (en-au)

    var en_au = moment.defineLocale('en-au', {
        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat : {
            LT : 'h:mm A',
            LTS : 'h:mm:ss A',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY h:mm A',
            LLLL : 'dddd, D MMMM YYYY h:mm A'
        },
        calendar : {
            sameDay : '[Today at] LT',
            nextDay : '[Tomorrow at] LT',
            nextWeek : 'dddd [at] LT',
            lastDay : '[Yesterday at] LT',
            lastWeek : '[Last] dddd [at] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'in %s',
            past : '%s ago',
            s : 'a few seconds',
            m : 'a minute',
            mm : '%d minutes',
            h : 'an hour',
            hh : '%d hours',
            d : 'a day',
            dd : '%d days',
            M : 'a month',
            MM : '%d months',
            y : 'a year',
            yy : '%d years'
        },
        ordinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (~~(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : canadian english (en-ca)
    //! author : Jonathan Abourbih : https://github.com/jonbca

    var en_ca = moment.defineLocale('en-ca', {
        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat : {
            LT : 'h:mm A',
            LTS : 'h:mm:ss A',
            L : 'YYYY-MM-DD',
            LL : 'D MMMM, YYYY',
            LLL : 'D MMMM, YYYY h:mm A',
            LLLL : 'dddd, D MMMM, YYYY h:mm A'
        },
        calendar : {
            sameDay : '[Today at] LT',
            nextDay : '[Tomorrow at] LT',
            nextWeek : 'dddd [at] LT',
            lastDay : '[Yesterday at] LT',
            lastWeek : '[Last] dddd [at] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'in %s',
            past : '%s ago',
            s : 'a few seconds',
            m : 'a minute',
            mm : '%d minutes',
            h : 'an hour',
            hh : '%d hours',
            d : 'a day',
            dd : '%d days',
            M : 'a month',
            MM : '%d months',
            y : 'a year',
            yy : '%d years'
        },
        ordinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (~~(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        }
    });

    //! moment.js locale configuration
    //! locale : great britain english (en-gb)
    //! author : Chris Gedrim : https://github.com/chrisgedrim

    var en_gb = moment.defineLocale('en-gb', {
        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[Today at] LT',
            nextDay : '[Tomorrow at] LT',
            nextWeek : 'dddd [at] LT',
            lastDay : '[Yesterday at] LT',
            lastWeek : '[Last] dddd [at] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'in %s',
            past : '%s ago',
            s : 'a few seconds',
            m : 'a minute',
            mm : '%d minutes',
            h : 'an hour',
            hh : '%d hours',
            d : 'a day',
            dd : '%d days',
            M : 'a month',
            MM : '%d months',
            y : 'a year',
            yy : '%d years'
        },
        ordinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (~~(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : esperanto (eo)
    //! author : Colin Dean : https://github.com/colindean
    //! komento: Mi estas malcerta se mi korekte traktis akuzativojn en tiu traduko.
    //!          Se ne, bonvolu korekti kaj avizi min por ke mi povas lerni!

    var eo = moment.defineLocale('eo', {
        months : 'januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro'.split('_'),
        monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aŭg_sep_okt_nov_dec'.split('_'),
        weekdays : 'Dimanĉo_Lundo_Mardo_Merkredo_Ĵaŭdo_Vendredo_Sabato'.split('_'),
        weekdaysShort : 'Dim_Lun_Mard_Merk_Ĵaŭ_Ven_Sab'.split('_'),
        weekdaysMin : 'Di_Lu_Ma_Me_Ĵa_Ve_Sa'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'YYYY-MM-DD',
            LL : 'D[-an de] MMMM, YYYY',
            LLL : 'D[-an de] MMMM, YYYY HH:mm',
            LLLL : 'dddd, [la] D[-an de] MMMM, YYYY HH:mm'
        },
        meridiemParse: /[ap]\.t\.m/i,
        isPM: function (input) {
            return input.charAt(0).toLowerCase() === 'p';
        },
        meridiem : function (hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'p.t.m.' : 'P.T.M.';
            } else {
                return isLower ? 'a.t.m.' : 'A.T.M.';
            }
        },
        calendar : {
            sameDay : '[Hodiaŭ je] LT',
            nextDay : '[Morgaŭ je] LT',
            nextWeek : 'dddd [je] LT',
            lastDay : '[Hieraŭ je] LT',
            lastWeek : '[pasinta] dddd [je] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'je %s',
            past : 'antaŭ %s',
            s : 'sekundoj',
            m : 'minuto',
            mm : '%d minutoj',
            h : 'horo',
            hh : '%d horoj',
            d : 'tago',//ne 'diurno', ĉar estas uzita por proksimumo
            dd : '%d tagoj',
            M : 'monato',
            MM : '%d monatoj',
            y : 'jaro',
            yy : '%d jaroj'
        },
        ordinalParse: /\d{1,2}a/,
        ordinal : '%da',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : spanish (es)
    //! author : Julio Napurí : https://github.com/julionc

    var monthsShortDot = 'Ene._Feb._Mar._Abr._May._Jun._Jul._Ago._Sep._Oct._Nov._Dic.'.split('_'),
        es__monthsShort = 'Ene_Feb_Mar_Abr_May_Jun_Jul_Ago_Sep_Oct_Nov_Dic'.split('_');

    var es = moment.defineLocale('es', {
        months : 'Enero_Febrero_Marzo_Abril_Mayo_Junio_Julio_Agosto_Septiembre_Octubre_Noviembre_Diciembre'.split('_'),
        monthsShort : function (m, format) {
            if (/-MMM-/.test(format)) {
                return es__monthsShort[m.month()];
            } else {
                return monthsShortDot[m.month()];
            }
        },
        weekdays : 'Domingo_Lunes_Martes_Miércoles_Jueves_Viernes_Sábado'.split('_'),
        weekdaysShort : 'Dom._Lun._Mar._Mié._Jue._Vie._Sáb.'.split('_'),
        weekdaysMin : 'Do_Lu_Ma_Mi_Ju_Vi_Sá'.split('_'),
        longDateFormat : {
            LT : 'H:mm',
            LTS : 'H:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D [de] MMMM [de] YYYY',
            LLL : 'D [de] MMMM [de] YYYY H:mm',
            LLLL : 'dddd, D [de] MMMM [de] YYYY H:mm'
        },
        calendar : {
            sameDay : function () {
                return '[hoy a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            nextDay : function () {
                return '[mañana a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            nextWeek : function () {
                return 'dddd [a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            lastDay : function () {
                return '[ayer a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            lastWeek : function () {
                return '[el] dddd [pasado a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : 'en %s',
            past : 'hace %s',
            s : 'unos segundos',
            m : 'un minuto',
            mm : '%d minutos',
            h : 'una hora',
            hh : '%d horas',
            d : 'un día',
            dd : '%d días',
            M : 'un mes',
            MM : '%d meses',
            y : 'un año',
            yy : '%d años'
        },
        ordinalParse : /\d{1,2}º/,
        ordinal : '%dº',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : estonian (et)
    //! author : Henry Kehlmann : https://github.com/madhenry
    //! improvements : Illimar Tambek : https://github.com/ragulka

    function et__processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            's' : ['mõne sekundi', 'mõni sekund', 'paar sekundit'],
            'm' : ['ühe minuti', 'üks minut'],
            'mm': [number + ' minuti', number + ' minutit'],
            'h' : ['ühe tunni', 'tund aega', 'üks tund'],
            'hh': [number + ' tunni', number + ' tundi'],
            'd' : ['ühe päeva', 'üks päev'],
            'M' : ['kuu aja', 'kuu aega', 'üks kuu'],
            'MM': [number + ' kuu', number + ' kuud'],
            'y' : ['ühe aasta', 'aasta', 'üks aasta'],
            'yy': [number + ' aasta', number + ' aastat']
        };
        if (withoutSuffix) {
            return format[key][2] ? format[key][2] : format[key][1];
        }
        return isFuture ? format[key][0] : format[key][1];
    }

    var et = moment.defineLocale('et', {
        months        : 'jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember'.split('_'),
        monthsShort   : 'jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets'.split('_'),
        weekdays      : 'pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev'.split('_'),
        weekdaysShort : 'P_E_T_K_N_R_L'.split('_'),
        weekdaysMin   : 'P_E_T_K_N_R_L'.split('_'),
        longDateFormat : {
            LT   : 'H:mm',
            LTS : 'H:mm:ss',
            L    : 'DD.MM.YYYY',
            LL   : 'D. MMMM YYYY',
            LLL  : 'D. MMMM YYYY H:mm',
            LLLL : 'dddd, D. MMMM YYYY H:mm'
        },
        calendar : {
            sameDay  : '[Täna,] LT',
            nextDay  : '[Homme,] LT',
            nextWeek : '[Järgmine] dddd LT',
            lastDay  : '[Eile,] LT',
            lastWeek : '[Eelmine] dddd LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s pärast',
            past   : '%s tagasi',
            s      : et__processRelativeTime,
            m      : et__processRelativeTime,
            mm     : et__processRelativeTime,
            h      : et__processRelativeTime,
            hh     : et__processRelativeTime,
            d      : et__processRelativeTime,
            dd     : '%d päeva',
            M      : et__processRelativeTime,
            MM     : et__processRelativeTime,
            y      : et__processRelativeTime,
            yy     : et__processRelativeTime
        },
        ordinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : euskara (eu)
    //! author : Eneko Illarramendi : https://github.com/eillarra

    var eu = moment.defineLocale('eu', {
        months : 'urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua'.split('_'),
        monthsShort : 'urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.'.split('_'),
        weekdays : 'igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata'.split('_'),
        weekdaysShort : 'ig._al._ar._az._og._ol._lr.'.split('_'),
        weekdaysMin : 'ig_al_ar_az_og_ol_lr'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'YYYY-MM-DD',
            LL : 'YYYY[ko] MMMM[ren] D[a]',
            LLL : 'YYYY[ko] MMMM[ren] D[a] HH:mm',
            LLLL : 'dddd, YYYY[ko] MMMM[ren] D[a] HH:mm',
            l : 'YYYY-M-D',
            ll : 'YYYY[ko] MMM D[a]',
            lll : 'YYYY[ko] MMM D[a] HH:mm',
            llll : 'ddd, YYYY[ko] MMM D[a] HH:mm'
        },
        calendar : {
            sameDay : '[gaur] LT[etan]',
            nextDay : '[bihar] LT[etan]',
            nextWeek : 'dddd LT[etan]',
            lastDay : '[atzo] LT[etan]',
            lastWeek : '[aurreko] dddd LT[etan]',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s barru',
            past : 'duela %s',
            s : 'segundo batzuk',
            m : 'minutu bat',
            mm : '%d minutu',
            h : 'ordu bat',
            hh : '%d ordu',
            d : 'egun bat',
            dd : '%d egun',
            M : 'hilabete bat',
            MM : '%d hilabete',
            y : 'urte bat',
            yy : '%d urte'
        },
        ordinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : Persian (fa)
    //! author : Ebrahim Byagowi : https://github.com/ebraminio

    var fa__symbolMap = {
        '1': '۱',
        '2': '۲',
        '3': '۳',
        '4': '۴',
        '5': '۵',
        '6': '۶',
        '7': '۷',
        '8': '۸',
        '9': '۹',
        '0': '۰'
    }, fa__numberMap = {
        '۱': '1',
        '۲': '2',
        '۳': '3',
        '۴': '4',
        '۵': '5',
        '۶': '6',
        '۷': '7',
        '۸': '8',
        '۹': '9',
        '۰': '0'
    };

    var fa = moment.defineLocale('fa', {
        months : 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
        monthsShort : 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
        weekdays : 'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split('_'),
        weekdaysShort : 'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split('_'),
        weekdaysMin : 'ی_د_س_چ_پ_ج_ش'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        meridiemParse: /قبل از ظهر|بعد از ظهر/,
        isPM: function (input) {
            return /بعد از ظهر/.test(input);
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 12) {
                return 'قبل از ظهر';
            } else {
                return 'بعد از ظهر';
            }
        },
        calendar : {
            sameDay : '[امروز ساعت] LT',
            nextDay : '[فردا ساعت] LT',
            nextWeek : 'dddd [ساعت] LT',
            lastDay : '[دیروز ساعت] LT',
            lastWeek : 'dddd [پیش] [ساعت] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'در %s',
            past : '%s پیش',
            s : 'چندین ثانیه',
            m : 'یک دقیقه',
            mm : '%d دقیقه',
            h : 'یک ساعت',
            hh : '%d ساعت',
            d : 'یک روز',
            dd : '%d روز',
            M : 'یک ماه',
            MM : '%d ماه',
            y : 'یک سال',
            yy : '%d سال'
        },
        preparse: function (string) {
            return string.replace(/[۰-۹]/g, function (match) {
                return fa__numberMap[match];
            }).replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return fa__symbolMap[match];
            }).replace(/,/g, '،');
        },
        ordinalParse: /\d{1,2}م/,
        ordinal : '%dم',
        week : {
            dow : 6, // Saturday is the first day of the week.
            doy : 12 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : finnish (fi)
    //! author : Tarmo Aidantausta : https://github.com/bleadof

    var numbersPast = 'nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän'.split(' '),
        numbersFuture = [
            'nolla', 'yhden', 'kahden', 'kolmen', 'neljän', 'viiden', 'kuuden',
            numbersPast[7], numbersPast[8], numbersPast[9]
        ];
    function fi__translate(number, withoutSuffix, key, isFuture) {
        var result = '';
        switch (key) {
        case 's':
            return isFuture ? 'muutaman sekunnin' : 'muutama sekunti';
        case 'm':
            return isFuture ? 'minuutin' : 'minuutti';
        case 'mm':
            result = isFuture ? 'minuutin' : 'minuuttia';
            break;
        case 'h':
            return isFuture ? 'tunnin' : 'tunti';
        case 'hh':
            result = isFuture ? 'tunnin' : 'tuntia';
            break;
        case 'd':
            return isFuture ? 'päivän' : 'päivä';
        case 'dd':
            result = isFuture ? 'päivän' : 'päivää';
            break;
        case 'M':
            return isFuture ? 'kuukauden' : 'kuukausi';
        case 'MM':
            result = isFuture ? 'kuukauden' : 'kuukautta';
            break;
        case 'y':
            return isFuture ? 'vuoden' : 'vuosi';
        case 'yy':
            result = isFuture ? 'vuoden' : 'vuotta';
            break;
        }
        result = verbalNumber(number, isFuture) + ' ' + result;
        return result;
    }
    function verbalNumber(number, isFuture) {
        return number < 10 ? (isFuture ? numbersFuture[number] : numbersPast[number]) : number;
    }

    var fi = moment.defineLocale('fi', {
        months : 'tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu'.split('_'),
        monthsShort : 'tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu'.split('_'),
        weekdays : 'sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai'.split('_'),
        weekdaysShort : 'su_ma_ti_ke_to_pe_la'.split('_'),
        weekdaysMin : 'su_ma_ti_ke_to_pe_la'.split('_'),
        longDateFormat : {
            LT : 'HH.mm',
            LTS : 'HH.mm.ss',
            L : 'DD.MM.YYYY',
            LL : 'Do MMMM[ta] YYYY',
            LLL : 'Do MMMM[ta] YYYY, [klo] HH.mm',
            LLLL : 'dddd, Do MMMM[ta] YYYY, [klo] HH.mm',
            l : 'D.M.YYYY',
            ll : 'Do MMM YYYY',
            lll : 'Do MMM YYYY, [klo] HH.mm',
            llll : 'ddd, Do MMM YYYY, [klo] HH.mm'
        },
        calendar : {
            sameDay : '[tänään] [klo] LT',
            nextDay : '[huomenna] [klo] LT',
            nextWeek : 'dddd [klo] LT',
            lastDay : '[eilen] [klo] LT',
            lastWeek : '[viime] dddd[na] [klo] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s päästä',
            past : '%s sitten',
            s : fi__translate,
            m : fi__translate,
            mm : fi__translate,
            h : fi__translate,
            hh : fi__translate,
            d : fi__translate,
            dd : fi__translate,
            M : fi__translate,
            MM : fi__translate,
            y : fi__translate,
            yy : fi__translate
        },
        ordinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : faroese (fo)
    //! author : Ragnar Johannesen : https://github.com/ragnar123

    var fo = moment.defineLocale('fo', {
        months : 'januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
        monthsShort : 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
        weekdays : 'sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur'.split('_'),
        weekdaysShort : 'sun_mán_týs_mik_hós_frí_ley'.split('_'),
        weekdaysMin : 'su_má_tý_mi_hó_fr_le'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D. MMMM, YYYY HH:mm'
        },
        calendar : {
            sameDay : '[Í dag kl.] LT',
            nextDay : '[Í morgin kl.] LT',
            nextWeek : 'dddd [kl.] LT',
            lastDay : '[Í gjár kl.] LT',
            lastWeek : '[síðstu] dddd [kl] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'um %s',
            past : '%s síðani',
            s : 'fá sekund',
            m : 'ein minutt',
            mm : '%d minuttir',
            h : 'ein tími',
            hh : '%d tímar',
            d : 'ein dagur',
            dd : '%d dagar',
            M : 'ein mánaði',
            MM : '%d mánaðir',
            y : 'eitt ár',
            yy : '%d ár'
        },
        ordinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : canadian french (fr-ca)
    //! author : Jonathan Abourbih : https://github.com/jonbca

    var fr_ca = moment.defineLocale('fr-ca', {
        months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
        monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
        weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
        weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
        weekdaysMin : 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'YYYY-MM-DD',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[Aujourd\'hui à] LT',
            nextDay: '[Demain à] LT',
            nextWeek: 'dddd [à] LT',
            lastDay: '[Hier à] LT',
            lastWeek: 'dddd [dernier à] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'dans %s',
            past : 'il y a %s',
            s : 'quelques secondes',
            m : 'une minute',
            mm : '%d minutes',
            h : 'une heure',
            hh : '%d heures',
            d : 'un jour',
            dd : '%d jours',
            M : 'un mois',
            MM : '%d mois',
            y : 'un an',
            yy : '%d ans'
        },
        ordinalParse: /\d{1,2}(er|e)/,
        ordinal : function (number) {
            return number + (number === 1 ? 'er' : 'e');
        }
    });

    //! moment.js locale configuration
    //! locale : french (fr)
    //! author : John Fischer : https://github.com/jfroffice

    var fr = moment.defineLocale('fr', {
        months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
        monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
        weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
        weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
        weekdaysMin : 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[Aujourd\'hui à] LT',
            nextDay: '[Demain à] LT',
            nextWeek: 'dddd [à] LT',
            lastDay: '[Hier à] LT',
            lastWeek: 'dddd [dernier à] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'dans %s',
            past : 'il y a %s',
            s : 'quelques secondes',
            m : 'une minute',
            mm : '%d minutes',
            h : 'une heure',
            hh : '%d heures',
            d : 'un jour',
            dd : '%d jours',
            M : 'un mois',
            MM : '%d mois',
            y : 'un an',
            yy : '%d ans'
        },
        ordinalParse: /\d{1,2}(er|)/,
        ordinal : function (number) {
            return number + (number === 1 ? 'er' : '');
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : frisian (fy)
    //! author : Robin van der Vliet : https://github.com/robin0van0der0v

    var fy__monthsShortWithDots = 'jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.'.split('_'),
        fy__monthsShortWithoutDots = 'jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_');

    var fy = moment.defineLocale('fy', {
        months : 'jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber'.split('_'),
        monthsShort : function (m, format) {
            if (/-MMM-/.test(format)) {
                return fy__monthsShortWithoutDots[m.month()];
            } else {
                return fy__monthsShortWithDots[m.month()];
            }
        },
        weekdays : 'snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon'.split('_'),
        weekdaysShort : 'si._mo._ti._wo._to._fr._so.'.split('_'),
        weekdaysMin : 'Si_Mo_Ti_Wo_To_Fr_So'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD-MM-YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[hjoed om] LT',
            nextDay: '[moarn om] LT',
            nextWeek: 'dddd [om] LT',
            lastDay: '[juster om] LT',
            lastWeek: '[ôfrûne] dddd [om] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'oer %s',
            past : '%s lyn',
            s : 'in pear sekonden',
            m : 'ien minút',
            mm : '%d minuten',
            h : 'ien oere',
            hh : '%d oeren',
            d : 'ien dei',
            dd : '%d dagen',
            M : 'ien moanne',
            MM : '%d moannen',
            y : 'ien jier',
            yy : '%d jierren'
        },
        ordinalParse: /\d{1,2}(ste|de)/,
        ordinal : function (number) {
            return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : galician (gl)
    //! author : Juan G. Hurtado : https://github.com/juanghurtado

    var gl = moment.defineLocale('gl', {
        months : 'Xaneiro_Febreiro_Marzo_Abril_Maio_Xuño_Xullo_Agosto_Setembro_Outubro_Novembro_Decembro'.split('_'),
        monthsShort : 'Xan._Feb._Mar._Abr._Mai._Xuñ._Xul._Ago._Set._Out._Nov._Dec.'.split('_'),
        weekdays : 'Domingo_Luns_Martes_Mércores_Xoves_Venres_Sábado'.split('_'),
        weekdaysShort : 'Dom._Lun._Mar._Mér._Xov._Ven._Sáb.'.split('_'),
        weekdaysMin : 'Do_Lu_Ma_Mé_Xo_Ve_Sá'.split('_'),
        longDateFormat : {
            LT : 'H:mm',
            LTS : 'H:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY H:mm',
            LLLL : 'dddd D MMMM YYYY H:mm'
        },
        calendar : {
            sameDay : function () {
                return '[hoxe ' + ((this.hours() !== 1) ? 'ás' : 'á') + '] LT';
            },
            nextDay : function () {
                return '[mañá ' + ((this.hours() !== 1) ? 'ás' : 'á') + '] LT';
            },
            nextWeek : function () {
                return 'dddd [' + ((this.hours() !== 1) ? 'ás' : 'a') + '] LT';
            },
            lastDay : function () {
                return '[onte ' + ((this.hours() !== 1) ? 'á' : 'a') + '] LT';
            },
            lastWeek : function () {
                return '[o] dddd [pasado ' + ((this.hours() !== 1) ? 'ás' : 'a') + '] LT';
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : function (str) {
                if (str === 'uns segundos') {
                    return 'nuns segundos';
                }
                return 'en ' + str;
            },
            past : 'hai %s',
            s : 'uns segundos',
            m : 'un minuto',
            mm : '%d minutos',
            h : 'unha hora',
            hh : '%d horas',
            d : 'un día',
            dd : '%d días',
            M : 'un mes',
            MM : '%d meses',
            y : 'un ano',
            yy : '%d anos'
        },
        ordinalParse : /\d{1,2}º/,
        ordinal : '%dº',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : Hebrew (he)
    //! author : Tomer Cohen : https://github.com/tomer
    //! author : Moshe Simantov : https://github.com/DevelopmentIL
    //! author : Tal Ater : https://github.com/TalAter

    var he = moment.defineLocale('he', {
        months : 'ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר'.split('_'),
        monthsShort : 'ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳'.split('_'),
        weekdays : 'ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת'.split('_'),
        weekdaysShort : 'א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳'.split('_'),
        weekdaysMin : 'א_ב_ג_ד_ה_ו_ש'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D [ב]MMMM YYYY',
            LLL : 'D [ב]MMMM YYYY HH:mm',
            LLLL : 'dddd, D [ב]MMMM YYYY HH:mm',
            l : 'D/M/YYYY',
            ll : 'D MMM YYYY',
            lll : 'D MMM YYYY HH:mm',
            llll : 'ddd, D MMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[היום ב־]LT',
            nextDay : '[מחר ב־]LT',
            nextWeek : 'dddd [בשעה] LT',
            lastDay : '[אתמול ב־]LT',
            lastWeek : '[ביום] dddd [האחרון בשעה] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'בעוד %s',
            past : 'לפני %s',
            s : 'מספר שניות',
            m : 'דקה',
            mm : '%d דקות',
            h : 'שעה',
            hh : function (number) {
                if (number === 2) {
                    return 'שעתיים';
                }
                return number + ' שעות';
            },
            d : 'יום',
            dd : function (number) {
                if (number === 2) {
                    return 'יומיים';
                }
                return number + ' ימים';
            },
            M : 'חודש',
            MM : function (number) {
                if (number === 2) {
                    return 'חודשיים';
                }
                return number + ' חודשים';
            },
            y : 'שנה',
            yy : function (number) {
                if (number === 2) {
                    return 'שנתיים';
                } else if (number % 10 === 0 && number !== 10) {
                    return number + ' שנה';
                }
                return number + ' שנים';
            }
        }
    });

    //! moment.js locale configuration
    //! locale : hindi (hi)
    //! author : Mayank Singhal : https://github.com/mayanksinghal

    var hi__symbolMap = {
        '1': '१',
        '2': '२',
        '3': '३',
        '4': '४',
        '5': '५',
        '6': '६',
        '7': '७',
        '8': '८',
        '9': '९',
        '0': '०'
    },
    hi__numberMap = {
        '१': '1',
        '२': '2',
        '३': '3',
        '४': '4',
        '५': '5',
        '६': '6',
        '७': '7',
        '८': '8',
        '९': '9',
        '०': '0'
    };

    var hi = moment.defineLocale('hi', {
        months : 'जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर'.split('_'),
        monthsShort : 'जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.'.split('_'),
        weekdays : 'रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
        weekdaysShort : 'रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि'.split('_'),
        weekdaysMin : 'र_सो_मं_बु_गु_शु_श'.split('_'),
        longDateFormat : {
            LT : 'A h:mm बजे',
            LTS : 'A h:mm:ss बजे',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY, A h:mm बजे',
            LLLL : 'dddd, D MMMM YYYY, A h:mm बजे'
        },
        calendar : {
            sameDay : '[आज] LT',
            nextDay : '[कल] LT',
            nextWeek : 'dddd, LT',
            lastDay : '[कल] LT',
            lastWeek : '[पिछले] dddd, LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s में',
            past : '%s पहले',
            s : 'कुछ ही क्षण',
            m : 'एक मिनट',
            mm : '%d मिनट',
            h : 'एक घंटा',
            hh : '%d घंटे',
            d : 'एक दिन',
            dd : '%d दिन',
            M : 'एक महीने',
            MM : '%d महीने',
            y : 'एक वर्ष',
            yy : '%d वर्ष'
        },
        preparse: function (string) {
            return string.replace(/[१२३४५६७८९०]/g, function (match) {
                return hi__numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return hi__symbolMap[match];
            });
        },
        // Hindi notation for meridiems are quite fuzzy in practice. While there exists
        // a rigid notion of a 'Pahar' it is not used as rigidly in modern Hindi.
        meridiemParse: /रात|सुबह|दोपहर|शाम/,
        meridiemHour : function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'रात') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'सुबह') {
                return hour;
            } else if (meridiem === 'दोपहर') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'शाम') {
                return hour + 12;
            }
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return 'रात';
            } else if (hour < 10) {
                return 'सुबह';
            } else if (hour < 17) {
                return 'दोपहर';
            } else if (hour < 20) {
                return 'शाम';
            } else {
                return 'रात';
            }
        },
        week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : hrvatski (hr)
    //! author : Bojan Marković : https://github.com/bmarkovic

    function hr__translate(number, withoutSuffix, key) {
        var result = number + ' ';
        switch (key) {
        case 'm':
            return withoutSuffix ? 'jedna minuta' : 'jedne minute';
        case 'mm':
            if (number === 1) {
                result += 'minuta';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'minute';
            } else {
                result += 'minuta';
            }
            return result;
        case 'h':
            return withoutSuffix ? 'jedan sat' : 'jednog sata';
        case 'hh':
            if (number === 1) {
                result += 'sat';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'sata';
            } else {
                result += 'sati';
            }
            return result;
        case 'dd':
            if (number === 1) {
                result += 'dan';
            } else {
                result += 'dana';
            }
            return result;
        case 'MM':
            if (number === 1) {
                result += 'mjesec';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'mjeseca';
            } else {
                result += 'mjeseci';
            }
            return result;
        case 'yy':
            if (number === 1) {
                result += 'godina';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'godine';
            } else {
                result += 'godina';
            }
            return result;
        }
    }

    var hr = moment.defineLocale('hr', {
        months : 'siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac'.split('_'),
        monthsShort : 'sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.'.split('_'),
        weekdays : 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
        weekdaysShort : 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
        weekdaysMin : 'ne_po_ut_sr_če_pe_su'.split('_'),
        longDateFormat : {
            LT : 'H:mm',
            LTS : 'H:mm:ss',
            L : 'DD. MM. YYYY',
            LL : 'D. MMMM YYYY',
            LLL : 'D. MMMM YYYY H:mm',
            LLLL : 'dddd, D. MMMM YYYY H:mm'
        },
        calendar : {
            sameDay  : '[danas u] LT',
            nextDay  : '[sutra u] LT',
            nextWeek : function () {
                switch (this.day()) {
                case 0:
                    return '[u] [nedjelju] [u] LT';
                case 3:
                    return '[u] [srijedu] [u] LT';
                case 6:
                    return '[u] [subotu] [u] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[u] dddd [u] LT';
                }
            },
            lastDay  : '[jučer u] LT',
            lastWeek : function () {
                switch (this.day()) {
                case 0:
                case 3:
                    return '[prošlu] dddd [u] LT';
                case 6:
                    return '[prošle] [subote] [u] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[prošli] dddd [u] LT';
                }
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : 'za %s',
            past   : 'prije %s',
            s      : 'par sekundi',
            m      : hr__translate,
            mm     : hr__translate,
            h      : hr__translate,
            hh     : hr__translate,
            d      : 'dan',
            dd     : hr__translate,
            M      : 'mjesec',
            MM     : hr__translate,
            y      : 'godinu',
            yy     : hr__translate
        },
        ordinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : hungarian (hu)
    //! author : Adam Brunner : https://github.com/adambrunner

    var weekEndings = 'vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton'.split(' ');
    function hu__translate(number, withoutSuffix, key, isFuture) {
        var num = number,
            suffix;
        switch (key) {
        case 's':
            return (isFuture || withoutSuffix) ? 'néhány másodperc' : 'néhány másodperce';
        case 'm':
            return 'egy' + (isFuture || withoutSuffix ? ' perc' : ' perce');
        case 'mm':
            return num + (isFuture || withoutSuffix ? ' perc' : ' perce');
        case 'h':
            return 'egy' + (isFuture || withoutSuffix ? ' óra' : ' órája');
        case 'hh':
            return num + (isFuture || withoutSuffix ? ' óra' : ' órája');
        case 'd':
            return 'egy' + (isFuture || withoutSuffix ? ' nap' : ' napja');
        case 'dd':
            return num + (isFuture || withoutSuffix ? ' nap' : ' napja');
        case 'M':
            return 'egy' + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
        case 'MM':
            return num + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
        case 'y':
            return 'egy' + (isFuture || withoutSuffix ? ' év' : ' éve');
        case 'yy':
            return num + (isFuture || withoutSuffix ? ' év' : ' éve');
        }
        return '';
    }
    function week(isFuture) {
        return (isFuture ? '' : '[múlt] ') + '[' + weekEndings[this.day()] + '] LT[-kor]';
    }

    var hu = moment.defineLocale('hu', {
        months : 'január_február_március_április_május_június_július_augusztus_szeptember_október_november_december'.split('_'),
        monthsShort : 'jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec'.split('_'),
        weekdays : 'vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat'.split('_'),
        weekdaysShort : 'vas_hét_kedd_sze_csüt_pén_szo'.split('_'),
        weekdaysMin : 'v_h_k_sze_cs_p_szo'.split('_'),
        longDateFormat : {
            LT : 'H:mm',
            LTS : 'H:mm:ss',
            L : 'YYYY.MM.DD.',
            LL : 'YYYY. MMMM D.',
            LLL : 'YYYY. MMMM D. H:mm',
            LLLL : 'YYYY. MMMM D., dddd H:mm'
        },
        meridiemParse: /de|du/i,
        isPM: function (input) {
            return input.charAt(1).toLowerCase() === 'u';
        },
        meridiem : function (hours, minutes, isLower) {
            if (hours < 12) {
                return isLower === true ? 'de' : 'DE';
            } else {
                return isLower === true ? 'du' : 'DU';
            }
        },
        calendar : {
            sameDay : '[ma] LT[-kor]',
            nextDay : '[holnap] LT[-kor]',
            nextWeek : function () {
                return week.call(this, true);
            },
            lastDay : '[tegnap] LT[-kor]',
            lastWeek : function () {
                return week.call(this, false);
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s múlva',
            past : '%s',
            s : hu__translate,
            m : hu__translate,
            mm : hu__translate,
            h : hu__translate,
            hh : hu__translate,
            d : hu__translate,
            dd : hu__translate,
            M : hu__translate,
            MM : hu__translate,
            y : hu__translate,
            yy : hu__translate
        },
        ordinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : Armenian (hy-am)
    //! author : Armendarabyan : https://github.com/armendarabyan

    function hy_am__monthsCaseReplace(m, format) {
        var months = {
            'nominative': 'հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր'.split('_'),
            'accusative': 'հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի'.split('_')
        },
        nounCase = (/D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/).test(format) ?
            'accusative' :
            'nominative';
        return months[nounCase][m.month()];
    }
    function hy_am__monthsShortCaseReplace(m, format) {
        var monthsShort = 'հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ'.split('_');
        return monthsShort[m.month()];
    }
    function hy_am__weekdaysCaseReplace(m, format) {
        var weekdays = 'կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ'.split('_');
        return weekdays[m.day()];
    }

    var hy_am = moment.defineLocale('hy-am', {
        months : hy_am__monthsCaseReplace,
        monthsShort : hy_am__monthsShortCaseReplace,
        weekdays : hy_am__weekdaysCaseReplace,
        weekdaysShort : 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
        weekdaysMin : 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D MMMM YYYY թ.',
            LLL : 'D MMMM YYYY թ., HH:mm',
            LLLL : 'dddd, D MMMM YYYY թ., HH:mm'
        },
        calendar : {
            sameDay: '[այսօր] LT',
            nextDay: '[վաղը] LT',
            lastDay: '[երեկ] LT',
            nextWeek: function () {
                return 'dddd [օրը ժամը] LT';
            },
            lastWeek: function () {
                return '[անցած] dddd [օրը ժամը] LT';
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : '%s հետո',
            past : '%s առաջ',
            s : 'մի քանի վայրկյան',
            m : 'րոպե',
            mm : '%d րոպե',
            h : 'ժամ',
            hh : '%d ժամ',
            d : 'օր',
            dd : '%d օր',
            M : 'ամիս',
            MM : '%d ամիս',
            y : 'տարի',
            yy : '%d տարի'
        },
        meridiemParse: /գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,
        isPM: function (input) {
            return /^(ցերեկվա|երեկոյան)$/.test(input);
        },
        meridiem : function (hour) {
            if (hour < 4) {
                return 'գիշերվա';
            } else if (hour < 12) {
                return 'առավոտվա';
            } else if (hour < 17) {
                return 'ցերեկվա';
            } else {
                return 'երեկոյան';
            }
        },
        ordinalParse: /\d{1,2}|\d{1,2}-(ին|րդ)/,
        ordinal: function (number, period) {
            switch (period) {
            case 'DDD':
            case 'w':
            case 'W':
            case 'DDDo':
                if (number === 1) {
                    return number + '-ին';
                }
                return number + '-րդ';
            default:
                return number;
            }
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : Bahasa Indonesia (id)
    //! author : Mohammad Satrio Utomo : https://github.com/tyok
    //! reference: http://id.wikisource.org/wiki/Pedoman_Umum_Ejaan_Bahasa_Indonesia_yang_Disempurnakan

    var id = moment.defineLocale('id', {
        months : 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember'.split('_'),
        monthsShort : 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nov_Des'.split('_'),
        weekdays : 'Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu'.split('_'),
        weekdaysShort : 'Min_Sen_Sel_Rab_Kam_Jum_Sab'.split('_'),
        weekdaysMin : 'Mg_Sn_Sl_Rb_Km_Jm_Sb'.split('_'),
        longDateFormat : {
            LT : 'HH.mm',
            LTS : 'HH.mm.ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY [pukul] HH.mm',
            LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
        },
        meridiemParse: /pagi|siang|sore|malam/,
        meridiemHour : function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'pagi') {
                return hour;
            } else if (meridiem === 'siang') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'sore' || meridiem === 'malam') {
                return hour + 12;
            }
        },
        meridiem : function (hours, minutes, isLower) {
            if (hours < 11) {
                return 'pagi';
            } else if (hours < 15) {
                return 'siang';
            } else if (hours < 19) {
                return 'sore';
            } else {
                return 'malam';
            }
        },
        calendar : {
            sameDay : '[Hari ini pukul] LT',
            nextDay : '[Besok pukul] LT',
            nextWeek : 'dddd [pukul] LT',
            lastDay : '[Kemarin pukul] LT',
            lastWeek : 'dddd [lalu pukul] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'dalam %s',
            past : '%s yang lalu',
            s : 'beberapa detik',
            m : 'semenit',
            mm : '%d menit',
            h : 'sejam',
            hh : '%d jam',
            d : 'sehari',
            dd : '%d hari',
            M : 'sebulan',
            MM : '%d bulan',
            y : 'setahun',
            yy : '%d tahun'
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : icelandic (is)
    //! author : Hinrik Örn Sigurðsson : https://github.com/hinrik

    function is__plural(n) {
        if (n % 100 === 11) {
            return true;
        } else if (n % 10 === 1) {
            return false;
        }
        return true;
    }
    function is__translate(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        switch (key) {
        case 's':
            return withoutSuffix || isFuture ? 'nokkrar sekúndur' : 'nokkrum sekúndum';
        case 'm':
            return withoutSuffix ? 'mínúta' : 'mínútu';
        case 'mm':
            if (is__plural(number)) {
                return result + (withoutSuffix || isFuture ? 'mínútur' : 'mínútum');
            } else if (withoutSuffix) {
                return result + 'mínúta';
            }
            return result + 'mínútu';
        case 'hh':
            if (is__plural(number)) {
                return result + (withoutSuffix || isFuture ? 'klukkustundir' : 'klukkustundum');
            }
            return result + 'klukkustund';
        case 'd':
            if (withoutSuffix) {
                return 'dagur';
            }
            return isFuture ? 'dag' : 'degi';
        case 'dd':
            if (is__plural(number)) {
                if (withoutSuffix) {
                    return result + 'dagar';
                }
                return result + (isFuture ? 'daga' : 'dögum');
            } else if (withoutSuffix) {
                return result + 'dagur';
            }
            return result + (isFuture ? 'dag' : 'degi');
        case 'M':
            if (withoutSuffix) {
                return 'mánuður';
            }
            return isFuture ? 'mánuð' : 'mánuði';
        case 'MM':
            if (is__plural(number)) {
                if (withoutSuffix) {
                    return result + 'mánuðir';
                }
                return result + (isFuture ? 'mánuði' : 'mánuðum');
            } else if (withoutSuffix) {
                return result + 'mánuður';
            }
            return result + (isFuture ? 'mánuð' : 'mánuði');
        case 'y':
            return withoutSuffix || isFuture ? 'ár' : 'ári';
        case 'yy':
            if (is__plural(number)) {
                return result + (withoutSuffix || isFuture ? 'ár' : 'árum');
            }
            return result + (withoutSuffix || isFuture ? 'ár' : 'ári');
        }
    }

    var is = moment.defineLocale('is', {
        months : 'janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember'.split('_'),
        monthsShort : 'jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des'.split('_'),
        weekdays : 'sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur'.split('_'),
        weekdaysShort : 'sun_mán_þri_mið_fim_fös_lau'.split('_'),
        weekdaysMin : 'Su_Má_Þr_Mi_Fi_Fö_La'.split('_'),
        longDateFormat : {
            LT : 'H:mm',
            LTS : 'H:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D. MMMM YYYY',
            LLL : 'D. MMMM YYYY [kl.] H:mm',
            LLLL : 'dddd, D. MMMM YYYY [kl.] H:mm'
        },
        calendar : {
            sameDay : '[í dag kl.] LT',
            nextDay : '[á morgun kl.] LT',
            nextWeek : 'dddd [kl.] LT',
            lastDay : '[í gær kl.] LT',
            lastWeek : '[síðasta] dddd [kl.] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'eftir %s',
            past : 'fyrir %s síðan',
            s : is__translate,
            m : is__translate,
            mm : is__translate,
            h : 'klukkustund',
            hh : is__translate,
            d : is__translate,
            dd : is__translate,
            M : is__translate,
            MM : is__translate,
            y : is__translate,
            yy : is__translate
        },
        ordinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : italian (it)
    //! author : Lorenzo : https://github.com/aliem
    //! author: Mattia Larentis: https://github.com/nostalgiaz

    var it = moment.defineLocale('it', {
        months : 'gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre'.split('_'),
        monthsShort : 'gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic'.split('_'),
        weekdays : 'Domenica_Lunedì_Martedì_Mercoledì_Giovedì_Venerdì_Sabato'.split('_'),
        weekdaysShort : 'Dom_Lun_Mar_Mer_Gio_Ven_Sab'.split('_'),
        weekdaysMin : 'D_L_Ma_Me_G_V_S'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[Oggi alle] LT',
            nextDay: '[Domani alle] LT',
            nextWeek: 'dddd [alle] LT',
            lastDay: '[Ieri alle] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[la scorsa] dddd [alle] LT';
                    default:
                        return '[lo scorso] dddd [alle] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : function (s) {
                return ((/^[0-9].+$/).test(s) ? 'tra' : 'in') + ' ' + s;
            },
            past : '%s fa',
            s : 'alcuni secondi',
            m : 'un minuto',
            mm : '%d minuti',
            h : 'un\'ora',
            hh : '%d ore',
            d : 'un giorno',
            dd : '%d giorni',
            M : 'un mese',
            MM : '%d mesi',
            y : 'un anno',
            yy : '%d anni'
        },
        ordinalParse : /\d{1,2}º/,
        ordinal: '%dº',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : japanese (ja)
    //! author : LI Long : https://github.com/baryon

    var ja = moment.defineLocale('ja', {
        months : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
        monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
        weekdays : '日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日'.split('_'),
        weekdaysShort : '日_月_火_水_木_金_土'.split('_'),
        weekdaysMin : '日_月_火_水_木_金_土'.split('_'),
        longDateFormat : {
            LT : 'Ah時m分',
            LTS : 'Ah時m分s秒',
            L : 'YYYY/MM/DD',
            LL : 'YYYY年M月D日',
            LLL : 'YYYY年M月D日Ah時m分',
            LLLL : 'YYYY年M月D日Ah時m分 dddd'
        },
        meridiemParse: /午前|午後/i,
        isPM : function (input) {
            return input === '午後';
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 12) {
                return '午前';
            } else {
                return '午後';
            }
        },
        calendar : {
            sameDay : '[今日] LT',
            nextDay : '[明日] LT',
            nextWeek : '[来週]dddd LT',
            lastDay : '[昨日] LT',
            lastWeek : '[前週]dddd LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s後',
            past : '%s前',
            s : '数秒',
            m : '1分',
            mm : '%d分',
            h : '1時間',
            hh : '%d時間',
            d : '1日',
            dd : '%d日',
            M : '1ヶ月',
            MM : '%dヶ月',
            y : '1年',
            yy : '%d年'
        }
    });

    //! moment.js locale configuration
    //! locale : Boso Jowo (jv)
    //! author : Rony Lantip : https://github.com/lantip
    //! reference: http://jv.wikipedia.org/wiki/Basa_Jawa

    var jv = moment.defineLocale('jv', {
        months : 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember'.split('_'),
        monthsShort : 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des'.split('_'),
        weekdays : 'Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu'.split('_'),
        weekdaysShort : 'Min_Sen_Sel_Reb_Kem_Jem_Sep'.split('_'),
        weekdaysMin : 'Mg_Sn_Sl_Rb_Km_Jm_Sp'.split('_'),
        longDateFormat : {
            LT : 'HH.mm',
            LTS : 'HH.mm.ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY [pukul] HH.mm',
            LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
        },
        meridiemParse: /enjing|siyang|sonten|ndalu/,
        meridiemHour : function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'enjing') {
                return hour;
            } else if (meridiem === 'siyang') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'sonten' || meridiem === 'ndalu') {
                return hour + 12;
            }
        },
        meridiem : function (hours, minutes, isLower) {
            if (hours < 11) {
                return 'enjing';
            } else if (hours < 15) {
                return 'siyang';
            } else if (hours < 19) {
                return 'sonten';
            } else {
                return 'ndalu';
            }
        },
        calendar : {
            sameDay : '[Dinten puniko pukul] LT',
            nextDay : '[Mbenjang pukul] LT',
            nextWeek : 'dddd [pukul] LT',
            lastDay : '[Kala wingi pukul] LT',
            lastWeek : 'dddd [kepengker pukul] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'wonten ing %s',
            past : '%s ingkang kepengker',
            s : 'sawetawis detik',
            m : 'setunggal menit',
            mm : '%d menit',
            h : 'setunggal jam',
            hh : '%d jam',
            d : 'sedinten',
            dd : '%d dinten',
            M : 'sewulan',
            MM : '%d wulan',
            y : 'setaun',
            yy : '%d taun'
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : Georgian (ka)
    //! author : Irakli Janiashvili : https://github.com/irakli-janiashvili

    function ka__monthsCaseReplace(m, format) {
        var months = {
            'nominative': 'იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი'.split('_'),
            'accusative': 'იანვარს_თებერვალს_მარტს_აპრილის_მაისს_ივნისს_ივლისს_აგვისტს_სექტემბერს_ოქტომბერს_ნოემბერს_დეკემბერს'.split('_')
        },
        nounCase = (/D[oD] *MMMM?/).test(format) ?
            'accusative' :
            'nominative';
        return months[nounCase][m.month()];
    }
    function ka__weekdaysCaseReplace(m, format) {
        var weekdays = {
            'nominative': 'კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი'.split('_'),
            'accusative': 'კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს'.split('_')
        },
        nounCase = (/(წინა|შემდეგ)/).test(format) ?
            'accusative' :
            'nominative';
        return weekdays[nounCase][m.day()];
    }

    var ka = moment.defineLocale('ka', {
        months : ka__monthsCaseReplace,
        monthsShort : 'იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ'.split('_'),
        weekdays : ka__weekdaysCaseReplace,
        weekdaysShort : 'კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ'.split('_'),
        weekdaysMin : 'კვ_ორ_სა_ოთ_ხუ_პა_შა'.split('_'),
        longDateFormat : {
            LT : 'h:mm A',
            LTS : 'h:mm:ss A',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY h:mm A',
            LLLL : 'dddd, D MMMM YYYY h:mm A'
        },
        calendar : {
            sameDay : '[დღეს] LT[-ზე]',
            nextDay : '[ხვალ] LT[-ზე]',
            lastDay : '[გუშინ] LT[-ზე]',
            nextWeek : '[შემდეგ] dddd LT[-ზე]',
            lastWeek : '[წინა] dddd LT-ზე',
            sameElse : 'L'
        },
        relativeTime : {
            future : function (s) {
                return (/(წამი|წუთი|საათი|წელი)/).test(s) ?
                    s.replace(/ი$/, 'ში') :
                    s + 'ში';
            },
            past : function (s) {
                if ((/(წამი|წუთი|საათი|დღე|თვე)/).test(s)) {
                    return s.replace(/(ი|ე)$/, 'ის წინ');
                }
                if ((/წელი/).test(s)) {
                    return s.replace(/წელი$/, 'წლის წინ');
                }
            },
            s : 'რამდენიმე წამი',
            m : 'წუთი',
            mm : '%d წუთი',
            h : 'საათი',
            hh : '%d საათი',
            d : 'დღე',
            dd : '%d დღე',
            M : 'თვე',
            MM : '%d თვე',
            y : 'წელი',
            yy : '%d წელი'
        },
        ordinalParse: /0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,
        ordinal : function (number) {
            if (number === 0) {
                return number;
            }
            if (number === 1) {
                return number + '-ლი';
            }
            if ((number < 20) || (number <= 100 && (number % 20 === 0)) || (number % 100 === 0)) {
                return 'მე-' + number;
            }
            return number + '-ე';
        },
        week : {
            dow : 1,
            doy : 7
        }
    });

    //! moment.js locale configuration
    //! locale : khmer (km)
    //! author : Kruy Vanna : https://github.com/kruyvanna

    var km = moment.defineLocale('km', {
        months: 'មករា_កុម្ភៈ_មិនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split('_'),
        monthsShort: 'មករា_កុម្ភៈ_មិនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split('_'),
        weekdays: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
        weekdaysShort: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
        weekdaysMin: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS : 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[ថ្ងៃនៈ ម៉ោង] LT',
            nextDay: '[ស្អែក ម៉ោង] LT',
            nextWeek: 'dddd [ម៉ោង] LT',
            lastDay: '[ម្សិលមិញ ម៉ោង] LT',
            lastWeek: 'dddd [សប្តាហ៍មុន] [ម៉ោង] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%sទៀត',
            past: '%sមុន',
            s: 'ប៉ុន្មានវិនាទី',
            m: 'មួយនាទី',
            mm: '%d នាទី',
            h: 'មួយម៉ោង',
            hh: '%d ម៉ោង',
            d: 'មួយថ្ងៃ',
            dd: '%d ថ្ងៃ',
            M: 'មួយខែ',
            MM: '%d ខែ',
            y: 'មួយឆ្នាំ',
            yy: '%d ឆ្នាំ'
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : korean (ko)
    //!
    //! authors
    //!
    //! - Kyungwook, Park : https://github.com/kyungw00k
    //! - Jeeeyul Lee <jeeeyul@gmail.com>

    var ko = moment.defineLocale('ko', {
        months : '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
        monthsShort : '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
        weekdays : '일요일_월요일_화요일_수요일_목요일_금요일_토요일'.split('_'),
        weekdaysShort : '일_월_화_수_목_금_토'.split('_'),
        weekdaysMin : '일_월_화_수_목_금_토'.split('_'),
        longDateFormat : {
            LT : 'A h시 m분',
            LTS : 'A h시 m분 s초',
            L : 'YYYY.MM.DD',
            LL : 'YYYY년 MMMM D일',
            LLL : 'YYYY년 MMMM D일 A h시 m분',
            LLLL : 'YYYY년 MMMM D일 dddd A h시 m분'
        },
        calendar : {
            sameDay : '오늘 LT',
            nextDay : '내일 LT',
            nextWeek : 'dddd LT',
            lastDay : '어제 LT',
            lastWeek : '지난주 dddd LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s 후',
            past : '%s 전',
            s : '몇초',
            ss : '%d초',
            m : '일분',
            mm : '%d분',
            h : '한시간',
            hh : '%d시간',
            d : '하루',
            dd : '%d일',
            M : '한달',
            MM : '%d달',
            y : '일년',
            yy : '%d년'
        },
        ordinalParse : /\d{1,2}일/,
        ordinal : '%d일',
        meridiemParse : /오전|오후/,
        isPM : function (token) {
            return token === '오후';
        },
        meridiem : function (hour, minute, isUpper) {
            return hour < 12 ? '오전' : '오후';
        }
    });

    //! moment.js locale configuration
    //! locale : Luxembourgish (lb)
    //! author : mweimerskirch : https://github.com/mweimerskirch, David Raison : https://github.com/kwisatz

    function lb__processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            'm': ['eng Minutt', 'enger Minutt'],
            'h': ['eng Stonn', 'enger Stonn'],
            'd': ['een Dag', 'engem Dag'],
            'M': ['ee Mount', 'engem Mount'],
            'y': ['ee Joer', 'engem Joer']
        };
        return withoutSuffix ? format[key][0] : format[key][1];
    }
    function processFutureTime(string) {
        var number = string.substr(0, string.indexOf(' '));
        if (eifelerRegelAppliesToNumber(number)) {
            return 'a ' + string;
        }
        return 'an ' + string;
    }
    function processPastTime(string) {
        var number = string.substr(0, string.indexOf(' '));
        if (eifelerRegelAppliesToNumber(number)) {
            return 'viru ' + string;
        }
        return 'virun ' + string;
    }
    /**
     * Returns true if the word before the given number loses the '-n' ending.
     * e.g. 'an 10 Deeg' but 'a 5 Deeg'
     *
     * @param number {integer}
     * @returns {boolean}
     */
    function eifelerRegelAppliesToNumber(number) {
        number = parseInt(number, 10);
        if (isNaN(number)) {
            return false;
        }
        if (number < 0) {
            // Negative Number --> always true
            return true;
        } else if (number < 10) {
            // Only 1 digit
            if (4 <= number && number <= 7) {
                return true;
            }
            return false;
        } else if (number < 100) {
            // 2 digits
            var lastDigit = number % 10, firstDigit = number / 10;
            if (lastDigit === 0) {
                return eifelerRegelAppliesToNumber(firstDigit);
            }
            return eifelerRegelAppliesToNumber(lastDigit);
        } else if (number < 10000) {
            // 3 or 4 digits --> recursively check first digit
            while (number >= 10) {
                number = number / 10;
            }
            return eifelerRegelAppliesToNumber(number);
        } else {
            // Anything larger than 4 digits: recursively check first n-3 digits
            number = number / 1000;
            return eifelerRegelAppliesToNumber(number);
        }
    }

    var lb = moment.defineLocale('lb', {
        months: 'Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
        monthsShort: 'Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
        weekdays: 'Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg'.split('_'),
        weekdaysShort: 'So._Mé._Dë._Më._Do._Fr._Sa.'.split('_'),
        weekdaysMin: 'So_Mé_Dë_Më_Do_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'H:mm [Auer]',
            LTS: 'H:mm:ss [Auer]',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm [Auer]',
            LLLL: 'dddd, D. MMMM YYYY H:mm [Auer]'
        },
        calendar: {
            sameDay: '[Haut um] LT',
            sameElse: 'L',
            nextDay: '[Muer um] LT',
            nextWeek: 'dddd [um] LT',
            lastDay: '[Gëschter um] LT',
            lastWeek: function () {
                // Different date string for 'Dënschdeg' (Tuesday) and 'Donneschdeg' (Thursday) due to phonological rule
                switch (this.day()) {
                    case 2:
                    case 4:
                        return '[Leschten] dddd [um] LT';
                    default:
                        return '[Leschte] dddd [um] LT';
                }
            }
        },
        relativeTime : {
            future : processFutureTime,
            past : processPastTime,
            s : 'e puer Sekonnen',
            m : lb__processRelativeTime,
            mm : '%d Minutten',
            h : lb__processRelativeTime,
            hh : '%d Stonnen',
            d : lb__processRelativeTime,
            dd : '%d Deeg',
            M : lb__processRelativeTime,
            MM : '%d Méint',
            y : lb__processRelativeTime,
            yy : '%d Joer'
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : Lithuanian (lt)
    //! author : Mindaugas Mozūras : https://github.com/mmozuras

    var lt__units = {
        'm' : 'minutė_minutės_minutę',
        'mm': 'minutės_minučių_minutes',
        'h' : 'valanda_valandos_valandą',
        'hh': 'valandos_valandų_valandas',
        'd' : 'diena_dienos_dieną',
        'dd': 'dienos_dienų_dienas',
        'M' : 'mėnuo_mėnesio_mėnesį',
        'MM': 'mėnesiai_mėnesių_mėnesius',
        'y' : 'metai_metų_metus',
        'yy': 'metai_metų_metus'
    },
    weekDays = 'sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis'.split('_');
    function translateSeconds(number, withoutSuffix, key, isFuture) {
        if (withoutSuffix) {
            return 'kelios sekundės';
        } else {
            return isFuture ? 'kelių sekundžių' : 'kelias sekundes';
        }
    }
    function lt__monthsCaseReplace(m, format) {
        var months = {
                'nominative': 'sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis'.split('_'),
                'accusative': 'sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio'.split('_')
            },
            nounCase = (/D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/).test(format) ?
                'accusative' :
                'nominative';
        return months[nounCase][m.month()];
    }
    function translateSingular(number, withoutSuffix, key, isFuture) {
        return withoutSuffix ? forms(key)[0] : (isFuture ? forms(key)[1] : forms(key)[2]);
    }
    function special(number) {
        return number % 10 === 0 || (number > 10 && number < 20);
    }
    function forms(key) {
        return lt__units[key].split('_');
    }
    function lt__translate(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        if (number === 1) {
            return result + translateSingular(number, withoutSuffix, key[0], isFuture);
        } else if (withoutSuffix) {
            return result + (special(number) ? forms(key)[1] : forms(key)[0]);
        } else {
            if (isFuture) {
                return result + forms(key)[1];
            } else {
                return result + (special(number) ? forms(key)[1] : forms(key)[2]);
            }
        }
    }
    function relativeWeekDay(moment, format) {
        var nominative = format.indexOf('dddd HH:mm') === -1,
            weekDay = weekDays[moment.day()];
        return nominative ? weekDay : weekDay.substring(0, weekDay.length - 2) + 'į';
    }

    var lt = moment.defineLocale('lt', {
        months : lt__monthsCaseReplace,
        monthsShort : 'sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd'.split('_'),
        weekdays : relativeWeekDay,
        weekdaysShort : 'Sek_Pir_Ant_Tre_Ket_Pen_Šeš'.split('_'),
        weekdaysMin : 'S_P_A_T_K_Pn_Š'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'YYYY-MM-DD',
            LL : 'YYYY [m.] MMMM D [d.]',
            LLL : 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
            LLLL : 'YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]',
            l : 'YYYY-MM-DD',
            ll : 'YYYY [m.] MMMM D [d.]',
            lll : 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
            llll : 'YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]'
        },
        calendar : {
            sameDay : '[Šiandien] LT',
            nextDay : '[Rytoj] LT',
            nextWeek : 'dddd LT',
            lastDay : '[Vakar] LT',
            lastWeek : '[Praėjusį] dddd LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'po %s',
            past : 'prieš %s',
            s : translateSeconds,
            m : translateSingular,
            mm : lt__translate,
            h : translateSingular,
            hh : lt__translate,
            d : translateSingular,
            dd : lt__translate,
            M : translateSingular,
            MM : lt__translate,
            y : translateSingular,
            yy : lt__translate
        },
        ordinalParse: /\d{1,2}-oji/,
        ordinal : function (number) {
            return number + '-oji';
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : latvian (lv)
    //! author : Kristaps Karlsons : https://github.com/skakri
    //! author : Jānis Elmeris : https://github.com/JanisE

    var lv__units = {
        'm': 'minūtes_minūtēm_minūte_minūtes'.split('_'),
        'mm': 'minūtes_minūtēm_minūte_minūtes'.split('_'),
        'h': 'stundas_stundām_stunda_stundas'.split('_'),
        'hh': 'stundas_stundām_stunda_stundas'.split('_'),
        'd': 'dienas_dienām_diena_dienas'.split('_'),
        'dd': 'dienas_dienām_diena_dienas'.split('_'),
        'M': 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
        'MM': 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
        'y': 'gada_gadiem_gads_gadi'.split('_'),
        'yy': 'gada_gadiem_gads_gadi'.split('_')
    };
    /**
     * @param withoutSuffix boolean true = a length of time; false = before/after a period of time.
     */
    function format(forms, number, withoutSuffix) {
        if (withoutSuffix) {
            // E.g. "21 minūte", "3 minūtes".
            return number % 10 === 1 && number !== 11 ? forms[2] : forms[3];
        } else {
            // E.g. "21 minūtes" as in "pēc 21 minūtes".
            // E.g. "3 minūtēm" as in "pēc 3 minūtēm".
            return number % 10 === 1 && number !== 11 ? forms[0] : forms[1];
        }
    }
    function lv__relativeTimeWithPlural(number, withoutSuffix, key) {
        return number + ' ' + format(lv__units[key], number, withoutSuffix);
    }
    function relativeTimeWithSingular(number, withoutSuffix, key) {
        return format(lv__units[key], number, withoutSuffix);
    }
    function relativeSeconds(number, withoutSuffix) {
        return withoutSuffix ? 'dažas sekundes' : 'dažām sekundēm';
    }

    var lv = moment.defineLocale('lv', {
        months : 'janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris'.split('_'),
        monthsShort : 'jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec'.split('_'),
        weekdays : 'svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena'.split('_'),
        weekdaysShort : 'Sv_P_O_T_C_Pk_S'.split('_'),
        weekdaysMin : 'Sv_P_O_T_C_Pk_S'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD.MM.YYYY.',
            LL : 'YYYY. [gada] D. MMMM',
            LLL : 'YYYY. [gada] D. MMMM, HH:mm',
            LLLL : 'YYYY. [gada] D. MMMM, dddd, HH:mm'
        },
        calendar : {
            sameDay : '[Šodien pulksten] LT',
            nextDay : '[Rīt pulksten] LT',
            nextWeek : 'dddd [pulksten] LT',
            lastDay : '[Vakar pulksten] LT',
            lastWeek : '[Pagājušā] dddd [pulksten] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'pēc %s',
            past : 'pirms %s',
            s : relativeSeconds,
            m : relativeTimeWithSingular,
            mm : lv__relativeTimeWithPlural,
            h : relativeTimeWithSingular,
            hh : lv__relativeTimeWithPlural,
            d : relativeTimeWithSingular,
            dd : lv__relativeTimeWithPlural,
            M : relativeTimeWithSingular,
            MM : lv__relativeTimeWithPlural,
            y : relativeTimeWithSingular,
            yy : lv__relativeTimeWithPlural
        },
        ordinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : Montenegrin (me)
    //! author : Miodrag Nikač <miodrag@restartit.me> : https://github.com/miodragnikac

    var me__translator = {
        words: { //Different grammatical cases
            m: ['jedan minut', 'jednog minuta'],
            mm: ['minut', 'minuta', 'minuta'],
            h: ['jedan sat', 'jednog sata'],
            hh: ['sat', 'sata', 'sati'],
            dd: ['dan', 'dana', 'dana'],
            MM: ['mjesec', 'mjeseca', 'mjeseci'],
            yy: ['godina', 'godine', 'godina']
        },
        correctGrammaticalCase: function (number, wordKey) {
            return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
        },
        translate: function (number, withoutSuffix, key) {
            var wordKey = me__translator.words[key];
            if (key.length === 1) {
                return withoutSuffix ? wordKey[0] : wordKey[1];
            } else {
                return number + ' ' + me__translator.correctGrammaticalCase(number, wordKey);
            }
        }
    };

    var me = moment.defineLocale('me', {
        months: ['januar', 'februar', 'mart', 'april', 'maj', 'jun', 'jul', 'avgust', 'septembar', 'oktobar', 'novembar', 'decembar'],
        monthsShort: ['jan.', 'feb.', 'mar.', 'apr.', 'maj', 'jun', 'jul', 'avg.', 'sep.', 'okt.', 'nov.', 'dec.'],
        weekdays: ['nedjelja', 'ponedjeljak', 'utorak', 'srijeda', 'četvrtak', 'petak', 'subota'],
        weekdaysShort: ['ned.', 'pon.', 'uto.', 'sri.', 'čet.', 'pet.', 'sub.'],
        weekdaysMin: ['ne', 'po', 'ut', 'sr', 'če', 'pe', 'su'],
        longDateFormat: {
            LT: 'H:mm',
            LTS : 'H:mm:ss',
            L: 'DD. MM. YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd, D. MMMM YYYY H:mm'
        },
        calendar: {
            sameDay: '[danas u] LT',
            nextDay: '[sjutra u] LT',

            nextWeek: function () {
                switch (this.day()) {
                case 0:
                    return '[u] [nedjelju] [u] LT';
                case 3:
                    return '[u] [srijedu] [u] LT';
                case 6:
                    return '[u] [subotu] [u] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[u] dddd [u] LT';
                }
            },
            lastDay  : '[juče u] LT',
            lastWeek : function () {
                var lastWeekDays = [
                    '[prošle] [nedjelje] [u] LT',
                    '[prošlog] [ponedjeljka] [u] LT',
                    '[prošlog] [utorka] [u] LT',
                    '[prošle] [srijede] [u] LT',
                    '[prošlog] [četvrtka] [u] LT',
                    '[prošlog] [petka] [u] LT',
                    '[prošle] [subote] [u] LT'
                ];
                return lastWeekDays[this.day()];
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : 'za %s',
            past   : 'prije %s',
            s      : 'nekoliko sekundi',
            m      : me__translator.translate,
            mm     : me__translator.translate,
            h      : me__translator.translate,
            hh     : me__translator.translate,
            d      : 'dan',
            dd     : me__translator.translate,
            M      : 'mjesec',
            MM     : me__translator.translate,
            y      : 'godinu',
            yy     : me__translator.translate
        },
        ordinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : macedonian (mk)
    //! author : Borislav Mickov : https://github.com/B0k0

    var mk = moment.defineLocale('mk', {
        months : 'јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември'.split('_'),
        monthsShort : 'јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек'.split('_'),
        weekdays : 'недела_понеделник_вторник_среда_четврток_петок_сабота'.split('_'),
        weekdaysShort : 'нед_пон_вто_сре_чет_пет_саб'.split('_'),
        weekdaysMin : 'нe_пo_вт_ср_че_пе_сa'.split('_'),
        longDateFormat : {
            LT : 'H:mm',
            LTS : 'H:mm:ss',
            L : 'D.MM.YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY H:mm',
            LLLL : 'dddd, D MMMM YYYY H:mm'
        },
        calendar : {
            sameDay : '[Денес во] LT',
            nextDay : '[Утре во] LT',
            nextWeek : 'dddd [во] LT',
            lastDay : '[Вчера во] LT',
            lastWeek : function () {
                switch (this.day()) {
                case 0:
                case 3:
                case 6:
                    return '[Во изминатата] dddd [во] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[Во изминатиот] dddd [во] LT';
                }
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : 'после %s',
            past : 'пред %s',
            s : 'неколку секунди',
            m : 'минута',
            mm : '%d минути',
            h : 'час',
            hh : '%d часа',
            d : 'ден',
            dd : '%d дена',
            M : 'месец',
            MM : '%d месеци',
            y : 'година',
            yy : '%d години'
        },
        ordinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
        ordinal : function (number) {
            var lastDigit = number % 10,
                last2Digits = number % 100;
            if (number === 0) {
                return number + '-ев';
            } else if (last2Digits === 0) {
                return number + '-ен';
            } else if (last2Digits > 10 && last2Digits < 20) {
                return number + '-ти';
            } else if (lastDigit === 1) {
                return number + '-ви';
            } else if (lastDigit === 2) {
                return number + '-ри';
            } else if (lastDigit === 7 || lastDigit === 8) {
                return number + '-ми';
            } else {
                return number + '-ти';
            }
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : malayalam (ml)
    //! author : Floyd Pink : https://github.com/floydpink

    var ml = moment.defineLocale('ml', {
        months : 'ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ'.split('_'),
        monthsShort : 'ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.'.split('_'),
        weekdays : 'ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച'.split('_'),
        weekdaysShort : 'ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി'.split('_'),
        weekdaysMin : 'ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ'.split('_'),
        longDateFormat : {
            LT : 'A h:mm -നു',
            LTS : 'A h:mm:ss -നു',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY, A h:mm -നു',
            LLLL : 'dddd, D MMMM YYYY, A h:mm -നു'
        },
        calendar : {
            sameDay : '[ഇന്ന്] LT',
            nextDay : '[നാളെ] LT',
            nextWeek : 'dddd, LT',
            lastDay : '[ഇന്നലെ] LT',
            lastWeek : '[കഴിഞ്ഞ] dddd, LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s കഴിഞ്ഞ്',
            past : '%s മുൻപ്',
            s : 'അൽപ നിമിഷങ്ങൾ',
            m : 'ഒരു മിനിറ്റ്',
            mm : '%d മിനിറ്റ്',
            h : 'ഒരു മണിക്കൂർ',
            hh : '%d മണിക്കൂർ',
            d : 'ഒരു ദിവസം',
            dd : '%d ദിവസം',
            M : 'ഒരു മാസം',
            MM : '%d മാസം',
            y : 'ഒരു വർഷം',
            yy : '%d വർഷം'
        },
        meridiemParse: /രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,
        isPM : function (input) {
            return /^(ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി)$/.test(input);
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return 'രാത്രി';
            } else if (hour < 12) {
                return 'രാവിലെ';
            } else if (hour < 17) {
                return 'ഉച്ച കഴിഞ്ഞ്';
            } else if (hour < 20) {
                return 'വൈകുന്നേരം';
            } else {
                return 'രാത്രി';
            }
        }
    });

    //! moment.js locale configuration
    //! locale : Marathi (mr)
    //! author : Harshad Kale : https://github.com/kalehv

    var mr__symbolMap = {
        '1': '१',
        '2': '२',
        '3': '३',
        '4': '४',
        '5': '५',
        '6': '६',
        '7': '७',
        '8': '८',
        '9': '९',
        '0': '०'
    },
    mr__numberMap = {
        '१': '1',
        '२': '2',
        '३': '3',
        '४': '4',
        '५': '5',
        '६': '6',
        '७': '7',
        '८': '8',
        '९': '9',
        '०': '0'
    };

    var mr = moment.defineLocale('mr', {
        months : 'जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर'.split('_'),
        monthsShort: 'जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.'.split('_'),
        weekdays : 'रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
        weekdaysShort : 'रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि'.split('_'),
        weekdaysMin : 'र_सो_मं_बु_गु_शु_श'.split('_'),
        longDateFormat : {
            LT : 'A h:mm वाजता',
            LTS : 'A h:mm:ss वाजता',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY, A h:mm वाजता',
            LLLL : 'dddd, D MMMM YYYY, A h:mm वाजता'
        },
        calendar : {
            sameDay : '[आज] LT',
            nextDay : '[उद्या] LT',
            nextWeek : 'dddd, LT',
            lastDay : '[काल] LT',
            lastWeek: '[मागील] dddd, LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s नंतर',
            past : '%s पूर्वी',
            s : 'सेकंद',
            m: 'एक मिनिट',
            mm: '%d मिनिटे',
            h : 'एक तास',
            hh : '%d तास',
            d : 'एक दिवस',
            dd : '%d दिवस',
            M : 'एक महिना',
            MM : '%d महिने',
            y : 'एक वर्ष',
            yy : '%d वर्षे'
        },
        preparse: function (string) {
            return string.replace(/[१२३४५६७८९०]/g, function (match) {
                return mr__numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return mr__symbolMap[match];
            });
        },
        meridiemParse: /रात्री|सकाळी|दुपारी|सायंकाळी/,
        meridiemHour : function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'रात्री') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'सकाळी') {
                return hour;
            } else if (meridiem === 'दुपारी') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'सायंकाळी') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'रात्री';
            } else if (hour < 10) {
                return 'सकाळी';
            } else if (hour < 17) {
                return 'दुपारी';
            } else if (hour < 20) {
                return 'सायंकाळी';
            } else {
                return 'रात्री';
            }
        },
        week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : Bahasa Malaysia (ms-MY)
    //! author : Weldan Jamili : https://github.com/weldan

    var ms_my = moment.defineLocale('ms-my', {
        months : 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),
        monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
        weekdays : 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
        weekdaysShort : 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
        weekdaysMin : 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
        longDateFormat : {
            LT : 'HH.mm',
            LTS : 'HH.mm.ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY [pukul] HH.mm',
            LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
        },
        meridiemParse: /pagi|tengahari|petang|malam/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'pagi') {
                return hour;
            } else if (meridiem === 'tengahari') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'petang' || meridiem === 'malam') {
                return hour + 12;
            }
        },
        meridiem : function (hours, minutes, isLower) {
            if (hours < 11) {
                return 'pagi';
            } else if (hours < 15) {
                return 'tengahari';
            } else if (hours < 19) {
                return 'petang';
            } else {
                return 'malam';
            }
        },
        calendar : {
            sameDay : '[Hari ini pukul] LT',
            nextDay : '[Esok pukul] LT',
            nextWeek : 'dddd [pukul] LT',
            lastDay : '[Kelmarin pukul] LT',
            lastWeek : 'dddd [lepas pukul] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'dalam %s',
            past : '%s yang lepas',
            s : 'beberapa saat',
            m : 'seminit',
            mm : '%d minit',
            h : 'sejam',
            hh : '%d jam',
            d : 'sehari',
            dd : '%d hari',
            M : 'sebulan',
            MM : '%d bulan',
            y : 'setahun',
            yy : '%d tahun'
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : Bahasa Malaysia (ms-MY)
    //! author : Weldan Jamili : https://github.com/weldan

    var ms = moment.defineLocale('ms', {
        months : 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),
        monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
        weekdays : 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
        weekdaysShort : 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
        weekdaysMin : 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
        longDateFormat : {
            LT : 'HH.mm',
            LTS : 'HH.mm.ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY [pukul] HH.mm',
            LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
        },
        meridiemParse: /pagi|tengahari|petang|malam/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'pagi') {
                return hour;
            } else if (meridiem === 'tengahari') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'petang' || meridiem === 'malam') {
                return hour + 12;
            }
        },
        meridiem : function (hours, minutes, isLower) {
            if (hours < 11) {
                return 'pagi';
            } else if (hours < 15) {
                return 'tengahari';
            } else if (hours < 19) {
                return 'petang';
            } else {
                return 'malam';
            }
        },
        calendar : {
            sameDay : '[Hari ini pukul] LT',
            nextDay : '[Esok pukul] LT',
            nextWeek : 'dddd [pukul] LT',
            lastDay : '[Kelmarin pukul] LT',
            lastWeek : 'dddd [lepas pukul] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'dalam %s',
            past : '%s yang lepas',
            s : 'beberapa saat',
            m : 'seminit',
            mm : '%d minit',
            h : 'sejam',
            hh : '%d jam',
            d : 'sehari',
            dd : '%d hari',
            M : 'sebulan',
            MM : '%d bulan',
            y : 'setahun',
            yy : '%d tahun'
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : Burmese (my)
    //! author : Squar team, mysquar.com

    var my__symbolMap = {
        '1': '၁',
        '2': '၂',
        '3': '၃',
        '4': '၄',
        '5': '၅',
        '6': '၆',
        '7': '၇',
        '8': '၈',
        '9': '၉',
        '0': '၀'
    }, my__numberMap = {
        '၁': '1',
        '၂': '2',
        '၃': '3',
        '၄': '4',
        '၅': '5',
        '၆': '6',
        '၇': '7',
        '၈': '8',
        '၉': '9',
        '၀': '0'
    };

    var my = moment.defineLocale('my', {
        months: 'ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ'.split('_'),
        monthsShort: 'ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ'.split('_'),
        weekdays: 'တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ'.split('_'),
        weekdaysShort: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),
        weekdaysMin: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),

        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[ယနေ.] LT [မှာ]',
            nextDay: '[မနက်ဖြန်] LT [မှာ]',
            nextWeek: 'dddd LT [မှာ]',
            lastDay: '[မနေ.က] LT [မှာ]',
            lastWeek: '[ပြီးခဲ့သော] dddd LT [မှာ]',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'လာမည့် %s မှာ',
            past: 'လွန်ခဲ့သော %s က',
            s: 'စက္ကန်.အနည်းငယ်',
            m: 'တစ်မိနစ်',
            mm: '%d မိနစ်',
            h: 'တစ်နာရီ',
            hh: '%d နာရီ',
            d: 'တစ်ရက်',
            dd: '%d ရက်',
            M: 'တစ်လ',
            MM: '%d လ',
            y: 'တစ်နှစ်',
            yy: '%d နှစ်'
        },
        preparse: function (string) {
            return string.replace(/[၁၂၃၄၅၆၇၈၉၀]/g, function (match) {
                return my__numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return my__symbolMap[match];
            });
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : norwegian bokmål (nb)
    //! authors : Espen Hovlandsdal : https://github.com/rexxars
    //!           Sigurd Gartmann : https://github.com/sigurdga

    var nb = moment.defineLocale('nb', {
        months : 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
        monthsShort : 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
        weekdays : 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
        weekdaysShort : 'søn_man_tirs_ons_tors_fre_lør'.split('_'),
        weekdaysMin : 'sø_ma_ti_on_to_fr_lø'.split('_'),
        longDateFormat : {
            LT : 'H.mm',
            LTS : 'H.mm.ss',
            L : 'DD.MM.YYYY',
            LL : 'D. MMMM YYYY',
            LLL : 'D. MMMM YYYY [kl.] H.mm',
            LLLL : 'dddd D. MMMM YYYY [kl.] H.mm'
        },
        calendar : {
            sameDay: '[i dag kl.] LT',
            nextDay: '[i morgen kl.] LT',
            nextWeek: 'dddd [kl.] LT',
            lastDay: '[i går kl.] LT',
            lastWeek: '[forrige] dddd [kl.] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'om %s',
            past : 'for %s siden',
            s : 'noen sekunder',
            m : 'ett minutt',
            mm : '%d minutter',
            h : 'en time',
            hh : '%d timer',
            d : 'en dag',
            dd : '%d dager',
            M : 'en måned',
            MM : '%d måneder',
            y : 'ett år',
            yy : '%d år'
        },
        ordinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : nepali/nepalese
    //! author : suvash : https://github.com/suvash

    var ne__symbolMap = {
        '1': '१',
        '2': '२',
        '3': '३',
        '4': '४',
        '5': '५',
        '6': '६',
        '7': '७',
        '8': '८',
        '9': '९',
        '0': '०'
    },
    ne__numberMap = {
        '१': '1',
        '२': '2',
        '३': '3',
        '४': '4',
        '५': '5',
        '६': '6',
        '७': '7',
        '८': '8',
        '९': '9',
        '०': '0'
    };

    var ne = moment.defineLocale('ne', {
        months : 'जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर'.split('_'),
        monthsShort : 'जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.'.split('_'),
        weekdays : 'आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार'.split('_'),
        weekdaysShort : 'आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.'.split('_'),
        weekdaysMin : 'आइ._सो._मङ्_बु._बि._शु._श.'.split('_'),
        longDateFormat : {
            LT : 'Aको h:mm बजे',
            LTS : 'Aको h:mm:ss बजे',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY, Aको h:mm बजे',
            LLLL : 'dddd, D MMMM YYYY, Aको h:mm बजे'
        },
        preparse: function (string) {
            return string.replace(/[१२३४५६७८९०]/g, function (match) {
                return ne__numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return ne__symbolMap[match];
            });
        },
        meridiemParse: /राती|बिहान|दिउँसो|बेलुका|साँझ|राती/,
        meridiemHour : function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'राती') {
                return hour < 3 ? hour : hour + 12;
            } else if (meridiem === 'बिहान') {
                return hour;
            } else if (meridiem === 'दिउँसो') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'बेलुका' || meridiem === 'साँझ') {
                return hour + 12;
            }
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 3) {
                return 'राती';
            } else if (hour < 10) {
                return 'बिहान';
            } else if (hour < 15) {
                return 'दिउँसो';
            } else if (hour < 18) {
                return 'बेलुका';
            } else if (hour < 20) {
                return 'साँझ';
            } else {
                return 'राती';
            }
        },
        calendar : {
            sameDay : '[आज] LT',
            nextDay : '[भोली] LT',
            nextWeek : '[आउँदो] dddd[,] LT',
            lastDay : '[हिजो] LT',
            lastWeek : '[गएको] dddd[,] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%sमा',
            past : '%s अगाडी',
            s : 'केही समय',
            m : 'एक मिनेट',
            mm : '%d मिनेट',
            h : 'एक घण्टा',
            hh : '%d घण्टा',
            d : 'एक दिन',
            dd : '%d दिन',
            M : 'एक महिना',
            MM : '%d महिना',
            y : 'एक बर्ष',
            yy : '%d बर्ष'
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : dutch (nl)
    //! author : Joris Röling : https://github.com/jjupiter

    var nl__monthsShortWithDots = 'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_'),
        nl__monthsShortWithoutDots = 'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_');

    var nl = moment.defineLocale('nl', {
        months : 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split('_'),
        monthsShort : function (m, format) {
            if (/-MMM-/.test(format)) {
                return nl__monthsShortWithoutDots[m.month()];
            } else {
                return nl__monthsShortWithDots[m.month()];
            }
        },
        weekdays : 'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),
        weekdaysShort : 'zo._ma._di._wo._do._vr._za.'.split('_'),
        weekdaysMin : 'Zo_Ma_Di_Wo_Do_Vr_Za'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD-MM-YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[vandaag om] LT',
            nextDay: '[morgen om] LT',
            nextWeek: 'dddd [om] LT',
            lastDay: '[gisteren om] LT',
            lastWeek: '[afgelopen] dddd [om] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'over %s',
            past : '%s geleden',
            s : 'een paar seconden',
            m : 'één minuut',
            mm : '%d minuten',
            h : 'één uur',
            hh : '%d uur',
            d : 'één dag',
            dd : '%d dagen',
            M : 'één maand',
            MM : '%d maanden',
            y : 'één jaar',
            yy : '%d jaar'
        },
        ordinalParse: /\d{1,2}(ste|de)/,
        ordinal : function (number) {
            return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : norwegian nynorsk (nn)
    //! author : https://github.com/mechuwind

    var nn = moment.defineLocale('nn', {
        months : 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
        monthsShort : 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
        weekdays : 'sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag'.split('_'),
        weekdaysShort : 'sun_mån_tys_ons_tor_fre_lau'.split('_'),
        weekdaysMin : 'su_må_ty_on_to_fr_lø'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[I dag klokka] LT',
            nextDay: '[I morgon klokka] LT',
            nextWeek: 'dddd [klokka] LT',
            lastDay: '[I går klokka] LT',
            lastWeek: '[Føregåande] dddd [klokka] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'om %s',
            past : 'for %s sidan',
            s : 'nokre sekund',
            m : 'eit minutt',
            mm : '%d minutt',
            h : 'ein time',
            hh : '%d timar',
            d : 'ein dag',
            dd : '%d dagar',
            M : 'ein månad',
            MM : '%d månader',
            y : 'eit år',
            yy : '%d år'
        },
        ordinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : polish (pl)
    //! author : Rafal Hirsz : https://github.com/evoL

    var monthsNominative = 'styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień'.split('_'),
        monthsSubjective = 'stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia'.split('_');
    function pl__plural(n) {
        return (n % 10 < 5) && (n % 10 > 1) && ((~~(n / 10) % 10) !== 1);
    }
    function pl__translate(number, withoutSuffix, key) {
        var result = number + ' ';
        switch (key) {
        case 'm':
            return withoutSuffix ? 'minuta' : 'minutę';
        case 'mm':
            return result + (pl__plural(number) ? 'minuty' : 'minut');
        case 'h':
            return withoutSuffix  ? 'godzina'  : 'godzinę';
        case 'hh':
            return result + (pl__plural(number) ? 'godziny' : 'godzin');
        case 'MM':
            return result + (pl__plural(number) ? 'miesiące' : 'miesięcy');
        case 'yy':
            return result + (pl__plural(number) ? 'lata' : 'lat');
        }
    }

    var pl = moment.defineLocale('pl', {
        months : function (momentToFormat, format) {
            if (format === '') {
                // Hack: if format empty we know this is used to generate
                // RegExp by moment. Give then back both valid forms of months
                // in RegExp ready format.
                return '(' + monthsSubjective[momentToFormat.month()] + '|' + monthsNominative[momentToFormat.month()] + ')';
            } else if (/D MMMM/.test(format)) {
                return monthsSubjective[momentToFormat.month()];
            } else {
                return monthsNominative[momentToFormat.month()];
            }
        },
        monthsShort : 'sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru'.split('_'),
        weekdays : 'niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota'.split('_'),
        weekdaysShort : 'nie_pon_wt_śr_czw_pt_sb'.split('_'),
        weekdaysMin : 'N_Pn_Wt_Śr_Cz_Pt_So'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[Dziś o] LT',
            nextDay: '[Jutro o] LT',
            nextWeek: '[W] dddd [o] LT',
            lastDay: '[Wczoraj o] LT',
            lastWeek: function () {
                switch (this.day()) {
                case 0:
                    return '[W zeszłą niedzielę o] LT';
                case 3:
                    return '[W zeszłą środę o] LT';
                case 6:
                    return '[W zeszłą sobotę o] LT';
                default:
                    return '[W zeszły] dddd [o] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : 'za %s',
            past : '%s temu',
            s : 'kilka sekund',
            m : pl__translate,
            mm : pl__translate,
            h : pl__translate,
            hh : pl__translate,
            d : '1 dzień',
            dd : '%d dni',
            M : 'miesiąc',
            MM : pl__translate,
            y : 'rok',
            yy : pl__translate
        },
        ordinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : brazilian portuguese (pt-br)
    //! author : Caio Ribeiro Pereira : https://github.com/caio-ribeiro-pereira

    var pt_br = moment.defineLocale('pt-br', {
        months : 'Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro'.split('_'),
        monthsShort : 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez'.split('_'),
        weekdays : 'Domingo_Segunda-Feira_Terça-Feira_Quarta-Feira_Quinta-Feira_Sexta-Feira_Sábado'.split('_'),
        weekdaysShort : 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),
        weekdaysMin : 'Dom_2ª_3ª_4ª_5ª_6ª_Sáb'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D [de] MMMM [de] YYYY',
            LLL : 'D [de] MMMM [de] YYYY [às] HH:mm',
            LLLL : 'dddd, D [de] MMMM [de] YYYY [às] HH:mm'
        },
        calendar : {
            sameDay: '[Hoje às] LT',
            nextDay: '[Amanhã às] LT',
            nextWeek: 'dddd [às] LT',
            lastDay: '[Ontem às] LT',
            lastWeek: function () {
                return (this.day() === 0 || this.day() === 6) ?
                    '[Último] dddd [às] LT' : // Saturday + Sunday
                    '[Última] dddd [às] LT'; // Monday - Friday
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : 'em %s',
            past : '%s atrás',
            s : 'poucos segundos',
            m : 'um minuto',
            mm : '%d minutos',
            h : 'uma hora',
            hh : '%d horas',
            d : 'um dia',
            dd : '%d dias',
            M : 'um mês',
            MM : '%d meses',
            y : 'um ano',
            yy : '%d anos'
        },
        ordinalParse: /\d{1,2}º/,
        ordinal : '%dº'
    });

    //! moment.js locale configuration
    //! locale : portuguese (pt)
    //! author : Jefferson : https://github.com/jalex79

    var pt = moment.defineLocale('pt', {
        months : 'Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro'.split('_'),
        monthsShort : 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez'.split('_'),
        weekdays : 'Domingo_Segunda-Feira_Terça-Feira_Quarta-Feira_Quinta-Feira_Sexta-Feira_Sábado'.split('_'),
        weekdaysShort : 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),
        weekdaysMin : 'Dom_2ª_3ª_4ª_5ª_6ª_Sáb'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D [de] MMMM [de] YYYY',
            LLL : 'D [de] MMMM [de] YYYY HH:mm',
            LLLL : 'dddd, D [de] MMMM [de] YYYY HH:mm'
        },
        calendar : {
            sameDay: '[Hoje às] LT',
            nextDay: '[Amanhã às] LT',
            nextWeek: 'dddd [às] LT',
            lastDay: '[Ontem às] LT',
            lastWeek: function () {
                return (this.day() === 0 || this.day() === 6) ?
                    '[Último] dddd [às] LT' : // Saturday + Sunday
                    '[Última] dddd [às] LT'; // Monday - Friday
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : 'em %s',
            past : 'há %s',
            s : 'segundos',
            m : 'um minuto',
            mm : '%d minutos',
            h : 'uma hora',
            hh : '%d horas',
            d : 'um dia',
            dd : '%d dias',
            M : 'um mês',
            MM : '%d meses',
            y : 'um ano',
            yy : '%d anos'
        },
        ordinalParse: /\d{1,2}º/,
        ordinal : '%dº',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : romanian (ro)
    //! author : Vlad Gurdiga : https://github.com/gurdiga
    //! author : Valentin Agachi : https://github.com/avaly

    function ro__relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
                'mm': 'minute',
                'hh': 'ore',
                'dd': 'zile',
                'MM': 'luni',
                'yy': 'ani'
            },
            separator = ' ';
        if (number % 100 >= 20 || (number >= 100 && number % 100 === 0)) {
            separator = ' de ';
        }
        return number + separator + format[key];
    }

    var ro = moment.defineLocale('ro', {
        months : 'ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie'.split('_'),
        monthsShort : 'ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.'.split('_'),
        weekdays : 'duminică_luni_marți_miercuri_joi_vineri_sâmbătă'.split('_'),
        weekdaysShort : 'Dum_Lun_Mar_Mie_Joi_Vin_Sâm'.split('_'),
        weekdaysMin : 'Du_Lu_Ma_Mi_Jo_Vi_Sâ'.split('_'),
        longDateFormat : {
            LT : 'H:mm',
            LTS : 'H:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY H:mm',
            LLLL : 'dddd, D MMMM YYYY H:mm'
        },
        calendar : {
            sameDay: '[azi la] LT',
            nextDay: '[mâine la] LT',
            nextWeek: 'dddd [la] LT',
            lastDay: '[ieri la] LT',
            lastWeek: '[fosta] dddd [la] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'peste %s',
            past : '%s în urmă',
            s : 'câteva secunde',
            m : 'un minut',
            mm : ro__relativeTimeWithPlural,
            h : 'o oră',
            hh : ro__relativeTimeWithPlural,
            d : 'o zi',
            dd : ro__relativeTimeWithPlural,
            M : 'o lună',
            MM : ro__relativeTimeWithPlural,
            y : 'un an',
            yy : ro__relativeTimeWithPlural
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : russian (ru)
    //! author : Viktorminator : https://github.com/Viktorminator
    //! Author : Menelion Elensúle : https://github.com/Oire

    function ru__plural(word, num) {
        var forms = word.split('_');
        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
    }
    function ru__relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
            'mm': withoutSuffix ? 'минута_минуты_минут' : 'минуту_минуты_минут',
            'hh': 'час_часа_часов',
            'dd': 'день_дня_дней',
            'MM': 'месяц_месяца_месяцев',
            'yy': 'год_года_лет'
        };
        if (key === 'm') {
            return withoutSuffix ? 'минута' : 'минуту';
        }
        else {
            return number + ' ' + ru__plural(format[key], +number);
        }
    }
    function ru__monthsCaseReplace(m, format) {
        var months = {
            'nominative': 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_'),
            'accusative': 'января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря'.split('_')
        },
        nounCase = (/D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/).test(format) ?
            'accusative' :
            'nominative';
        return months[nounCase][m.month()];
    }
    function ru__monthsShortCaseReplace(m, format) {
        var monthsShort = {
            'nominative': 'янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек'.split('_'),
            'accusative': 'янв_фев_мар_апр_мая_июня_июля_авг_сен_окт_ноя_дек'.split('_')
        },
        nounCase = (/D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/).test(format) ?
            'accusative' :
            'nominative';
        return monthsShort[nounCase][m.month()];
    }
    function ru__weekdaysCaseReplace(m, format) {
        var weekdays = {
            'nominative': 'воскресенье_понедельник_вторник_среда_четверг_пятница_суббота'.split('_'),
            'accusative': 'воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу'.split('_')
        },
        nounCase = (/\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\] ?dddd/).test(format) ?
            'accusative' :
            'nominative';
        return weekdays[nounCase][m.day()];
    }

    var ru = moment.defineLocale('ru', {
        months : ru__monthsCaseReplace,
        monthsShort : ru__monthsShortCaseReplace,
        weekdays : ru__weekdaysCaseReplace,
        weekdaysShort : 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
        weekdaysMin : 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
        monthsParse : [/^янв/i, /^фев/i, /^мар/i, /^апр/i, /^ма[й|я]/i, /^июн/i, /^июл/i, /^авг/i, /^сен/i, /^окт/i, /^ноя/i, /^дек/i],
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D MMMM YYYY г.',
            LLL : 'D MMMM YYYY г., HH:mm',
            LLLL : 'dddd, D MMMM YYYY г., HH:mm'
        },
        calendar : {
            sameDay: '[Сегодня в] LT',
            nextDay: '[Завтра в] LT',
            lastDay: '[Вчера в] LT',
            nextWeek: function () {
                return this.day() === 2 ? '[Во] dddd [в] LT' : '[В] dddd [в] LT';
            },
            lastWeek: function (now) {
                if (now.week() !== this.week()) {
                    switch (this.day()) {
                    case 0:
                        return '[В прошлое] dddd [в] LT';
                    case 1:
                    case 2:
                    case 4:
                        return '[В прошлый] dddd [в] LT';
                    case 3:
                    case 5:
                    case 6:
                        return '[В прошлую] dddd [в] LT';
                    }
                } else {
                    if (this.day() === 2) {
                        return '[Во] dddd [в] LT';
                    } else {
                        return '[В] dddd [в] LT';
                    }
                }
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : 'через %s',
            past : '%s назад',
            s : 'несколько секунд',
            m : ru__relativeTimeWithPlural,
            mm : ru__relativeTimeWithPlural,
            h : 'час',
            hh : ru__relativeTimeWithPlural,
            d : 'день',
            dd : ru__relativeTimeWithPlural,
            M : 'месяц',
            MM : ru__relativeTimeWithPlural,
            y : 'год',
            yy : ru__relativeTimeWithPlural
        },
        meridiemParse: /ночи|утра|дня|вечера/i,
        isPM : function (input) {
            return /^(дня|вечера)$/.test(input);
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return 'ночи';
            } else if (hour < 12) {
                return 'утра';
            } else if (hour < 17) {
                return 'дня';
            } else {
                return 'вечера';
            }
        },
        ordinalParse: /\d{1,2}-(й|го|я)/,
        ordinal: function (number, period) {
            switch (period) {
            case 'M':
            case 'd':
            case 'DDD':
                return number + '-й';
            case 'D':
                return number + '-го';
            case 'w':
            case 'W':
                return number + '-я';
            default:
                return number;
            }
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : Sinhalese (si)
    //! author : Sampath Sitinamaluwa : https://github.com/sampathsris

    var si = moment.defineLocale('si', {
        months : 'ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්'.split('_'),
        monthsShort : 'ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ'.split('_'),
        weekdays : 'ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා'.split('_'),
        weekdaysShort : 'ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන'.split('_'),
        weekdaysMin : 'ඉ_ස_අ_බ_බ්‍ර_සි_සෙ'.split('_'),
        longDateFormat : {
            LT : 'a h:mm',
            LTS : 'a h:mm:ss',
            L : 'YYYY/MM/DD',
            LL : 'YYYY MMMM D',
            LLL : 'YYYY MMMM D, a h:mm',
            LLLL : 'YYYY MMMM D [වැනි] dddd, a h:mm:ss'
        },
        calendar : {
            sameDay : '[අද] LT[ට]',
            nextDay : '[හෙට] LT[ට]',
            nextWeek : 'dddd LT[ට]',
            lastDay : '[ඊයේ] LT[ට]',
            lastWeek : '[පසුගිය] dddd LT[ට]',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%sකින්',
            past : '%sකට පෙර',
            s : 'තත්පර කිහිපය',
            m : 'මිනිත්තුව',
            mm : 'මිනිත්තු %d',
            h : 'පැය',
            hh : 'පැය %d',
            d : 'දිනය',
            dd : 'දින %d',
            M : 'මාසය',
            MM : 'මාස %d',
            y : 'වසර',
            yy : 'වසර %d'
        },
        ordinalParse: /\d{1,2} වැනි/,
        ordinal : function (number) {
            return number + ' වැනි';
        },
        meridiem : function (hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'ප.ව.' : 'පස් වරු';
            } else {
                return isLower ? 'පෙ.ව.' : 'පෙර වරු';
            }
        }
    });

    //! moment.js locale configuration
    //! locale : slovak (sk)
    //! author : Martin Minka : https://github.com/k2s
    //! based on work of petrbela : https://github.com/petrbela

    var sk__months = 'január_február_marec_apríl_máj_jún_júl_august_september_október_november_december'.split('_'),
        sk__monthsShort = 'jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec'.split('_');
    function sk__plural(n) {
        return (n > 1) && (n < 5);
    }
    function sk__translate(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        switch (key) {
        case 's':  // a few seconds / in a few seconds / a few seconds ago
            return (withoutSuffix || isFuture) ? 'pár sekúnd' : 'pár sekundami';
        case 'm':  // a minute / in a minute / a minute ago
            return withoutSuffix ? 'minúta' : (isFuture ? 'minútu' : 'minútou');
        case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
            if (withoutSuffix || isFuture) {
                return result + (sk__plural(number) ? 'minúty' : 'minút');
            } else {
                return result + 'minútami';
            }
            break;
        case 'h':  // an hour / in an hour / an hour ago
            return withoutSuffix ? 'hodina' : (isFuture ? 'hodinu' : 'hodinou');
        case 'hh': // 9 hours / in 9 hours / 9 hours ago
            if (withoutSuffix || isFuture) {
                return result + (sk__plural(number) ? 'hodiny' : 'hodín');
            } else {
                return result + 'hodinami';
            }
            break;
        case 'd':  // a day / in a day / a day ago
            return (withoutSuffix || isFuture) ? 'deň' : 'dňom';
        case 'dd': // 9 days / in 9 days / 9 days ago
            if (withoutSuffix || isFuture) {
                return result + (sk__plural(number) ? 'dni' : 'dní');
            } else {
                return result + 'dňami';
            }
            break;
        case 'M':  // a month / in a month / a month ago
            return (withoutSuffix || isFuture) ? 'mesiac' : 'mesiacom';
        case 'MM': // 9 months / in 9 months / 9 months ago
            if (withoutSuffix || isFuture) {
                return result + (sk__plural(number) ? 'mesiace' : 'mesiacov');
            } else {
                return result + 'mesiacmi';
            }
            break;
        case 'y':  // a year / in a year / a year ago
            return (withoutSuffix || isFuture) ? 'rok' : 'rokom';
        case 'yy': // 9 years / in 9 years / 9 years ago
            if (withoutSuffix || isFuture) {
                return result + (sk__plural(number) ? 'roky' : 'rokov');
            } else {
                return result + 'rokmi';
            }
            break;
        }
    }

    var sk = moment.defineLocale('sk', {
        months : sk__months,
        monthsShort : sk__monthsShort,
        monthsParse : (function (months, monthsShort) {
            var i, _monthsParse = [];
            for (i = 0; i < 12; i++) {
                // use custom parser to solve problem with July (červenec)
                _monthsParse[i] = new RegExp('^' + months[i] + '$|^' + monthsShort[i] + '$', 'i');
            }
            return _monthsParse;
        }(sk__months, sk__monthsShort)),
        weekdays : 'nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota'.split('_'),
        weekdaysShort : 'ne_po_ut_st_št_pi_so'.split('_'),
        weekdaysMin : 'ne_po_ut_st_št_pi_so'.split('_'),
        longDateFormat : {
            LT: 'H:mm',
            LTS : 'H:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D. MMMM YYYY',
            LLL : 'D. MMMM YYYY H:mm',
            LLLL : 'dddd D. MMMM YYYY H:mm'
        },
        calendar : {
            sameDay: '[dnes o] LT',
            nextDay: '[zajtra o] LT',
            nextWeek: function () {
                switch (this.day()) {
                case 0:
                    return '[v nedeľu o] LT';
                case 1:
                case 2:
                    return '[v] dddd [o] LT';
                case 3:
                    return '[v stredu o] LT';
                case 4:
                    return '[vo štvrtok o] LT';
                case 5:
                    return '[v piatok o] LT';
                case 6:
                    return '[v sobotu o] LT';
                }
            },
            lastDay: '[včera o] LT',
            lastWeek: function () {
                switch (this.day()) {
                case 0:
                    return '[minulú nedeľu o] LT';
                case 1:
                case 2:
                    return '[minulý] dddd [o] LT';
                case 3:
                    return '[minulú stredu o] LT';
                case 4:
                case 5:
                    return '[minulý] dddd [o] LT';
                case 6:
                    return '[minulú sobotu o] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : 'za %s',
            past : 'pred %s',
            s : sk__translate,
            m : sk__translate,
            mm : sk__translate,
            h : sk__translate,
            hh : sk__translate,
            d : sk__translate,
            dd : sk__translate,
            M : sk__translate,
            MM : sk__translate,
            y : sk__translate,
            yy : sk__translate
        },
        ordinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : slovenian (sl)
    //! author : Robert Sedovšek : https://github.com/sedovsek

    function sl__processRelativeTime(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        switch (key) {
        case 's':
            return withoutSuffix || isFuture ? 'nekaj sekund' : 'nekaj sekundami';
        case 'm':
            return withoutSuffix ? 'ena minuta' : 'eno minuto';
        case 'mm':
            if (number === 1) {
                result += withoutSuffix ? 'minuta' : 'minuto';
            } else if (number === 2) {
                result += withoutSuffix || isFuture ? 'minuti' : 'minutama';
            } else if (number < 5) {
                result += withoutSuffix || isFuture ? 'minute' : 'minutami';
            } else {
                result += withoutSuffix || isFuture ? 'minut' : 'minutami';
            }
            return result;
        case 'h':
            return withoutSuffix ? 'ena ura' : 'eno uro';
        case 'hh':
            if (number === 1) {
                result += withoutSuffix ? 'ura' : 'uro';
            } else if (number === 2) {
                result += withoutSuffix || isFuture ? 'uri' : 'urama';
            } else if (number < 5) {
                result += withoutSuffix || isFuture ? 'ure' : 'urami';
            } else {
                result += withoutSuffix || isFuture ? 'ur' : 'urami';
            }
            return result;
        case 'd':
            return withoutSuffix || isFuture ? 'en dan' : 'enim dnem';
        case 'dd':
            if (number === 1) {
                result += withoutSuffix || isFuture ? 'dan' : 'dnem';
            } else if (number === 2) {
                result += withoutSuffix || isFuture ? 'dni' : 'dnevoma';
            } else {
                result += withoutSuffix || isFuture ? 'dni' : 'dnevi';
            }
            return result;
        case 'M':
            return withoutSuffix || isFuture ? 'en mesec' : 'enim mesecem';
        case 'MM':
            if (number === 1) {
                result += withoutSuffix || isFuture ? 'mesec' : 'mesecem';
            } else if (number === 2) {
                result += withoutSuffix || isFuture ? 'meseca' : 'mesecema';
            } else if (number < 5) {
                result += withoutSuffix || isFuture ? 'mesece' : 'meseci';
            } else {
                result += withoutSuffix || isFuture ? 'mesecev' : 'meseci';
            }
            return result;
        case 'y':
            return withoutSuffix || isFuture ? 'eno leto' : 'enim letom';
        case 'yy':
            if (number === 1) {
                result += withoutSuffix || isFuture ? 'leto' : 'letom';
            } else if (number === 2) {
                result += withoutSuffix || isFuture ? 'leti' : 'letoma';
            } else if (number < 5) {
                result += withoutSuffix || isFuture ? 'leta' : 'leti';
            } else {
                result += withoutSuffix || isFuture ? 'let' : 'leti';
            }
            return result;
        }
    }

    var sl = moment.defineLocale('sl', {
        months : 'januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december'.split('_'),
        monthsShort : 'jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.'.split('_'),
        weekdays : 'nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota'.split('_'),
        weekdaysShort : 'ned._pon._tor._sre._čet._pet._sob.'.split('_'),
        weekdaysMin : 'ne_po_to_sr_če_pe_so'.split('_'),
        longDateFormat : {
            LT : 'H:mm',
            LTS : 'H:mm:ss',
            L : 'DD. MM. YYYY',
            LL : 'D. MMMM YYYY',
            LLL : 'D. MMMM YYYY H:mm',
            LLLL : 'dddd, D. MMMM YYYY H:mm'
        },
        calendar : {
            sameDay  : '[danes ob] LT',
            nextDay  : '[jutri ob] LT',

            nextWeek : function () {
                switch (this.day()) {
                case 0:
                    return '[v] [nedeljo] [ob] LT';
                case 3:
                    return '[v] [sredo] [ob] LT';
                case 6:
                    return '[v] [soboto] [ob] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[v] dddd [ob] LT';
                }
            },
            lastDay  : '[včeraj ob] LT',
            lastWeek : function () {
                switch (this.day()) {
                case 0:
                    return '[prejšnjo] [nedeljo] [ob] LT';
                case 3:
                    return '[prejšnjo] [sredo] [ob] LT';
                case 6:
                    return '[prejšnjo] [soboto] [ob] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[prejšnji] dddd [ob] LT';
                }
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : 'čez %s',
            past   : 'pred %s',
            s      : sl__processRelativeTime,
            m      : sl__processRelativeTime,
            mm     : sl__processRelativeTime,
            h      : sl__processRelativeTime,
            hh     : sl__processRelativeTime,
            d      : sl__processRelativeTime,
            dd     : sl__processRelativeTime,
            M      : sl__processRelativeTime,
            MM     : sl__processRelativeTime,
            y      : sl__processRelativeTime,
            yy     : sl__processRelativeTime
        },
        ordinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : Albanian (sq)
    //! author : Flakërim Ismani : https://github.com/flakerimi
    //! author: Menelion Elensúle: https://github.com/Oire (tests)
    //! author : Oerd Cukalla : https://github.com/oerd (fixes)

    var sq = moment.defineLocale('sq', {
        months : 'Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor'.split('_'),
        monthsShort : 'Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj'.split('_'),
        weekdays : 'E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë'.split('_'),
        weekdaysShort : 'Die_Hën_Mar_Mër_Enj_Pre_Sht'.split('_'),
        weekdaysMin : 'D_H_Ma_Më_E_P_Sh'.split('_'),
        meridiemParse: /PD|MD/,
        isPM: function (input) {
            return input.charAt(0) === 'M';
        },
        meridiem : function (hours, minutes, isLower) {
            return hours < 12 ? 'PD' : 'MD';
        },
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[Sot në] LT',
            nextDay : '[Nesër në] LT',
            nextWeek : 'dddd [në] LT',
            lastDay : '[Dje në] LT',
            lastWeek : 'dddd [e kaluar në] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'në %s',
            past : '%s më parë',
            s : 'disa sekonda',
            m : 'një minutë',
            mm : '%d minuta',
            h : 'një orë',
            hh : '%d orë',
            d : 'një ditë',
            dd : '%d ditë',
            M : 'një muaj',
            MM : '%d muaj',
            y : 'një vit',
            yy : '%d vite'
        },
        ordinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : Serbian-cyrillic (sr-cyrl)
    //! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j

    var sr_cyrl__translator = {
        words: { //Different grammatical cases
            m: ['један минут', 'једне минуте'],
            mm: ['минут', 'минуте', 'минута'],
            h: ['један сат', 'једног сата'],
            hh: ['сат', 'сата', 'сати'],
            dd: ['дан', 'дана', 'дана'],
            MM: ['месец', 'месеца', 'месеци'],
            yy: ['година', 'године', 'година']
        },
        correctGrammaticalCase: function (number, wordKey) {
            return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
        },
        translate: function (number, withoutSuffix, key) {
            var wordKey = sr_cyrl__translator.words[key];
            if (key.length === 1) {
                return withoutSuffix ? wordKey[0] : wordKey[1];
            } else {
                return number + ' ' + sr_cyrl__translator.correctGrammaticalCase(number, wordKey);
            }
        }
    };

    var sr_cyrl = moment.defineLocale('sr-cyrl', {
        months: ['јануар', 'фебруар', 'март', 'април', 'мај', 'јун', 'јул', 'август', 'септембар', 'октобар', 'новембар', 'децембар'],
        monthsShort: ['јан.', 'феб.', 'мар.', 'апр.', 'мај', 'јун', 'јул', 'авг.', 'сеп.', 'окт.', 'нов.', 'дец.'],
        weekdays: ['недеља', 'понедељак', 'уторак', 'среда', 'четвртак', 'петак', 'субота'],
        weekdaysShort: ['нед.', 'пон.', 'уто.', 'сре.', 'чет.', 'пет.', 'суб.'],
        weekdaysMin: ['не', 'по', 'ут', 'ср', 'че', 'пе', 'су'],
        longDateFormat: {
            LT: 'H:mm',
            LTS : 'H:mm:ss',
            L: 'DD. MM. YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd, D. MMMM YYYY H:mm'
        },
        calendar: {
            sameDay: '[данас у] LT',
            nextDay: '[сутра у] LT',
            nextWeek: function () {
                switch (this.day()) {
                case 0:
                    return '[у] [недељу] [у] LT';
                case 3:
                    return '[у] [среду] [у] LT';
                case 6:
                    return '[у] [суботу] [у] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[у] dddd [у] LT';
                }
            },
            lastDay  : '[јуче у] LT',
            lastWeek : function () {
                var lastWeekDays = [
                    '[прошле] [недеље] [у] LT',
                    '[прошлог] [понедељка] [у] LT',
                    '[прошлог] [уторка] [у] LT',
                    '[прошле] [среде] [у] LT',
                    '[прошлог] [четвртка] [у] LT',
                    '[прошлог] [петка] [у] LT',
                    '[прошле] [суботе] [у] LT'
                ];
                return lastWeekDays[this.day()];
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : 'за %s',
            past   : 'пре %s',
            s      : 'неколико секунди',
            m      : sr_cyrl__translator.translate,
            mm     : sr_cyrl__translator.translate,
            h      : sr_cyrl__translator.translate,
            hh     : sr_cyrl__translator.translate,
            d      : 'дан',
            dd     : sr_cyrl__translator.translate,
            M      : 'месец',
            MM     : sr_cyrl__translator.translate,
            y      : 'годину',
            yy     : sr_cyrl__translator.translate
        },
        ordinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : Serbian-latin (sr)
    //! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j

    var sr__translator = {
        words: { //Different grammatical cases
            m: ['jedan minut', 'jedne minute'],
            mm: ['minut', 'minute', 'minuta'],
            h: ['jedan sat', 'jednog sata'],
            hh: ['sat', 'sata', 'sati'],
            dd: ['dan', 'dana', 'dana'],
            MM: ['mesec', 'meseca', 'meseci'],
            yy: ['godina', 'godine', 'godina']
        },
        correctGrammaticalCase: function (number, wordKey) {
            return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
        },
        translate: function (number, withoutSuffix, key) {
            var wordKey = sr__translator.words[key];
            if (key.length === 1) {
                return withoutSuffix ? wordKey[0] : wordKey[1];
            } else {
                return number + ' ' + sr__translator.correctGrammaticalCase(number, wordKey);
            }
        }
    };

    var sr = moment.defineLocale('sr', {
        months: ['januar', 'februar', 'mart', 'april', 'maj', 'jun', 'jul', 'avgust', 'septembar', 'oktobar', 'novembar', 'decembar'],
        monthsShort: ['jan.', 'feb.', 'mar.', 'apr.', 'maj', 'jun', 'jul', 'avg.', 'sep.', 'okt.', 'nov.', 'dec.'],
        weekdays: ['nedelja', 'ponedeljak', 'utorak', 'sreda', 'četvrtak', 'petak', 'subota'],
        weekdaysShort: ['ned.', 'pon.', 'uto.', 'sre.', 'čet.', 'pet.', 'sub.'],
        weekdaysMin: ['ne', 'po', 'ut', 'sr', 'če', 'pe', 'su'],
        longDateFormat: {
            LT: 'H:mm',
            LTS : 'H:mm:ss',
            L: 'DD. MM. YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd, D. MMMM YYYY H:mm'
        },
        calendar: {
            sameDay: '[danas u] LT',
            nextDay: '[sutra u] LT',
            nextWeek: function () {
                switch (this.day()) {
                case 0:
                    return '[u] [nedelju] [u] LT';
                case 3:
                    return '[u] [sredu] [u] LT';
                case 6:
                    return '[u] [subotu] [u] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[u] dddd [u] LT';
                }
            },
            lastDay  : '[juče u] LT',
            lastWeek : function () {
                var lastWeekDays = [
                    '[prošle] [nedelje] [u] LT',
                    '[prošlog] [ponedeljka] [u] LT',
                    '[prošlog] [utorka] [u] LT',
                    '[prošle] [srede] [u] LT',
                    '[prošlog] [četvrtka] [u] LT',
                    '[prošlog] [petka] [u] LT',
                    '[prošle] [subote] [u] LT'
                ];
                return lastWeekDays[this.day()];
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : 'za %s',
            past   : 'pre %s',
            s      : 'nekoliko sekundi',
            m      : sr__translator.translate,
            mm     : sr__translator.translate,
            h      : sr__translator.translate,
            hh     : sr__translator.translate,
            d      : 'dan',
            dd     : sr__translator.translate,
            M      : 'mesec',
            MM     : sr__translator.translate,
            y      : 'godinu',
            yy     : sr__translator.translate
        },
        ordinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : swedish (sv)
    //! author : Jens Alm : https://github.com/ulmus

    var sv = moment.defineLocale('sv', {
        months : 'januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december'.split('_'),
        monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
        weekdays : 'söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag'.split('_'),
        weekdaysShort : 'sön_mån_tis_ons_tor_fre_lör'.split('_'),
        weekdaysMin : 'sö_må_ti_on_to_fr_lö'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'YYYY-MM-DD',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[Idag] LT',
            nextDay: '[Imorgon] LT',
            lastDay: '[Igår] LT',
            nextWeek: '[På] dddd LT',
            lastWeek: '[I] dddd[s] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'om %s',
            past : 'för %s sedan',
            s : 'några sekunder',
            m : 'en minut',
            mm : '%d minuter',
            h : 'en timme',
            hh : '%d timmar',
            d : 'en dag',
            dd : '%d dagar',
            M : 'en månad',
            MM : '%d månader',
            y : 'ett år',
            yy : '%d år'
        },
        ordinalParse: /\d{1,2}(e|a)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (~~(number % 100 / 10) === 1) ? 'e' :
                (b === 1) ? 'a' :
                (b === 2) ? 'a' :
                (b === 3) ? 'e' : 'e';
            return number + output;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : tamil (ta)
    //! author : Arjunkumar Krishnamoorthy : https://github.com/tk120404

    var ta = moment.defineLocale('ta', {
        months : 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split('_'),
        monthsShort : 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split('_'),
        weekdays : 'ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை'.split('_'),
        weekdaysShort : 'ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி'.split('_'),
        weekdaysMin : 'ஞா_தி_செ_பு_வி_வெ_ச'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY, HH:mm',
            LLLL : 'dddd, D MMMM YYYY, HH:mm'
        },
        calendar : {
            sameDay : '[இன்று] LT',
            nextDay : '[நாளை] LT',
            nextWeek : 'dddd, LT',
            lastDay : '[நேற்று] LT',
            lastWeek : '[கடந்த வாரம்] dddd, LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s இல்',
            past : '%s முன்',
            s : 'ஒரு சில விநாடிகள்',
            m : 'ஒரு நிமிடம்',
            mm : '%d நிமிடங்கள்',
            h : 'ஒரு மணி நேரம்',
            hh : '%d மணி நேரம்',
            d : 'ஒரு நாள்',
            dd : '%d நாட்கள்',
            M : 'ஒரு மாதம்',
            MM : '%d மாதங்கள்',
            y : 'ஒரு வருடம்',
            yy : '%d ஆண்டுகள்'
        },
        ordinalParse: /\d{1,2}வது/,
        ordinal : function (number) {
            return number + 'வது';
        },
        // refer http://ta.wikipedia.org/s/1er1
        meridiemParse: /யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,
        meridiem : function (hour, minute, isLower) {
            if (hour < 2) {
                return ' யாமம்';
            } else if (hour < 6) {
                return ' வைகறை';  // வைகறை
            } else if (hour < 10) {
                return ' காலை'; // காலை
            } else if (hour < 14) {
                return ' நண்பகல்'; // நண்பகல்
            } else if (hour < 18) {
                return ' எற்பாடு'; // எற்பாடு
            } else if (hour < 22) {
                return ' மாலை'; // மாலை
            } else {
                return ' யாமம்';
            }
        },
        meridiemHour : function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'யாமம்') {
                return hour < 2 ? hour : hour + 12;
            } else if (meridiem === 'வைகறை' || meridiem === 'காலை') {
                return hour;
            } else if (meridiem === 'நண்பகல்') {
                return hour >= 10 ? hour : hour + 12;
            } else {
                return hour + 12;
            }
        },
        week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : thai (th)
    //! author : Kridsada Thanabulpong : https://github.com/sirn

    var th = moment.defineLocale('th', {
        months : 'มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม'.split('_'),
        monthsShort : 'มกรา_กุมภา_มีนา_เมษา_พฤษภา_มิถุนา_กรกฎา_สิงหา_กันยา_ตุลา_พฤศจิกา_ธันวา'.split('_'),
        weekdays : 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์'.split('_'),
        weekdaysShort : 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์'.split('_'), // yes, three characters difference
        weekdaysMin : 'อา._จ._อ._พ._พฤ._ศ._ส.'.split('_'),
        longDateFormat : {
            LT : 'H นาฬิกา m นาที',
            LTS : 'H นาฬิกา m นาที s วินาที',
            L : 'YYYY/MM/DD',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY เวลา H นาฬิกา m นาที',
            LLLL : 'วันddddที่ D MMMM YYYY เวลา H นาฬิกา m นาที'
        },
        meridiemParse: /ก่อนเที่ยง|หลังเที่ยง/,
        isPM: function (input) {
            return input === 'หลังเที่ยง';
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ก่อนเที่ยง';
            } else {
                return 'หลังเที่ยง';
            }
        },
        calendar : {
            sameDay : '[วันนี้ เวลา] LT',
            nextDay : '[พรุ่งนี้ เวลา] LT',
            nextWeek : 'dddd[หน้า เวลา] LT',
            lastDay : '[เมื่อวานนี้ เวลา] LT',
            lastWeek : '[วัน]dddd[ที่แล้ว เวลา] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'อีก %s',
            past : '%sที่แล้ว',
            s : 'ไม่กี่วินาที',
            m : '1 นาที',
            mm : '%d นาที',
            h : '1 ชั่วโมง',
            hh : '%d ชั่วโมง',
            d : '1 วัน',
            dd : '%d วัน',
            M : '1 เดือน',
            MM : '%d เดือน',
            y : '1 ปี',
            yy : '%d ปี'
        }
    });

    //! moment.js locale configuration
    //! locale : Tagalog/Filipino (tl-ph)
    //! author : Dan Hagman

    var tl_ph = moment.defineLocale('tl-ph', {
        months : 'Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre'.split('_'),
        monthsShort : 'Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis'.split('_'),
        weekdays : 'Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado'.split('_'),
        weekdaysShort : 'Lin_Lun_Mar_Miy_Huw_Biy_Sab'.split('_'),
        weekdaysMin : 'Li_Lu_Ma_Mi_Hu_Bi_Sab'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'MM/D/YYYY',
            LL : 'MMMM D, YYYY',
            LLL : 'MMMM D, YYYY HH:mm',
            LLLL : 'dddd, MMMM DD, YYYY HH:mm'
        },
        calendar : {
            sameDay: '[Ngayon sa] LT',
            nextDay: '[Bukas sa] LT',
            nextWeek: 'dddd [sa] LT',
            lastDay: '[Kahapon sa] LT',
            lastWeek: 'dddd [huling linggo] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'sa loob ng %s',
            past : '%s ang nakalipas',
            s : 'ilang segundo',
            m : 'isang minuto',
            mm : '%d minuto',
            h : 'isang oras',
            hh : '%d oras',
            d : 'isang araw',
            dd : '%d araw',
            M : 'isang buwan',
            MM : '%d buwan',
            y : 'isang taon',
            yy : '%d taon'
        },
        ordinalParse: /\d{1,2}/,
        ordinal : function (number) {
            return number;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : turkish (tr)
    //! authors : Erhan Gundogan : https://github.com/erhangundogan,
    //!           Burak Yiğit Kaya: https://github.com/BYK

    var tr__suffixes = {
        1: '\'inci',
        5: '\'inci',
        8: '\'inci',
        70: '\'inci',
        80: '\'inci',
        2: '\'nci',
        7: '\'nci',
        20: '\'nci',
        50: '\'nci',
        3: '\'üncü',
        4: '\'üncü',
        100: '\'üncü',
        6: '\'ncı',
        9: '\'uncu',
        10: '\'uncu',
        30: '\'uncu',
        60: '\'ıncı',
        90: '\'ıncı'
    };

    var tr = moment.defineLocale('tr', {
        months : 'Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık'.split('_'),
        monthsShort : 'Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara'.split('_'),
        weekdays : 'Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi'.split('_'),
        weekdaysShort : 'Paz_Pts_Sal_Çar_Per_Cum_Cts'.split('_'),
        weekdaysMin : 'Pz_Pt_Sa_Ça_Pe_Cu_Ct'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[bugün saat] LT',
            nextDay : '[yarın saat] LT',
            nextWeek : '[haftaya] dddd [saat] LT',
            lastDay : '[dün] LT',
            lastWeek : '[geçen hafta] dddd [saat] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s sonra',
            past : '%s önce',
            s : 'birkaç saniye',
            m : 'bir dakika',
            mm : '%d dakika',
            h : 'bir saat',
            hh : '%d saat',
            d : 'bir gün',
            dd : '%d gün',
            M : 'bir ay',
            MM : '%d ay',
            y : 'bir yıl',
            yy : '%d yıl'
        },
        ordinalParse: /\d{1,2}'(inci|nci|üncü|ncı|uncu|ıncı)/,
        ordinal : function (number) {
            if (number === 0) {  // special case for zero
                return number + '\'ıncı';
            }
            var a = number % 10,
                b = number % 100 - a,
                c = number >= 100 ? 100 : null;
            return number + (tr__suffixes[a] || tr__suffixes[b] || tr__suffixes[c]);
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : talossan (tzl)
    //! author : Robin van der Vliet : https://github.com/robin0van0der0v with the help of Iustì Canun


    var tzl = moment.defineLocale('tzl', {
        months : 'Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar'.split('_'),
        monthsShort : 'Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec'.split('_'),
        weekdays : 'Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi'.split('_'),
        weekdaysShort : 'Súl_Lún_Mai_Már_Xhú_Vié_Sát'.split('_'),
        weekdaysMin : 'Sú_Lú_Ma_Má_Xh_Vi_Sá'.split('_'),
        longDateFormat : {
            LT : 'HH.mm',
            LTS : 'LT.ss',
            L : 'DD.MM.YYYY',
            LL : 'D. MMMM [dallas] YYYY',
            LLL : 'D. MMMM [dallas] YYYY LT',
            LLLL : 'dddd, [li] D. MMMM [dallas] YYYY LT'
        },
        meridiem : function (hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'd\'o' : 'D\'O';
            } else {
                return isLower ? 'd\'a' : 'D\'A';
            }
        },
        calendar : {
            sameDay : '[oxhi à] LT',
            nextDay : '[demà à] LT',
            nextWeek : 'dddd [à] LT',
            lastDay : '[ieiri à] LT',
            lastWeek : '[sür el] dddd [lasteu à] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'osprei %s',
            past : 'ja%s',
            s : tzl__processRelativeTime,
            m : tzl__processRelativeTime,
            mm : tzl__processRelativeTime,
            h : tzl__processRelativeTime,
            hh : tzl__processRelativeTime,
            d : tzl__processRelativeTime,
            dd : tzl__processRelativeTime,
            M : tzl__processRelativeTime,
            MM : tzl__processRelativeTime,
            y : tzl__processRelativeTime,
            yy : tzl__processRelativeTime
        },
        ordinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    function tzl__processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            's': ['viensas secunds', '\'iensas secunds'],
            'm': ['\'n míut', '\'iens míut'],
            'mm': [number + ' míuts', ' ' + number + ' míuts'],
            'h': ['\'n þora', '\'iensa þora'],
            'hh': [number + ' þoras', ' ' + number + ' þoras'],
            'd': ['\'n ziua', '\'iensa ziua'],
            'dd': [number + ' ziuas', ' ' + number + ' ziuas'],
            'M': ['\'n mes', '\'iens mes'],
            'MM': [number + ' mesen', ' ' + number + ' mesen'],
            'y': ['\'n ar', '\'iens ar'],
            'yy': [number + ' ars', ' ' + number + ' ars']
        };
        return isFuture ? format[key][0] : (withoutSuffix ? format[key][0] : format[key][1].trim());
    }

    //! moment.js locale configuration
    //! locale : Morocco Central Atlas Tamaziɣt in Latin (tzm-latn)
    //! author : Abdel Said : https://github.com/abdelsaid

    var tzm_latn = moment.defineLocale('tzm-latn', {
        months : 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split('_'),
        monthsShort : 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split('_'),
        weekdays : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
        weekdaysShort : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
        weekdaysMin : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[asdkh g] LT',
            nextDay: '[aska g] LT',
            nextWeek: 'dddd [g] LT',
            lastDay: '[assant g] LT',
            lastWeek: 'dddd [g] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'dadkh s yan %s',
            past : 'yan %s',
            s : 'imik',
            m : 'minuḍ',
            mm : '%d minuḍ',
            h : 'saɛa',
            hh : '%d tassaɛin',
            d : 'ass',
            dd : '%d ossan',
            M : 'ayowr',
            MM : '%d iyyirn',
            y : 'asgas',
            yy : '%d isgasn'
        },
        week : {
            dow : 6, // Saturday is the first day of the week.
            doy : 12  // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : Morocco Central Atlas Tamaziɣt (tzm)
    //! author : Abdel Said : https://github.com/abdelsaid

    var tzm = moment.defineLocale('tzm', {
        months : 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split('_'),
        monthsShort : 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split('_'),
        weekdays : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
        weekdaysShort : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
        weekdaysMin : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS: 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[ⴰⵙⴷⵅ ⴴ] LT',
            nextDay: '[ⴰⵙⴽⴰ ⴴ] LT',
            nextWeek: 'dddd [ⴴ] LT',
            lastDay: '[ⴰⵚⴰⵏⵜ ⴴ] LT',
            lastWeek: 'dddd [ⴴ] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s',
            past : 'ⵢⴰⵏ %s',
            s : 'ⵉⵎⵉⴽ',
            m : 'ⵎⵉⵏⵓⴺ',
            mm : '%d ⵎⵉⵏⵓⴺ',
            h : 'ⵙⴰⵄⴰ',
            hh : '%d ⵜⴰⵙⵙⴰⵄⵉⵏ',
            d : 'ⴰⵙⵙ',
            dd : '%d oⵙⵙⴰⵏ',
            M : 'ⴰⵢoⵓⵔ',
            MM : '%d ⵉⵢⵢⵉⵔⵏ',
            y : 'ⴰⵙⴳⴰⵙ',
            yy : '%d ⵉⵙⴳⴰⵙⵏ'
        },
        week : {
            dow : 6, // Saturday is the first day of the week.
            doy : 12  // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : ukrainian (uk)
    //! author : zemlanin : https://github.com/zemlanin
    //! Author : Menelion Elensúle : https://github.com/Oire

    function uk__plural(word, num) {
        var forms = word.split('_');
        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
    }
    function uk__relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
            'mm': 'хвилина_хвилини_хвилин',
            'hh': 'година_години_годин',
            'dd': 'день_дні_днів',
            'MM': 'місяць_місяці_місяців',
            'yy': 'рік_роки_років'
        };
        if (key === 'm') {
            return withoutSuffix ? 'хвилина' : 'хвилину';
        }
        else if (key === 'h') {
            return withoutSuffix ? 'година' : 'годину';
        }
        else {
            return number + ' ' + uk__plural(format[key], +number);
        }
    }
    function uk__monthsCaseReplace(m, format) {
        var months = {
            'nominative': 'січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень'.split('_'),
            'accusative': 'січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня'.split('_')
        },
        nounCase = (/D[oD]? *MMMM?/).test(format) ?
            'accusative' :
            'nominative';
        return months[nounCase][m.month()];
    }
    function uk__weekdaysCaseReplace(m, format) {
        var weekdays = {
            'nominative': 'неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота'.split('_'),
            'accusative': 'неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу'.split('_'),
            'genitive': 'неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи'.split('_')
        },
        nounCase = (/(\[[ВвУу]\]) ?dddd/).test(format) ?
            'accusative' :
            ((/\[?(?:минулої|наступної)? ?\] ?dddd/).test(format) ?
                'genitive' :
                'nominative');
        return weekdays[nounCase][m.day()];
    }
    function processHoursFunction(str) {
        return function () {
            return str + 'о' + (this.hours() === 11 ? 'б' : '') + '] LT';
        };
    }

    var uk = moment.defineLocale('uk', {
        months : uk__monthsCaseReplace,
        monthsShort : 'січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд'.split('_'),
        weekdays : uk__weekdaysCaseReplace,
        weekdaysShort : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
        weekdaysMin : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D MMMM YYYY р.',
            LLL : 'D MMMM YYYY р., HH:mm',
            LLLL : 'dddd, D MMMM YYYY р., HH:mm'
        },
        calendar : {
            sameDay: processHoursFunction('[Сьогодні '),
            nextDay: processHoursFunction('[Завтра '),
            lastDay: processHoursFunction('[Вчора '),
            nextWeek: processHoursFunction('[У] dddd ['),
            lastWeek: function () {
                switch (this.day()) {
                case 0:
                case 3:
                case 5:
                case 6:
                    return processHoursFunction('[Минулої] dddd [').call(this);
                case 1:
                case 2:
                case 4:
                    return processHoursFunction('[Минулого] dddd [').call(this);
                }
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : 'за %s',
            past : '%s тому',
            s : 'декілька секунд',
            m : uk__relativeTimeWithPlural,
            mm : uk__relativeTimeWithPlural,
            h : 'годину',
            hh : uk__relativeTimeWithPlural,
            d : 'день',
            dd : uk__relativeTimeWithPlural,
            M : 'місяць',
            MM : uk__relativeTimeWithPlural,
            y : 'рік',
            yy : uk__relativeTimeWithPlural
        },
        // M. E.: those two are virtually unused but a user might want to implement them for his/her website for some reason
        meridiemParse: /ночі|ранку|дня|вечора/,
        isPM: function (input) {
            return /^(дня|вечора)$/.test(input);
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return 'ночі';
            } else if (hour < 12) {
                return 'ранку';
            } else if (hour < 17) {
                return 'дня';
            } else {
                return 'вечора';
            }
        },
        ordinalParse: /\d{1,2}-(й|го)/,
        ordinal: function (number, period) {
            switch (period) {
            case 'M':
            case 'd':
            case 'DDD':
            case 'w':
            case 'W':
                return number + '-й';
            case 'D':
                return number + '-го';
            default:
                return number;
            }
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : uzbek (uz)
    //! author : Sardor Muminov : https://github.com/muminoff

    var uz = moment.defineLocale('uz', {
        months : 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_'),
        monthsShort : 'янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек'.split('_'),
        weekdays : 'Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба'.split('_'),
        weekdaysShort : 'Якш_Душ_Сеш_Чор_Пай_Жум_Шан'.split('_'),
        weekdaysMin : 'Як_Ду_Се_Чо_Па_Жу_Ша'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'D MMMM YYYY, dddd HH:mm'
        },
        calendar : {
            sameDay : '[Бугун соат] LT [да]',
            nextDay : '[Эртага] LT [да]',
            nextWeek : 'dddd [куни соат] LT [да]',
            lastDay : '[Кеча соат] LT [да]',
            lastWeek : '[Утган] dddd [куни соат] LT [да]',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'Якин %s ичида',
            past : 'Бир неча %s олдин',
            s : 'фурсат',
            m : 'бир дакика',
            mm : '%d дакика',
            h : 'бир соат',
            hh : '%d соат',
            d : 'бир кун',
            dd : '%d кун',
            M : 'бир ой',
            MM : '%d ой',
            y : 'бир йил',
            yy : '%d йил'
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : vietnamese (vi)
    //! author : Bang Nguyen : https://github.com/bangnk

    var vi = moment.defineLocale('vi', {
        months : 'tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12'.split('_'),
        monthsShort : 'Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12'.split('_'),
        weekdays : 'chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy'.split('_'),
        weekdaysShort : 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
        weekdaysMin : 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM [năm] YYYY',
            LLL : 'D MMMM [năm] YYYY HH:mm',
            LLLL : 'dddd, D MMMM [năm] YYYY HH:mm',
            l : 'DD/M/YYYY',
            ll : 'D MMM YYYY',
            lll : 'D MMM YYYY HH:mm',
            llll : 'ddd, D MMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[Hôm nay lúc] LT',
            nextDay: '[Ngày mai lúc] LT',
            nextWeek: 'dddd [tuần tới lúc] LT',
            lastDay: '[Hôm qua lúc] LT',
            lastWeek: 'dddd [tuần rồi lúc] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : '%s tới',
            past : '%s trước',
            s : 'vài giây',
            m : 'một phút',
            mm : '%d phút',
            h : 'một giờ',
            hh : '%d giờ',
            d : 'một ngày',
            dd : '%d ngày',
            M : 'một tháng',
            MM : '%d tháng',
            y : 'một năm',
            yy : '%d năm'
        },
        ordinalParse: /\d{1,2}/,
        ordinal : function (number) {
            return number;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : chinese (zh-cn)
    //! author : suupic : https://github.com/suupic
    //! author : Zeno Zeng : https://github.com/zenozeng

    var zh_cn = moment.defineLocale('zh-cn', {
        months : '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
        monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
        weekdays : '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
        weekdaysShort : '周日_周一_周二_周三_周四_周五_周六'.split('_'),
        weekdaysMin : '日_一_二_三_四_五_六'.split('_'),
        longDateFormat : {
            LT : 'Ah点mm分',
            LTS : 'Ah点m分s秒',
            L : 'YYYY-MM-DD',
            LL : 'YYYY年MMMD日',
            LLL : 'YYYY年MMMD日Ah点mm分',
            LLLL : 'YYYY年MMMD日ddddAh点mm分',
            l : 'YYYY-MM-DD',
            ll : 'YYYY年MMMD日',
            lll : 'YYYY年MMMD日Ah点mm分',
            llll : 'YYYY年MMMD日ddddAh点mm分'
        },
        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === '凌晨' || meridiem === '早上' ||
                    meridiem === '上午') {
                return hour;
            } else if (meridiem === '下午' || meridiem === '晚上') {
                return hour + 12;
            } else {
                // '中午'
                return hour >= 11 ? hour : hour + 12;
            }
        },
        meridiem : function (hour, minute, isLower) {
            var hm = hour * 100 + minute;
            if (hm < 600) {
                return '凌晨';
            } else if (hm < 900) {
                return '早上';
            } else if (hm < 1130) {
                return '上午';
            } else if (hm < 1230) {
                return '中午';
            } else if (hm < 1800) {
                return '下午';
            } else {
                return '晚上';
            }
        },
        calendar : {
            sameDay : function () {
                return this.minutes() === 0 ? '[今天]Ah[点整]' : '[今天]LT';
            },
            nextDay : function () {
                return this.minutes() === 0 ? '[明天]Ah[点整]' : '[明天]LT';
            },
            lastDay : function () {
                return this.minutes() === 0 ? '[昨天]Ah[点整]' : '[昨天]LT';
            },
            nextWeek : function () {
                var startOfWeek, prefix;
                startOfWeek = moment().startOf('week');
                prefix = this.unix() - startOfWeek.unix() >= 7 * 24 * 3600 ? '[下]' : '[本]';
                return this.minutes() === 0 ? prefix + 'dddAh点整' : prefix + 'dddAh点mm';
            },
            lastWeek : function () {
                var startOfWeek, prefix;
                startOfWeek = moment().startOf('week');
                prefix = this.unix() < startOfWeek.unix()  ? '[上]' : '[本]';
                return this.minutes() === 0 ? prefix + 'dddAh点整' : prefix + 'dddAh点mm';
            },
            sameElse : 'LL'
        },
        ordinalParse: /\d{1,2}(日|月|周)/,
        ordinal : function (number, period) {
            switch (period) {
            case 'd':
            case 'D':
            case 'DDD':
                return number + '日';
            case 'M':
                return number + '月';
            case 'w':
            case 'W':
                return number + '周';
            default:
                return number;
            }
        },
        relativeTime : {
            future : '%s内',
            past : '%s前',
            s : '几秒',
            m : '1 分钟',
            mm : '%d 分钟',
            h : '1 小时',
            hh : '%d 小时',
            d : '1 天',
            dd : '%d 天',
            M : '1 个月',
            MM : '%d 个月',
            y : '1 年',
            yy : '%d 年'
        },
        week : {
            // GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : traditional chinese (zh-tw)
    //! author : Ben : https://github.com/ben-lin

    var zh_tw = moment.defineLocale('zh-tw', {
        months : '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
        monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
        weekdays : '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
        weekdaysShort : '週日_週一_週二_週三_週四_週五_週六'.split('_'),
        weekdaysMin : '日_一_二_三_四_五_六'.split('_'),
        longDateFormat : {
            LT : 'Ah點mm分',
            LTS : 'Ah點m分s秒',
            L : 'YYYY年MMMD日',
            LL : 'YYYY年MMMD日',
            LLL : 'YYYY年MMMD日Ah點mm分',
            LLLL : 'YYYY年MMMD日ddddAh點mm分',
            l : 'YYYY年MMMD日',
            ll : 'YYYY年MMMD日',
            lll : 'YYYY年MMMD日Ah點mm分',
            llll : 'YYYY年MMMD日ddddAh點mm分'
        },
        meridiemParse: /早上|上午|中午|下午|晚上/,
        meridiemHour : function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === '早上' || meridiem === '上午') {
                return hour;
            } else if (meridiem === '中午') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === '下午' || meridiem === '晚上') {
                return hour + 12;
            }
        },
        meridiem : function (hour, minute, isLower) {
            var hm = hour * 100 + minute;
            if (hm < 900) {
                return '早上';
            } else if (hm < 1130) {
                return '上午';
            } else if (hm < 1230) {
                return '中午';
            } else if (hm < 1800) {
                return '下午';
            } else {
                return '晚上';
            }
        },
        calendar : {
            sameDay : '[今天]LT',
            nextDay : '[明天]LT',
            nextWeek : '[下]ddddLT',
            lastDay : '[昨天]LT',
            lastWeek : '[上]ddddLT',
            sameElse : 'L'
        },
        ordinalParse: /\d{1,2}(日|月|週)/,
        ordinal : function (number, period) {
            switch (period) {
            case 'd' :
            case 'D' :
            case 'DDD' :
                return number + '日';
            case 'M' :
                return number + '月';
            case 'w' :
            case 'W' :
                return number + '週';
            default :
                return number;
            }
        },
        relativeTime : {
            future : '%s內',
            past : '%s前',
            s : '幾秒',
            m : '一分鐘',
            mm : '%d分鐘',
            h : '一小時',
            hh : '%d小時',
            d : '一天',
            dd : '%d天',
            M : '一個月',
            MM : '%d個月',
            y : '一年',
            yy : '%d年'
        }
    });



}));
},{"../moment":149}],149:[function(require,module,exports){
//! moment.js
//! version : 2.10.6
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com

(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    global.moment = factory()
}(this, function () { 'use strict';

    var hookCallback;

    function utils_hooks__hooks () {
        return hookCallback.apply(null, arguments);
    }

    // This is done to register the method called with moment()
    // without creating circular dependencies.
    function setHookCallback (callback) {
        hookCallback = callback;
    }

    function isArray(input) {
        return Object.prototype.toString.call(input) === '[object Array]';
    }

    function isDate(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
    }

    function map(arr, fn) {
        var res = [], i;
        for (i = 0; i < arr.length; ++i) {
            res.push(fn(arr[i], i));
        }
        return res;
    }

    function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
    }

    function extend(a, b) {
        for (var i in b) {
            if (hasOwnProp(b, i)) {
                a[i] = b[i];
            }
        }

        if (hasOwnProp(b, 'toString')) {
            a.toString = b.toString;
        }

        if (hasOwnProp(b, 'valueOf')) {
            a.valueOf = b.valueOf;
        }

        return a;
    }

    function create_utc__createUTC (input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc();
    }

    function defaultParsingFlags() {
        // We need to deep clone this object.
        return {
            empty           : false,
            unusedTokens    : [],
            unusedInput     : [],
            overflow        : -2,
            charsLeftOver   : 0,
            nullInput       : false,
            invalidMonth    : null,
            invalidFormat   : false,
            userInvalidated : false,
            iso             : false
        };
    }

    function getParsingFlags(m) {
        if (m._pf == null) {
            m._pf = defaultParsingFlags();
        }
        return m._pf;
    }

    function valid__isValid(m) {
        if (m._isValid == null) {
            var flags = getParsingFlags(m);
            m._isValid = !isNaN(m._d.getTime()) &&
                flags.overflow < 0 &&
                !flags.empty &&
                !flags.invalidMonth &&
                !flags.invalidWeekday &&
                !flags.nullInput &&
                !flags.invalidFormat &&
                !flags.userInvalidated;

            if (m._strict) {
                m._isValid = m._isValid &&
                    flags.charsLeftOver === 0 &&
                    flags.unusedTokens.length === 0 &&
                    flags.bigHour === undefined;
            }
        }
        return m._isValid;
    }

    function valid__createInvalid (flags) {
        var m = create_utc__createUTC(NaN);
        if (flags != null) {
            extend(getParsingFlags(m), flags);
        }
        else {
            getParsingFlags(m).userInvalidated = true;
        }

        return m;
    }

    var momentProperties = utils_hooks__hooks.momentProperties = [];

    function copyConfig(to, from) {
        var i, prop, val;

        if (typeof from._isAMomentObject !== 'undefined') {
            to._isAMomentObject = from._isAMomentObject;
        }
        if (typeof from._i !== 'undefined') {
            to._i = from._i;
        }
        if (typeof from._f !== 'undefined') {
            to._f = from._f;
        }
        if (typeof from._l !== 'undefined') {
            to._l = from._l;
        }
        if (typeof from._strict !== 'undefined') {
            to._strict = from._strict;
        }
        if (typeof from._tzm !== 'undefined') {
            to._tzm = from._tzm;
        }
        if (typeof from._isUTC !== 'undefined') {
            to._isUTC = from._isUTC;
        }
        if (typeof from._offset !== 'undefined') {
            to._offset = from._offset;
        }
        if (typeof from._pf !== 'undefined') {
            to._pf = getParsingFlags(from);
        }
        if (typeof from._locale !== 'undefined') {
            to._locale = from._locale;
        }

        if (momentProperties.length > 0) {
            for (i in momentProperties) {
                prop = momentProperties[i];
                val = from[prop];
                if (typeof val !== 'undefined') {
                    to[prop] = val;
                }
            }
        }

        return to;
    }

    var updateInProgress = false;

    // Moment prototype object
    function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        // Prevent infinite loop in case updateOffset creates new moment
        // objects.
        if (updateInProgress === false) {
            updateInProgress = true;
            utils_hooks__hooks.updateOffset(this);
            updateInProgress = false;
        }
    }

    function isMoment (obj) {
        return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
    }

    function absFloor (number) {
        if (number < 0) {
            return Math.ceil(number);
        } else {
            return Math.floor(number);
        }
    }

    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
            value = 0;

        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            value = absFloor(coercedNumber);
        }

        return value;
    }

    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;
        for (i = 0; i < len; i++) {
            if ((dontConvert && array1[i] !== array2[i]) ||
                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }

    function Locale() {
    }

    var locales = {};
    var globalLocale;

    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }

    // pick the locale from the array
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {
        var i = 0, j, next, locale, split;

        while (i < names.length) {
            split = normalizeLocale(names[i]).split('-');
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) {
                    return locale;
                }
                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                    //the next array item is better than a shallower substring of this one
                    break;
                }
                j--;
            }
            i++;
        }
        return null;
    }

    function loadLocale(name) {
        var oldLocale = null;
        // TODO: Find a better way to register and load all the locales in Node
        if (!locales[name] && typeof module !== 'undefined' &&
                module && module.exports) {
            try {
                oldLocale = globalLocale._abbr;
                require('./locale/' + name);
                // because defineLocale currently also sets the global locale, we
                // want to undo that for lazy loaded locales
                locale_locales__getSetGlobalLocale(oldLocale);
            } catch (e) { }
        }
        return locales[name];
    }

    // This function will load locale and then set the global locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    function locale_locales__getSetGlobalLocale (key, values) {
        var data;
        if (key) {
            if (typeof values === 'undefined') {
                data = locale_locales__getLocale(key);
            }
            else {
                data = defineLocale(key, values);
            }

            if (data) {
                // moment.duration._locale = moment._locale = data;
                globalLocale = data;
            }
        }

        return globalLocale._abbr;
    }

    function defineLocale (name, values) {
        if (values !== null) {
            values.abbr = name;
            locales[name] = locales[name] || new Locale();
            locales[name].set(values);

            // backwards compat for now: also set the locale
            locale_locales__getSetGlobalLocale(name);

            return locales[name];
        } else {
            // useful for testing
            delete locales[name];
            return null;
        }
    }

    // returns locale data
    function locale_locales__getLocale (key) {
        var locale;

        if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
        }

        if (!key) {
            return globalLocale;
        }

        if (!isArray(key)) {
            //short-circuit everything else
            locale = loadLocale(key);
            if (locale) {
                return locale;
            }
            key = [key];
        }

        return chooseLocale(key);
    }

    var aliases = {};

    function addUnitAlias (unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
    }

    function normalizeUnits(units) {
        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
    }

    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
            normalizedProp,
            prop;

        for (prop in inputObject) {
            if (hasOwnProp(inputObject, prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }

        return normalizedInput;
    }

    function makeGetSet (unit, keepTime) {
        return function (value) {
            if (value != null) {
                get_set__set(this, unit, value);
                utils_hooks__hooks.updateOffset(this, keepTime);
                return this;
            } else {
                return get_set__get(this, unit);
            }
        };
    }

    function get_set__get (mom, unit) {
        return mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]();
    }

    function get_set__set (mom, unit, value) {
        return mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
    }

    // MOMENTS

    function getSet (units, value) {
        var unit;
        if (typeof units === 'object') {
            for (unit in units) {
                this.set(unit, units[unit]);
            }
        } else {
            units = normalizeUnits(units);
            if (typeof this[units] === 'function') {
                return this[units](value);
            }
        }
        return this;
    }

    function zeroFill(number, targetLength, forceSign) {
        var absNumber = '' + Math.abs(number),
            zerosToFill = targetLength - absNumber.length,
            sign = number >= 0;
        return (sign ? (forceSign ? '+' : '') : '-') +
            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
    }

    var formattingTokens = /(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

    var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

    var formatFunctions = {};

    var formatTokenFunctions = {};

    // token:    'M'
    // padded:   ['MM', 2]
    // ordinal:  'Mo'
    // callback: function () { this.month() + 1 }
    function addFormatToken (token, padded, ordinal, callback) {
        var func = callback;
        if (typeof callback === 'string') {
            func = function () {
                return this[callback]();
            };
        }
        if (token) {
            formatTokenFunctions[token] = func;
        }
        if (padded) {
            formatTokenFunctions[padded[0]] = function () {
                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
            };
        }
        if (ordinal) {
            formatTokenFunctions[ordinal] = function () {
                return this.localeData().ordinal(func.apply(this, arguments), token);
            };
        }
    }

    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
    }

    function makeFormatFunction(format) {
        var array = format.match(formattingTokens), i, length;

        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }

        return function (mom) {
            var output = '';
            for (i = 0; i < length; i++) {
                output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
            }
            return output;
        };
    }

    // format date using native date object
    function formatMoment(m, format) {
        if (!m.isValid()) {
            return m.localeData().invalidDate();
        }

        format = expandFormat(format, m.localeData());
        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

        return formatFunctions[format](m);
    }

    function expandFormat(format, locale) {
        var i = 5;

        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }

        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }

        return format;
    }

    var match1         = /\d/;            //       0 - 9
    var match2         = /\d\d/;          //      00 - 99
    var match3         = /\d{3}/;         //     000 - 999
    var match4         = /\d{4}/;         //    0000 - 9999
    var match6         = /[+-]?\d{6}/;    // -999999 - 999999
    var match1to2      = /\d\d?/;         //       0 - 99
    var match1to3      = /\d{1,3}/;       //       0 - 999
    var match1to4      = /\d{1,4}/;       //       0 - 9999
    var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999

    var matchUnsigned  = /\d+/;           //       0 - inf
    var matchSigned    = /[+-]?\d+/;      //    -inf - inf

    var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z

    var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

    // any word (or two) characters or numbers including two/three word month in arabic.
    var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;

    var regexes = {};

    function isFunction (sth) {
        // https://github.com/moment/moment/issues/2325
        return typeof sth === 'function' &&
            Object.prototype.toString.call(sth) === '[object Function]';
    }


    function addRegexToken (token, regex, strictRegex) {
        regexes[token] = isFunction(regex) ? regex : function (isStrict) {
            return (isStrict && strictRegex) ? strictRegex : regex;
        };
    }

    function getParseRegexForToken (token, config) {
        if (!hasOwnProp(regexes, token)) {
            return new RegExp(unescapeFormat(token));
        }

        return regexes[token](config._strict, config._locale);
    }

    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function unescapeFormat(s) {
        return s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
        }).replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }

    var tokens = {};

    function addParseToken (token, callback) {
        var i, func = callback;
        if (typeof token === 'string') {
            token = [token];
        }
        if (typeof callback === 'number') {
            func = function (input, array) {
                array[callback] = toInt(input);
            };
        }
        for (i = 0; i < token.length; i++) {
            tokens[token[i]] = func;
        }
    }

    function addWeekParseToken (token, callback) {
        addParseToken(token, function (input, array, config, token) {
            config._w = config._w || {};
            callback(input, config._w, config, token);
        });
    }

    function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens, token)) {
            tokens[token](input, config._a, config, token);
        }
    }

    var YEAR = 0;
    var MONTH = 1;
    var DATE = 2;
    var HOUR = 3;
    var MINUTE = 4;
    var SECOND = 5;
    var MILLISECOND = 6;

    function daysInMonth(year, month) {
        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
    }

    // FORMATTING

    addFormatToken('M', ['MM', 2], 'Mo', function () {
        return this.month() + 1;
    });

    addFormatToken('MMM', 0, 0, function (format) {
        return this.localeData().monthsShort(this, format);
    });

    addFormatToken('MMMM', 0, 0, function (format) {
        return this.localeData().months(this, format);
    });

    // ALIASES

    addUnitAlias('month', 'M');

    // PARSING

    addRegexToken('M',    match1to2);
    addRegexToken('MM',   match1to2, match2);
    addRegexToken('MMM',  matchWord);
    addRegexToken('MMMM', matchWord);

    addParseToken(['M', 'MM'], function (input, array) {
        array[MONTH] = toInt(input) - 1;
    });

    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict);
        // if we didn't find a month name, mark the date as invalid.
        if (month != null) {
            array[MONTH] = month;
        } else {
            getParsingFlags(config).invalidMonth = input;
        }
    });

    // LOCALES

    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
    function localeMonths (m) {
        return this._months[m.month()];
    }

    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
    function localeMonthsShort (m) {
        return this._monthsShort[m.month()];
    }

    function localeMonthsParse (monthName, format, strict) {
        var i, mom, regex;

        if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
        }

        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = create_utc__createUTC([2000, i]);
            if (strict && !this._longMonthsParse[i]) {
                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
            }
            if (!strict && !this._monthsParse[i]) {
                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
                return i;
            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
                return i;
            } else if (!strict && this._monthsParse[i].test(monthName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function setMonth (mom, value) {
        var dayOfMonth;

        // TODO: Move this out of here!
        if (typeof value === 'string') {
            value = mom.localeData().monthsParse(value);
            // TODO: Another silent failure?
            if (typeof value !== 'number') {
                return mom;
            }
        }

        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
    }

    function getSetMonth (value) {
        if (value != null) {
            setMonth(this, value);
            utils_hooks__hooks.updateOffset(this, true);
            return this;
        } else {
            return get_set__get(this, 'Month');
        }
    }

    function getDaysInMonth () {
        return daysInMonth(this.year(), this.month());
    }

    function checkOverflow (m) {
        var overflow;
        var a = m._a;

        if (a && getParsingFlags(m).overflow === -2) {
            overflow =
                a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
                a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
                a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
                a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
                a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
                a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
                -1;

            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                overflow = DATE;
            }

            getParsingFlags(m).overflow = overflow;
        }

        return m;
    }

    function warn(msg) {
        if (utils_hooks__hooks.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {
            console.warn('Deprecation warning: ' + msg);
        }
    }

    function deprecate(msg, fn) {
        var firstTime = true;

        return extend(function () {
            if (firstTime) {
                warn(msg + '\n' + (new Error()).stack);
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }

    var deprecations = {};

    function deprecateSimple(name, msg) {
        if (!deprecations[name]) {
            warn(msg);
            deprecations[name] = true;
        }
    }

    utils_hooks__hooks.suppressDeprecationWarnings = false;

    var from_string__isoRegex = /^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

    var isoDates = [
        ['YYYYYY-MM-DD', /[+-]\d{6}-\d{2}-\d{2}/],
        ['YYYY-MM-DD', /\d{4}-\d{2}-\d{2}/],
        ['GGGG-[W]WW-E', /\d{4}-W\d{2}-\d/],
        ['GGGG-[W]WW', /\d{4}-W\d{2}/],
        ['YYYY-DDD', /\d{4}-\d{3}/]
    ];

    // iso time formats and regexes
    var isoTimes = [
        ['HH:mm:ss.SSSS', /(T| )\d\d:\d\d:\d\d\.\d+/],
        ['HH:mm:ss', /(T| )\d\d:\d\d:\d\d/],
        ['HH:mm', /(T| )\d\d:\d\d/],
        ['HH', /(T| )\d\d/]
    ];

    var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

    // date from iso format
    function configFromISO(config) {
        var i, l,
            string = config._i,
            match = from_string__isoRegex.exec(string);

        if (match) {
            getParsingFlags(config).iso = true;
            for (i = 0, l = isoDates.length; i < l; i++) {
                if (isoDates[i][1].exec(string)) {
                    config._f = isoDates[i][0];
                    break;
                }
            }
            for (i = 0, l = isoTimes.length; i < l; i++) {
                if (isoTimes[i][1].exec(string)) {
                    // match[6] should be 'T' or space
                    config._f += (match[6] || ' ') + isoTimes[i][0];
                    break;
                }
            }
            if (string.match(matchOffset)) {
                config._f += 'Z';
            }
            configFromStringAndFormat(config);
        } else {
            config._isValid = false;
        }
    }

    // date from iso format or fallback
    function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);

        if (matched !== null) {
            config._d = new Date(+matched[1]);
            return;
        }

        configFromISO(config);
        if (config._isValid === false) {
            delete config._isValid;
            utils_hooks__hooks.createFromInputFallback(config);
        }
    }

    utils_hooks__hooks.createFromInputFallback = deprecate(
        'moment construction falls back to js Date. This is ' +
        'discouraged and will be removed in upcoming major ' +
        'release. Please refer to ' +
        'https://github.com/moment/moment/issues/1407 for more info.',
        function (config) {
            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
        }
    );

    function createDate (y, m, d, h, M, s, ms) {
        //can't just apply() to create a date:
        //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
        var date = new Date(y, m, d, h, M, s, ms);

        //the date constructor doesn't accept years < 1970
        if (y < 1970) {
            date.setFullYear(y);
        }
        return date;
    }

    function createUTCDate (y) {
        var date = new Date(Date.UTC.apply(null, arguments));
        if (y < 1970) {
            date.setUTCFullYear(y);
        }
        return date;
    }

    addFormatToken(0, ['YY', 2], 0, function () {
        return this.year() % 100;
    });

    addFormatToken(0, ['YYYY',   4],       0, 'year');
    addFormatToken(0, ['YYYYY',  5],       0, 'year');
    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

    // ALIASES

    addUnitAlias('year', 'y');

    // PARSING

    addRegexToken('Y',      matchSigned);
    addRegexToken('YY',     match1to2, match2);
    addRegexToken('YYYY',   match1to4, match4);
    addRegexToken('YYYYY',  match1to6, match6);
    addRegexToken('YYYYYY', match1to6, match6);

    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
    addParseToken('YYYY', function (input, array) {
        array[YEAR] = input.length === 2 ? utils_hooks__hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken('YY', function (input, array) {
        array[YEAR] = utils_hooks__hooks.parseTwoDigitYear(input);
    });

    // HELPERS

    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }

    function isLeapYear(year) {
        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
    }

    // HOOKS

    utils_hooks__hooks.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };

    // MOMENTS

    var getSetYear = makeGetSet('FullYear', false);

    function getIsLeapYear () {
        return isLeapYear(this.year());
    }

    addFormatToken('w', ['ww', 2], 'wo', 'week');
    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

    // ALIASES

    addUnitAlias('week', 'w');
    addUnitAlias('isoWeek', 'W');

    // PARSING

    addRegexToken('w',  match1to2);
    addRegexToken('ww', match1to2, match2);
    addRegexToken('W',  match1to2);
    addRegexToken('WW', match1to2, match2);

    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
        week[token.substr(0, 1)] = toInt(input);
    });

    // HELPERS

    // firstDayOfWeek       0 = sun, 6 = sat
    //                      the day of the week that starts the week
    //                      (usually sunday or monday)
    // firstDayOfWeekOfYear 0 = sun, 6 = sat
    //                      the first week is the week that contains the first
    //                      of this day of the week
    //                      (eg. ISO weeks use thursday (4))
    function weekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {
        var end = firstDayOfWeekOfYear - firstDayOfWeek,
            daysToDayOfWeek = firstDayOfWeekOfYear - mom.day(),
            adjustedMoment;


        if (daysToDayOfWeek > end) {
            daysToDayOfWeek -= 7;
        }

        if (daysToDayOfWeek < end - 7) {
            daysToDayOfWeek += 7;
        }

        adjustedMoment = local__createLocal(mom).add(daysToDayOfWeek, 'd');
        return {
            week: Math.ceil(adjustedMoment.dayOfYear() / 7),
            year: adjustedMoment.year()
        };
    }

    // LOCALES

    function localeWeek (mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }

    var defaultLocaleWeek = {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 1st is the first week of the year.
    };

    function localeFirstDayOfWeek () {
        return this._week.dow;
    }

    function localeFirstDayOfYear () {
        return this._week.doy;
    }

    // MOMENTS

    function getSetWeek (input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    function getSetISOWeek (input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

    // ALIASES

    addUnitAlias('dayOfYear', 'DDD');

    // PARSING

    addRegexToken('DDD',  match1to3);
    addRegexToken('DDDD', match3);
    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
        config._dayOfYear = toInt(input);
    });

    // HELPERS

    //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, firstDayOfWeekOfYear, firstDayOfWeek) {
        var week1Jan = 6 + firstDayOfWeek - firstDayOfWeekOfYear, janX = createUTCDate(year, 0, 1 + week1Jan), d = janX.getUTCDay(), dayOfYear;
        if (d < firstDayOfWeek) {
            d += 7;
        }

        weekday = weekday != null ? 1 * weekday : firstDayOfWeek;

        dayOfYear = 1 + week1Jan + 7 * (week - 1) - d + weekday;

        return {
            year: dayOfYear > 0 ? year : year - 1,
            dayOfYear: dayOfYear > 0 ?  dayOfYear : daysInYear(year - 1) + dayOfYear
        };
    }

    // MOMENTS

    function getSetDayOfYear (input) {
        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
        return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
    }

    // Pick the first defined of two or three arguments.
    function defaults(a, b, c) {
        if (a != null) {
            return a;
        }
        if (b != null) {
            return b;
        }
        return c;
    }

    function currentDateArray(config) {
        var now = new Date();
        if (config._useUTC) {
            return [now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate()];
        }
        return [now.getFullYear(), now.getMonth(), now.getDate()];
    }

    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function configFromArray (config) {
        var i, date, input = [], currentDate, yearToUse;

        if (config._d) {
            return;
        }

        currentDate = currentDateArray(config);

        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
        }

        //if the day of the year is set, figure out what it is
        if (config._dayOfYear) {
            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

            if (config._dayOfYear > daysInYear(yearToUse)) {
                getParsingFlags(config)._overflowDayOfYear = true;
            }

            date = createUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }

        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }

        // Zero out whatever was not defaulted, including time
        for (; i < 7; i++) {
            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
        }

        // Check for 24:00:00.000
        if (config._a[HOUR] === 24 &&
                config._a[MINUTE] === 0 &&
                config._a[SECOND] === 0 &&
                config._a[MILLISECOND] === 0) {
            config._nextDay = true;
            config._a[HOUR] = 0;
        }

        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
        // Apply timezone offset from input. The actual utcOffset can be changed
        // with parseZone.
        if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }

        if (config._nextDay) {
            config._a[HOUR] = 24;
        }
    }

    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp;

        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;

            // TODO: We need to take the current isoWeekYear, but that depends on
            // how we interpret now (local, utc, fixed offset). So create
            // a now version of current config (take local/utc/offset flags, and
            // create now).
            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(local__createLocal(), 1, 4).year);
            week = defaults(w.W, 1);
            weekday = defaults(w.E, 1);
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;

            weekYear = defaults(w.gg, config._a[YEAR], weekOfYear(local__createLocal(), dow, doy).year);
            week = defaults(w.w, 1);

            if (w.d != null) {
                // weekday -- low day numbers are considered next week
                weekday = w.d;
                if (weekday < dow) {
                    ++week;
                }
            } else if (w.e != null) {
                // local weekday -- counting starts from begining of week
                weekday = w.e + dow;
            } else {
                // default to begining of week
                weekday = dow;
            }
        }
        temp = dayOfYearFromWeeks(weekYear, week, weekday, doy, dow);

        config._a[YEAR] = temp.year;
        config._dayOfYear = temp.dayOfYear;
    }

    utils_hooks__hooks.ISO_8601 = function () {};

    // date from string and format string
    function configFromStringAndFormat(config) {
        // TODO: Move this to another part of the creation flow to prevent circular deps
        if (config._f === utils_hooks__hooks.ISO_8601) {
            configFromISO(config);
            return;
        }

        config._a = [];
        getParsingFlags(config).empty = true;

        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var string = '' + config._i,
            i, parsedInput, tokens, token, skipped,
            stringLength = string.length,
            totalParsedInputLength = 0;

        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

        for (i = 0; i < tokens.length; i++) {
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    getParsingFlags(config).unusedInput.push(skipped);
                }
                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                totalParsedInputLength += parsedInput.length;
            }
            // don't parse if it's not a known token
            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    getParsingFlags(config).empty = false;
                }
                else {
                    getParsingFlags(config).unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            }
            else if (config._strict && !parsedInput) {
                getParsingFlags(config).unusedTokens.push(token);
            }
        }

        // add remaining unparsed input length to the string
        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
            getParsingFlags(config).unusedInput.push(string);
        }

        // clear _12h flag if hour is <= 12
        if (getParsingFlags(config).bigHour === true &&
                config._a[HOUR] <= 12 &&
                config._a[HOUR] > 0) {
            getParsingFlags(config).bigHour = undefined;
        }
        // handle meridiem
        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

        configFromArray(config);
        checkOverflow(config);
    }


    function meridiemFixWrap (locale, hour, meridiem) {
        var isPm;

        if (meridiem == null) {
            // nothing to do
            return hour;
        }
        if (locale.meridiemHour != null) {
            return locale.meridiemHour(hour, meridiem);
        } else if (locale.isPM != null) {
            // Fallback
            isPm = locale.isPM(meridiem);
            if (isPm && hour < 12) {
                hour += 12;
            }
            if (!isPm && hour === 12) {
                hour = 0;
            }
            return hour;
        } else {
            // this is not supposed to happen
            return hour;
        }
    }

    function configFromStringAndArray(config) {
        var tempConfig,
            bestMoment,

            scoreToBeat,
            i,
            currentScore;

        if (config._f.length === 0) {
            getParsingFlags(config).invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }

        for (i = 0; i < config._f.length; i++) {
            currentScore = 0;
            tempConfig = copyConfig({}, config);
            if (config._useUTC != null) {
                tempConfig._useUTC = config._useUTC;
            }
            tempConfig._f = config._f[i];
            configFromStringAndFormat(tempConfig);

            if (!valid__isValid(tempConfig)) {
                continue;
            }

            // if there is any input that was not parsed add a penalty for that format
            currentScore += getParsingFlags(tempConfig).charsLeftOver;

            //or tokens
            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

            getParsingFlags(tempConfig).score = currentScore;

            if (scoreToBeat == null || currentScore < scoreToBeat) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
            }
        }

        extend(config, bestMoment || tempConfig);
    }

    function configFromObject(config) {
        if (config._d) {
            return;
        }

        var i = normalizeObjectUnits(config._i);
        config._a = [i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond];

        configFromArray(config);
    }

    function createFromConfig (config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
            // Adding is smart enough around DST
            res.add(1, 'd');
            res._nextDay = undefined;
        }

        return res;
    }

    function prepareConfig (config) {
        var input = config._i,
            format = config._f;

        config._locale = config._locale || locale_locales__getLocale(config._l);

        if (input === null || (format === undefined && input === '')) {
            return valid__createInvalid({nullInput: true});
        }

        if (typeof input === 'string') {
            config._i = input = config._locale.preparse(input);
        }

        if (isMoment(input)) {
            return new Moment(checkOverflow(input));
        } else if (isArray(format)) {
            configFromStringAndArray(config);
        } else if (format) {
            configFromStringAndFormat(config);
        } else if (isDate(input)) {
            config._d = input;
        } else {
            configFromInput(config);
        }

        return config;
    }

    function configFromInput(config) {
        var input = config._i;
        if (input === undefined) {
            config._d = new Date();
        } else if (isDate(input)) {
            config._d = new Date(+input);
        } else if (typeof input === 'string') {
            configFromString(config);
        } else if (isArray(input)) {
            config._a = map(input.slice(0), function (obj) {
                return parseInt(obj, 10);
            });
            configFromArray(config);
        } else if (typeof(input) === 'object') {
            configFromObject(config);
        } else if (typeof(input) === 'number') {
            // from milliseconds
            config._d = new Date(input);
        } else {
            utils_hooks__hooks.createFromInputFallback(config);
        }
    }

    function createLocalOrUTC (input, format, locale, strict, isUTC) {
        var c = {};

        if (typeof(locale) === 'boolean') {
            strict = locale;
            locale = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;

        return createFromConfig(c);
    }

    function local__createLocal (input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false);
    }

    var prototypeMin = deprecate(
         'moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548',
         function () {
             var other = local__createLocal.apply(null, arguments);
             return other < this ? this : other;
         }
     );

    var prototypeMax = deprecate(
        'moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548',
        function () {
            var other = local__createLocal.apply(null, arguments);
            return other > this ? this : other;
        }
    );

    // Pick a moment m from moments so that m[fn](other) is true for all
    // other. This relies on the function fn to be transitive.
    //
    // moments should either be an array of moment objects or an array, whose
    // first element is an array of moment objects.
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
            moments = moments[0];
        }
        if (!moments.length) {
            return local__createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
            if (!moments[i].isValid() || moments[i][fn](res)) {
                res = moments[i];
            }
        }
        return res;
    }

    // TODO: Use [].sort instead?
    function min () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isBefore', args);
    }

    function max () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isAfter', args);
    }

    function Duration (duration) {
        var normalizedInput = normalizeObjectUnits(duration),
            years = normalizedInput.year || 0,
            quarters = normalizedInput.quarter || 0,
            months = normalizedInput.month || 0,
            weeks = normalizedInput.week || 0,
            days = normalizedInput.day || 0,
            hours = normalizedInput.hour || 0,
            minutes = normalizedInput.minute || 0,
            seconds = normalizedInput.second || 0,
            milliseconds = normalizedInput.millisecond || 0;

        // representation for dateAddRemove
        this._milliseconds = +milliseconds +
            seconds * 1e3 + // 1000
            minutes * 6e4 + // 1000 * 60
            hours * 36e5; // 1000 * 60 * 60
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days +
            weeks * 7;
        // It is impossible translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months +
            quarters * 3 +
            years * 12;

        this._data = {};

        this._locale = locale_locales__getLocale();

        this._bubble();
    }

    function isDuration (obj) {
        return obj instanceof Duration;
    }

    function offset (token, separator) {
        addFormatToken(token, 0, 0, function () {
            var offset = this.utcOffset();
            var sign = '+';
            if (offset < 0) {
                offset = -offset;
                sign = '-';
            }
            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
        });
    }

    offset('Z', ':');
    offset('ZZ', '');

    // PARSING

    addRegexToken('Z',  matchOffset);
    addRegexToken('ZZ', matchOffset);
    addParseToken(['Z', 'ZZ'], function (input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(input);
    });

    // HELPERS

    // timezone chunker
    // '+10:00' > ['10',  '00']
    // '-1530'  > ['-15', '30']
    var chunkOffset = /([\+\-]|\d\d)/gi;

    function offsetFromString(string) {
        var matches = ((string || '').match(matchOffset) || []);
        var chunk   = matches[matches.length - 1] || [];
        var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
        var minutes = +(parts[1] * 60) + toInt(parts[2]);

        return parts[0] === '+' ? minutes : -minutes;
    }

    // Return a moment from input, that is local/utc/zone equivalent to model.
    function cloneWithOffset(input, model) {
        var res, diff;
        if (model._isUTC) {
            res = model.clone();
            diff = (isMoment(input) || isDate(input) ? +input : +local__createLocal(input)) - (+res);
            // Use low-level api, because this fn is low-level api.
            res._d.setTime(+res._d + diff);
            utils_hooks__hooks.updateOffset(res, false);
            return res;
        } else {
            return local__createLocal(input).local();
        }
    }

    function getDateOffset (m) {
        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
        // https://github.com/moment/moment/pull/1871
        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
    }

    // HOOKS

    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    utils_hooks__hooks.updateOffset = function () {};

    // MOMENTS

    // keepLocalTime = true means only change the timezone, without
    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
    // +0200, so we adjust the time as needed, to be valid.
    //
    // Keeping the time actually adds/subtracts (one hour)
    // from the actual represented time. That is why we call updateOffset
    // a second time. In case it wants us to change the offset again
    // _changeInProgress == true case, then we have to adjust, because
    // there is no such time in the given timezone.
    function getSetOffset (input, keepLocalTime) {
        var offset = this._offset || 0,
            localAdjust;
        if (input != null) {
            if (typeof input === 'string') {
                input = offsetFromString(input);
            }
            if (Math.abs(input) < 16) {
                input = input * 60;
            }
            if (!this._isUTC && keepLocalTime) {
                localAdjust = getDateOffset(this);
            }
            this._offset = input;
            this._isUTC = true;
            if (localAdjust != null) {
                this.add(localAdjust, 'm');
            }
            if (offset !== input) {
                if (!keepLocalTime || this._changeInProgress) {
                    add_subtract__addSubtract(this, create__createDuration(input - offset, 'm'), 1, false);
                } else if (!this._changeInProgress) {
                    this._changeInProgress = true;
                    utils_hooks__hooks.updateOffset(this, true);
                    this._changeInProgress = null;
                }
            }
            return this;
        } else {
            return this._isUTC ? offset : getDateOffset(this);
        }
    }

    function getSetZone (input, keepLocalTime) {
        if (input != null) {
            if (typeof input !== 'string') {
                input = -input;
            }

            this.utcOffset(input, keepLocalTime);

            return this;
        } else {
            return -this.utcOffset();
        }
    }

    function setOffsetToUTC (keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
    }

    function setOffsetToLocal (keepLocalTime) {
        if (this._isUTC) {
            this.utcOffset(0, keepLocalTime);
            this._isUTC = false;

            if (keepLocalTime) {
                this.subtract(getDateOffset(this), 'm');
            }
        }
        return this;
    }

    function setOffsetToParsedOffset () {
        if (this._tzm) {
            this.utcOffset(this._tzm);
        } else if (typeof this._i === 'string') {
            this.utcOffset(offsetFromString(this._i));
        }
        return this;
    }

    function hasAlignedHourOffset (input) {
        input = input ? local__createLocal(input).utcOffset() : 0;

        return (this.utcOffset() - input) % 60 === 0;
    }

    function isDaylightSavingTime () {
        return (
            this.utcOffset() > this.clone().month(0).utcOffset() ||
            this.utcOffset() > this.clone().month(5).utcOffset()
        );
    }

    function isDaylightSavingTimeShifted () {
        if (typeof this._isDSTShifted !== 'undefined') {
            return this._isDSTShifted;
        }

        var c = {};

        copyConfig(c, this);
        c = prepareConfig(c);

        if (c._a) {
            var other = c._isUTC ? create_utc__createUTC(c._a) : local__createLocal(c._a);
            this._isDSTShifted = this.isValid() &&
                compareArrays(c._a, other.toArray()) > 0;
        } else {
            this._isDSTShifted = false;
        }

        return this._isDSTShifted;
    }

    function isLocal () {
        return !this._isUTC;
    }

    function isUtcOffset () {
        return this._isUTC;
    }

    function isUtc () {
        return this._isUTC && this._offset === 0;
    }

    var aspNetRegex = /(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/;

    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
    var create__isoRegex = /^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/;

    function create__createDuration (input, key) {
        var duration = input,
            // matching against regexp is expensive, do it on demand
            match = null,
            sign,
            ret,
            diffRes;

        if (isDuration(input)) {
            duration = {
                ms : input._milliseconds,
                d  : input._days,
                M  : input._months
            };
        } else if (typeof input === 'number') {
            duration = {};
            if (key) {
                duration[key] = input;
            } else {
                duration.milliseconds = input;
            }
        } else if (!!(match = aspNetRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            duration = {
                y  : 0,
                d  : toInt(match[DATE])        * sign,
                h  : toInt(match[HOUR])        * sign,
                m  : toInt(match[MINUTE])      * sign,
                s  : toInt(match[SECOND])      * sign,
                ms : toInt(match[MILLISECOND]) * sign
            };
        } else if (!!(match = create__isoRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            duration = {
                y : parseIso(match[2], sign),
                M : parseIso(match[3], sign),
                d : parseIso(match[4], sign),
                h : parseIso(match[5], sign),
                m : parseIso(match[6], sign),
                s : parseIso(match[7], sign),
                w : parseIso(match[8], sign)
            };
        } else if (duration == null) {// checks for null or undefined
            duration = {};
        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
            diffRes = momentsDifference(local__createLocal(duration.from), local__createLocal(duration.to));

            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }

        ret = new Duration(duration);

        if (isDuration(input) && hasOwnProp(input, '_locale')) {
            ret._locale = input._locale;
        }

        return ret;
    }

    create__createDuration.fn = Duration.prototype;

    function parseIso (inp, sign) {
        // We'd normally use ~~inp for this, but unfortunately it also
        // converts floats to ints.
        // inp may be undefined, so careful calling replace on it.
        var res = inp && parseFloat(inp.replace(',', '.'));
        // apply sign while we're at it
        return (isNaN(res) ? 0 : res) * sign;
    }

    function positiveMomentsDifference(base, other) {
        var res = {milliseconds: 0, months: 0};

        res.months = other.month() - base.month() +
            (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
            --res.months;
        }

        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

        return res;
    }

    function momentsDifference(base, other) {
        var res;
        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
        } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }

        return res;
    }

    function createAdder(direction, name) {
        return function (val, period) {
            var dur, tmp;
            //invert the arguments, but complain about it
            if (period !== null && !isNaN(+period)) {
                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period).');
                tmp = val; val = period; period = tmp;
            }

            val = typeof val === 'string' ? +val : val;
            dur = create__createDuration(val, period);
            add_subtract__addSubtract(this, dur, direction);
            return this;
        };
    }

    function add_subtract__addSubtract (mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds,
            days = duration._days,
            months = duration._months;
        updateOffset = updateOffset == null ? true : updateOffset;

        if (milliseconds) {
            mom._d.setTime(+mom._d + milliseconds * isAdding);
        }
        if (days) {
            get_set__set(mom, 'Date', get_set__get(mom, 'Date') + days * isAdding);
        }
        if (months) {
            setMonth(mom, get_set__get(mom, 'Month') + months * isAdding);
        }
        if (updateOffset) {
            utils_hooks__hooks.updateOffset(mom, days || months);
        }
    }

    var add_subtract__add      = createAdder(1, 'add');
    var add_subtract__subtract = createAdder(-1, 'subtract');

    function moment_calendar__calendar (time, formats) {
        // We want to compare the start of today, vs this.
        // Getting start-of-today depends on whether we're local/utc/offset or not.
        var now = time || local__createLocal(),
            sod = cloneWithOffset(now, this).startOf('day'),
            diff = this.diff(sod, 'days', true),
            format = diff < -6 ? 'sameElse' :
                diff < -1 ? 'lastWeek' :
                diff < 0 ? 'lastDay' :
                diff < 1 ? 'sameDay' :
                diff < 2 ? 'nextDay' :
                diff < 7 ? 'nextWeek' : 'sameElse';
        return this.format(formats && formats[format] || this.localeData().calendar(format, this, local__createLocal(now)));
    }

    function clone () {
        return new Moment(this);
    }

    function isAfter (input, units) {
        var inputMs;
        units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');
        if (units === 'millisecond') {
            input = isMoment(input) ? input : local__createLocal(input);
            return +this > +input;
        } else {
            inputMs = isMoment(input) ? +input : +local__createLocal(input);
            return inputMs < +this.clone().startOf(units);
        }
    }

    function isBefore (input, units) {
        var inputMs;
        units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');
        if (units === 'millisecond') {
            input = isMoment(input) ? input : local__createLocal(input);
            return +this < +input;
        } else {
            inputMs = isMoment(input) ? +input : +local__createLocal(input);
            return +this.clone().endOf(units) < inputMs;
        }
    }

    function isBetween (from, to, units) {
        return this.isAfter(from, units) && this.isBefore(to, units);
    }

    function isSame (input, units) {
        var inputMs;
        units = normalizeUnits(units || 'millisecond');
        if (units === 'millisecond') {
            input = isMoment(input) ? input : local__createLocal(input);
            return +this === +input;
        } else {
            inputMs = +local__createLocal(input);
            return +(this.clone().startOf(units)) <= inputMs && inputMs <= +(this.clone().endOf(units));
        }
    }

    function diff (input, units, asFloat) {
        var that = cloneWithOffset(input, this),
            zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4,
            delta, output;

        units = normalizeUnits(units);

        if (units === 'year' || units === 'month' || units === 'quarter') {
            output = monthDiff(this, that);
            if (units === 'quarter') {
                output = output / 3;
            } else if (units === 'year') {
                output = output / 12;
            }
        } else {
            delta = this - that;
            output = units === 'second' ? delta / 1e3 : // 1000
                units === 'minute' ? delta / 6e4 : // 1000 * 60
                units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60
                units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
                units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
                delta;
        }
        return asFloat ? output : absFloor(output);
    }

    function monthDiff (a, b) {
        // difference in months
        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
            // b is in (anchor - 1 month, anchor + 1 month)
            anchor = a.clone().add(wholeMonthDiff, 'months'),
            anchor2, adjust;

        if (b - anchor < 0) {
            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor - anchor2);
        } else {
            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor2 - anchor);
        }

        return -(wholeMonthDiff + adjust);
    }

    utils_hooks__hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';

    function toString () {
        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
    }

    function moment_format__toISOString () {
        var m = this.clone().utc();
        if (0 < m.year() && m.year() <= 9999) {
            if ('function' === typeof Date.prototype.toISOString) {
                // native implementation is ~50x faster, use it when we can
                return this.toDate().toISOString();
            } else {
                return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
            }
        } else {
            return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
        }
    }

    function format (inputString) {
        var output = formatMoment(this, inputString || utils_hooks__hooks.defaultFormat);
        return this.localeData().postformat(output);
    }

    function from (time, withoutSuffix) {
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }
        return create__createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
    }

    function fromNow (withoutSuffix) {
        return this.from(local__createLocal(), withoutSuffix);
    }

    function to (time, withoutSuffix) {
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }
        return create__createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
    }

    function toNow (withoutSuffix) {
        return this.to(local__createLocal(), withoutSuffix);
    }

    function locale (key) {
        var newLocaleData;

        if (key === undefined) {
            return this._locale._abbr;
        } else {
            newLocaleData = locale_locales__getLocale(key);
            if (newLocaleData != null) {
                this._locale = newLocaleData;
            }
            return this;
        }
    }

    var lang = deprecate(
        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
        function (key) {
            if (key === undefined) {
                return this.localeData();
            } else {
                return this.locale(key);
            }
        }
    );

    function localeData () {
        return this._locale;
    }

    function startOf (units) {
        units = normalizeUnits(units);
        // the following switch intentionally omits break keywords
        // to utilize falling through the cases.
        switch (units) {
        case 'year':
            this.month(0);
            /* falls through */
        case 'quarter':
        case 'month':
            this.date(1);
            /* falls through */
        case 'week':
        case 'isoWeek':
        case 'day':
            this.hours(0);
            /* falls through */
        case 'hour':
            this.minutes(0);
            /* falls through */
        case 'minute':
            this.seconds(0);
            /* falls through */
        case 'second':
            this.milliseconds(0);
        }

        // weeks are a special case
        if (units === 'week') {
            this.weekday(0);
        }
        if (units === 'isoWeek') {
            this.isoWeekday(1);
        }

        // quarters are also special
        if (units === 'quarter') {
            this.month(Math.floor(this.month() / 3) * 3);
        }

        return this;
    }

    function endOf (units) {
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond') {
            return this;
        }
        return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
    }

    function to_type__valueOf () {
        return +this._d - ((this._offset || 0) * 60000);
    }

    function unix () {
        return Math.floor(+this / 1000);
    }

    function toDate () {
        return this._offset ? new Date(+this) : this._d;
    }

    function toArray () {
        var m = this;
        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
    }

    function toObject () {
        var m = this;
        return {
            years: m.year(),
            months: m.month(),
            date: m.date(),
            hours: m.hours(),
            minutes: m.minutes(),
            seconds: m.seconds(),
            milliseconds: m.milliseconds()
        };
    }

    function moment_valid__isValid () {
        return valid__isValid(this);
    }

    function parsingFlags () {
        return extend({}, getParsingFlags(this));
    }

    function invalidAt () {
        return getParsingFlags(this).overflow;
    }

    addFormatToken(0, ['gg', 2], 0, function () {
        return this.weekYear() % 100;
    });

    addFormatToken(0, ['GG', 2], 0, function () {
        return this.isoWeekYear() % 100;
    });

    function addWeekYearFormatToken (token, getter) {
        addFormatToken(0, [token, token.length], 0, getter);
    }

    addWeekYearFormatToken('gggg',     'weekYear');
    addWeekYearFormatToken('ggggg',    'weekYear');
    addWeekYearFormatToken('GGGG',  'isoWeekYear');
    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

    // ALIASES

    addUnitAlias('weekYear', 'gg');
    addUnitAlias('isoWeekYear', 'GG');

    // PARSING

    addRegexToken('G',      matchSigned);
    addRegexToken('g',      matchSigned);
    addRegexToken('GG',     match1to2, match2);
    addRegexToken('gg',     match1to2, match2);
    addRegexToken('GGGG',   match1to4, match4);
    addRegexToken('gggg',   match1to4, match4);
    addRegexToken('GGGGG',  match1to6, match6);
    addRegexToken('ggggg',  match1to6, match6);

    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
        week[token.substr(0, 2)] = toInt(input);
    });

    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
        week[token] = utils_hooks__hooks.parseTwoDigitYear(input);
    });

    // HELPERS

    function weeksInYear(year, dow, doy) {
        return weekOfYear(local__createLocal([year, 11, 31 + dow - doy]), dow, doy).week;
    }

    // MOMENTS

    function getSetWeekYear (input) {
        var year = weekOfYear(this, this.localeData()._week.dow, this.localeData()._week.doy).year;
        return input == null ? year : this.add((input - year), 'y');
    }

    function getSetISOWeekYear (input) {
        var year = weekOfYear(this, 1, 4).year;
        return input == null ? year : this.add((input - year), 'y');
    }

    function getISOWeeksInYear () {
        return weeksInYear(this.year(), 1, 4);
    }

    function getWeeksInYear () {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }

    addFormatToken('Q', 0, 0, 'quarter');

    // ALIASES

    addUnitAlias('quarter', 'Q');

    // PARSING

    addRegexToken('Q', match1);
    addParseToken('Q', function (input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
    });

    // MOMENTS

    function getSetQuarter (input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
    }

    addFormatToken('D', ['DD', 2], 'Do', 'date');

    // ALIASES

    addUnitAlias('date', 'D');

    // PARSING

    addRegexToken('D',  match1to2);
    addRegexToken('DD', match1to2, match2);
    addRegexToken('Do', function (isStrict, locale) {
        return isStrict ? locale._ordinalParse : locale._ordinalParseLenient;
    });

    addParseToken(['D', 'DD'], DATE);
    addParseToken('Do', function (input, array) {
        array[DATE] = toInt(input.match(match1to2)[0], 10);
    });

    // MOMENTS

    var getSetDayOfMonth = makeGetSet('Date', true);

    addFormatToken('d', 0, 'do', 'day');

    addFormatToken('dd', 0, 0, function (format) {
        return this.localeData().weekdaysMin(this, format);
    });

    addFormatToken('ddd', 0, 0, function (format) {
        return this.localeData().weekdaysShort(this, format);
    });

    addFormatToken('dddd', 0, 0, function (format) {
        return this.localeData().weekdays(this, format);
    });

    addFormatToken('e', 0, 0, 'weekday');
    addFormatToken('E', 0, 0, 'isoWeekday');

    // ALIASES

    addUnitAlias('day', 'd');
    addUnitAlias('weekday', 'e');
    addUnitAlias('isoWeekday', 'E');

    // PARSING

    addRegexToken('d',    match1to2);
    addRegexToken('e',    match1to2);
    addRegexToken('E',    match1to2);
    addRegexToken('dd',   matchWord);
    addRegexToken('ddd',  matchWord);
    addRegexToken('dddd', matchWord);

    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config) {
        var weekday = config._locale.weekdaysParse(input);
        // if we didn't get a weekday name, mark the date as invalid
        if (weekday != null) {
            week.d = weekday;
        } else {
            getParsingFlags(config).invalidWeekday = input;
        }
    });

    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
        week[token] = toInt(input);
    });

    // HELPERS

    function parseWeekday(input, locale) {
        if (typeof input !== 'string') {
            return input;
        }

        if (!isNaN(input)) {
            return parseInt(input, 10);
        }

        input = locale.weekdaysParse(input);
        if (typeof input === 'number') {
            return input;
        }

        return null;
    }

    // LOCALES

    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
    function localeWeekdays (m) {
        return this._weekdays[m.day()];
    }

    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
    function localeWeekdaysShort (m) {
        return this._weekdaysShort[m.day()];
    }

    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
    function localeWeekdaysMin (m) {
        return this._weekdaysMin[m.day()];
    }

    function localeWeekdaysParse (weekdayName) {
        var i, mom, regex;

        this._weekdaysParse = this._weekdaysParse || [];

        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already
            if (!this._weekdaysParse[i]) {
                mom = local__createLocal([2000, 1]).day(i);
                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (this._weekdaysParse[i].test(weekdayName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function getSetDayOfWeek (input) {
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
            input = parseWeekday(input, this.localeData());
            return this.add(input - day, 'd');
        } else {
            return day;
        }
    }

    function getSetLocaleDayOfWeek (input) {
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd');
    }

    function getSetISODayOfWeek (input) {
        // behaves the same as moment#day except
        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
        // as a setter, sunday should belong to the previous week.
        return input == null ? this.day() || 7 : this.day(this.day() % 7 ? input : input - 7);
    }

    addFormatToken('H', ['HH', 2], 0, 'hour');
    addFormatToken('h', ['hh', 2], 0, function () {
        return this.hours() % 12 || 12;
    });

    function meridiem (token, lowercase) {
        addFormatToken(token, 0, 0, function () {
            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
        });
    }

    meridiem('a', true);
    meridiem('A', false);

    // ALIASES

    addUnitAlias('hour', 'h');

    // PARSING

    function matchMeridiem (isStrict, locale) {
        return locale._meridiemParse;
    }

    addRegexToken('a',  matchMeridiem);
    addRegexToken('A',  matchMeridiem);
    addRegexToken('H',  match1to2);
    addRegexToken('h',  match1to2);
    addRegexToken('HH', match1to2, match2);
    addRegexToken('hh', match1to2, match2);

    addParseToken(['H', 'HH'], HOUR);
    addParseToken(['a', 'A'], function (input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
    });
    addParseToken(['h', 'hh'], function (input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
    });

    // LOCALES

    function localeIsPM (input) {
        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
        // Using charAt should be more compatible.
        return ((input + '').toLowerCase().charAt(0) === 'p');
    }

    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
    function localeMeridiem (hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'pm' : 'PM';
        } else {
            return isLower ? 'am' : 'AM';
        }
    }


    // MOMENTS

    // Setting the hour should keep the time, because the user explicitly
    // specified which hour he wants. So trying to maintain the same hour (in
    // a new timezone) makes sense. Adding/subtracting hours does not follow
    // this rule.
    var getSetHour = makeGetSet('Hours', true);

    addFormatToken('m', ['mm', 2], 0, 'minute');

    // ALIASES

    addUnitAlias('minute', 'm');

    // PARSING

    addRegexToken('m',  match1to2);
    addRegexToken('mm', match1to2, match2);
    addParseToken(['m', 'mm'], MINUTE);

    // MOMENTS

    var getSetMinute = makeGetSet('Minutes', false);

    addFormatToken('s', ['ss', 2], 0, 'second');

    // ALIASES

    addUnitAlias('second', 's');

    // PARSING

    addRegexToken('s',  match1to2);
    addRegexToken('ss', match1to2, match2);
    addParseToken(['s', 'ss'], SECOND);

    // MOMENTS

    var getSetSecond = makeGetSet('Seconds', false);

    addFormatToken('S', 0, 0, function () {
        return ~~(this.millisecond() / 100);
    });

    addFormatToken(0, ['SS', 2], 0, function () {
        return ~~(this.millisecond() / 10);
    });

    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
    addFormatToken(0, ['SSSS', 4], 0, function () {
        return this.millisecond() * 10;
    });
    addFormatToken(0, ['SSSSS', 5], 0, function () {
        return this.millisecond() * 100;
    });
    addFormatToken(0, ['SSSSSS', 6], 0, function () {
        return this.millisecond() * 1000;
    });
    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
        return this.millisecond() * 10000;
    });
    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
        return this.millisecond() * 100000;
    });
    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
        return this.millisecond() * 1000000;
    });


    // ALIASES

    addUnitAlias('millisecond', 'ms');

    // PARSING

    addRegexToken('S',    match1to3, match1);
    addRegexToken('SS',   match1to3, match2);
    addRegexToken('SSS',  match1to3, match3);

    var token;
    for (token = 'SSSS'; token.length <= 9; token += 'S') {
        addRegexToken(token, matchUnsigned);
    }

    function parseMs(input, array) {
        array[MILLISECOND] = toInt(('0.' + input) * 1000);
    }

    for (token = 'S'; token.length <= 9; token += 'S') {
        addParseToken(token, parseMs);
    }
    // MOMENTS

    var getSetMillisecond = makeGetSet('Milliseconds', false);

    addFormatToken('z',  0, 0, 'zoneAbbr');
    addFormatToken('zz', 0, 0, 'zoneName');

    // MOMENTS

    function getZoneAbbr () {
        return this._isUTC ? 'UTC' : '';
    }

    function getZoneName () {
        return this._isUTC ? 'Coordinated Universal Time' : '';
    }

    var momentPrototype__proto = Moment.prototype;

    momentPrototype__proto.add          = add_subtract__add;
    momentPrototype__proto.calendar     = moment_calendar__calendar;
    momentPrototype__proto.clone        = clone;
    momentPrototype__proto.diff         = diff;
    momentPrototype__proto.endOf        = endOf;
    momentPrototype__proto.format       = format;
    momentPrototype__proto.from         = from;
    momentPrototype__proto.fromNow      = fromNow;
    momentPrototype__proto.to           = to;
    momentPrototype__proto.toNow        = toNow;
    momentPrototype__proto.get          = getSet;
    momentPrototype__proto.invalidAt    = invalidAt;
    momentPrototype__proto.isAfter      = isAfter;
    momentPrototype__proto.isBefore     = isBefore;
    momentPrototype__proto.isBetween    = isBetween;
    momentPrototype__proto.isSame       = isSame;
    momentPrototype__proto.isValid      = moment_valid__isValid;
    momentPrototype__proto.lang         = lang;
    momentPrototype__proto.locale       = locale;
    momentPrototype__proto.localeData   = localeData;
    momentPrototype__proto.max          = prototypeMax;
    momentPrototype__proto.min          = prototypeMin;
    momentPrototype__proto.parsingFlags = parsingFlags;
    momentPrototype__proto.set          = getSet;
    momentPrototype__proto.startOf      = startOf;
    momentPrototype__proto.subtract     = add_subtract__subtract;
    momentPrototype__proto.toArray      = toArray;
    momentPrototype__proto.toObject     = toObject;
    momentPrototype__proto.toDate       = toDate;
    momentPrototype__proto.toISOString  = moment_format__toISOString;
    momentPrototype__proto.toJSON       = moment_format__toISOString;
    momentPrototype__proto.toString     = toString;
    momentPrototype__proto.unix         = unix;
    momentPrototype__proto.valueOf      = to_type__valueOf;

    // Year
    momentPrototype__proto.year       = getSetYear;
    momentPrototype__proto.isLeapYear = getIsLeapYear;

    // Week Year
    momentPrototype__proto.weekYear    = getSetWeekYear;
    momentPrototype__proto.isoWeekYear = getSetISOWeekYear;

    // Quarter
    momentPrototype__proto.quarter = momentPrototype__proto.quarters = getSetQuarter;

    // Month
    momentPrototype__proto.month       = getSetMonth;
    momentPrototype__proto.daysInMonth = getDaysInMonth;

    // Week
    momentPrototype__proto.week           = momentPrototype__proto.weeks        = getSetWeek;
    momentPrototype__proto.isoWeek        = momentPrototype__proto.isoWeeks     = getSetISOWeek;
    momentPrototype__proto.weeksInYear    = getWeeksInYear;
    momentPrototype__proto.isoWeeksInYear = getISOWeeksInYear;

    // Day
    momentPrototype__proto.date       = getSetDayOfMonth;
    momentPrototype__proto.day        = momentPrototype__proto.days             = getSetDayOfWeek;
    momentPrototype__proto.weekday    = getSetLocaleDayOfWeek;
    momentPrototype__proto.isoWeekday = getSetISODayOfWeek;
    momentPrototype__proto.dayOfYear  = getSetDayOfYear;

    // Hour
    momentPrototype__proto.hour = momentPrototype__proto.hours = getSetHour;

    // Minute
    momentPrototype__proto.minute = momentPrototype__proto.minutes = getSetMinute;

    // Second
    momentPrototype__proto.second = momentPrototype__proto.seconds = getSetSecond;

    // Millisecond
    momentPrototype__proto.millisecond = momentPrototype__proto.milliseconds = getSetMillisecond;

    // Offset
    momentPrototype__proto.utcOffset            = getSetOffset;
    momentPrototype__proto.utc                  = setOffsetToUTC;
    momentPrototype__proto.local                = setOffsetToLocal;
    momentPrototype__proto.parseZone            = setOffsetToParsedOffset;
    momentPrototype__proto.hasAlignedHourOffset = hasAlignedHourOffset;
    momentPrototype__proto.isDST                = isDaylightSavingTime;
    momentPrototype__proto.isDSTShifted         = isDaylightSavingTimeShifted;
    momentPrototype__proto.isLocal              = isLocal;
    momentPrototype__proto.isUtcOffset          = isUtcOffset;
    momentPrototype__proto.isUtc                = isUtc;
    momentPrototype__proto.isUTC                = isUtc;

    // Timezone
    momentPrototype__proto.zoneAbbr = getZoneAbbr;
    momentPrototype__proto.zoneName = getZoneName;

    // Deprecations
    momentPrototype__proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
    momentPrototype__proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
    momentPrototype__proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
    momentPrototype__proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779', getSetZone);

    var momentPrototype = momentPrototype__proto;

    function moment__createUnix (input) {
        return local__createLocal(input * 1000);
    }

    function moment__createInZone () {
        return local__createLocal.apply(null, arguments).parseZone();
    }

    var defaultCalendar = {
        sameDay : '[Today at] LT',
        nextDay : '[Tomorrow at] LT',
        nextWeek : 'dddd [at] LT',
        lastDay : '[Yesterday at] LT',
        lastWeek : '[Last] dddd [at] LT',
        sameElse : 'L'
    };

    function locale_calendar__calendar (key, mom, now) {
        var output = this._calendar[key];
        return typeof output === 'function' ? output.call(mom, now) : output;
    }

    var defaultLongDateFormat = {
        LTS  : 'h:mm:ss A',
        LT   : 'h:mm A',
        L    : 'MM/DD/YYYY',
        LL   : 'MMMM D, YYYY',
        LLL  : 'MMMM D, YYYY h:mm A',
        LLLL : 'dddd, MMMM D, YYYY h:mm A'
    };

    function longDateFormat (key) {
        var format = this._longDateFormat[key],
            formatUpper = this._longDateFormat[key.toUpperCase()];

        if (format || !formatUpper) {
            return format;
        }

        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
            return val.slice(1);
        });

        return this._longDateFormat[key];
    }

    var defaultInvalidDate = 'Invalid date';

    function invalidDate () {
        return this._invalidDate;
    }

    var defaultOrdinal = '%d';
    var defaultOrdinalParse = /\d{1,2}/;

    function ordinal (number) {
        return this._ordinal.replace('%d', number);
    }

    function preParsePostFormat (string) {
        return string;
    }

    var defaultRelativeTime = {
        future : 'in %s',
        past   : '%s ago',
        s  : 'a few seconds',
        m  : 'a minute',
        mm : '%d minutes',
        h  : 'an hour',
        hh : '%d hours',
        d  : 'a day',
        dd : '%d days',
        M  : 'a month',
        MM : '%d months',
        y  : 'a year',
        yy : '%d years'
    };

    function relative__relativeTime (number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return (typeof output === 'function') ?
            output(number, withoutSuffix, string, isFuture) :
            output.replace(/%d/i, number);
    }

    function pastFuture (diff, output) {
        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
        return typeof format === 'function' ? format(output) : format.replace(/%s/i, output);
    }

    function locale_set__set (config) {
        var prop, i;
        for (i in config) {
            prop = config[i];
            if (typeof prop === 'function') {
                this[i] = prop;
            } else {
                this['_' + i] = prop;
            }
        }
        // Lenient ordinal parsing accepts just a number in addition to
        // number + (possibly) stuff coming from _ordinalParseLenient.
        this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + (/\d{1,2}/).source);
    }

    var prototype__proto = Locale.prototype;

    prototype__proto._calendar       = defaultCalendar;
    prototype__proto.calendar        = locale_calendar__calendar;
    prototype__proto._longDateFormat = defaultLongDateFormat;
    prototype__proto.longDateFormat  = longDateFormat;
    prototype__proto._invalidDate    = defaultInvalidDate;
    prototype__proto.invalidDate     = invalidDate;
    prototype__proto._ordinal        = defaultOrdinal;
    prototype__proto.ordinal         = ordinal;
    prototype__proto._ordinalParse   = defaultOrdinalParse;
    prototype__proto.preparse        = preParsePostFormat;
    prototype__proto.postformat      = preParsePostFormat;
    prototype__proto._relativeTime   = defaultRelativeTime;
    prototype__proto.relativeTime    = relative__relativeTime;
    prototype__proto.pastFuture      = pastFuture;
    prototype__proto.set             = locale_set__set;

    // Month
    prototype__proto.months       =        localeMonths;
    prototype__proto._months      = defaultLocaleMonths;
    prototype__proto.monthsShort  =        localeMonthsShort;
    prototype__proto._monthsShort = defaultLocaleMonthsShort;
    prototype__proto.monthsParse  =        localeMonthsParse;

    // Week
    prototype__proto.week = localeWeek;
    prototype__proto._week = defaultLocaleWeek;
    prototype__proto.firstDayOfYear = localeFirstDayOfYear;
    prototype__proto.firstDayOfWeek = localeFirstDayOfWeek;

    // Day of Week
    prototype__proto.weekdays       =        localeWeekdays;
    prototype__proto._weekdays      = defaultLocaleWeekdays;
    prototype__proto.weekdaysMin    =        localeWeekdaysMin;
    prototype__proto._weekdaysMin   = defaultLocaleWeekdaysMin;
    prototype__proto.weekdaysShort  =        localeWeekdaysShort;
    prototype__proto._weekdaysShort = defaultLocaleWeekdaysShort;
    prototype__proto.weekdaysParse  =        localeWeekdaysParse;

    // Hours
    prototype__proto.isPM = localeIsPM;
    prototype__proto._meridiemParse = defaultLocaleMeridiemParse;
    prototype__proto.meridiem = localeMeridiem;

    function lists__get (format, index, field, setter) {
        var locale = locale_locales__getLocale();
        var utc = create_utc__createUTC().set(setter, index);
        return locale[field](utc, format);
    }

    function list (format, index, field, count, setter) {
        if (typeof format === 'number') {
            index = format;
            format = undefined;
        }

        format = format || '';

        if (index != null) {
            return lists__get(format, index, field, setter);
        }

        var i;
        var out = [];
        for (i = 0; i < count; i++) {
            out[i] = lists__get(format, i, field, setter);
        }
        return out;
    }

    function lists__listMonths (format, index) {
        return list(format, index, 'months', 12, 'month');
    }

    function lists__listMonthsShort (format, index) {
        return list(format, index, 'monthsShort', 12, 'month');
    }

    function lists__listWeekdays (format, index) {
        return list(format, index, 'weekdays', 7, 'day');
    }

    function lists__listWeekdaysShort (format, index) {
        return list(format, index, 'weekdaysShort', 7, 'day');
    }

    function lists__listWeekdaysMin (format, index) {
        return list(format, index, 'weekdaysMin', 7, 'day');
    }

    locale_locales__getSetGlobalLocale('en', {
        ordinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (toInt(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        }
    });

    // Side effect imports
    utils_hooks__hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', locale_locales__getSetGlobalLocale);
    utils_hooks__hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', locale_locales__getLocale);

    var mathAbs = Math.abs;

    function duration_abs__abs () {
        var data           = this._data;

        this._milliseconds = mathAbs(this._milliseconds);
        this._days         = mathAbs(this._days);
        this._months       = mathAbs(this._months);

        data.milliseconds  = mathAbs(data.milliseconds);
        data.seconds       = mathAbs(data.seconds);
        data.minutes       = mathAbs(data.minutes);
        data.hours         = mathAbs(data.hours);
        data.months        = mathAbs(data.months);
        data.years         = mathAbs(data.years);

        return this;
    }

    function duration_add_subtract__addSubtract (duration, input, value, direction) {
        var other = create__createDuration(input, value);

        duration._milliseconds += direction * other._milliseconds;
        duration._days         += direction * other._days;
        duration._months       += direction * other._months;

        return duration._bubble();
    }

    // supports only 2.0-style add(1, 's') or add(duration)
    function duration_add_subtract__add (input, value) {
        return duration_add_subtract__addSubtract(this, input, value, 1);
    }

    // supports only 2.0-style subtract(1, 's') or subtract(duration)
    function duration_add_subtract__subtract (input, value) {
        return duration_add_subtract__addSubtract(this, input, value, -1);
    }

    function absCeil (number) {
        if (number < 0) {
            return Math.floor(number);
        } else {
            return Math.ceil(number);
        }
    }

    function bubble () {
        var milliseconds = this._milliseconds;
        var days         = this._days;
        var months       = this._months;
        var data         = this._data;
        var seconds, minutes, hours, years, monthsFromDays;

        // if we have a mix of positive and negative values, bubble down first
        // check: https://github.com/moment/moment/issues/2166
        if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
                (milliseconds <= 0 && days <= 0 && months <= 0))) {
            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
            days = 0;
            months = 0;
        }

        // The following code bubbles up values, see the tests for
        // examples of what that means.
        data.milliseconds = milliseconds % 1000;

        seconds           = absFloor(milliseconds / 1000);
        data.seconds      = seconds % 60;

        minutes           = absFloor(seconds / 60);
        data.minutes      = minutes % 60;

        hours             = absFloor(minutes / 60);
        data.hours        = hours % 24;

        days += absFloor(hours / 24);

        // convert days to months
        monthsFromDays = absFloor(daysToMonths(days));
        months += monthsFromDays;
        days -= absCeil(monthsToDays(monthsFromDays));

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;

        data.days   = days;
        data.months = months;
        data.years  = years;

        return this;
    }

    function daysToMonths (days) {
        // 400 years have 146097 days (taking into account leap year rules)
        // 400 years have 12 months === 4800
        return days * 4800 / 146097;
    }

    function monthsToDays (months) {
        // the reverse of daysToMonths
        return months * 146097 / 4800;
    }

    function as (units) {
        var days;
        var months;
        var milliseconds = this._milliseconds;

        units = normalizeUnits(units);

        if (units === 'month' || units === 'year') {
            days   = this._days   + milliseconds / 864e5;
            months = this._months + daysToMonths(days);
            return units === 'month' ? months : months / 12;
        } else {
            // handle milliseconds separately because of floating point math errors (issue #1867)
            days = this._days + Math.round(monthsToDays(this._months));
            switch (units) {
                case 'week'   : return days / 7     + milliseconds / 6048e5;
                case 'day'    : return days         + milliseconds / 864e5;
                case 'hour'   : return days * 24    + milliseconds / 36e5;
                case 'minute' : return days * 1440  + milliseconds / 6e4;
                case 'second' : return days * 86400 + milliseconds / 1000;
                // Math.floor prevents floating point math errors here
                case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
                default: throw new Error('Unknown unit ' + units);
            }
        }
    }

    // TODO: Use this.as('ms')?
    function duration_as__valueOf () {
        return (
            this._milliseconds +
            this._days * 864e5 +
            (this._months % 12) * 2592e6 +
            toInt(this._months / 12) * 31536e6
        );
    }

    function makeAs (alias) {
        return function () {
            return this.as(alias);
        };
    }

    var asMilliseconds = makeAs('ms');
    var asSeconds      = makeAs('s');
    var asMinutes      = makeAs('m');
    var asHours        = makeAs('h');
    var asDays         = makeAs('d');
    var asWeeks        = makeAs('w');
    var asMonths       = makeAs('M');
    var asYears        = makeAs('y');

    function duration_get__get (units) {
        units = normalizeUnits(units);
        return this[units + 's']();
    }

    function makeGetter(name) {
        return function () {
            return this._data[name];
        };
    }

    var milliseconds = makeGetter('milliseconds');
    var seconds      = makeGetter('seconds');
    var minutes      = makeGetter('minutes');
    var hours        = makeGetter('hours');
    var days         = makeGetter('days');
    var months       = makeGetter('months');
    var years        = makeGetter('years');

    function weeks () {
        return absFloor(this.days() / 7);
    }

    var round = Math.round;
    var thresholds = {
        s: 45,  // seconds to minute
        m: 45,  // minutes to hour
        h: 22,  // hours to day
        d: 26,  // days to month
        M: 11   // months to year
    };

    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }

    function duration_humanize__relativeTime (posNegDuration, withoutSuffix, locale) {
        var duration = create__createDuration(posNegDuration).abs();
        var seconds  = round(duration.as('s'));
        var minutes  = round(duration.as('m'));
        var hours    = round(duration.as('h'));
        var days     = round(duration.as('d'));
        var months   = round(duration.as('M'));
        var years    = round(duration.as('y'));

        var a = seconds < thresholds.s && ['s', seconds]  ||
                minutes === 1          && ['m']           ||
                minutes < thresholds.m && ['mm', minutes] ||
                hours   === 1          && ['h']           ||
                hours   < thresholds.h && ['hh', hours]   ||
                days    === 1          && ['d']           ||
                days    < thresholds.d && ['dd', days]    ||
                months  === 1          && ['M']           ||
                months  < thresholds.M && ['MM', months]  ||
                years   === 1          && ['y']           || ['yy', years];

        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a);
    }

    // This function allows you to set a threshold for relative time strings
    function duration_humanize__getSetRelativeTimeThreshold (threshold, limit) {
        if (thresholds[threshold] === undefined) {
            return false;
        }
        if (limit === undefined) {
            return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        return true;
    }

    function humanize (withSuffix) {
        var locale = this.localeData();
        var output = duration_humanize__relativeTime(this, !withSuffix, locale);

        if (withSuffix) {
            output = locale.pastFuture(+this, output);
        }

        return locale.postformat(output);
    }

    var iso_string__abs = Math.abs;

    function iso_string__toISOString() {
        // for ISO strings we do not use the normal bubbling rules:
        //  * milliseconds bubble up until they become hours
        //  * days do not bubble at all
        //  * months bubble up until they become years
        // This is because there is no context-free conversion between hours and days
        // (think of clock changes)
        // and also not between days and months (28-31 days per month)
        var seconds = iso_string__abs(this._milliseconds) / 1000;
        var days         = iso_string__abs(this._days);
        var months       = iso_string__abs(this._months);
        var minutes, hours, years;

        // 3600 seconds -> 60 minutes -> 1 hour
        minutes           = absFloor(seconds / 60);
        hours             = absFloor(minutes / 60);
        seconds %= 60;
        minutes %= 60;

        // 12 months -> 1 year
        years  = absFloor(months / 12);
        months %= 12;


        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
        var Y = years;
        var M = months;
        var D = days;
        var h = hours;
        var m = minutes;
        var s = seconds;
        var total = this.asSeconds();

        if (!total) {
            // this is the same as C#'s (Noda) and python (isodate)...
            // but not other JS (goog.date)
            return 'P0D';
        }

        return (total < 0 ? '-' : '') +
            'P' +
            (Y ? Y + 'Y' : '') +
            (M ? M + 'M' : '') +
            (D ? D + 'D' : '') +
            ((h || m || s) ? 'T' : '') +
            (h ? h + 'H' : '') +
            (m ? m + 'M' : '') +
            (s ? s + 'S' : '');
    }

    var duration_prototype__proto = Duration.prototype;

    duration_prototype__proto.abs            = duration_abs__abs;
    duration_prototype__proto.add            = duration_add_subtract__add;
    duration_prototype__proto.subtract       = duration_add_subtract__subtract;
    duration_prototype__proto.as             = as;
    duration_prototype__proto.asMilliseconds = asMilliseconds;
    duration_prototype__proto.asSeconds      = asSeconds;
    duration_prototype__proto.asMinutes      = asMinutes;
    duration_prototype__proto.asHours        = asHours;
    duration_prototype__proto.asDays         = asDays;
    duration_prototype__proto.asWeeks        = asWeeks;
    duration_prototype__proto.asMonths       = asMonths;
    duration_prototype__proto.asYears        = asYears;
    duration_prototype__proto.valueOf        = duration_as__valueOf;
    duration_prototype__proto._bubble        = bubble;
    duration_prototype__proto.get            = duration_get__get;
    duration_prototype__proto.milliseconds   = milliseconds;
    duration_prototype__proto.seconds        = seconds;
    duration_prototype__proto.minutes        = minutes;
    duration_prototype__proto.hours          = hours;
    duration_prototype__proto.days           = days;
    duration_prototype__proto.weeks          = weeks;
    duration_prototype__proto.months         = months;
    duration_prototype__proto.years          = years;
    duration_prototype__proto.humanize       = humanize;
    duration_prototype__proto.toISOString    = iso_string__toISOString;
    duration_prototype__proto.toString       = iso_string__toISOString;
    duration_prototype__proto.toJSON         = iso_string__toISOString;
    duration_prototype__proto.locale         = locale;
    duration_prototype__proto.localeData     = localeData;

    // Deprecations
    duration_prototype__proto.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', iso_string__toISOString);
    duration_prototype__proto.lang = lang;

    // Side effect imports

    addFormatToken('X', 0, 0, 'unix');
    addFormatToken('x', 0, 0, 'valueOf');

    // PARSING

    addRegexToken('x', matchSigned);
    addRegexToken('X', matchTimestamp);
    addParseToken('X', function (input, array, config) {
        config._d = new Date(parseFloat(input, 10) * 1000);
    });
    addParseToken('x', function (input, array, config) {
        config._d = new Date(toInt(input));
    });

    // Side effect imports


    utils_hooks__hooks.version = '2.10.6';

    setHookCallback(local__createLocal);

    utils_hooks__hooks.fn                    = momentPrototype;
    utils_hooks__hooks.min                   = min;
    utils_hooks__hooks.max                   = max;
    utils_hooks__hooks.utc                   = create_utc__createUTC;
    utils_hooks__hooks.unix                  = moment__createUnix;
    utils_hooks__hooks.months                = lists__listMonths;
    utils_hooks__hooks.isDate                = isDate;
    utils_hooks__hooks.locale                = locale_locales__getSetGlobalLocale;
    utils_hooks__hooks.invalid               = valid__createInvalid;
    utils_hooks__hooks.duration              = create__createDuration;
    utils_hooks__hooks.isMoment              = isMoment;
    utils_hooks__hooks.weekdays              = lists__listWeekdays;
    utils_hooks__hooks.parseZone             = moment__createInZone;
    utils_hooks__hooks.localeData            = locale_locales__getLocale;
    utils_hooks__hooks.isDuration            = isDuration;
    utils_hooks__hooks.monthsShort           = lists__listMonthsShort;
    utils_hooks__hooks.weekdaysMin           = lists__listWeekdaysMin;
    utils_hooks__hooks.defineLocale          = defineLocale;
    utils_hooks__hooks.weekdaysShort         = lists__listWeekdaysShort;
    utils_hooks__hooks.normalizeUnits        = normalizeUnits;
    utils_hooks__hooks.relativeTimeThreshold = duration_humanize__getSetRelativeTimeThreshold;

    var _moment = utils_hooks__hooks;

    return _moment;

}));
},{}],150:[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ResponderEventPlugin
 */

"use strict";

var EventConstants = require('react/lib/EventConstants');
var EventPluginUtils = require('react/lib/EventPluginUtils');
var EventPropagators = require('react/lib/EventPropagators');
var SyntheticEvent = require('react/lib/SyntheticEvent');

var accumulateInto = require('react/lib/accumulateInto');
var keyOf = require('react/lib/keyOf');

var isStartish = EventPluginUtils.isStartish;
var isMoveish = EventPluginUtils.isMoveish;
var isEndish = EventPluginUtils.isEndish;
var executeDirectDispatch = EventPluginUtils.executeDirectDispatch;
var hasDispatches = EventPluginUtils.hasDispatches;
var executeDispatchesInOrderStopAtTrue =
  EventPluginUtils.executeDispatchesInOrderStopAtTrue;

/**
 * ID of element that should respond to touch/move types of interactions, as
 * indicated explicitly by relevant callbacks.
 */
var responderID = null;
var isPressing = false;

var eventTypes = {
  /**
   * On a `touchStart`/`mouseDown`, is it desired that this element become the
   * responder?
   */
  startShouldSetResponder: {
    phasedRegistrationNames: {
      bubbled: keyOf({onStartShouldSetResponder: null}),
      captured: keyOf({onStartShouldSetResponderCapture: null})
    }
  },

  /**
   * On a `scroll`, is it desired that this element become the responder? This
   * is usually not needed, but should be used to retroactively infer that a
   * `touchStart` had occured during momentum scroll. During a momentum scroll,
   * a touch start will be immediately followed by a scroll event if the view is
   * currently scrolling.
   */
  scrollShouldSetResponder: {
    phasedRegistrationNames: {
      bubbled: keyOf({onScrollShouldSetResponder: null}),
      captured: keyOf({onScrollShouldSetResponderCapture: null})
    }
  },

  /**
   * On a `touchMove`/`mouseMove`, is it desired that this element become the
   * responder?
   */
  moveShouldSetResponder: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMoveShouldSetResponder: null}),
      captured: keyOf({onMoveShouldSetResponderCapture: null})
    }
  },

  /**
   * Direct responder events dispatched directly to responder. Do not bubble.
   */
  responderMove: {registrationName: keyOf({onResponderMove: null})},
  responderRelease: {registrationName: keyOf({onResponderRelease: null})},
  responderTerminationRequest: {
    registrationName: keyOf({onResponderTerminationRequest: null})
  },
  responderGrant: {registrationName: keyOf({onResponderGrant: null})},
  responderReject: {registrationName: keyOf({onResponderReject: null})},
  responderTerminate: {registrationName: keyOf({onResponderTerminate: null})}
};

/**
 * Performs negotiation between any existing/current responder, checks to see if
 * any new entity is interested in becoming responder, performs that handshake
 * and returns any events that must be emitted to notify the relevant parties.
 *
 * A note about event ordering in the `EventPluginHub`.
 *
 * Suppose plugins are injected in the following order:
 *
 * `[R, S, C]`
 *
 * To help illustrate the example, assume `S` is `SimpleEventPlugin` (for
 * `onClick` etc) and `R` is `ResponderEventPlugin`.
 *
 * "Deferred-Dispatched Events":
 *
 * - The current event plugin system will traverse the list of injected plugins,
 *   in order, and extract events by collecting the plugin's return value of
 *   `extractEvents()`.
 * - These events that are returned from `extractEvents` are "deferred
 *   dispatched events".
 * - When returned from `extractEvents`, deferred-dispatched events contain an
 *   "accumulation" of deferred dispatches.
 * - These deferred dispatches are accumulated/collected before they are
 *   returned, but processed at a later time by the `EventPluginHub` (hence the
 *   name deferred).
 *
 * In the process of returning their deferred-dispatched events, event plugins
 * themselves can dispatch events on-demand without returning them from
 * `extractEvents`. Plugins might want to do this, so that they can use event
 * dispatching as a tool that helps them decide which events should be extracted
 * in the first place.
 *
 * "On-Demand-Dispatched Events":
 *
 * - On-demand-dispatched events are not returned from `extractEvents`.
 * - On-demand-dispatched events are dispatched during the process of returning
 *   the deferred-dispatched events.
 * - They should not have side effects.
 * - They should be avoided, and/or eventually be replaced with another
 *   abstraction that allows event plugins to perform multiple "rounds" of event
 *   extraction.
 *
 * Therefore, the sequence of event dispatches becomes:
 *
 * - `R`s on-demand events (if any)   (dispatched by `R` on-demand)
 * - `S`s on-demand events (if any)   (dispatched by `S` on-demand)
 * - `C`s on-demand events (if any)   (dispatched by `C` on-demand)
 * - `R`s extracted events (if any)   (dispatched by `EventPluginHub`)
 * - `S`s extracted events (if any)   (dispatched by `EventPluginHub`)
 * - `C`s extracted events (if any)   (dispatched by `EventPluginHub`)
 *
 * In the case of `ResponderEventPlugin`: If the `startShouldSetResponder`
 * on-demand dispatch returns `true` (and some other details are satisfied) the
 * `onResponderGrant` deferred dispatched event is returned from
 * `extractEvents`. The sequence of dispatch executions in this case
 * will appear as follows:
 *
 * - `startShouldSetResponder` (`ResponderEventPlugin` dispatches on-demand)
 * - `touchStartCapture`       (`EventPluginHub` dispatches as usual)
 * - `touchStart`              (`EventPluginHub` dispatches as usual)
 * - `responderGrant/Reject`   (`EventPluginHub` dispatches as usual)
 *
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {string} topLevelTargetID ID of deepest React rendered element.
 * @param {object} nativeEvent Native browser event.
 * @return {*} An accumulation of synthetic events.
 */
function setResponderAndExtractTransfer(
    topLevelType,
    topLevelTargetID,
    nativeEvent) {
  var shouldSetEventType =
    isStartish(topLevelType) ? eventTypes.startShouldSetResponder :
    isMoveish(topLevelType) ? eventTypes.moveShouldSetResponder :
    eventTypes.scrollShouldSetResponder;

  var bubbleShouldSetFrom = responderID || topLevelTargetID;
  var shouldSetEvent = SyntheticEvent.getPooled(
    shouldSetEventType,
    bubbleShouldSetFrom,
    nativeEvent
  );
  EventPropagators.accumulateTwoPhaseDispatches(shouldSetEvent);
  var wantsResponderID = executeDispatchesInOrderStopAtTrue(shouldSetEvent);
  if (!shouldSetEvent.isPersistent()) {
    shouldSetEvent.constructor.release(shouldSetEvent);
  }

  if (!wantsResponderID || wantsResponderID === responderID) {
    return null;
  }
  var extracted;
  var grantEvent = SyntheticEvent.getPooled(
    eventTypes.responderGrant,
    wantsResponderID,
    nativeEvent
  );

  EventPropagators.accumulateDirectDispatches(grantEvent);
  if (responderID) {
    var terminationRequestEvent = SyntheticEvent.getPooled(
      eventTypes.responderTerminationRequest,
      responderID,
      nativeEvent
    );
    EventPropagators.accumulateDirectDispatches(terminationRequestEvent);
    var shouldSwitch = !hasDispatches(terminationRequestEvent) ||
      executeDirectDispatch(terminationRequestEvent);
    if (!terminationRequestEvent.isPersistent()) {
      terminationRequestEvent.constructor.release(terminationRequestEvent);
    }

    if (shouldSwitch) {
      var terminateType = eventTypes.responderTerminate;
      var terminateEvent = SyntheticEvent.getPooled(
        terminateType,
        responderID,
        nativeEvent
      );
      EventPropagators.accumulateDirectDispatches(terminateEvent);
      extracted = accumulateInto(extracted, [grantEvent, terminateEvent]);
      responderID = wantsResponderID;
    } else {
      var rejectEvent = SyntheticEvent.getPooled(
        eventTypes.responderReject,
        wantsResponderID,
        nativeEvent
      );
      EventPropagators.accumulateDirectDispatches(rejectEvent);
      extracted = accumulateInto(extracted, rejectEvent);
    }
  } else {
    extracted = accumulateInto(extracted, grantEvent);
    responderID = wantsResponderID;
  }
  return extracted;
}

/**
 * A transfer is a negotiation between a currently set responder and the next
 * element to claim responder status. Any start event could trigger a transfer
 * of responderID. Any move event could trigger a transfer, so long as there is
 * currently a responder set (in other words as long as the user is pressing
 * down).
 *
 * @param {string} topLevelType Record from `EventConstants`.
 * @return {boolean} True if a transfer of responder could possibly occur.
 */
function canTriggerTransfer(topLevelType) {
  return topLevelType === EventConstants.topLevelTypes.topScroll ||
         isStartish(topLevelType) ||
         (isPressing && isMoveish(topLevelType));
}

/**
 * Event plugin for formalizing the negotiation between claiming locks on
 * receiving touches.
 */
var ResponderEventPlugin = {

  getResponderID: function() {
    return responderID;
  },

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var extracted;
    // Must have missed an end event - reset the state here.
    if (responderID && isStartish(topLevelType)) {
      responderID = null;
    }
    if (isStartish(topLevelType)) {
      isPressing = true;
    } else if (isEndish(topLevelType)) {
      isPressing = false;
    }
    if (canTriggerTransfer(topLevelType)) {
      var transfer = setResponderAndExtractTransfer(
        topLevelType,
        topLevelTargetID,
        nativeEvent
      );
      if (transfer) {
        extracted = accumulateInto(extracted, transfer);
      }
    }
    // Now that we know the responder is set correctly, we can dispatch
    // responder type events (directly to the responder).
    var type = isMoveish(topLevelType) ? eventTypes.responderMove :
      isEndish(topLevelType) ? eventTypes.responderRelease :
      isStartish(topLevelType) ? eventTypes.responderStart : null;
    if (type) {
      var gesture = SyntheticEvent.getPooled(
        type,
        responderID || '',
        nativeEvent
      );
      EventPropagators.accumulateDirectDispatches(gesture);
      extracted = accumulateInto(extracted, gesture);
    }
    if (type === eventTypes.responderRelease) {
      responderID = null;
    }
    return extracted;
  }

};

module.exports = ResponderEventPlugin;

},{"react/lib/EventConstants":169,"react/lib/EventPluginUtils":173,"react/lib/EventPropagators":174,"react/lib/SyntheticEvent":262,"react/lib/accumulateInto":272,"react/lib/keyOf":311}],151:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule TapEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = require('react/lib/EventConstants');
var EventPluginUtils = require('react/lib/EventPluginUtils');
var EventPropagators = require('react/lib/EventPropagators');
var SyntheticUIEvent = require('react/lib/SyntheticUIEvent');
var TouchEventUtils = require('./TouchEventUtils');
var ViewportMetrics = require('react/lib/ViewportMetrics');

var keyOf = require('react/lib/keyOf');
var topLevelTypes = EventConstants.topLevelTypes;

var isStartish = EventPluginUtils.isStartish;
var isEndish = EventPluginUtils.isEndish;

var isTouch = function(topLevelType) {
  var touchTypes = [
    topLevelTypes.topTouchCancel,
    topLevelTypes.topTouchEnd,
    topLevelTypes.topTouchStart,
    topLevelTypes.topTouchMove
  ];
  return touchTypes.indexOf(topLevelType) >= 0;
}

/**
 * Number of pixels that are tolerated in between a `touchStart` and `touchEnd`
 * in order to still be considered a 'tap' event.
 */
var tapMoveThreshold = 10;
var ignoreMouseThreshold = 750;
var startCoords = {x: null, y: null};
var lastTouchEvent = null;

var Axis = {
  x: {page: 'pageX', client: 'clientX', envScroll: 'currentPageScrollLeft'},
  y: {page: 'pageY', client: 'clientY', envScroll: 'currentPageScrollTop'}
};

function getAxisCoordOfEvent(axis, nativeEvent) {
  var singleTouch = TouchEventUtils.extractSingleTouch(nativeEvent);
  if (singleTouch) {
    return singleTouch[axis.page];
  }
  return axis.page in nativeEvent ?
    nativeEvent[axis.page] :
    nativeEvent[axis.client] + ViewportMetrics[axis.envScroll];
}

function getDistance(coords, nativeEvent) {
  var pageX = getAxisCoordOfEvent(Axis.x, nativeEvent);
  var pageY = getAxisCoordOfEvent(Axis.y, nativeEvent);
  return Math.pow(
    Math.pow(pageX - coords.x, 2) + Math.pow(pageY - coords.y, 2),
    0.5
  );
}

var dependencies = [
  topLevelTypes.topMouseDown,
  topLevelTypes.topMouseMove,
  topLevelTypes.topMouseUp
];

if (EventPluginUtils.useTouchEvents) {
  dependencies.push(
    topLevelTypes.topTouchEnd,
    topLevelTypes.topTouchStart,
    topLevelTypes.topTouchMove
  );
}

var eventTypes = {
  touchTap: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchTap: null}),
      captured: keyOf({onTouchTapCapture: null})
    },
    dependencies: dependencies
  }
};

var now = function() {
  if (Date.now) {
    return Date.now();
  } else {
    // IE8 support: http://stackoverflow.com/questions/9430357/please-explain-why-and-how-new-date-works-as-workaround-for-date-now-in
    return +new Date;
  }
}

var TapEventPlugin = {

  tapMoveThreshold: tapMoveThreshold,

  ignoreMouseThreshold: ignoreMouseThreshold,

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    if (isTouch(topLevelType)) {
      lastTouchEvent = now();
    } else {
      if (lastTouchEvent && (now() - lastTouchEvent) < ignoreMouseThreshold) {
        return null;
      }
    }

    if (!isStartish(topLevelType) && !isEndish(topLevelType)) {
      return null;
    }
    var event = null;
    var distance = getDistance(startCoords, nativeEvent);
    if (isEndish(topLevelType) && distance < tapMoveThreshold) {
      event = SyntheticUIEvent.getPooled(
        eventTypes.touchTap,
        topLevelTargetID,
        nativeEvent
      );
    }
    if (isStartish(topLevelType)) {
      startCoords.x = getAxisCoordOfEvent(Axis.x, nativeEvent);
      startCoords.y = getAxisCoordOfEvent(Axis.y, nativeEvent);
    } else if (isEndish(topLevelType)) {
      startCoords.x = 0;
      startCoords.y = 0;
    }
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  }

};

module.exports = TapEventPlugin;

},{"./TouchEventUtils":152,"react/lib/EventConstants":169,"react/lib/EventPluginUtils":173,"react/lib/EventPropagators":174,"react/lib/SyntheticUIEvent":268,"react/lib/ViewportMetrics":271,"react/lib/keyOf":311}],152:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule TouchEventUtils
 */

var TouchEventUtils = {
  /**
   * Utility function for common case of extracting out the primary touch from a
   * touch event.
   * - `touchEnd` events usually do not have the `touches` property.
   *   http://stackoverflow.com/questions/3666929/
   *   mobile-sarai-touchend-event-not-firing-when-last-touch-is-removed
   *
   * @param {Event} nativeEvent Native event that may or may not be a touch.
   * @return {TouchesObject?} an object with pageX and pageY or null.
   */
  extractSingleTouch: function(nativeEvent) {
    var touches = nativeEvent.touches;
    var changedTouches = nativeEvent.changedTouches;
    var hasTouches = touches && touches.length > 0;
    var hasChangedTouches = changedTouches && changedTouches.length > 0;

    return !hasTouches && hasChangedTouches ? changedTouches[0] :
           hasTouches ? touches[0] :
           nativeEvent;
  }
};

module.exports = TouchEventUtils;

},{}],153:[function(require,module,exports){
module.exports = function injectTapEventPlugin () {
  var React = require("react");
  React.initializeTouchEvents(true);

  require('react/lib/EventPluginHub').injection.injectEventPluginsByName({
    "ResponderEventPlugin": require('./ResponderEventPlugin.js'),
    "TapEventPlugin":       require('./TapEventPlugin.js')
  });
};

},{"./ResponderEventPlugin.js":150,"./TapEventPlugin.js":151,"react":326,"react/lib/EventPluginHub":171}],154:[function(require,module,exports){
module.exports = require('./lib/ReactWithAddons');

},{"./lib/ReactWithAddons":254}],155:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule AutoFocusMixin
 * @typechecks static-only
 */

'use strict';

var focusNode = require("./focusNode");

var AutoFocusMixin = {
  componentDidMount: function() {
    if (this.props.autoFocus) {
      focusNode(this.getDOMNode());
    }
  }
};

module.exports = AutoFocusMixin;

},{"./focusNode":288}],156:[function(require,module,exports){
/**
 * Copyright 2013-2015 Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule BeforeInputEventPlugin
 * @typechecks static-only
 */

'use strict';

var EventConstants = require("./EventConstants");
var EventPropagators = require("./EventPropagators");
var ExecutionEnvironment = require("./ExecutionEnvironment");
var FallbackCompositionState = require("./FallbackCompositionState");
var SyntheticCompositionEvent = require("./SyntheticCompositionEvent");
var SyntheticInputEvent = require("./SyntheticInputEvent");

var keyOf = require("./keyOf");

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
var START_KEYCODE = 229;

var canUseCompositionEvent = (
  ExecutionEnvironment.canUseDOM &&
  'CompositionEvent' in window
);

var documentMode = null;
if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
  documentMode = document.documentMode;
}

// Webkit offers a very useful `textInput` event that can be used to
// directly represent `beforeInput`. The IE `textinput` event is not as
// useful, so we don't use it.
var canUseTextInputEvent = (
  ExecutionEnvironment.canUseDOM &&
  'TextEvent' in window &&
  !documentMode &&
  !isPresto()
);

// In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. Japanese ideographic
// spaces, for instance (\u3000) are not recorded correctly.
var useFallbackCompositionData = (
  ExecutionEnvironment.canUseDOM &&
  (
    (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11)
  )
);

/**
 * Opera <= 12 includes TextEvent in window, but does not fire
 * text input events. Rely on keypress instead.
 */
function isPresto() {
  var opera = window.opera;
  return (
    typeof opera === 'object' &&
    typeof opera.version === 'function' &&
    parseInt(opera.version(), 10) <= 12
  );
}

var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

var topLevelTypes = EventConstants.topLevelTypes;

// Events and their corresponding property names.
var eventTypes = {
  beforeInput: {
    phasedRegistrationNames: {
      bubbled: keyOf({onBeforeInput: null}),
      captured: keyOf({onBeforeInputCapture: null})
    },
    dependencies: [
      topLevelTypes.topCompositionEnd,
      topLevelTypes.topKeyPress,
      topLevelTypes.topTextInput,
      topLevelTypes.topPaste
    ]
  },
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionEnd: null}),
      captured: keyOf({onCompositionEndCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionEnd,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionStart: null}),
      captured: keyOf({onCompositionStartCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionStart,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionUpdate: null}),
      captured: keyOf({onCompositionUpdateCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionUpdate,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  }
};

// Track whether we've ever handled a keypress on the space key.
var hasSpaceKeypress = false;

/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */
function isKeypressCommand(nativeEvent) {
  return (
    (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
    // ctrlKey && altKey is equivalent to AltGr, and is not a command.
    !(nativeEvent.ctrlKey && nativeEvent.altKey)
  );
}


/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */
function getCompositionEventType(topLevelType) {
  switch (topLevelType) {
    case topLevelTypes.topCompositionStart:
      return eventTypes.compositionStart;
    case topLevelTypes.topCompositionEnd:
      return eventTypes.compositionEnd;
    case topLevelTypes.topCompositionUpdate:
      return eventTypes.compositionUpdate;
  }
}

/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionStart(topLevelType, nativeEvent) {
  return (
    topLevelType === topLevelTypes.topKeyDown &&
    nativeEvent.keyCode === START_KEYCODE
  );
}

/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionEnd(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case topLevelTypes.topKeyUp:
      // Command keys insert or clear IME input.
      return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);
    case topLevelTypes.topKeyDown:
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return (nativeEvent.keyCode !== START_KEYCODE);
    case topLevelTypes.topKeyPress:
    case topLevelTypes.topMouseDown:
    case topLevelTypes.topBlur:
      // Events are not possible without cancelling IME.
      return true;
    default:
      return false;
  }
}

/**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */
function getDataFromCustomEvent(nativeEvent) {
  var detail = nativeEvent.detail;
  if (typeof detail === 'object' && 'data' in detail) {
    return detail.data;
  }
  return null;
}

// Track the current IME composition fallback object, if any.
var currentComposition = null;

/**
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {DOMEventTarget} topLevelTarget The listening component root node.
 * @param {string} topLevelTargetID ID of `topLevelTarget`.
 * @param {object} nativeEvent Native browser event.
 * @return {?object} A SyntheticCompositionEvent.
 */
function extractCompositionEvent(
  topLevelType,
  topLevelTarget,
  topLevelTargetID,
  nativeEvent
) {
  var eventType;
  var fallbackData;

  if (canUseCompositionEvent) {
    eventType = getCompositionEventType(topLevelType);
  } else if (!currentComposition) {
    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionStart;
    }
  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
    eventType = eventTypes.compositionEnd;
  }

  if (!eventType) {
    return null;
  }

  if (useFallbackCompositionData) {
    // The current composition is stored statically and must not be
    // overwritten while composition continues.
    if (!currentComposition && eventType === eventTypes.compositionStart) {
      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);
    } else if (eventType === eventTypes.compositionEnd) {
      if (currentComposition) {
        fallbackData = currentComposition.getData();
      }
    }
  }

  var event = SyntheticCompositionEvent.getPooled(
    eventType,
    topLevelTargetID,
    nativeEvent
  );

  if (fallbackData) {
    // Inject data generated from fallback path into the synthetic event.
    // This matches the property of native CompositionEventInterface.
    event.data = fallbackData;
  } else {
    var customData = getDataFromCustomEvent(nativeEvent);
    if (customData !== null) {
      event.data = customData;
    }
  }

  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The string corresponding to this `beforeInput` event.
 */
function getNativeBeforeInputChars(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case topLevelTypes.topCompositionEnd:
      return getDataFromCustomEvent(nativeEvent);
    case topLevelTypes.topKeyPress:
      /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */
      var which = nativeEvent.which;
      if (which !== SPACEBAR_CODE) {
        return null;
      }

      hasSpaceKeypress = true;
      return SPACEBAR_CHAR;

    case topLevelTypes.topTextInput:
      // Record the characters to be added to the DOM.
      var chars = nativeEvent.data;

      // If it's a spacebar character, assume that we have already handled
      // it at the keypress level and bail immediately. Android Chrome
      // doesn't give us keycodes, so we need to blacklist it.
      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
        return null;
      }

      return chars;

    default:
      // For other native event types, do nothing.
      return null;
  }
}

/**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 *
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The fallback string for this `beforeInput` event.
 */
function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
  // If we are currently composing (IME) and using a fallback to do so,
  // try to extract the composed characters from the fallback object.
  if (currentComposition) {
    if (
      topLevelType === topLevelTypes.topCompositionEnd ||
      isFallbackCompositionEnd(topLevelType, nativeEvent)
    ) {
      var chars = currentComposition.getData();
      FallbackCompositionState.release(currentComposition);
      currentComposition = null;
      return chars;
    }
    return null;
  }

  switch (topLevelType) {
    case topLevelTypes.topPaste:
      // If a paste event occurs after a keypress, throw out the input
      // chars. Paste events should not lead to BeforeInput events.
      return null;
    case topLevelTypes.topKeyPress:
      /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */
      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
        return String.fromCharCode(nativeEvent.which);
      }
      return null;
    case topLevelTypes.topCompositionEnd:
      return useFallbackCompositionData ? null : nativeEvent.data;
    default:
      return null;
  }
}

/**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {DOMEventTarget} topLevelTarget The listening component root node.
 * @param {string} topLevelTargetID ID of `topLevelTarget`.
 * @param {object} nativeEvent Native browser event.
 * @return {?object} A SyntheticInputEvent.
 */
function extractBeforeInputEvent(
  topLevelType,
  topLevelTarget,
  topLevelTargetID,
  nativeEvent
) {
  var chars;

  if (canUseTextInputEvent) {
    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
  } else {
    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
  }

  // If no characters are being inserted, no BeforeInput event should
  // be fired.
  if (!chars) {
    return null;
  }

  var event = SyntheticInputEvent.getPooled(
    eventTypes.beforeInput,
    topLevelTargetID,
    nativeEvent
  );

  event.data = chars;
  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */
var BeforeInputEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
    topLevelType,
    topLevelTarget,
    topLevelTargetID,
    nativeEvent
  ) {
    return [
      extractCompositionEvent(
        topLevelType,
        topLevelTarget,
        topLevelTargetID,
        nativeEvent
      ),
      extractBeforeInputEvent(
        topLevelType,
        topLevelTarget,
        topLevelTargetID,
        nativeEvent
      )
    ];
  }
};

module.exports = BeforeInputEventPlugin;

},{"./EventConstants":169,"./EventPropagators":174,"./ExecutionEnvironment":175,"./FallbackCompositionState":176,"./SyntheticCompositionEvent":260,"./SyntheticInputEvent":264,"./keyOf":311}],157:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSCore
 * @typechecks
 */

var invariant = require("./invariant");

/**
 * The CSSCore module specifies the API (and implements most of the methods)
 * that should be used when dealing with the display of elements (via their
 * CSS classes and visibility on screen. It is an API focused on mutating the
 * display and not reading it as no logical state should be encoded in the
 * display of elements.
 */

var CSSCore = {

  /**
   * Adds the class passed in to the element if it doesn't already have it.
   *
   * @param {DOMElement} element the element to set the class on
   * @param {string} className the CSS className
   * @return {DOMElement} the element passed in
   */
  addClass: function(element, className) {
    ("production" !== process.env.NODE_ENV ? invariant(
      !/\s/.test(className),
      'CSSCore.addClass takes only a single class name. "%s" contains ' +
      'multiple classes.', className
    ) : invariant(!/\s/.test(className)));

    if (className) {
      if (element.classList) {
        element.classList.add(className);
      } else if (!CSSCore.hasClass(element, className)) {
        element.className = element.className + ' ' + className;
      }
    }
    return element;
  },

  /**
   * Removes the class passed in from the element
   *
   * @param {DOMElement} element the element to set the class on
   * @param {string} className the CSS className
   * @return {DOMElement} the element passed in
   */
  removeClass: function(element, className) {
    ("production" !== process.env.NODE_ENV ? invariant(
      !/\s/.test(className),
      'CSSCore.removeClass takes only a single class name. "%s" contains ' +
      'multiple classes.', className
    ) : invariant(!/\s/.test(className)));

    if (className) {
      if (element.classList) {
        element.classList.remove(className);
      } else if (CSSCore.hasClass(element, className)) {
        element.className = element.className
          .replace(new RegExp('(^|\\s)' + className + '(?:\\s|$)', 'g'), '$1')
          .replace(/\s+/g, ' ') // multiple spaces to one
          .replace(/^\s*|\s*$/g, ''); // trim the ends
      }
    }
    return element;
  },

  /**
   * Helper to add or remove a class from an element based on a condition.
   *
   * @param {DOMElement} element the element to set the class on
   * @param {string} className the CSS className
   * @param {*} bool condition to whether to add or remove the class
   * @return {DOMElement} the element passed in
   */
  conditionClass: function(element, className, bool) {
    return (bool ? CSSCore.addClass : CSSCore.removeClass)(element, className);
  },

  /**
   * Tests whether the element has the class specified.
   *
   * @param {DOMNode|DOMWindow} element the element to set the class on
   * @param {string} className the CSS className
   * @return {boolean} true if the element has the class, false if not
   */
  hasClass: function(element, className) {
    ("production" !== process.env.NODE_ENV ? invariant(
      !/\s/.test(className),
      'CSS.hasClass takes only a single class name.'
    ) : invariant(!/\s/.test(className)));
    if (element.classList) {
      return !!className && element.classList.contains(className);
    }
    return (' ' + element.className + ' ').indexOf(' ' + className + ' ') > -1;
  }

};

module.exports = CSSCore;

}).call(this,require('_process'))
},{"./invariant":304,"_process":2}],158:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSProperty
 */

'use strict';

/**
 * CSS properties which accept numbers but are not in units of "px".
 */
var isUnitlessNumber = {
  boxFlex: true,
  boxFlexGroup: true,
  columnCount: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  widows: true,
  zIndex: true,
  zoom: true,

  // SVG-related properties
  fillOpacity: true,
  strokeDashoffset: true,
  strokeOpacity: true,
  strokeWidth: true
};

/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */
function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
Object.keys(isUnitlessNumber).forEach(function(prop) {
  prefixes.forEach(function(prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Most style properties can be unset by doing .style[prop] = '' but IE8
 * doesn't like doing that with shorthand properties so for the properties that
 * IE8 breaks on, which are listed here, we instead unset each of the
 * individual properties. See http://bugs.jquery.com/ticket/12385.
 * The 4-value 'clock' properties like margin, padding, border-width seem to
 * behave without any problems. Curiously, list-style works too without any
 * special prodding.
 */
var shorthandPropertyExpansions = {
  background: {
    backgroundImage: true,
    backgroundPosition: true,
    backgroundRepeat: true,
    backgroundColor: true
  },
  border: {
    borderWidth: true,
    borderStyle: true,
    borderColor: true
  },
  borderBottom: {
    borderBottomWidth: true,
    borderBottomStyle: true,
    borderBottomColor: true
  },
  borderLeft: {
    borderLeftWidth: true,
    borderLeftStyle: true,
    borderLeftColor: true
  },
  borderRight: {
    borderRightWidth: true,
    borderRightStyle: true,
    borderRightColor: true
  },
  borderTop: {
    borderTopWidth: true,
    borderTopStyle: true,
    borderTopColor: true
  },
  font: {
    fontStyle: true,
    fontVariant: true,
    fontWeight: true,
    fontSize: true,
    lineHeight: true,
    fontFamily: true
  }
};

var CSSProperty = {
  isUnitlessNumber: isUnitlessNumber,
  shorthandPropertyExpansions: shorthandPropertyExpansions
};

module.exports = CSSProperty;

},{}],159:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSPropertyOperations
 * @typechecks static-only
 */

'use strict';

var CSSProperty = require("./CSSProperty");
var ExecutionEnvironment = require("./ExecutionEnvironment");

var camelizeStyleName = require("./camelizeStyleName");
var dangerousStyleValue = require("./dangerousStyleValue");
var hyphenateStyleName = require("./hyphenateStyleName");
var memoizeStringOnly = require("./memoizeStringOnly");
var warning = require("./warning");

var processStyleName = memoizeStringOnly(function(styleName) {
  return hyphenateStyleName(styleName);
});

var styleFloatAccessor = 'cssFloat';
if (ExecutionEnvironment.canUseDOM) {
  // IE8 only supports accessing cssFloat (standard) as styleFloat
  if (document.documentElement.style.cssFloat === undefined) {
    styleFloatAccessor = 'styleFloat';
  }
}

if ("production" !== process.env.NODE_ENV) {
  // 'msTransform' is correct, but the other prefixes should be capitalized
  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

  // style values shouldn't contain a semicolon
  var badStyleValueWithSemicolonPattern = /;\s*$/;

  var warnedStyleNames = {};
  var warnedStyleValues = {};

  var warnHyphenatedStyleName = function(name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    ("production" !== process.env.NODE_ENV ? warning(
      false,
      'Unsupported style property %s. Did you mean %s?',
      name,
      camelizeStyleName(name)
    ) : null);
  };

  var warnBadVendoredStyleName = function(name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    ("production" !== process.env.NODE_ENV ? warning(
      false,
      'Unsupported vendor-prefixed style property %s. Did you mean %s?',
      name,
      name.charAt(0).toUpperCase() + name.slice(1)
    ) : null);
  };

  var warnStyleValueWithSemicolon = function(name, value) {
    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
      return;
    }

    warnedStyleValues[value] = true;
    ("production" !== process.env.NODE_ENV ? warning(
      false,
      'Style property values shouldn\'t contain a semicolon. ' +
      'Try "%s: %s" instead.',
      name,
      value.replace(badStyleValueWithSemicolonPattern, '')
    ) : null);
  };

  /**
   * @param {string} name
   * @param {*} value
   */
  var warnValidStyle = function(name, value) {
    if (name.indexOf('-') > -1) {
      warnHyphenatedStyleName(name);
    } else if (badVendoredStyleNamePattern.test(name)) {
      warnBadVendoredStyleName(name);
    } else if (badStyleValueWithSemicolonPattern.test(value)) {
      warnStyleValueWithSemicolon(name, value);
    }
  };
}

/**
 * Operations for dealing with CSS properties.
 */
var CSSPropertyOperations = {

  /**
   * Serializes a mapping of style properties for use as inline styles:
   *
   *   > createMarkupForStyles({width: '200px', height: 0})
   *   "width:200px;height:0;"
   *
   * Undefined values are ignored so that declarative programming is easier.
   * The result should be HTML-escaped before insertion into the DOM.
   *
   * @param {object} styles
   * @return {?string}
   */
  createMarkupForStyles: function(styles) {
    var serialized = '';
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      var styleValue = styles[styleName];
      if ("production" !== process.env.NODE_ENV) {
        warnValidStyle(styleName, styleValue);
      }
      if (styleValue != null) {
        serialized += processStyleName(styleName) + ':';
        serialized += dangerousStyleValue(styleName, styleValue) + ';';
      }
    }
    return serialized || null;
  },

  /**
   * Sets the value for multiple styles on a node.  If a value is specified as
   * '' (empty string), the corresponding style property will be unset.
   *
   * @param {DOMElement} node
   * @param {object} styles
   */
  setValueForStyles: function(node, styles) {
    var style = node.style;
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      if ("production" !== process.env.NODE_ENV) {
        warnValidStyle(styleName, styles[styleName]);
      }
      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
      if (styleName === 'float') {
        styleName = styleFloatAccessor;
      }
      if (styleValue) {
        style[styleName] = styleValue;
      } else {
        var expansion = CSSProperty.shorthandPropertyExpansions[styleName];
        if (expansion) {
          // Shorthand property that IE8 won't like unsetting, so unset each
          // component to placate it
          for (var individualStyleName in expansion) {
            style[individualStyleName] = '';
          }
        } else {
          style[styleName] = '';
        }
      }
    }
  }

};

module.exports = CSSPropertyOperations;

}).call(this,require('_process'))
},{"./CSSProperty":158,"./ExecutionEnvironment":175,"./camelizeStyleName":275,"./dangerousStyleValue":282,"./hyphenateStyleName":302,"./memoizeStringOnly":313,"./warning":325,"_process":2}],160:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CallbackQueue
 */

'use strict';

var PooledClass = require("./PooledClass");

var assign = require("./Object.assign");
var invariant = require("./invariant");

/**
 * A specialized pseudo-event module to help keep track of components waiting to
 * be notified when their DOM representations are available for use.
 *
 * This implements `PooledClass`, so you should never need to instantiate this.
 * Instead, use `CallbackQueue.getPooled()`.
 *
 * @class ReactMountReady
 * @implements PooledClass
 * @internal
 */
function CallbackQueue() {
  this._callbacks = null;
  this._contexts = null;
}

assign(CallbackQueue.prototype, {

  /**
   * Enqueues a callback to be invoked when `notifyAll` is invoked.
   *
   * @param {function} callback Invoked when `notifyAll` is invoked.
   * @param {?object} context Context to call `callback` with.
   * @internal
   */
  enqueue: function(callback, context) {
    this._callbacks = this._callbacks || [];
    this._contexts = this._contexts || [];
    this._callbacks.push(callback);
    this._contexts.push(context);
  },

  /**
   * Invokes all enqueued callbacks and clears the queue. This is invoked after
   * the DOM representation of a component has been created or updated.
   *
   * @internal
   */
  notifyAll: function() {
    var callbacks = this._callbacks;
    var contexts = this._contexts;
    if (callbacks) {
      ("production" !== process.env.NODE_ENV ? invariant(
        callbacks.length === contexts.length,
        'Mismatched list of contexts in callback queue'
      ) : invariant(callbacks.length === contexts.length));
      this._callbacks = null;
      this._contexts = null;
      for (var i = 0, l = callbacks.length; i < l; i++) {
        callbacks[i].call(contexts[i]);
      }
      callbacks.length = 0;
      contexts.length = 0;
    }
  },

  /**
   * Resets the internal queue.
   *
   * @internal
   */
  reset: function() {
    this._callbacks = null;
    this._contexts = null;
  },

  /**
   * `PooledClass` looks for this.
   */
  destructor: function() {
    this.reset();
  }

});

PooledClass.addPoolingTo(CallbackQueue);

module.exports = CallbackQueue;

}).call(this,require('_process'))
},{"./Object.assign":182,"./PooledClass":183,"./invariant":304,"_process":2}],161:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ChangeEventPlugin
 */

'use strict';

var EventConstants = require("./EventConstants");
var EventPluginHub = require("./EventPluginHub");
var EventPropagators = require("./EventPropagators");
var ExecutionEnvironment = require("./ExecutionEnvironment");
var ReactUpdates = require("./ReactUpdates");
var SyntheticEvent = require("./SyntheticEvent");

var isEventSupported = require("./isEventSupported");
var isTextInputElement = require("./isTextInputElement");
var keyOf = require("./keyOf");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  change: {
    phasedRegistrationNames: {
      bubbled: keyOf({onChange: null}),
      captured: keyOf({onChangeCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topChange,
      topLevelTypes.topClick,
      topLevelTypes.topFocus,
      topLevelTypes.topInput,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyUp,
      topLevelTypes.topSelectionChange
    ]
  }
};

/**
 * For IE shims
 */
var activeElement = null;
var activeElementID = null;
var activeElementValue = null;
var activeElementValueProp = null;

/**
 * SECTION: handle `change` event
 */
function shouldUseChangeEvent(elem) {
  return (
    elem.nodeName === 'SELECT' ||
    (elem.nodeName === 'INPUT' && elem.type === 'file')
  );
}

var doesChangeEventBubble = false;
if (ExecutionEnvironment.canUseDOM) {
  // See `handleChange` comment below
  doesChangeEventBubble = isEventSupported('change') && (
    (!('documentMode' in document) || document.documentMode > 8)
  );
}

function manualDispatchChangeEvent(nativeEvent) {
  var event = SyntheticEvent.getPooled(
    eventTypes.change,
    activeElementID,
    nativeEvent
  );
  EventPropagators.accumulateTwoPhaseDispatches(event);

  // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.
  ReactUpdates.batchedUpdates(runEventInBatch, event);
}

function runEventInBatch(event) {
  EventPluginHub.enqueueEvents(event);
  EventPluginHub.processEventQueue();
}

function startWatchingForChangeEventIE8(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
}

function stopWatchingForChangeEventIE8() {
  if (!activeElement) {
    return;
  }
  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
  activeElement = null;
  activeElementID = null;
}

function getTargetIDForChangeEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topChange) {
    return topLevelTargetID;
  }
}
function handleEventsForChangeEventIE8(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForChangeEventIE8();
    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForChangeEventIE8();
  }
}


/**
 * SECTION: handle `input` event
 */
var isInputEventSupported = false;
if (ExecutionEnvironment.canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events
  isInputEventSupported = isEventSupported('input') && (
    (!('documentMode' in document) || document.documentMode > 9)
  );
}

/**
 * (For old IE.) Replacement getter/setter for the `value` property that gets
 * set on the active element.
 */
var newValueProp =  {
  get: function() {
    return activeElementValueProp.get.call(this);
  },
  set: function(val) {
    // Cast to a string so we can do equality checks.
    activeElementValue = '' + val;
    activeElementValueProp.set.call(this, val);
  }
};

/**
 * (For old IE.) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */
function startWatchingForValueChange(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElementValue = target.value;
  activeElementValueProp = Object.getOwnPropertyDescriptor(
    target.constructor.prototype,
    'value'
  );

  Object.defineProperty(activeElement, 'value', newValueProp);
  activeElement.attachEvent('onpropertychange', handlePropertyChange);
}

/**
 * (For old IE.) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */
function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }

  // delete restores the original property definition
  delete activeElement.value;
  activeElement.detachEvent('onpropertychange', handlePropertyChange);

  activeElement = null;
  activeElementID = null;
  activeElementValue = null;
  activeElementValueProp = null;
}

/**
 * (For old IE.) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */
function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }
  var value = nativeEvent.srcElement.value;
  if (value === activeElementValue) {
    return;
  }
  activeElementValue = value;

  manualDispatchChangeEvent(nativeEvent);
}

/**
 * If a `change` event should be fired, returns the target's ID.
 */
function getTargetIDForInputEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topInput) {
    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
    // what we want so fall through here and trigger an abstract event
    return topLevelTargetID;
  }
}

// For IE8 and IE9.
function handleEventsForInputEventIE(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // In IE8, we can capture almost all .value changes by adding a
    // propertychange handler and looking for events with propertyName
    // equal to 'value'
    // In IE9, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForValueChange();
  }
}

// For IE8 and IE9.
function getTargetIDForInputEventIE(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topSelectionChange ||
      topLevelType === topLevelTypes.topKeyUp ||
      topLevelType === topLevelTypes.topKeyDown) {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    if (activeElement && activeElement.value !== activeElementValue) {
      activeElementValue = activeElement.value;
      return activeElementID;
    }
  }
}


/**
 * SECTION: handle `click` event
 */
function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  return (
    elem.nodeName === 'INPUT' &&
    (elem.type === 'checkbox' || elem.type === 'radio')
  );
}

function getTargetIDForClickEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topClick) {
    return topLevelTargetID;
  }
}

/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */
var ChangeEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    var getTargetIDFunc, handleEventFunc;
    if (shouldUseChangeEvent(topLevelTarget)) {
      if (doesChangeEventBubble) {
        getTargetIDFunc = getTargetIDForChangeEvent;
      } else {
        handleEventFunc = handleEventsForChangeEventIE8;
      }
    } else if (isTextInputElement(topLevelTarget)) {
      if (isInputEventSupported) {
        getTargetIDFunc = getTargetIDForInputEvent;
      } else {
        getTargetIDFunc = getTargetIDForInputEventIE;
        handleEventFunc = handleEventsForInputEventIE;
      }
    } else if (shouldUseClickEvent(topLevelTarget)) {
      getTargetIDFunc = getTargetIDForClickEvent;
    }

    if (getTargetIDFunc) {
      var targetID = getTargetIDFunc(
        topLevelType,
        topLevelTarget,
        topLevelTargetID
      );
      if (targetID) {
        var event = SyntheticEvent.getPooled(
          eventTypes.change,
          targetID,
          nativeEvent
        );
        EventPropagators.accumulateTwoPhaseDispatches(event);
        return event;
      }
    }

    if (handleEventFunc) {
      handleEventFunc(
        topLevelType,
        topLevelTarget,
        topLevelTargetID
      );
    }
  }

};

module.exports = ChangeEventPlugin;

},{"./EventConstants":169,"./EventPluginHub":171,"./EventPropagators":174,"./ExecutionEnvironment":175,"./ReactUpdates":253,"./SyntheticEvent":262,"./isEventSupported":305,"./isTextInputElement":307,"./keyOf":311}],162:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ClientReactRootIndex
 * @typechecks
 */

'use strict';

var nextReactRootIndex = 0;

var ClientReactRootIndex = {
  createReactRootIndex: function() {
    return nextReactRootIndex++;
  }
};

module.exports = ClientReactRootIndex;

},{}],163:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMChildrenOperations
 * @typechecks static-only
 */

'use strict';

var Danger = require("./Danger");
var ReactMultiChildUpdateTypes = require("./ReactMultiChildUpdateTypes");

var setTextContent = require("./setTextContent");
var invariant = require("./invariant");

/**
 * Inserts `childNode` as a child of `parentNode` at the `index`.
 *
 * @param {DOMElement} parentNode Parent node in which to insert.
 * @param {DOMElement} childNode Child node to insert.
 * @param {number} index Index at which to insert the child.
 * @internal
 */
function insertChildAt(parentNode, childNode, index) {
  // By exploiting arrays returning `undefined` for an undefined index, we can
  // rely exclusively on `insertBefore(node, null)` instead of also using
  // `appendChild(node)`. However, using `undefined` is not allowed by all
  // browsers so we must replace it with `null`.
  parentNode.insertBefore(
    childNode,
    parentNode.childNodes[index] || null
  );
}

/**
 * Operations for updating with DOM children.
 */
var DOMChildrenOperations = {

  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

  updateTextContent: setTextContent,

  /**
   * Updates a component's children by processing a series of updates. The
   * update configurations are each expected to have a `parentNode` property.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markupList List of markup strings.
   * @internal
   */
  processUpdates: function(updates, markupList) {
    var update;
    // Mapping from parent IDs to initial child orderings.
    var initialChildren = null;
    // List of children that will be moved or removed.
    var updatedChildren = null;

    for (var i = 0; i < updates.length; i++) {
      update = updates[i];
      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING ||
          update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
        var updatedIndex = update.fromIndex;
        var updatedChild = update.parentNode.childNodes[updatedIndex];
        var parentID = update.parentID;

        ("production" !== process.env.NODE_ENV ? invariant(
          updatedChild,
          'processUpdates(): Unable to find child %s of element. This ' +
          'probably means the DOM was unexpectedly mutated (e.g., by the ' +
          'browser), usually due to forgetting a <tbody> when using tables, ' +
          'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' +
          'in an <svg> parent. Try inspecting the child nodes of the element ' +
          'with React ID `%s`.',
          updatedIndex,
          parentID
        ) : invariant(updatedChild));

        initialChildren = initialChildren || {};
        initialChildren[parentID] = initialChildren[parentID] || [];
        initialChildren[parentID][updatedIndex] = updatedChild;

        updatedChildren = updatedChildren || [];
        updatedChildren.push(updatedChild);
      }
    }

    var renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);

    // Remove updated children first so that `toIndex` is consistent.
    if (updatedChildren) {
      for (var j = 0; j < updatedChildren.length; j++) {
        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
      }
    }

    for (var k = 0; k < updates.length; k++) {
      update = updates[k];
      switch (update.type) {
        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
          insertChildAt(
            update.parentNode,
            renderedMarkup[update.markupIndex],
            update.toIndex
          );
          break;
        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
          insertChildAt(
            update.parentNode,
            initialChildren[update.parentID][update.fromIndex],
            update.toIndex
          );
          break;
        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
          setTextContent(
            update.parentNode,
            update.textContent
          );
          break;
        case ReactMultiChildUpdateTypes.REMOVE_NODE:
          // Already removed by the for-loop above.
          break;
      }
    }
  }

};

module.exports = DOMChildrenOperations;

}).call(this,require('_process'))
},{"./Danger":166,"./ReactMultiChildUpdateTypes":232,"./invariant":304,"./setTextContent":319,"_process":2}],164:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMProperty
 * @typechecks static-only
 */

/*jslint bitwise: true */

'use strict';

var invariant = require("./invariant");

function checkMask(value, bitmask) {
  return (value & bitmask) === bitmask;
}

var DOMPropertyInjection = {
  /**
   * Mapping from normalized, camelcased property names to a configuration that
   * specifies how the associated DOM property should be accessed or rendered.
   */
  MUST_USE_ATTRIBUTE: 0x1,
  MUST_USE_PROPERTY: 0x2,
  HAS_SIDE_EFFECTS: 0x4,
  HAS_BOOLEAN_VALUE: 0x8,
  HAS_NUMERIC_VALUE: 0x10,
  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,

  /**
   * Inject some specialized knowledge about the DOM. This takes a config object
   * with the following properties:
   *
   * isCustomAttribute: function that given an attribute name will return true
   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
   * attributes where it's impossible to enumerate all of the possible
   * attribute names,
   *
   * Properties: object mapping DOM property name to one of the
   * DOMPropertyInjection constants or null. If your attribute isn't in here,
   * it won't get written to the DOM.
   *
   * DOMAttributeNames: object mapping React attribute name to the DOM
   * attribute name. Attribute names not specified use the **lowercase**
   * normalized name.
   *
   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
   * Property names not specified use the normalized name.
   *
   * DOMMutationMethods: Properties that require special mutation methods. If
   * `value` is undefined, the mutation method should unset the property.
   *
   * @param {object} domPropertyConfig the config as described above.
   */
  injectDOMPropertyConfig: function(domPropertyConfig) {
    var Properties = domPropertyConfig.Properties || {};
    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

    if (domPropertyConfig.isCustomAttribute) {
      DOMProperty._isCustomAttributeFunctions.push(
        domPropertyConfig.isCustomAttribute
      );
    }

    for (var propName in Properties) {
      ("production" !== process.env.NODE_ENV ? invariant(
        !DOMProperty.isStandardName.hasOwnProperty(propName),
        'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' +
        '\'%s\' which has already been injected. You may be accidentally ' +
        'injecting the same DOM property config twice, or you may be ' +
        'injecting two configs that have conflicting property names.',
        propName
      ) : invariant(!DOMProperty.isStandardName.hasOwnProperty(propName)));

      DOMProperty.isStandardName[propName] = true;

      var lowerCased = propName.toLowerCase();
      DOMProperty.getPossibleStandardName[lowerCased] = propName;

      if (DOMAttributeNames.hasOwnProperty(propName)) {
        var attributeName = DOMAttributeNames[propName];
        DOMProperty.getPossibleStandardName[attributeName] = propName;
        DOMProperty.getAttributeName[propName] = attributeName;
      } else {
        DOMProperty.getAttributeName[propName] = lowerCased;
      }

      DOMProperty.getPropertyName[propName] =
        DOMPropertyNames.hasOwnProperty(propName) ?
          DOMPropertyNames[propName] :
          propName;

      if (DOMMutationMethods.hasOwnProperty(propName)) {
        DOMProperty.getMutationMethod[propName] = DOMMutationMethods[propName];
      } else {
        DOMProperty.getMutationMethod[propName] = null;
      }

      var propConfig = Properties[propName];
      DOMProperty.mustUseAttribute[propName] =
        checkMask(propConfig, DOMPropertyInjection.MUST_USE_ATTRIBUTE);
      DOMProperty.mustUseProperty[propName] =
        checkMask(propConfig, DOMPropertyInjection.MUST_USE_PROPERTY);
      DOMProperty.hasSideEffects[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_SIDE_EFFECTS);
      DOMProperty.hasBooleanValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_BOOLEAN_VALUE);
      DOMProperty.hasNumericValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_NUMERIC_VALUE);
      DOMProperty.hasPositiveNumericValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_POSITIVE_NUMERIC_VALUE);
      DOMProperty.hasOverloadedBooleanValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_OVERLOADED_BOOLEAN_VALUE);

      ("production" !== process.env.NODE_ENV ? invariant(
        !DOMProperty.mustUseAttribute[propName] ||
          !DOMProperty.mustUseProperty[propName],
        'DOMProperty: Cannot require using both attribute and property: %s',
        propName
      ) : invariant(!DOMProperty.mustUseAttribute[propName] ||
        !DOMProperty.mustUseProperty[propName]));
      ("production" !== process.env.NODE_ENV ? invariant(
        DOMProperty.mustUseProperty[propName] ||
          !DOMProperty.hasSideEffects[propName],
        'DOMProperty: Properties that have side effects must use property: %s',
        propName
      ) : invariant(DOMProperty.mustUseProperty[propName] ||
        !DOMProperty.hasSideEffects[propName]));
      ("production" !== process.env.NODE_ENV ? invariant(
        !!DOMProperty.hasBooleanValue[propName] +
          !!DOMProperty.hasNumericValue[propName] +
          !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1,
        'DOMProperty: Value can be one of boolean, overloaded boolean, or ' +
        'numeric value, but not a combination: %s',
        propName
      ) : invariant(!!DOMProperty.hasBooleanValue[propName] +
        !!DOMProperty.hasNumericValue[propName] +
        !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1));
    }
  }
};
var defaultValueCache = {};

/**
 * DOMProperty exports lookup objects that can be used like functions:
 *
 *   > DOMProperty.isValid['id']
 *   true
 *   > DOMProperty.isValid['foobar']
 *   undefined
 *
 * Although this may be confusing, it performs better in general.
 *
 * @see http://jsperf.com/key-exists
 * @see http://jsperf.com/key-missing
 */
var DOMProperty = {

  ID_ATTRIBUTE_NAME: 'data-reactid',

  /**
   * Checks whether a property name is a standard property.
   * @type {Object}
   */
  isStandardName: {},

  /**
   * Mapping from lowercase property names to the properly cased version, used
   * to warn in the case of missing properties.
   * @type {Object}
   */
  getPossibleStandardName: {},

  /**
   * Mapping from normalized names to attribute names that differ. Attribute
   * names are used when rendering markup or with `*Attribute()`.
   * @type {Object}
   */
  getAttributeName: {},

  /**
   * Mapping from normalized names to properties on DOM node instances.
   * (This includes properties that mutate due to external factors.)
   * @type {Object}
   */
  getPropertyName: {},

  /**
   * Mapping from normalized names to mutation methods. This will only exist if
   * mutation cannot be set simply by the property or `setAttribute()`.
   * @type {Object}
   */
  getMutationMethod: {},

  /**
   * Whether the property must be accessed and mutated as an object property.
   * @type {Object}
   */
  mustUseAttribute: {},

  /**
   * Whether the property must be accessed and mutated using `*Attribute()`.
   * (This includes anything that fails `<propName> in <element>`.)
   * @type {Object}
   */
  mustUseProperty: {},

  /**
   * Whether or not setting a value causes side effects such as triggering
   * resources to be loaded or text selection changes. We must ensure that
   * the value is only set if it has changed.
   * @type {Object}
   */
  hasSideEffects: {},

  /**
   * Whether the property should be removed when set to a falsey value.
   * @type {Object}
   */
  hasBooleanValue: {},

  /**
   * Whether the property must be numeric or parse as a
   * numeric and should be removed when set to a falsey value.
   * @type {Object}
   */
  hasNumericValue: {},

  /**
   * Whether the property must be positive numeric or parse as a positive
   * numeric and should be removed when set to a falsey value.
   * @type {Object}
   */
  hasPositiveNumericValue: {},

  /**
   * Whether the property can be used as a flag as well as with a value. Removed
   * when strictly equal to false; present without a value when strictly equal
   * to true; present with a value otherwise.
   * @type {Object}
   */
  hasOverloadedBooleanValue: {},

  /**
   * All of the isCustomAttribute() functions that have been injected.
   */
  _isCustomAttributeFunctions: [],

  /**
   * Checks whether a property name is a custom attribute.
   * @method
   */
  isCustomAttribute: function(attributeName) {
    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
      if (isCustomAttributeFn(attributeName)) {
        return true;
      }
    }
    return false;
  },

  /**
   * Returns the default property value for a DOM property (i.e., not an
   * attribute). Most default values are '' or false, but not all. Worse yet,
   * some (in particular, `type`) vary depending on the type of element.
   *
   * TODO: Is it better to grab all the possible properties when creating an
   * element to avoid having to create the same element twice?
   */
  getDefaultValueForProperty: function(nodeName, prop) {
    var nodeDefaults = defaultValueCache[nodeName];
    var testElement;
    if (!nodeDefaults) {
      defaultValueCache[nodeName] = nodeDefaults = {};
    }
    if (!(prop in nodeDefaults)) {
      testElement = document.createElement(nodeName);
      nodeDefaults[prop] = testElement[prop];
    }
    return nodeDefaults[prop];
  },

  injection: DOMPropertyInjection
};

module.exports = DOMProperty;

}).call(this,require('_process'))
},{"./invariant":304,"_process":2}],165:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMPropertyOperations
 * @typechecks static-only
 */

'use strict';

var DOMProperty = require("./DOMProperty");

var quoteAttributeValueForBrowser = require("./quoteAttributeValueForBrowser");
var warning = require("./warning");

function shouldIgnoreValue(name, value) {
  return value == null ||
    (DOMProperty.hasBooleanValue[name] && !value) ||
    (DOMProperty.hasNumericValue[name] && isNaN(value)) ||
    (DOMProperty.hasPositiveNumericValue[name] && (value < 1)) ||
    (DOMProperty.hasOverloadedBooleanValue[name] && value === false);
}

if ("production" !== process.env.NODE_ENV) {
  var reactProps = {
    children: true,
    dangerouslySetInnerHTML: true,
    key: true,
    ref: true
  };
  var warnedProperties = {};

  var warnUnknownProperty = function(name) {
    if (reactProps.hasOwnProperty(name) && reactProps[name] ||
        warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
      return;
    }

    warnedProperties[name] = true;
    var lowerCasedName = name.toLowerCase();

    // data-* attributes should be lowercase; suggest the lowercase version
    var standardName = (
      DOMProperty.isCustomAttribute(lowerCasedName) ?
        lowerCasedName :
      DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ?
        DOMProperty.getPossibleStandardName[lowerCasedName] :
        null
    );

    // For now, only warn when we have a suggested correction. This prevents
    // logging too much when using transferPropsTo.
    ("production" !== process.env.NODE_ENV ? warning(
      standardName == null,
      'Unknown DOM property %s. Did you mean %s?',
      name,
      standardName
    ) : null);

  };
}

/**
 * Operations for dealing with DOM properties.
 */
var DOMPropertyOperations = {

  /**
   * Creates markup for the ID property.
   *
   * @param {string} id Unescaped ID.
   * @return {string} Markup string.
   */
  createMarkupForID: function(id) {
    return DOMProperty.ID_ATTRIBUTE_NAME + '=' +
      quoteAttributeValueForBrowser(id);
  },

  /**
   * Creates markup for a property.
   *
   * @param {string} name
   * @param {*} value
   * @return {?string} Markup string, or null if the property was invalid.
   */
  createMarkupForProperty: function(name, value) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      if (shouldIgnoreValue(name, value)) {
        return '';
      }
      var attributeName = DOMProperty.getAttributeName[name];
      if (DOMProperty.hasBooleanValue[name] ||
          (DOMProperty.hasOverloadedBooleanValue[name] && value === true)) {
        return attributeName;
      }
      return attributeName + '=' + quoteAttributeValueForBrowser(value);
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        return '';
      }
      return name + '=' + quoteAttributeValueForBrowser(value);
    } else if ("production" !== process.env.NODE_ENV) {
      warnUnknownProperty(name);
    }
    return null;
  },

  /**
   * Sets the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   * @param {*} value
   */
  setValueForProperty: function(node, name, value) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      var mutationMethod = DOMProperty.getMutationMethod[name];
      if (mutationMethod) {
        mutationMethod(node, value);
      } else if (shouldIgnoreValue(name, value)) {
        this.deleteValueForProperty(node, name);
      } else if (DOMProperty.mustUseAttribute[name]) {
        // `setAttribute` with objects becomes only `[object]` in IE8/9,
        // ('' + value) makes it output the correct toString()-value.
        node.setAttribute(DOMProperty.getAttributeName[name], '' + value);
      } else {
        var propName = DOMProperty.getPropertyName[name];
        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
        // property type before comparing; only `value` does and is string.
        if (!DOMProperty.hasSideEffects[name] ||
            ('' + node[propName]) !== ('' + value)) {
          // Contrary to `setAttribute`, object properties are properly
          // `toString`ed by IE8/9.
          node[propName] = value;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        node.removeAttribute(name);
      } else {
        node.setAttribute(name, '' + value);
      }
    } else if ("production" !== process.env.NODE_ENV) {
      warnUnknownProperty(name);
    }
  },

  /**
   * Deletes the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForProperty: function(node, name) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      var mutationMethod = DOMProperty.getMutationMethod[name];
      if (mutationMethod) {
        mutationMethod(node, undefined);
      } else if (DOMProperty.mustUseAttribute[name]) {
        node.removeAttribute(DOMProperty.getAttributeName[name]);
      } else {
        var propName = DOMProperty.getPropertyName[name];
        var defaultValue = DOMProperty.getDefaultValueForProperty(
          node.nodeName,
          propName
        );
        if (!DOMProperty.hasSideEffects[name] ||
            ('' + node[propName]) !== defaultValue) {
          node[propName] = defaultValue;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      node.removeAttribute(name);
    } else if ("production" !== process.env.NODE_ENV) {
      warnUnknownProperty(name);
    }
  }

};

module.exports = DOMPropertyOperations;

}).call(this,require('_process'))
},{"./DOMProperty":164,"./quoteAttributeValueForBrowser":317,"./warning":325,"_process":2}],166:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Danger
 * @typechecks static-only
 */

/*jslint evil: true, sub: true */

'use strict';

var ExecutionEnvironment = require("./ExecutionEnvironment");

var createNodesFromMarkup = require("./createNodesFromMarkup");
var emptyFunction = require("./emptyFunction");
var getMarkupWrap = require("./getMarkupWrap");
var invariant = require("./invariant");

var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
var RESULT_INDEX_ATTR = 'data-danger-index';

/**
 * Extracts the `nodeName` from a string of markup.
 *
 * NOTE: Extracting the `nodeName` does not require a regular expression match
 * because we make assumptions about React-generated markup (i.e. there are no
 * spaces surrounding the opening tag and there is at least one attribute).
 *
 * @param {string} markup String of markup.
 * @return {string} Node name of the supplied markup.
 * @see http://jsperf.com/extract-nodename
 */
function getNodeName(markup) {
  return markup.substring(1, markup.indexOf(' '));
}

var Danger = {

  /**
   * Renders markup into an array of nodes. The markup is expected to render
   * into a list of root nodes. Also, the length of `resultList` and
   * `markupList` should be the same.
   *
   * @param {array<string>} markupList List of markup strings to render.
   * @return {array<DOMElement>} List of rendered nodes.
   * @internal
   */
  dangerouslyRenderMarkup: function(markupList) {
    ("production" !== process.env.NODE_ENV ? invariant(
      ExecutionEnvironment.canUseDOM,
      'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' +
      'thread. Make sure `window` and `document` are available globally ' +
      'before requiring React when unit testing or use ' +
      'React.renderToString for server rendering.'
    ) : invariant(ExecutionEnvironment.canUseDOM));
    var nodeName;
    var markupByNodeName = {};
    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
    for (var i = 0; i < markupList.length; i++) {
      ("production" !== process.env.NODE_ENV ? invariant(
        markupList[i],
        'dangerouslyRenderMarkup(...): Missing markup.'
      ) : invariant(markupList[i]));
      nodeName = getNodeName(markupList[i]);
      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
      markupByNodeName[nodeName][i] = markupList[i];
    }
    var resultList = [];
    var resultListAssignmentCount = 0;
    for (nodeName in markupByNodeName) {
      if (!markupByNodeName.hasOwnProperty(nodeName)) {
        continue;
      }
      var markupListByNodeName = markupByNodeName[nodeName];

      // This for-in loop skips the holes of the sparse array. The order of
      // iteration should follow the order of assignment, which happens to match
      // numerical index order, but we don't rely on that.
      var resultIndex;
      for (resultIndex in markupListByNodeName) {
        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
          var markup = markupListByNodeName[resultIndex];

          // Push the requested markup with an additional RESULT_INDEX_ATTR
          // attribute.  If the markup does not start with a < character, it
          // will be discarded below (with an appropriate console.error).
          markupListByNodeName[resultIndex] = markup.replace(
            OPEN_TAG_NAME_EXP,
            // This index will be parsed back out below.
            '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" '
          );
        }
      }

      // Render each group of markup with similar wrapping `nodeName`.
      var renderNodes = createNodesFromMarkup(
        markupListByNodeName.join(''),
        emptyFunction // Do nothing special with <script> tags.
      );

      for (var j = 0; j < renderNodes.length; ++j) {
        var renderNode = renderNodes[j];
        if (renderNode.hasAttribute &&
            renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
          renderNode.removeAttribute(RESULT_INDEX_ATTR);

          ("production" !== process.env.NODE_ENV ? invariant(
            !resultList.hasOwnProperty(resultIndex),
            'Danger: Assigning to an already-occupied result index.'
          ) : invariant(!resultList.hasOwnProperty(resultIndex)));

          resultList[resultIndex] = renderNode;

          // This should match resultList.length and markupList.length when
          // we're done.
          resultListAssignmentCount += 1;

        } else if ("production" !== process.env.NODE_ENV) {
          console.error(
            'Danger: Discarding unexpected node:',
            renderNode
          );
        }
      }
    }

    // Although resultList was populated out of order, it should now be a dense
    // array.
    ("production" !== process.env.NODE_ENV ? invariant(
      resultListAssignmentCount === resultList.length,
      'Danger: Did not assign to every index of resultList.'
    ) : invariant(resultListAssignmentCount === resultList.length));

    ("production" !== process.env.NODE_ENV ? invariant(
      resultList.length === markupList.length,
      'Danger: Expected markup to render %s nodes, but rendered %s.',
      markupList.length,
      resultList.length
    ) : invariant(resultList.length === markupList.length));

    return resultList;
  },

  /**
   * Replaces a node with a string of markup at its current position within its
   * parent. The markup must render into a single root node.
   *
   * @param {DOMElement} oldChild Child node to replace.
   * @param {string} markup Markup to render in place of the child node.
   * @internal
   */
  dangerouslyReplaceNodeWithMarkup: function(oldChild, markup) {
    ("production" !== process.env.NODE_ENV ? invariant(
      ExecutionEnvironment.canUseDOM,
      'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' +
      'worker thread. Make sure `window` and `document` are available ' +
      'globally before requiring React when unit testing or use ' +
      'React.renderToString for server rendering.'
    ) : invariant(ExecutionEnvironment.canUseDOM));
    ("production" !== process.env.NODE_ENV ? invariant(markup, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(markup));
    ("production" !== process.env.NODE_ENV ? invariant(
      oldChild.tagName.toLowerCase() !== 'html',
      'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' +
      '<html> node. This is because browser quirks make this unreliable ' +
      'and/or slow. If you want to render to the root you must use ' +
      'server rendering. See React.renderToString().'
    ) : invariant(oldChild.tagName.toLowerCase() !== 'html'));

    var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
    oldChild.parentNode.replaceChild(newChild, oldChild);
  }

};

module.exports = Danger;

}).call(this,require('_process'))
},{"./ExecutionEnvironment":175,"./createNodesFromMarkup":280,"./emptyFunction":283,"./getMarkupWrap":296,"./invariant":304,"_process":2}],167:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DefaultEventPluginOrder
 */

'use strict';

var keyOf = require("./keyOf");

/**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */
var DefaultEventPluginOrder = [
  keyOf({ResponderEventPlugin: null}),
  keyOf({SimpleEventPlugin: null}),
  keyOf({TapEventPlugin: null}),
  keyOf({EnterLeaveEventPlugin: null}),
  keyOf({ChangeEventPlugin: null}),
  keyOf({SelectEventPlugin: null}),
  keyOf({BeforeInputEventPlugin: null}),
  keyOf({AnalyticsEventPlugin: null}),
  keyOf({MobileSafariClickEventPlugin: null})
];

module.exports = DefaultEventPluginOrder;

},{"./keyOf":311}],168:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EnterLeaveEventPlugin
 * @typechecks static-only
 */

'use strict';

var EventConstants = require("./EventConstants");
var EventPropagators = require("./EventPropagators");
var SyntheticMouseEvent = require("./SyntheticMouseEvent");

var ReactMount = require("./ReactMount");
var keyOf = require("./keyOf");

var topLevelTypes = EventConstants.topLevelTypes;
var getFirstReactDOM = ReactMount.getFirstReactDOM;

var eventTypes = {
  mouseEnter: {
    registrationName: keyOf({onMouseEnter: null}),
    dependencies: [
      topLevelTypes.topMouseOut,
      topLevelTypes.topMouseOver
    ]
  },
  mouseLeave: {
    registrationName: keyOf({onMouseLeave: null}),
    dependencies: [
      topLevelTypes.topMouseOut,
      topLevelTypes.topMouseOver
    ]
  }
};

var extractedEvents = [null, null];

var EnterLeaveEventPlugin = {

  eventTypes: eventTypes,

  /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    if (topLevelType === topLevelTypes.topMouseOver &&
        (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
      return null;
    }
    if (topLevelType !== topLevelTypes.topMouseOut &&
        topLevelType !== topLevelTypes.topMouseOver) {
      // Must not be a mouse in or mouse out - ignoring.
      return null;
    }

    var win;
    if (topLevelTarget.window === topLevelTarget) {
      // `topLevelTarget` is probably a window object.
      win = topLevelTarget;
    } else {
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      var doc = topLevelTarget.ownerDocument;
      if (doc) {
        win = doc.defaultView || doc.parentWindow;
      } else {
        win = window;
      }
    }

    var from, to;
    if (topLevelType === topLevelTypes.topMouseOut) {
      from = topLevelTarget;
      to =
        getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement) ||
        win;
    } else {
      from = win;
      to = topLevelTarget;
    }

    if (from === to) {
      // Nothing pertains to our managed components.
      return null;
    }

    var fromID = from ? ReactMount.getID(from) : '';
    var toID = to ? ReactMount.getID(to) : '';

    var leave = SyntheticMouseEvent.getPooled(
      eventTypes.mouseLeave,
      fromID,
      nativeEvent
    );
    leave.type = 'mouseleave';
    leave.target = from;
    leave.relatedTarget = to;

    var enter = SyntheticMouseEvent.getPooled(
      eventTypes.mouseEnter,
      toID,
      nativeEvent
    );
    enter.type = 'mouseenter';
    enter.target = to;
    enter.relatedTarget = from;

    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);

    extractedEvents[0] = leave;
    extractedEvents[1] = enter;

    return extractedEvents;
  }

};

module.exports = EnterLeaveEventPlugin;

},{"./EventConstants":169,"./EventPropagators":174,"./ReactMount":230,"./SyntheticMouseEvent":266,"./keyOf":311}],169:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventConstants
 */

'use strict';

var keyMirror = require("./keyMirror");

var PropagationPhases = keyMirror({bubbled: null, captured: null});

/**
 * Types of raw signals from the browser caught at the top level.
 */
var topLevelTypes = keyMirror({
  topBlur: null,
  topChange: null,
  topClick: null,
  topCompositionEnd: null,
  topCompositionStart: null,
  topCompositionUpdate: null,
  topContextMenu: null,
  topCopy: null,
  topCut: null,
  topDoubleClick: null,
  topDrag: null,
  topDragEnd: null,
  topDragEnter: null,
  topDragExit: null,
  topDragLeave: null,
  topDragOver: null,
  topDragStart: null,
  topDrop: null,
  topError: null,
  topFocus: null,
  topInput: null,
  topKeyDown: null,
  topKeyPress: null,
  topKeyUp: null,
  topLoad: null,
  topMouseDown: null,
  topMouseMove: null,
  topMouseOut: null,
  topMouseOver: null,
  topMouseUp: null,
  topPaste: null,
  topReset: null,
  topScroll: null,
  topSelectionChange: null,
  topSubmit: null,
  topTextInput: null,
  topTouchCancel: null,
  topTouchEnd: null,
  topTouchMove: null,
  topTouchStart: null,
  topWheel: null
});

var EventConstants = {
  topLevelTypes: topLevelTypes,
  PropagationPhases: PropagationPhases
};

module.exports = EventConstants;

},{"./keyMirror":310}],170:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule EventListener
 * @typechecks
 */

var emptyFunction = require("./emptyFunction");

/**
 * Upstream version of event listener. Does not take into account specific
 * nature of platform.
 */
var EventListener = {
  /**
   * Listen to DOM events during the bubble phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  listen: function(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, false);
      return {
        remove: function() {
          target.removeEventListener(eventType, callback, false);
        }
      };
    } else if (target.attachEvent) {
      target.attachEvent('on' + eventType, callback);
      return {
        remove: function() {
          target.detachEvent('on' + eventType, callback);
        }
      };
    }
  },

  /**
   * Listen to DOM events during the capture phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  capture: function(target, eventType, callback) {
    if (!target.addEventListener) {
      if ("production" !== process.env.NODE_ENV) {
        console.error(
          'Attempted to listen to events during the capture phase on a ' +
          'browser that does not support the capture phase. Your application ' +
          'will not receive some events.'
        );
      }
      return {
        remove: emptyFunction
      };
    } else {
      target.addEventListener(eventType, callback, true);
      return {
        remove: function() {
          target.removeEventListener(eventType, callback, true);
        }
      };
    }
  },

  registerDefault: function() {}
};

module.exports = EventListener;

}).call(this,require('_process'))
},{"./emptyFunction":283,"_process":2}],171:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginHub
 */

'use strict';

var EventPluginRegistry = require("./EventPluginRegistry");
var EventPluginUtils = require("./EventPluginUtils");

var accumulateInto = require("./accumulateInto");
var forEachAccumulated = require("./forEachAccumulated");
var invariant = require("./invariant");

/**
 * Internal store for event listeners
 */
var listenerBank = {};

/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */
var eventQueue = null;

/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @private
 */
var executeDispatchesAndRelease = function(event) {
  if (event) {
    var executeDispatch = EventPluginUtils.executeDispatch;
    // Plugins can provide custom behavior when dispatching events.
    var PluginModule = EventPluginRegistry.getPluginModuleForEvent(event);
    if (PluginModule && PluginModule.executeDispatch) {
      executeDispatch = PluginModule.executeDispatch;
    }
    EventPluginUtils.executeDispatchesInOrder(event, executeDispatch);

    if (!event.isPersistent()) {
      event.constructor.release(event);
    }
  }
};

/**
 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
 *   hierarchy given ids of the logical DOM elements involved.
 */
var InstanceHandle = null;

function validateInstanceHandle() {
  var valid =
    InstanceHandle &&
    InstanceHandle.traverseTwoPhase &&
    InstanceHandle.traverseEnterLeave;
  ("production" !== process.env.NODE_ENV ? invariant(
    valid,
    'InstanceHandle not injected before use!'
  ) : invariant(valid));
}

/**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 */
var EventPluginHub = {

  /**
   * Methods for injecting dependencies.
   */
  injection: {

    /**
     * @param {object} InjectedMount
     * @public
     */
    injectMount: EventPluginUtils.injection.injectMount,

    /**
     * @param {object} InjectedInstanceHandle
     * @public
     */
    injectInstanceHandle: function(InjectedInstanceHandle) {
      InstanceHandle = InjectedInstanceHandle;
      if ("production" !== process.env.NODE_ENV) {
        validateInstanceHandle();
      }
    },

    getInstanceHandle: function() {
      if ("production" !== process.env.NODE_ENV) {
        validateInstanceHandle();
      }
      return InstanceHandle;
    },

    /**
     * @param {array} InjectedEventPluginOrder
     * @public
     */
    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

    /**
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
     */
    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

  },

  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,

  registrationNameModules: EventPluginRegistry.registrationNameModules,

  /**
   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {?function} listener The callback to store.
   */
  putListener: function(id, registrationName, listener) {
    ("production" !== process.env.NODE_ENV ? invariant(
      !listener || typeof listener === 'function',
      'Expected %s listener to be a function, instead got type %s',
      registrationName, typeof listener
    ) : invariant(!listener || typeof listener === 'function'));

    var bankForRegistrationName =
      listenerBank[registrationName] || (listenerBank[registrationName] = {});
    bankForRegistrationName[id] = listener;
  },

  /**
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @return {?function} The stored callback.
   */
  getListener: function(id, registrationName) {
    var bankForRegistrationName = listenerBank[registrationName];
    return bankForRegistrationName && bankForRegistrationName[id];
  },

  /**
   * Deletes a listener from the registration bank.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   */
  deleteListener: function(id, registrationName) {
    var bankForRegistrationName = listenerBank[registrationName];
    if (bankForRegistrationName) {
      delete bankForRegistrationName[id];
    }
  },

  /**
   * Deletes all listeners for the DOM element with the supplied ID.
   *
   * @param {string} id ID of the DOM element.
   */
  deleteAllListeners: function(id) {
    for (var registrationName in listenerBank) {
      delete listenerBank[registrationName][id];
    }
  },

  /**
   * Allows registered plugins an opportunity to extract events from top-level
   * native browser events.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @internal
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var events;
    var plugins = EventPluginRegistry.plugins;
    for (var i = 0, l = plugins.length; i < l; i++) {
      // Not every plugin in the ordering may be loaded at runtime.
      var possiblePlugin = plugins[i];
      if (possiblePlugin) {
        var extractedEvents = possiblePlugin.extractEvents(
          topLevelType,
          topLevelTarget,
          topLevelTargetID,
          nativeEvent
        );
        if (extractedEvents) {
          events = accumulateInto(events, extractedEvents);
        }
      }
    }
    return events;
  },

  /**
   * Enqueues a synthetic event that should be dispatched when
   * `processEventQueue` is invoked.
   *
   * @param {*} events An accumulation of synthetic events.
   * @internal
   */
  enqueueEvents: function(events) {
    if (events) {
      eventQueue = accumulateInto(eventQueue, events);
    }
  },

  /**
   * Dispatches all synthetic events on the event queue.
   *
   * @internal
   */
  processEventQueue: function() {
    // Set `eventQueue` to null before processing it so that we can tell if more
    // events get enqueued while processing.
    var processingEventQueue = eventQueue;
    eventQueue = null;
    forEachAccumulated(processingEventQueue, executeDispatchesAndRelease);
    ("production" !== process.env.NODE_ENV ? invariant(
      !eventQueue,
      'processEventQueue(): Additional events were enqueued while processing ' +
      'an event queue. Support for this has not yet been implemented.'
    ) : invariant(!eventQueue));
  },

  /**
   * These are needed for tests only. Do not use!
   */
  __purge: function() {
    listenerBank = {};
  },

  __getListenerBank: function() {
    return listenerBank;
  }

};

module.exports = EventPluginHub;

}).call(this,require('_process'))
},{"./EventPluginRegistry":172,"./EventPluginUtils":173,"./accumulateInto":272,"./forEachAccumulated":289,"./invariant":304,"_process":2}],172:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginRegistry
 * @typechecks static-only
 */

'use strict';

var invariant = require("./invariant");

/**
 * Injectable ordering of event plugins.
 */
var EventPluginOrder = null;

/**
 * Injectable mapping from names to event plugin modules.
 */
var namesToPlugins = {};

/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */
function recomputePluginOrdering() {
  if (!EventPluginOrder) {
    // Wait until an `EventPluginOrder` is injected.
    return;
  }
  for (var pluginName in namesToPlugins) {
    var PluginModule = namesToPlugins[pluginName];
    var pluginIndex = EventPluginOrder.indexOf(pluginName);
    ("production" !== process.env.NODE_ENV ? invariant(
      pluginIndex > -1,
      'EventPluginRegistry: Cannot inject event plugins that do not exist in ' +
      'the plugin ordering, `%s`.',
      pluginName
    ) : invariant(pluginIndex > -1));
    if (EventPluginRegistry.plugins[pluginIndex]) {
      continue;
    }
    ("production" !== process.env.NODE_ENV ? invariant(
      PluginModule.extractEvents,
      'EventPluginRegistry: Event plugins must implement an `extractEvents` ' +
      'method, but `%s` does not.',
      pluginName
    ) : invariant(PluginModule.extractEvents));
    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
    var publishedEvents = PluginModule.eventTypes;
    for (var eventName in publishedEvents) {
      ("production" !== process.env.NODE_ENV ? invariant(
        publishEventForPlugin(
          publishedEvents[eventName],
          PluginModule,
          eventName
        ),
        'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.',
        eventName,
        pluginName
      ) : invariant(publishEventForPlugin(
        publishedEvents[eventName],
        PluginModule,
        eventName
      )));
    }
  }
}

/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */
function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
  ("production" !== process.env.NODE_ENV ? invariant(
    !EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName),
    'EventPluginHub: More than one plugin attempted to publish the same ' +
    'event name, `%s`.',
    eventName
  ) : invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName)));
  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(
          phasedRegistrationName,
          PluginModule,
          eventName
        );
      }
    }
    return true;
  } else if (dispatchConfig.registrationName) {
    publishRegistrationName(
      dispatchConfig.registrationName,
      PluginModule,
      eventName
    );
    return true;
  }
  return false;
}

/**
 * Publishes a registration name that is used to identify dispatched events and
 * can be used with `EventPluginHub.putListener` to register listeners.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */
function publishRegistrationName(registrationName, PluginModule, eventName) {
  ("production" !== process.env.NODE_ENV ? invariant(
    !EventPluginRegistry.registrationNameModules[registrationName],
    'EventPluginHub: More than one plugin attempted to publish the same ' +
    'registration name, `%s`.',
    registrationName
  ) : invariant(!EventPluginRegistry.registrationNameModules[registrationName]));
  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
  EventPluginRegistry.registrationNameDependencies[registrationName] =
    PluginModule.eventTypes[eventName].dependencies;
}

/**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 */
var EventPluginRegistry = {

  /**
   * Ordered list of injected plugins.
   */
  plugins: [],

  /**
   * Mapping from event name to dispatch config
   */
  eventNameDispatchConfigs: {},

  /**
   * Mapping from registration name to plugin module
   */
  registrationNameModules: {},

  /**
   * Mapping from registration name to event name
   */
  registrationNameDependencies: {},

  /**
   * Injects an ordering of plugins (by plugin name). This allows the ordering
   * to be decoupled from injection of the actual plugins so that ordering is
   * always deterministic regardless of packaging, on-the-fly injection, etc.
   *
   * @param {array} InjectedEventPluginOrder
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginOrder}
   */
  injectEventPluginOrder: function(InjectedEventPluginOrder) {
    ("production" !== process.env.NODE_ENV ? invariant(
      !EventPluginOrder,
      'EventPluginRegistry: Cannot inject event plugin ordering more than ' +
      'once. You are likely trying to load more than one copy of React.'
    ) : invariant(!EventPluginOrder));
    // Clone the ordering so it cannot be dynamically mutated.
    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
    recomputePluginOrdering();
  },

  /**
   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
   * in the ordering injected by `injectEventPluginOrder`.
   *
   * Plugins can be injected as part of page initialization or on-the-fly.
   *
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginsByName}
   */
  injectEventPluginsByName: function(injectedNamesToPlugins) {
    var isOrderingDirty = false;
    for (var pluginName in injectedNamesToPlugins) {
      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
        continue;
      }
      var PluginModule = injectedNamesToPlugins[pluginName];
      if (!namesToPlugins.hasOwnProperty(pluginName) ||
          namesToPlugins[pluginName] !== PluginModule) {
        ("production" !== process.env.NODE_ENV ? invariant(
          !namesToPlugins[pluginName],
          'EventPluginRegistry: Cannot inject two different event plugins ' +
          'using the same name, `%s`.',
          pluginName
        ) : invariant(!namesToPlugins[pluginName]));
        namesToPlugins[pluginName] = PluginModule;
        isOrderingDirty = true;
      }
    }
    if (isOrderingDirty) {
      recomputePluginOrdering();
    }
  },

  /**
   * Looks up the plugin for the supplied event.
   *
   * @param {object} event A synthetic event.
   * @return {?object} The plugin that created the supplied event.
   * @internal
   */
  getPluginModuleForEvent: function(event) {
    var dispatchConfig = event.dispatchConfig;
    if (dispatchConfig.registrationName) {
      return EventPluginRegistry.registrationNameModules[
        dispatchConfig.registrationName
      ] || null;
    }
    for (var phase in dispatchConfig.phasedRegistrationNames) {
      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
        continue;
      }
      var PluginModule = EventPluginRegistry.registrationNameModules[
        dispatchConfig.phasedRegistrationNames[phase]
      ];
      if (PluginModule) {
        return PluginModule;
      }
    }
    return null;
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _resetEventPlugins: function() {
    EventPluginOrder = null;
    for (var pluginName in namesToPlugins) {
      if (namesToPlugins.hasOwnProperty(pluginName)) {
        delete namesToPlugins[pluginName];
      }
    }
    EventPluginRegistry.plugins.length = 0;

    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
    for (var eventName in eventNameDispatchConfigs) {
      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
        delete eventNameDispatchConfigs[eventName];
      }
    }

    var registrationNameModules = EventPluginRegistry.registrationNameModules;
    for (var registrationName in registrationNameModules) {
      if (registrationNameModules.hasOwnProperty(registrationName)) {
        delete registrationNameModules[registrationName];
      }
    }
  }

};

module.exports = EventPluginRegistry;

}).call(this,require('_process'))
},{"./invariant":304,"_process":2}],173:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginUtils
 */

'use strict';

var EventConstants = require("./EventConstants");

var invariant = require("./invariant");

/**
 * Injected dependencies:
 */

/**
 * - `Mount`: [required] Module that can convert between React dom IDs and
 *   actual node references.
 */
var injection = {
  Mount: null,
  injectMount: function(InjectedMount) {
    injection.Mount = InjectedMount;
    if ("production" !== process.env.NODE_ENV) {
      ("production" !== process.env.NODE_ENV ? invariant(
        InjectedMount && InjectedMount.getNode,
        'EventPluginUtils.injection.injectMount(...): Injected Mount module ' +
        'is missing getNode.'
      ) : invariant(InjectedMount && InjectedMount.getNode));
    }
  }
};

var topLevelTypes = EventConstants.topLevelTypes;

function isEndish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseUp ||
         topLevelType === topLevelTypes.topTouchEnd ||
         topLevelType === topLevelTypes.topTouchCancel;
}

function isMoveish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseMove ||
         topLevelType === topLevelTypes.topTouchMove;
}
function isStartish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseDown ||
         topLevelType === topLevelTypes.topTouchStart;
}


var validateEventDispatches;
if ("production" !== process.env.NODE_ENV) {
  validateEventDispatches = function(event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchIDs = event._dispatchIDs;

    var listenersIsArr = Array.isArray(dispatchListeners);
    var idsIsArr = Array.isArray(dispatchIDs);
    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
    var listenersLen = listenersIsArr ?
      dispatchListeners.length :
      dispatchListeners ? 1 : 0;

    ("production" !== process.env.NODE_ENV ? invariant(
      idsIsArr === listenersIsArr && IDsLen === listenersLen,
      'EventPluginUtils: Invalid `event`.'
    ) : invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen));
  };
}

/**
 * Invokes `cb(event, listener, id)`. Avoids using call if no scope is
 * provided. The `(listener,id)` pair effectively forms the "dispatch" but are
 * kept separate to conserve memory.
 */
function forEachEventDispatch(event, cb) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if ("production" !== process.env.NODE_ENV) {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      cb(event, dispatchListeners[i], dispatchIDs[i]);
    }
  } else if (dispatchListeners) {
    cb(event, dispatchListeners, dispatchIDs);
  }
}

/**
 * Default implementation of PluginModule.executeDispatch().
 * @param {SyntheticEvent} SyntheticEvent to handle
 * @param {function} Application-level callback
 * @param {string} domID DOM id to pass to the callback.
 */
function executeDispatch(event, listener, domID) {
  event.currentTarget = injection.Mount.getNode(domID);
  var returnValue = listener(event, domID);
  event.currentTarget = null;
  return returnValue;
}

/**
 * Standard/simple iteration through an event's collected dispatches.
 */
function executeDispatchesInOrder(event, cb) {
  forEachEventDispatch(event, cb);
  event._dispatchListeners = null;
  event._dispatchIDs = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches, but stops
 * at the first dispatch execution returning true, and returns that id.
 *
 * @return id of the first dispatch execution who's listener returns true, or
 * null if no listener returned true.
 */
function executeDispatchesInOrderStopAtTrueImpl(event) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if ("production" !== process.env.NODE_ENV) {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      if (dispatchListeners[i](event, dispatchIDs[i])) {
        return dispatchIDs[i];
      }
    }
  } else if (dispatchListeners) {
    if (dispatchListeners(event, dispatchIDs)) {
      return dispatchIDs;
    }
  }
  return null;
}

/**
 * @see executeDispatchesInOrderStopAtTrueImpl
 */
function executeDispatchesInOrderStopAtTrue(event) {
  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
  event._dispatchIDs = null;
  event._dispatchListeners = null;
  return ret;
}

/**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return The return value of executing the single dispatch.
 */
function executeDirectDispatch(event) {
  if ("production" !== process.env.NODE_ENV) {
    validateEventDispatches(event);
  }
  var dispatchListener = event._dispatchListeners;
  var dispatchID = event._dispatchIDs;
  ("production" !== process.env.NODE_ENV ? invariant(
    !Array.isArray(dispatchListener),
    'executeDirectDispatch(...): Invalid `event`.'
  ) : invariant(!Array.isArray(dispatchListener)));
  var res = dispatchListener ?
    dispatchListener(event, dispatchID) :
    null;
  event._dispatchListeners = null;
  event._dispatchIDs = null;
  return res;
}

/**
 * @param {SyntheticEvent} event
 * @return {bool} True iff number of dispatches accumulated is greater than 0.
 */
function hasDispatches(event) {
  return !!event._dispatchListeners;
}

/**
 * General utilities that are useful in creating custom Event Plugins.
 */
var EventPluginUtils = {
  isEndish: isEndish,
  isMoveish: isMoveish,
  isStartish: isStartish,

  executeDirectDispatch: executeDirectDispatch,
  executeDispatch: executeDispatch,
  executeDispatchesInOrder: executeDispatchesInOrder,
  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
  hasDispatches: hasDispatches,
  injection: injection,
  useTouchEvents: false
};

module.exports = EventPluginUtils;

}).call(this,require('_process'))
},{"./EventConstants":169,"./invariant":304,"_process":2}],174:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPropagators
 */

'use strict';

var EventConstants = require("./EventConstants");
var EventPluginHub = require("./EventPluginHub");

var accumulateInto = require("./accumulateInto");
var forEachAccumulated = require("./forEachAccumulated");

var PropagationPhases = EventConstants.PropagationPhases;
var getListener = EventPluginHub.getListener;

/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */
function listenerAtPhase(id, event, propagationPhase) {
  var registrationName =
    event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(id, registrationName);
}

/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */
function accumulateDirectionalDispatches(domID, upwards, event) {
  if ("production" !== process.env.NODE_ENV) {
    if (!domID) {
      throw new Error('Dispatching id must not be null');
    }
  }
  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
  var listener = listenerAtPhase(domID, event, phase);
  if (listener) {
    event._dispatchListeners =
      accumulateInto(event._dispatchListeners, listener);
    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
  }
}

/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We can not perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */
function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(
      event.dispatchMarker,
      accumulateDirectionalDispatches,
      event
    );
  }
}


/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */
function accumulateDispatches(id, ignoredDirection, event) {
  if (event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(id, registrationName);
    if (listener) {
      event._dispatchListeners =
        accumulateInto(event._dispatchListeners, listener);
      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
    }
  }
}

/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */
function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event.dispatchMarker, null, event);
  }
}

function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(
    fromID,
    toID,
    accumulateDispatches,
    leave,
    enter
  );
}


function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);
}



/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing event a
 * single one.
 *
 * @constructor EventPropagators
 */
var EventPropagators = {
  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
  accumulateDirectDispatches: accumulateDirectDispatches,
  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
};

module.exports = EventPropagators;

}).call(this,require('_process'))
},{"./EventConstants":169,"./EventPluginHub":171,"./accumulateInto":272,"./forEachAccumulated":289,"_process":2}],175:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ExecutionEnvironment
 */

/*jslint evil: true */

"use strict";

var canUseDOM = !!(
  (typeof window !== 'undefined' &&
  window.document && window.document.createElement)
);

/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */
var ExecutionEnvironment = {

  canUseDOM: canUseDOM,

  canUseWorkers: typeof Worker !== 'undefined',

  canUseEventListeners:
    canUseDOM && !!(window.addEventListener || window.attachEvent),

  canUseViewport: canUseDOM && !!window.screen,

  isInWorker: !canUseDOM // For now, this is true - might change in the future.

};

module.exports = ExecutionEnvironment;

},{}],176:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule FallbackCompositionState
 * @typechecks static-only
 */

'use strict';

var PooledClass = require("./PooledClass");

var assign = require("./Object.assign");
var getTextContentAccessor = require("./getTextContentAccessor");

/**
 * This helper class stores information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 * @param {DOMEventTarget} root
 */
function FallbackCompositionState(root) {
  this._root = root;
  this._startText = this.getText();
  this._fallbackText = null;
}

assign(FallbackCompositionState.prototype, {
  /**
   * Get current text of input.
   *
   * @return {string}
   */
  getText: function() {
    if ('value' in this._root) {
      return this._root.value;
    }
    return this._root[getTextContentAccessor()];
  },

  /**
   * Determine the differing substring between the initially stored
   * text content and the current content.
   *
   * @return {string}
   */
  getData: function() {
    if (this._fallbackText) {
      return this._fallbackText;
    }

    var start;
    var startValue = this._startText;
    var startLength = startValue.length;
    var end;
    var endValue = this.getText();
    var endLength = endValue.length;

    for (start = 0; start < startLength; start++) {
      if (startValue[start] !== endValue[start]) {
        break;
      }
    }

    var minEnd = startLength - start;
    for (end = 1; end <= minEnd; end++) {
      if (startValue[startLength - end] !== endValue[endLength - end]) {
        break;
      }
    }

    var sliceTail = end > 1 ? 1 - end : undefined;
    this._fallbackText = endValue.slice(start, sliceTail);
    return this._fallbackText;
  }
});

PooledClass.addPoolingTo(FallbackCompositionState);

module.exports = FallbackCompositionState;

},{"./Object.assign":182,"./PooledClass":183,"./getTextContentAccessor":299}],177:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule HTMLDOMPropertyConfig
 */

/*jslint bitwise: true*/

'use strict';

var DOMProperty = require("./DOMProperty");
var ExecutionEnvironment = require("./ExecutionEnvironment");

var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
var HAS_POSITIVE_NUMERIC_VALUE =
  DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
var HAS_OVERLOADED_BOOLEAN_VALUE =
  DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

var hasSVG;
if (ExecutionEnvironment.canUseDOM) {
  var implementation = document.implementation;
  hasSVG = (
    implementation &&
    implementation.hasFeature &&
    implementation.hasFeature(
      'http://www.w3.org/TR/SVG11/feature#BasicStructure',
      '1.1'
    )
  );
}


var HTMLDOMPropertyConfig = {
  isCustomAttribute: RegExp.prototype.test.bind(
    /^(data|aria)-[a-z_][a-z\d_.\-]*$/
  ),
  Properties: {
    /**
     * Standard Properties
     */
    accept: null,
    acceptCharset: null,
    accessKey: null,
    action: null,
    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    allowTransparency: MUST_USE_ATTRIBUTE,
    alt: null,
    async: HAS_BOOLEAN_VALUE,
    autoComplete: null,
    // autoFocus is polyfilled/normalized by AutoFocusMixin
    // autoFocus: HAS_BOOLEAN_VALUE,
    autoPlay: HAS_BOOLEAN_VALUE,
    cellPadding: null,
    cellSpacing: null,
    charSet: MUST_USE_ATTRIBUTE,
    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    classID: MUST_USE_ATTRIBUTE,
    // To set className on SVG elements, it's necessary to use .setAttribute;
    // this works on HTML elements too in all browsers except IE8. Conveniently,
    // IE8 doesn't support SVG and so we can simply use the attribute in
    // browsers that support SVG and the property in browsers that don't,
    // regardless of whether the element is HTML or SVG.
    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    colSpan: null,
    content: null,
    contentEditable: null,
    contextMenu: MUST_USE_ATTRIBUTE,
    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    coords: null,
    crossOrigin: null,
    data: null, // For `<object />` acts as `src`.
    dateTime: MUST_USE_ATTRIBUTE,
    defer: HAS_BOOLEAN_VALUE,
    dir: null,
    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    download: HAS_OVERLOADED_BOOLEAN_VALUE,
    draggable: null,
    encType: null,
    form: MUST_USE_ATTRIBUTE,
    formAction: MUST_USE_ATTRIBUTE,
    formEncType: MUST_USE_ATTRIBUTE,
    formMethod: MUST_USE_ATTRIBUTE,
    formNoValidate: HAS_BOOLEAN_VALUE,
    formTarget: MUST_USE_ATTRIBUTE,
    frameBorder: MUST_USE_ATTRIBUTE,
    headers: null,
    height: MUST_USE_ATTRIBUTE,
    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    high: null,
    href: null,
    hrefLang: null,
    htmlFor: null,
    httpEquiv: null,
    icon: null,
    id: MUST_USE_PROPERTY,
    label: null,
    lang: null,
    list: MUST_USE_ATTRIBUTE,
    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    low: null,
    manifest: MUST_USE_ATTRIBUTE,
    marginHeight: null,
    marginWidth: null,
    max: null,
    maxLength: MUST_USE_ATTRIBUTE,
    media: MUST_USE_ATTRIBUTE,
    mediaGroup: null,
    method: null,
    min: null,
    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    name: null,
    noValidate: HAS_BOOLEAN_VALUE,
    open: HAS_BOOLEAN_VALUE,
    optimum: null,
    pattern: null,
    placeholder: null,
    poster: null,
    preload: null,
    radioGroup: null,
    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    rel: null,
    required: HAS_BOOLEAN_VALUE,
    role: MUST_USE_ATTRIBUTE,
    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    rowSpan: null,
    sandbox: null,
    scope: null,
    scoped: HAS_BOOLEAN_VALUE,
    scrolling: null,
    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    shape: null,
    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    sizes: MUST_USE_ATTRIBUTE,
    span: HAS_POSITIVE_NUMERIC_VALUE,
    spellCheck: null,
    src: null,
    srcDoc: MUST_USE_PROPERTY,
    srcSet: MUST_USE_ATTRIBUTE,
    start: HAS_NUMERIC_VALUE,
    step: null,
    style: null,
    tabIndex: null,
    target: null,
    title: null,
    type: null,
    useMap: null,
    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
    width: MUST_USE_ATTRIBUTE,
    wmode: MUST_USE_ATTRIBUTE,

    /**
     * Non-standard Properties
     */
    // autoCapitalize and autoCorrect are supported in Mobile Safari for
    // keyboard hints.
    autoCapitalize: null,
    autoCorrect: null,
    // itemProp, itemScope, itemType are for
    // Microdata support. See http://schema.org/docs/gs.html
    itemProp: MUST_USE_ATTRIBUTE,
    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    itemType: MUST_USE_ATTRIBUTE,
    // itemID and itemRef are for Microdata support as well but
    // only specified in the the WHATWG spec document. See
    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
    itemID: MUST_USE_ATTRIBUTE,
    itemRef: MUST_USE_ATTRIBUTE,
    // property is supported for OpenGraph in meta tags.
    property: null,
    // IE-only attribute that controls focus behavior
    unselectable: MUST_USE_ATTRIBUTE
  },
  DOMAttributeNames: {
    acceptCharset: 'accept-charset',
    className: 'class',
    htmlFor: 'for',
    httpEquiv: 'http-equiv'
  },
  DOMPropertyNames: {
    autoCapitalize: 'autocapitalize',
    autoComplete: 'autocomplete',
    autoCorrect: 'autocorrect',
    autoFocus: 'autofocus',
    autoPlay: 'autoplay',
    // `encoding` is equivalent to `enctype`, IE8 lacks an `enctype` setter.
    // http://www.w3.org/TR/html5/forms.html#dom-fs-encoding
    encType: 'encoding',
    hrefLang: 'hreflang',
    radioGroup: 'radiogroup',
    spellCheck: 'spellcheck',
    srcDoc: 'srcdoc',
    srcSet: 'srcset'
  }
};

module.exports = HTMLDOMPropertyConfig;

},{"./DOMProperty":164,"./ExecutionEnvironment":175}],178:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule LinkedStateMixin
 * @typechecks static-only
 */

'use strict';

var ReactLink = require("./ReactLink");
var ReactStateSetters = require("./ReactStateSetters");

/**
 * A simple mixin around ReactLink.forState().
 */
var LinkedStateMixin = {
  /**
   * Create a ReactLink that's linked to part of this component's state. The
   * ReactLink will have the current value of this.state[key] and will call
   * setState() when a change is requested.
   *
   * @param {string} key state key to update. Note: you may want to use keyOf()
   * if you're using Google Closure Compiler advanced mode.
   * @return {ReactLink} ReactLink instance linking to the state.
   */
  linkState: function(key) {
    return new ReactLink(
      this.state[key],
      ReactStateSetters.createStateKeySetter(this, key)
    );
  }
};

module.exports = LinkedStateMixin;

},{"./ReactLink":228,"./ReactStateSetters":247}],179:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule LinkedValueUtils
 * @typechecks static-only
 */

'use strict';

var ReactPropTypes = require("./ReactPropTypes");

var invariant = require("./invariant");

var hasReadOnlyValue = {
  'button': true,
  'checkbox': true,
  'image': true,
  'hidden': true,
  'radio': true,
  'reset': true,
  'submit': true
};

function _assertSingleLink(input) {
  ("production" !== process.env.NODE_ENV ? invariant(
    input.props.checkedLink == null || input.props.valueLink == null,
    'Cannot provide a checkedLink and a valueLink. If you want to use ' +
    'checkedLink, you probably don\'t want to use valueLink and vice versa.'
  ) : invariant(input.props.checkedLink == null || input.props.valueLink == null));
}
function _assertValueLink(input) {
  _assertSingleLink(input);
  ("production" !== process.env.NODE_ENV ? invariant(
    input.props.value == null && input.props.onChange == null,
    'Cannot provide a valueLink and a value or onChange event. If you want ' +
    'to use value or onChange, you probably don\'t want to use valueLink.'
  ) : invariant(input.props.value == null && input.props.onChange == null));
}

function _assertCheckedLink(input) {
  _assertSingleLink(input);
  ("production" !== process.env.NODE_ENV ? invariant(
    input.props.checked == null && input.props.onChange == null,
    'Cannot provide a checkedLink and a checked property or onChange event. ' +
    'If you want to use checked or onChange, you probably don\'t want to ' +
    'use checkedLink'
  ) : invariant(input.props.checked == null && input.props.onChange == null));
}

/**
 * @param {SyntheticEvent} e change event to handle
 */
function _handleLinkedValueChange(e) {
  /*jshint validthis:true */
  this.props.valueLink.requestChange(e.target.value);
}

/**
  * @param {SyntheticEvent} e change event to handle
  */
function _handleLinkedCheckChange(e) {
  /*jshint validthis:true */
  this.props.checkedLink.requestChange(e.target.checked);
}

/**
 * Provide a linked `value` attribute for controlled forms. You should not use
 * this outside of the ReactDOM controlled form components.
 */
var LinkedValueUtils = {
  Mixin: {
    propTypes: {
      value: function(props, propName, componentName) {
        if (!props[propName] ||
            hasReadOnlyValue[props.type] ||
            props.onChange ||
            props.readOnly ||
            props.disabled) {
          return null;
        }
        return new Error(
          'You provided a `value` prop to a form field without an ' +
          '`onChange` handler. This will render a read-only field. If ' +
          'the field should be mutable use `defaultValue`. Otherwise, ' +
          'set either `onChange` or `readOnly`.'
        );
      },
      checked: function(props, propName, componentName) {
        if (!props[propName] ||
            props.onChange ||
            props.readOnly ||
            props.disabled) {
          return null;
        }
        return new Error(
          'You provided a `checked` prop to a form field without an ' +
          '`onChange` handler. This will render a read-only field. If ' +
          'the field should be mutable use `defaultChecked`. Otherwise, ' +
          'set either `onChange` or `readOnly`.'
        );
      },
      onChange: ReactPropTypes.func
    }
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {*} current value of the input either from value prop or link.
   */
  getValue: function(input) {
    if (input.props.valueLink) {
      _assertValueLink(input);
      return input.props.valueLink.value;
    }
    return input.props.value;
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {*} current checked status of the input either from checked prop
   *             or link.
   */
  getChecked: function(input) {
    if (input.props.checkedLink) {
      _assertCheckedLink(input);
      return input.props.checkedLink.value;
    }
    return input.props.checked;
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {function} change callback either from onChange prop or link.
   */
  getOnChange: function(input) {
    if (input.props.valueLink) {
      _assertValueLink(input);
      return _handleLinkedValueChange;
    } else if (input.props.checkedLink) {
      _assertCheckedLink(input);
      return _handleLinkedCheckChange;
    }
    return input.props.onChange;
  }
};

module.exports = LinkedValueUtils;

}).call(this,require('_process'))
},{"./ReactPropTypes":239,"./invariant":304,"_process":2}],180:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule LocalEventTrapMixin
 */

'use strict';

var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");

var accumulateInto = require("./accumulateInto");
var forEachAccumulated = require("./forEachAccumulated");
var invariant = require("./invariant");

function remove(event) {
  event.remove();
}

var LocalEventTrapMixin = {
  trapBubbledEvent:function(topLevelType, handlerBaseName) {
    ("production" !== process.env.NODE_ENV ? invariant(this.isMounted(), 'Must be mounted to trap events') : invariant(this.isMounted()));
    // If a component renders to null or if another component fatals and causes
    // the state of the tree to be corrupted, `node` here can be null.
    var node = this.getDOMNode();
    ("production" !== process.env.NODE_ENV ? invariant(
      node,
      'LocalEventTrapMixin.trapBubbledEvent(...): Requires node to be rendered.'
    ) : invariant(node));
    var listener = ReactBrowserEventEmitter.trapBubbledEvent(
      topLevelType,
      handlerBaseName,
      node
    );
    this._localEventListeners =
      accumulateInto(this._localEventListeners, listener);
  },

  // trapCapturedEvent would look nearly identical. We don't implement that
  // method because it isn't currently needed.

  componentWillUnmount:function() {
    if (this._localEventListeners) {
      forEachAccumulated(this._localEventListeners, remove);
    }
  }
};

module.exports = LocalEventTrapMixin;

}).call(this,require('_process'))
},{"./ReactBrowserEventEmitter":186,"./accumulateInto":272,"./forEachAccumulated":289,"./invariant":304,"_process":2}],181:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule MobileSafariClickEventPlugin
 * @typechecks static-only
 */

'use strict';

var EventConstants = require("./EventConstants");

var emptyFunction = require("./emptyFunction");

var topLevelTypes = EventConstants.topLevelTypes;

/**
 * Mobile Safari does not fire properly bubble click events on non-interactive
 * elements, which means delegated click listeners do not fire. The workaround
 * for this bug involves attaching an empty click listener on the target node.
 *
 * This particular plugin works around the bug by attaching an empty click
 * listener on `touchstart` (which does fire on every element).
 */
var MobileSafariClickEventPlugin = {

  eventTypes: null,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    if (topLevelType === topLevelTypes.topTouchStart) {
      var target = nativeEvent.target;
      if (target && !target.onclick) {
        target.onclick = emptyFunction;
      }
    }
  }

};

module.exports = MobileSafariClickEventPlugin;

},{"./EventConstants":169,"./emptyFunction":283}],182:[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Object.assign
 */

// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign

'use strict';

function assign(target, sources) {
  if (target == null) {
    throw new TypeError('Object.assign target cannot be null or undefined');
  }

  var to = Object(target);
  var hasOwnProperty = Object.prototype.hasOwnProperty;

  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
    var nextSource = arguments[nextIndex];
    if (nextSource == null) {
      continue;
    }

    var from = Object(nextSource);

    // We don't currently support accessors nor proxies. Therefore this
    // copy cannot throw. If we ever supported this then we must handle
    // exceptions and side-effects. We don't support symbols so they won't
    // be transferred.

    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to[key] = from[key];
      }
    }
  }

  return to;
}

module.exports = assign;

},{}],183:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule PooledClass
 */

'use strict';

var invariant = require("./invariant");

/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
var oneArgumentPooler = function(copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function(a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function(a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fiveArgumentPooler = function(a1, a2, a3, a4, a5) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4, a5);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4, a5);
  }
};

var standardReleaser = function(instance) {
  var Klass = this;
  ("production" !== process.env.NODE_ENV ? invariant(
    instance instanceof Klass,
    'Trying to release an instance into a pool of a different type.'
  ) : invariant(instance instanceof Klass));
  if (instance.destructor) {
    instance.destructor();
  }
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances (optional).
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
var addPoolingTo = function(CopyConstructor, pooler) {
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fiveArgumentPooler: fiveArgumentPooler
};

module.exports = PooledClass;

}).call(this,require('_process'))
},{"./invariant":304,"_process":2}],184:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule React
 */

/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

'use strict';

var EventPluginUtils = require("./EventPluginUtils");
var ReactChildren = require("./ReactChildren");
var ReactComponent = require("./ReactComponent");
var ReactClass = require("./ReactClass");
var ReactContext = require("./ReactContext");
var ReactCurrentOwner = require("./ReactCurrentOwner");
var ReactElement = require("./ReactElement");
var ReactElementValidator = require("./ReactElementValidator");
var ReactDOM = require("./ReactDOM");
var ReactDOMTextComponent = require("./ReactDOMTextComponent");
var ReactDefaultInjection = require("./ReactDefaultInjection");
var ReactInstanceHandles = require("./ReactInstanceHandles");
var ReactMount = require("./ReactMount");
var ReactPerf = require("./ReactPerf");
var ReactPropTypes = require("./ReactPropTypes");
var ReactReconciler = require("./ReactReconciler");
var ReactServerRendering = require("./ReactServerRendering");

var assign = require("./Object.assign");
var findDOMNode = require("./findDOMNode");
var onlyChild = require("./onlyChild");

ReactDefaultInjection.inject();

var createElement = ReactElement.createElement;
var createFactory = ReactElement.createFactory;
var cloneElement = ReactElement.cloneElement;

if ("production" !== process.env.NODE_ENV) {
  createElement = ReactElementValidator.createElement;
  createFactory = ReactElementValidator.createFactory;
  cloneElement = ReactElementValidator.cloneElement;
}

var render = ReactPerf.measure('React', 'render', ReactMount.render);

var React = {
  Children: {
    map: ReactChildren.map,
    forEach: ReactChildren.forEach,
    count: ReactChildren.count,
    only: onlyChild
  },
  Component: ReactComponent,
  DOM: ReactDOM,
  PropTypes: ReactPropTypes,
  initializeTouchEvents: function(shouldUseTouch) {
    EventPluginUtils.useTouchEvents = shouldUseTouch;
  },
  createClass: ReactClass.createClass,
  createElement: createElement,
  cloneElement: cloneElement,
  createFactory: createFactory,
  createMixin: function(mixin) {
    // Currently a noop. Will be used to validate and trace mixins.
    return mixin;
  },
  constructAndRenderComponent: ReactMount.constructAndRenderComponent,
  constructAndRenderComponentByID: ReactMount.constructAndRenderComponentByID,
  findDOMNode: findDOMNode,
  render: render,
  renderToString: ReactServerRendering.renderToString,
  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
  isValidElement: ReactElement.isValidElement,
  withContext: ReactContext.withContext,

  // Hook for JSX spread, don't use this for anything else.
  __spread: assign
};

// Inject the runtime into a devtools global hook regardless of browser.
// Allows for debugging when the hook is injected on the page.
if (
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
    CurrentOwner: ReactCurrentOwner,
    InstanceHandles: ReactInstanceHandles,
    Mount: ReactMount,
    Reconciler: ReactReconciler,
    TextComponent: ReactDOMTextComponent
  });
}

if ("production" !== process.env.NODE_ENV) {
  var ExecutionEnvironment = require("./ExecutionEnvironment");
  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

    // If we're in Chrome, look for the devtools marker and provide a download
    // link if not installed.
    if (navigator.userAgent.indexOf('Chrome') > -1) {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
        console.debug(
          'Download the React DevTools for a better development experience: ' +
          'https://fb.me/react-devtools'
        );
      }
    }

    var expectedFeatures = [
      // shims
      Array.isArray,
      Array.prototype.every,
      Array.prototype.forEach,
      Array.prototype.indexOf,
      Array.prototype.map,
      Date.now,
      Function.prototype.bind,
      Object.keys,
      String.prototype.split,
      String.prototype.trim,

      // shams
      Object.create,
      Object.freeze
    ];

    for (var i = 0; i < expectedFeatures.length; i++) {
      if (!expectedFeatures[i]) {
        console.error(
          'One or more ES5 shim/shams expected by React are not available: ' +
          'https://fb.me/react-warning-polyfills'
        );
        break;
      }
    }
  }
}

React.version = '0.13.3';

module.exports = React;

}).call(this,require('_process'))
},{"./EventPluginUtils":173,"./ExecutionEnvironment":175,"./Object.assign":182,"./ReactChildren":190,"./ReactClass":191,"./ReactComponent":192,"./ReactContext":197,"./ReactCurrentOwner":198,"./ReactDOM":199,"./ReactDOMTextComponent":210,"./ReactDefaultInjection":213,"./ReactElement":216,"./ReactElementValidator":217,"./ReactInstanceHandles":225,"./ReactMount":230,"./ReactPerf":235,"./ReactPropTypes":239,"./ReactReconciler":242,"./ReactServerRendering":245,"./findDOMNode":286,"./onlyChild":314,"_process":2}],185:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactBrowserComponentMixin
 */

'use strict';

var findDOMNode = require("./findDOMNode");

var ReactBrowserComponentMixin = {
  /**
   * Returns the DOM node rendered by this component.
   *
   * @return {DOMElement} The root node of this component.
   * @final
   * @protected
   */
  getDOMNode: function() {
    return findDOMNode(this);
  }
};

module.exports = ReactBrowserComponentMixin;

},{"./findDOMNode":286}],186:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactBrowserEventEmitter
 * @typechecks static-only
 */

'use strict';

var EventConstants = require("./EventConstants");
var EventPluginHub = require("./EventPluginHub");
var EventPluginRegistry = require("./EventPluginRegistry");
var ReactEventEmitterMixin = require("./ReactEventEmitterMixin");
var ViewportMetrics = require("./ViewportMetrics");

var assign = require("./Object.assign");
var isEventSupported = require("./isEventSupported");

/**
 * Summary of `ReactBrowserEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactEventListener, which is injected and can therefore support pluggable
 *    event sources. This is the only work that occurs in the main thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

var alreadyListeningTo = {};
var isMonitoringScrollValue = false;
var reactTopListenersCounter = 0;

// For events like 'submit' which don't consistently bubble (which we trap at a
// lower node than `document`), binding at `document` would cause duplicate
// events so we don't include them here
var topEventMapping = {
  topBlur: 'blur',
  topChange: 'change',
  topClick: 'click',
  topCompositionEnd: 'compositionend',
  topCompositionStart: 'compositionstart',
  topCompositionUpdate: 'compositionupdate',
  topContextMenu: 'contextmenu',
  topCopy: 'copy',
  topCut: 'cut',
  topDoubleClick: 'dblclick',
  topDrag: 'drag',
  topDragEnd: 'dragend',
  topDragEnter: 'dragenter',
  topDragExit: 'dragexit',
  topDragLeave: 'dragleave',
  topDragOver: 'dragover',
  topDragStart: 'dragstart',
  topDrop: 'drop',
  topFocus: 'focus',
  topInput: 'input',
  topKeyDown: 'keydown',
  topKeyPress: 'keypress',
  topKeyUp: 'keyup',
  topMouseDown: 'mousedown',
  topMouseMove: 'mousemove',
  topMouseOut: 'mouseout',
  topMouseOver: 'mouseover',
  topMouseUp: 'mouseup',
  topPaste: 'paste',
  topScroll: 'scroll',
  topSelectionChange: 'selectionchange',
  topTextInput: 'textInput',
  topTouchCancel: 'touchcancel',
  topTouchEnd: 'touchend',
  topTouchMove: 'touchmove',
  topTouchStart: 'touchstart',
  topWheel: 'wheel'
};

/**
 * To ensure no conflicts with other potential React instances on the page
 */
var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

function getListeningForDocument(mountAt) {
  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
  // directly.
  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
    mountAt[topListenersIDKey] = reactTopListenersCounter++;
    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
  }
  return alreadyListeningTo[mountAt[topListenersIDKey]];
}

/**
 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
 * example:
 *
 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
 *
 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
 *
 * @internal
 */
var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {

  /**
   * Injectable event backend
   */
  ReactEventListener: null,

  injection: {
    /**
     * @param {object} ReactEventListener
     */
    injectReactEventListener: function(ReactEventListener) {
      ReactEventListener.setHandleTopLevel(
        ReactBrowserEventEmitter.handleTopLevel
      );
      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
    }
  },

  /**
   * Sets whether or not any created callbacks should be enabled.
   *
   * @param {boolean} enabled True if callbacks should be enabled.
   */
  setEnabled: function(enabled) {
    if (ReactBrowserEventEmitter.ReactEventListener) {
      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
    }
  },

  /**
   * @return {boolean} True if callbacks are enabled.
   */
  isEnabled: function() {
    return !!(
      (ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled())
    );
  },

  /**
   * We listen for bubbled touch events on the document object.
   *
   * Firefox v8.01 (and possibly others) exhibited strange behavior when
   * mounting `onmousemove` events at some node that was not the document
   * element. The symptoms were that if your mouse is not moving over something
   * contained within that mount point (for example on the background) the
   * top-level listeners for `onmousemove` won't be called. However, if you
   * register the `mousemove` on the document object, then it will of course
   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
   * top-level listeners to the document object only, at least for these
   * movement types of events and possibly all events.
   *
   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
   *
   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
   * they bubble to document.
   *
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {object} contentDocumentHandle Document which owns the container
   */
  listenTo: function(registrationName, contentDocumentHandle) {
    var mountAt = contentDocumentHandle;
    var isListening = getListeningForDocument(mountAt);
    var dependencies = EventPluginRegistry.
      registrationNameDependencies[registrationName];

    var topLevelTypes = EventConstants.topLevelTypes;
    for (var i = 0, l = dependencies.length; i < l; i++) {
      var dependency = dependencies[i];
      if (!(
            (isListening.hasOwnProperty(dependency) && isListening[dependency])
          )) {
        if (dependency === topLevelTypes.topWheel) {
          if (isEventSupported('wheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'wheel',
              mountAt
            );
          } else if (isEventSupported('mousewheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'mousewheel',
              mountAt
            );
          } else {
            // Firefox needs to capture a different mouse scroll event.
            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'DOMMouseScroll',
              mountAt
            );
          }
        } else if (dependency === topLevelTypes.topScroll) {

          if (isEventSupported('scroll', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topScroll,
              'scroll',
              mountAt
            );
          } else {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topScroll,
              'scroll',
              ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE
            );
          }
        } else if (dependency === topLevelTypes.topFocus ||
            dependency === topLevelTypes.topBlur) {

          if (isEventSupported('focus', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topFocus,
              'focus',
              mountAt
            );
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topBlur,
              'blur',
              mountAt
            );
          } else if (isEventSupported('focusin')) {
            // IE has `focusin` and `focusout` events which bubble.
            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topFocus,
              'focusin',
              mountAt
            );
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topBlur,
              'focusout',
              mountAt
            );
          }

          // to make sure blur and focus event listeners are only attached once
          isListening[topLevelTypes.topBlur] = true;
          isListening[topLevelTypes.topFocus] = true;
        } else if (topEventMapping.hasOwnProperty(dependency)) {
          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
            dependency,
            topEventMapping[dependency],
            mountAt
          );
        }

        isListening[dependency] = true;
      }
    }
  },

  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
      topLevelType,
      handlerBaseName,
      handle
    );
  },

  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
      topLevelType,
      handlerBaseName,
      handle
    );
  },

  /**
   * Listens to window scroll and resize events. We cache scroll values so that
   * application code can access them without triggering reflows.
   *
   * NOTE: Scroll events do not bubble.
   *
   * @see http://www.quirksmode.org/dom/events/scroll.html
   */
  ensureScrollValueMonitoring: function() {
    if (!isMonitoringScrollValue) {
      var refresh = ViewportMetrics.refreshScrollValues;
      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
      isMonitoringScrollValue = true;
    }
  },

  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,

  registrationNameModules: EventPluginHub.registrationNameModules,

  putListener: EventPluginHub.putListener,

  getListener: EventPluginHub.getListener,

  deleteListener: EventPluginHub.deleteListener,

  deleteAllListeners: EventPluginHub.deleteAllListeners

});

module.exports = ReactBrowserEventEmitter;

},{"./EventConstants":169,"./EventPluginHub":171,"./EventPluginRegistry":172,"./Object.assign":182,"./ReactEventEmitterMixin":220,"./ViewportMetrics":271,"./isEventSupported":305}],187:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 * @providesModule ReactCSSTransitionGroup
 */

'use strict';

var React = require("./React");

var assign = require("./Object.assign");

var ReactTransitionGroup = React.createFactory(
  require("./ReactTransitionGroup")
);
var ReactCSSTransitionGroupChild = React.createFactory(
  require("./ReactCSSTransitionGroupChild")
);

var ReactCSSTransitionGroup = React.createClass({
  displayName: 'ReactCSSTransitionGroup',

  propTypes: {
    transitionName: React.PropTypes.string.isRequired,
    transitionAppear: React.PropTypes.bool,
    transitionEnter: React.PropTypes.bool,
    transitionLeave: React.PropTypes.bool
  },

  getDefaultProps: function() {
    return {
      transitionAppear: false,
      transitionEnter: true,
      transitionLeave: true
    };
  },

  _wrapChild: function(child) {
    // We need to provide this childFactory so that
    // ReactCSSTransitionGroupChild can receive updates to name, enter, and
    // leave while it is leaving.
    return ReactCSSTransitionGroupChild(
      {
        name: this.props.transitionName,
        appear: this.props.transitionAppear,
        enter: this.props.transitionEnter,
        leave: this.props.transitionLeave
      },
      child
    );
  },

  render: function() {
    return (
      ReactTransitionGroup(
        assign({}, this.props, {childFactory: this._wrapChild})
      )
    );
  }
});

module.exports = ReactCSSTransitionGroup;

},{"./Object.assign":182,"./React":184,"./ReactCSSTransitionGroupChild":188,"./ReactTransitionGroup":251}],188:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 * @providesModule ReactCSSTransitionGroupChild
 */

'use strict';

var React = require("./React");

var CSSCore = require("./CSSCore");
var ReactTransitionEvents = require("./ReactTransitionEvents");

var onlyChild = require("./onlyChild");
var warning = require("./warning");

// We don't remove the element from the DOM until we receive an animationend or
// transitionend event. If the user screws up and forgets to add an animation
// their node will be stuck in the DOM forever, so we detect if an animation
// does not start and if it doesn't, we just call the end listener immediately.
var TICK = 17;
var NO_EVENT_TIMEOUT = 5000;

var noEventListener = null;


if ("production" !== process.env.NODE_ENV) {
  noEventListener = function() {
    ("production" !== process.env.NODE_ENV ? warning(
      false,
      'transition(): tried to perform an animation without ' +
      'an animationend or transitionend event after timeout (' +
      '%sms). You should either disable this ' +
      'transition in JS or add a CSS animation/transition.',
      NO_EVENT_TIMEOUT
    ) : null);
  };
}

var ReactCSSTransitionGroupChild = React.createClass({
  displayName: 'ReactCSSTransitionGroupChild',

  transition: function(animationType, finishCallback) {
    var node = this.getDOMNode();
    var className = this.props.name + '-' + animationType;
    var activeClassName = className + '-active';
    var noEventTimeout = null;

    var endListener = function(e) {
      if (e && e.target !== node) {
        return;
      }
      if ("production" !== process.env.NODE_ENV) {
        clearTimeout(noEventTimeout);
      }

      CSSCore.removeClass(node, className);
      CSSCore.removeClass(node, activeClassName);

      ReactTransitionEvents.removeEndEventListener(node, endListener);

      // Usually this optional callback is used for informing an owner of
      // a leave animation and telling it to remove the child.
      if (finishCallback) {
        finishCallback();
      }
    };

    ReactTransitionEvents.addEndEventListener(node, endListener);

    CSSCore.addClass(node, className);

    // Need to do this to actually trigger a transition.
    this.queueClass(activeClassName);

    if ("production" !== process.env.NODE_ENV) {
      noEventTimeout = setTimeout(noEventListener, NO_EVENT_TIMEOUT);
    }
  },

  queueClass: function(className) {
    this.classNameQueue.push(className);

    if (!this.timeout) {
      this.timeout = setTimeout(this.flushClassNameQueue, TICK);
    }
  },

  flushClassNameQueue: function() {
    if (this.isMounted()) {
      this.classNameQueue.forEach(
        CSSCore.addClass.bind(CSSCore, this.getDOMNode())
      );
    }
    this.classNameQueue.length = 0;
    this.timeout = null;
  },

  componentWillMount: function() {
    this.classNameQueue = [];
  },

  componentWillUnmount: function() {
    if (this.timeout) {
      clearTimeout(this.timeout);
    }
  },

  componentWillAppear: function(done) {
    if (this.props.appear) {
      this.transition('appear', done);
    } else {
      done();
    }
  },

  componentWillEnter: function(done) {
    if (this.props.enter) {
      this.transition('enter', done);
    } else {
      done();
    }
  },

  componentWillLeave: function(done) {
    if (this.props.leave) {
      this.transition('leave', done);
    } else {
      done();
    }
  },

  render: function() {
    return onlyChild(this.props.children);
  }
});

module.exports = ReactCSSTransitionGroupChild;

}).call(this,require('_process'))
},{"./CSSCore":157,"./React":184,"./ReactTransitionEvents":250,"./onlyChild":314,"./warning":325,"_process":2}],189:[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactChildReconciler
 * @typechecks static-only
 */

'use strict';

var ReactReconciler = require("./ReactReconciler");

var flattenChildren = require("./flattenChildren");
var instantiateReactComponent = require("./instantiateReactComponent");
var shouldUpdateReactComponent = require("./shouldUpdateReactComponent");

/**
 * ReactChildReconciler provides helpers for initializing or updating a set of
 * children. Its output is suitable for passing it onto ReactMultiChild which
 * does diffed reordering and insertion.
 */
var ReactChildReconciler = {

  /**
   * Generates a "mount image" for each of the supplied children. In the case
   * of `ReactDOMComponent`, a mount image is a string of markup.
   *
   * @param {?object} nestedChildNodes Nested child maps.
   * @return {?object} A set of child instances.
   * @internal
   */
  instantiateChildren: function(nestedChildNodes, transaction, context) {
    var children = flattenChildren(nestedChildNodes);
    for (var name in children) {
      if (children.hasOwnProperty(name)) {
        var child = children[name];
        // The rendered children must be turned into instances as they're
        // mounted.
        var childInstance = instantiateReactComponent(child, null);
        children[name] = childInstance;
      }
    }
    return children;
  },

  /**
   * Updates the rendered children and returns a new set of children.
   *
   * @param {?object} prevChildren Previously initialized set of children.
   * @param {?object} nextNestedChildNodes Nested child maps.
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   * @return {?object} A new set of child instances.
   * @internal
   */
  updateChildren: function(
    prevChildren,
    nextNestedChildNodes,
    transaction,
    context) {
    // We currently don't have a way to track moves here but if we use iterators
    // instead of for..in we can zip the iterators and check if an item has
    // moved.
    // TODO: If nothing has changed, return the prevChildren object so that we
    // can quickly bailout if nothing has changed.
    var nextChildren = flattenChildren(nextNestedChildNodes);
    if (!nextChildren && !prevChildren) {
      return null;
    }
    var name;
    for (name in nextChildren) {
      if (!nextChildren.hasOwnProperty(name)) {
        continue;
      }
      var prevChild = prevChildren && prevChildren[name];
      var prevElement = prevChild && prevChild._currentElement;
      var nextElement = nextChildren[name];
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        ReactReconciler.receiveComponent(
          prevChild, nextElement, transaction, context
        );
        nextChildren[name] = prevChild;
      } else {
        if (prevChild) {
          ReactReconciler.unmountComponent(prevChild, name);
        }
        // The child must be instantiated before it's mounted.
        var nextChildInstance = instantiateReactComponent(
          nextElement,
          null
        );
        nextChildren[name] = nextChildInstance;
      }
    }
    // Unmount children that are no longer present.
    for (name in prevChildren) {
      if (prevChildren.hasOwnProperty(name) &&
          !(nextChildren && nextChildren.hasOwnProperty(name))) {
        ReactReconciler.unmountComponent(prevChildren[name]);
      }
    }
    return nextChildren;
  },

  /**
   * Unmounts all rendered children. This should be used to clean up children
   * when this component is unmounted.
   *
   * @param {?object} renderedChildren Previously initialized set of children.
   * @internal
   */
  unmountChildren: function(renderedChildren) {
    for (var name in renderedChildren) {
      var renderedChild = renderedChildren[name];
      ReactReconciler.unmountComponent(renderedChild);
    }
  }

};

module.exports = ReactChildReconciler;

},{"./ReactReconciler":242,"./flattenChildren":287,"./instantiateReactComponent":303,"./shouldUpdateReactComponent":321}],190:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactChildren
 */

'use strict';

var PooledClass = require("./PooledClass");
var ReactFragment = require("./ReactFragment");

var traverseAllChildren = require("./traverseAllChildren");
var warning = require("./warning");

var twoArgumentPooler = PooledClass.twoArgumentPooler;
var threeArgumentPooler = PooledClass.threeArgumentPooler;

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * traversal. Allows avoiding binding callbacks.
 *
 * @constructor ForEachBookKeeping
 * @param {!function} forEachFunction Function to perform traversal with.
 * @param {?*} forEachContext Context to perform context with.
 */
function ForEachBookKeeping(forEachFunction, forEachContext) {
  this.forEachFunction = forEachFunction;
  this.forEachContext = forEachContext;
}
PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

function forEachSingleChild(traverseContext, child, name, i) {
  var forEachBookKeeping = traverseContext;
  forEachBookKeeping.forEachFunction.call(
    forEachBookKeeping.forEachContext, child, i);
}

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc.
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }

  var traverseContext =
    ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  ForEachBookKeeping.release(traverseContext);
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * mapping. Allows avoiding binding callbacks.
 *
 * @constructor MapBookKeeping
 * @param {!*} mapResult Object containing the ordered map of results.
 * @param {!function} mapFunction Function to perform mapping with.
 * @param {?*} mapContext Context to perform mapping with.
 */
function MapBookKeeping(mapResult, mapFunction, mapContext) {
  this.mapResult = mapResult;
  this.mapFunction = mapFunction;
  this.mapContext = mapContext;
}
PooledClass.addPoolingTo(MapBookKeeping, threeArgumentPooler);

function mapSingleChildIntoContext(traverseContext, child, name, i) {
  var mapBookKeeping = traverseContext;
  var mapResult = mapBookKeeping.mapResult;

  var keyUnique = !mapResult.hasOwnProperty(name);
  if ("production" !== process.env.NODE_ENV) {
    ("production" !== process.env.NODE_ENV ? warning(
      keyUnique,
      'ReactChildren.map(...): Encountered two children with the same key, ' +
      '`%s`. Child keys must be unique; when two children share a key, only ' +
      'the first child will be used.',
      name
    ) : null);
  }

  if (keyUnique) {
    var mappedChild =
      mapBookKeeping.mapFunction.call(mapBookKeeping.mapContext, child, i);
    mapResult[name] = mappedChild;
  }
}

/**
 * Maps children that are typically specified as `props.children`.
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * TODO: This may likely break any calls to `ReactChildren.map` that were
 * previously relying on the fact that we guarded against null children.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} mapFunction.
 * @param {*} mapContext Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }

  var mapResult = {};
  var traverseContext = MapBookKeeping.getPooled(mapResult, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  MapBookKeeping.release(traverseContext);
  return ReactFragment.create(mapResult);
}

function forEachSingleChildDummy(traverseContext, child, name, i) {
  return null;
}

/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */
function countChildren(children, context) {
  return traverseAllChildren(children, forEachSingleChildDummy, null);
}

var ReactChildren = {
  forEach: forEachChildren,
  map: mapChildren,
  count: countChildren
};

module.exports = ReactChildren;

}).call(this,require('_process'))
},{"./PooledClass":183,"./ReactFragment":222,"./traverseAllChildren":323,"./warning":325,"_process":2}],191:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactClass
 */

'use strict';

var ReactComponent = require("./ReactComponent");
var ReactCurrentOwner = require("./ReactCurrentOwner");
var ReactElement = require("./ReactElement");
var ReactErrorUtils = require("./ReactErrorUtils");
var ReactInstanceMap = require("./ReactInstanceMap");
var ReactLifeCycle = require("./ReactLifeCycle");
var ReactPropTypeLocations = require("./ReactPropTypeLocations");
var ReactPropTypeLocationNames = require("./ReactPropTypeLocationNames");
var ReactUpdateQueue = require("./ReactUpdateQueue");

var assign = require("./Object.assign");
var invariant = require("./invariant");
var keyMirror = require("./keyMirror");
var keyOf = require("./keyOf");
var warning = require("./warning");

var MIXINS_KEY = keyOf({mixins: null});

/**
 * Policies that describe methods in `ReactClassInterface`.
 */
var SpecPolicy = keyMirror({
  /**
   * These methods may be defined only once by the class specification or mixin.
   */
  DEFINE_ONCE: null,
  /**
   * These methods may be defined by both the class specification and mixins.
   * Subsequent definitions will be chained. These methods must return void.
   */
  DEFINE_MANY: null,
  /**
   * These methods are overriding the base class.
   */
  OVERRIDE_BASE: null,
  /**
   * These methods are similar to DEFINE_MANY, except we assume they return
   * objects. We try to merge the keys of the return values of all the mixed in
   * functions. If there is a key conflict we throw.
   */
  DEFINE_MANY_MERGED: null
});


var injectedMixins = [];

/**
 * Composite components are higher-level components that compose other composite
 * or native components.
 *
 * To create a new type of `ReactClass`, pass a specification of
 * your new class to `React.createClass`. The only requirement of your class
 * specification is that you implement a `render` method.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return <div>Hello World</div>;
 *     }
 *   });
 *
 * The class specification supports a specific protocol of methods that have
 * special meaning (e.g. `render`). See `ReactClassInterface` for
 * more the comprehensive protocol. Any other properties and methods in the
 * class specification will available on the prototype.
 *
 * @interface ReactClassInterface
 * @internal
 */
var ReactClassInterface = {

  /**
   * An array of Mixin objects to include when defining your component.
   *
   * @type {array}
   * @optional
   */
  mixins: SpecPolicy.DEFINE_MANY,

  /**
   * An object containing properties and methods that should be defined on
   * the component's constructor instead of its prototype (static methods).
   *
   * @type {object}
   * @optional
   */
  statics: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of prop types for this component.
   *
   * @type {object}
   * @optional
   */
  propTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types for this component.
   *
   * @type {object}
   * @optional
   */
  contextTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types this component sets for its children.
   *
   * @type {object}
   * @optional
   */
  childContextTypes: SpecPolicy.DEFINE_MANY,

  // ==== Definition methods ====

  /**
   * Invoked when the component is mounted. Values in the mapping will be set on
   * `this.props` if that prop is not specified (i.e. using an `in` check).
   *
   * This method is invoked before `getInitialState` and therefore cannot rely
   * on `this.state` or use `this.setState`.
   *
   * @return {object}
   * @optional
   */
  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Invoked once before the component is mounted. The return value will be used
   * as the initial value of `this.state`.
   *
   *   getInitialState: function() {
   *     return {
   *       isOn: false,
   *       fooBaz: new BazFoo()
   *     }
   *   }
   *
   * @return {object}
   * @optional
   */
  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * @return {object}
   * @optional
   */
  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Uses props from `this.props` and state from `this.state` to render the
   * structure of the component.
   *
   * No guarantees are made about when or how often this method is invoked, so
   * it must not have side effects.
   *
   *   render: function() {
   *     var name = this.props.name;
   *     return <div>Hello, {name}!</div>;
   *   }
   *
   * @return {ReactComponent}
   * @nosideeffects
   * @required
   */
  render: SpecPolicy.DEFINE_ONCE,



  // ==== Delegate methods ====

  /**
   * Invoked when the component is initially created and about to be mounted.
   * This may have side effects, but any external subscriptions or data created
   * by this method must be cleaned up in `componentWillUnmount`.
   *
   * @optional
   */
  componentWillMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component has been mounted and has a DOM representation.
   * However, there is no guarantee that the DOM node is in the document.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been mounted (initialized and rendered) for the first time.
   *
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked before the component receives new props.
   *
   * Use this as an opportunity to react to a prop transition by updating the
   * state using `this.setState`. Current props are accessed via `this.props`.
   *
   *   componentWillReceiveProps: function(nextProps, nextContext) {
   *     this.setState({
   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
   *     });
   *   }
   *
   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
   * transition may cause a state change, but the opposite is not true. If you
   * need it, you are probably looking for `componentWillUpdate`.
   *
   * @param {object} nextProps
   * @optional
   */
  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked while deciding if the component should be updated as a result of
   * receiving new props, state and/or context.
   *
   * Use this as an opportunity to `return false` when you're certain that the
   * transition to the new props/state/context will not require a component
   * update.
   *
   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
   *     return !equal(nextProps, this.props) ||
   *       !equal(nextState, this.state) ||
   *       !equal(nextContext, this.context);
   *   }
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @return {boolean} True if the component should update.
   * @optional
   */
  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

  /**
   * Invoked when the component is about to update due to a transition from
   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
   * and `nextContext`.
   *
   * Use this as an opportunity to perform preparation before an update occurs.
   *
   * NOTE: You **cannot** use `this.setState()` in this method.
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @param {ReactReconcileTransaction} transaction
   * @optional
   */
  componentWillUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component's DOM representation has been updated.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been updated.
   *
   * @param {object} prevProps
   * @param {?object} prevState
   * @param {?object} prevContext
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component is about to be removed from its parent and have
   * its DOM representation destroyed.
   *
   * Use this as an opportunity to deallocate any external resources.
   *
   * NOTE: There is no `componentDidUnmount` since your component will have been
   * destroyed by that point.
   *
   * @optional
   */
  componentWillUnmount: SpecPolicy.DEFINE_MANY,



  // ==== Advanced methods ====

  /**
   * Updates the component's currently mounted DOM representation.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   * @overridable
   */
  updateComponent: SpecPolicy.OVERRIDE_BASE

};

/**
 * Mapping from class specification keys to special processing functions.
 *
 * Although these are declared like instance properties in the specification
 * when defining classes using `React.createClass`, they are actually static
 * and are accessible on the constructor instead of the prototype. Despite
 * being static, they must be defined outside of the "statics" key under
 * which all other static methods are defined.
 */
var RESERVED_SPEC_KEYS = {
  displayName: function(Constructor, displayName) {
    Constructor.displayName = displayName;
  },
  mixins: function(Constructor, mixins) {
    if (mixins) {
      for (var i = 0; i < mixins.length; i++) {
        mixSpecIntoComponent(Constructor, mixins[i]);
      }
    }
  },
  childContextTypes: function(Constructor, childContextTypes) {
    if ("production" !== process.env.NODE_ENV) {
      validateTypeDef(
        Constructor,
        childContextTypes,
        ReactPropTypeLocations.childContext
      );
    }
    Constructor.childContextTypes = assign(
      {},
      Constructor.childContextTypes,
      childContextTypes
    );
  },
  contextTypes: function(Constructor, contextTypes) {
    if ("production" !== process.env.NODE_ENV) {
      validateTypeDef(
        Constructor,
        contextTypes,
        ReactPropTypeLocations.context
      );
    }
    Constructor.contextTypes = assign(
      {},
      Constructor.contextTypes,
      contextTypes
    );
  },
  /**
   * Special case getDefaultProps which should move into statics but requires
   * automatic merging.
   */
  getDefaultProps: function(Constructor, getDefaultProps) {
    if (Constructor.getDefaultProps) {
      Constructor.getDefaultProps = createMergedResultFunction(
        Constructor.getDefaultProps,
        getDefaultProps
      );
    } else {
      Constructor.getDefaultProps = getDefaultProps;
    }
  },
  propTypes: function(Constructor, propTypes) {
    if ("production" !== process.env.NODE_ENV) {
      validateTypeDef(
        Constructor,
        propTypes,
        ReactPropTypeLocations.prop
      );
    }
    Constructor.propTypes = assign(
      {},
      Constructor.propTypes,
      propTypes
    );
  },
  statics: function(Constructor, statics) {
    mixStaticSpecIntoComponent(Constructor, statics);
  }
};

function validateTypeDef(Constructor, typeDef, location) {
  for (var propName in typeDef) {
    if (typeDef.hasOwnProperty(propName)) {
      // use a warning instead of an invariant so components
      // don't show up in prod but not in __DEV__
      ("production" !== process.env.NODE_ENV ? warning(
        typeof typeDef[propName] === 'function',
        '%s: %s type `%s` is invalid; it must be a function, usually from ' +
        'React.PropTypes.',
        Constructor.displayName || 'ReactClass',
        ReactPropTypeLocationNames[location],
        propName
      ) : null);
    }
  }
}

function validateMethodOverride(proto, name) {
  var specPolicy = ReactClassInterface.hasOwnProperty(name) ?
    ReactClassInterface[name] :
    null;

  // Disallow overriding of base class methods unless explicitly allowed.
  if (ReactClassMixin.hasOwnProperty(name)) {
    ("production" !== process.env.NODE_ENV ? invariant(
      specPolicy === SpecPolicy.OVERRIDE_BASE,
      'ReactClassInterface: You are attempting to override ' +
      '`%s` from your class specification. Ensure that your method names ' +
      'do not overlap with React methods.',
      name
    ) : invariant(specPolicy === SpecPolicy.OVERRIDE_BASE));
  }

  // Disallow defining methods more than once unless explicitly allowed.
  if (proto.hasOwnProperty(name)) {
    ("production" !== process.env.NODE_ENV ? invariant(
      specPolicy === SpecPolicy.DEFINE_MANY ||
      specPolicy === SpecPolicy.DEFINE_MANY_MERGED,
      'ReactClassInterface: You are attempting to define ' +
      '`%s` on your component more than once. This conflict may be due ' +
      'to a mixin.',
      name
    ) : invariant(specPolicy === SpecPolicy.DEFINE_MANY ||
    specPolicy === SpecPolicy.DEFINE_MANY_MERGED));
  }
}

/**
 * Mixin helper which handles policy validation and reserved
 * specification keys when building React classses.
 */
function mixSpecIntoComponent(Constructor, spec) {
  if (!spec) {
    return;
  }

  ("production" !== process.env.NODE_ENV ? invariant(
    typeof spec !== 'function',
    'ReactClass: You\'re attempting to ' +
    'use a component class as a mixin. Instead, just use a regular object.'
  ) : invariant(typeof spec !== 'function'));
  ("production" !== process.env.NODE_ENV ? invariant(
    !ReactElement.isValidElement(spec),
    'ReactClass: You\'re attempting to ' +
    'use a component as a mixin. Instead, just use a regular object.'
  ) : invariant(!ReactElement.isValidElement(spec)));

  var proto = Constructor.prototype;

  // By handling mixins before any other properties, we ensure the same
  // chaining order is applied to methods with DEFINE_MANY policy, whether
  // mixins are listed before or after these methods in the spec.
  if (spec.hasOwnProperty(MIXINS_KEY)) {
    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
  }

  for (var name in spec) {
    if (!spec.hasOwnProperty(name)) {
      continue;
    }

    if (name === MIXINS_KEY) {
      // We have already handled mixins in a special case above
      continue;
    }

    var property = spec[name];
    validateMethodOverride(proto, name);

    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
      RESERVED_SPEC_KEYS[name](Constructor, property);
    } else {
      // Setup methods on prototype:
      // The following member methods should not be automatically bound:
      // 1. Expected ReactClass methods (in the "interface").
      // 2. Overridden methods (that were mixed in).
      var isReactClassMethod =
        ReactClassInterface.hasOwnProperty(name);
      var isAlreadyDefined = proto.hasOwnProperty(name);
      var markedDontBind = property && property.__reactDontBind;
      var isFunction = typeof property === 'function';
      var shouldAutoBind =
        isFunction &&
        !isReactClassMethod &&
        !isAlreadyDefined &&
        !markedDontBind;

      if (shouldAutoBind) {
        if (!proto.__reactAutoBindMap) {
          proto.__reactAutoBindMap = {};
        }
        proto.__reactAutoBindMap[name] = property;
        proto[name] = property;
      } else {
        if (isAlreadyDefined) {
          var specPolicy = ReactClassInterface[name];

          // These cases should already be caught by validateMethodOverride
          ("production" !== process.env.NODE_ENV ? invariant(
            isReactClassMethod && (
              (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)
            ),
            'ReactClass: Unexpected spec policy %s for key %s ' +
            'when mixing in component specs.',
            specPolicy,
            name
          ) : invariant(isReactClassMethod && (
            (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)
          )));

          // For methods which are defined more than once, call the existing
          // methods before calling the new property, merging if appropriate.
          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
            proto[name] = createMergedResultFunction(proto[name], property);
          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
            proto[name] = createChainedFunction(proto[name], property);
          }
        } else {
          proto[name] = property;
          if ("production" !== process.env.NODE_ENV) {
            // Add verbose displayName to the function, which helps when looking
            // at profiling tools.
            if (typeof property === 'function' && spec.displayName) {
              proto[name].displayName = spec.displayName + '_' + name;
            }
          }
        }
      }
    }
  }
}

function mixStaticSpecIntoComponent(Constructor, statics) {
  if (!statics) {
    return;
  }
  for (var name in statics) {
    var property = statics[name];
    if (!statics.hasOwnProperty(name)) {
      continue;
    }

    var isReserved = name in RESERVED_SPEC_KEYS;
    ("production" !== process.env.NODE_ENV ? invariant(
      !isReserved,
      'ReactClass: You are attempting to define a reserved ' +
      'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' +
      'as an instance property instead; it will still be accessible on the ' +
      'constructor.',
      name
    ) : invariant(!isReserved));

    var isInherited = name in Constructor;
    ("production" !== process.env.NODE_ENV ? invariant(
      !isInherited,
      'ReactClass: You are attempting to define ' +
      '`%s` on your component more than once. This conflict may be ' +
      'due to a mixin.',
      name
    ) : invariant(!isInherited));
    Constructor[name] = property;
  }
}

/**
 * Merge two objects, but throw if both contain the same key.
 *
 * @param {object} one The first object, which is mutated.
 * @param {object} two The second object
 * @return {object} one after it has been mutated to contain everything in two.
 */
function mergeIntoWithNoDuplicateKeys(one, two) {
  ("production" !== process.env.NODE_ENV ? invariant(
    one && two && typeof one === 'object' && typeof two === 'object',
    'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.'
  ) : invariant(one && two && typeof one === 'object' && typeof two === 'object'));

  for (var key in two) {
    if (two.hasOwnProperty(key)) {
      ("production" !== process.env.NODE_ENV ? invariant(
        one[key] === undefined,
        'mergeIntoWithNoDuplicateKeys(): ' +
        'Tried to merge two objects with the same key: `%s`. This conflict ' +
        'may be due to a mixin; in particular, this may be caused by two ' +
        'getInitialState() or getDefaultProps() methods returning objects ' +
        'with clashing keys.',
        key
      ) : invariant(one[key] === undefined));
      one[key] = two[key];
    }
  }
  return one;
}

/**
 * Creates a function that invokes two functions and merges their return values.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createMergedResultFunction(one, two) {
  return function mergedResult() {
    var a = one.apply(this, arguments);
    var b = two.apply(this, arguments);
    if (a == null) {
      return b;
    } else if (b == null) {
      return a;
    }
    var c = {};
    mergeIntoWithNoDuplicateKeys(c, a);
    mergeIntoWithNoDuplicateKeys(c, b);
    return c;
  };
}

/**
 * Creates a function that invokes two functions and ignores their return vales.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createChainedFunction(one, two) {
  return function chainedFunction() {
    one.apply(this, arguments);
    two.apply(this, arguments);
  };
}

/**
 * Binds a method to the component.
 *
 * @param {object} component Component whose method is going to be bound.
 * @param {function} method Method to be bound.
 * @return {function} The bound method.
 */
function bindAutoBindMethod(component, method) {
  var boundMethod = method.bind(component);
  if ("production" !== process.env.NODE_ENV) {
    boundMethod.__reactBoundContext = component;
    boundMethod.__reactBoundMethod = method;
    boundMethod.__reactBoundArguments = null;
    var componentName = component.constructor.displayName;
    var _bind = boundMethod.bind;
    /* eslint-disable block-scoped-var, no-undef */
    boundMethod.bind = function(newThis ) {for (var args=[],$__0=1,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
      // User is trying to bind() an autobound method; we effectively will
      // ignore the value of "this" that the user is trying to use, so
      // let's warn.
      if (newThis !== component && newThis !== null) {
        ("production" !== process.env.NODE_ENV ? warning(
          false,
          'bind(): React component methods may only be bound to the ' +
          'component instance. See %s',
          componentName
        ) : null);
      } else if (!args.length) {
        ("production" !== process.env.NODE_ENV ? warning(
          false,
          'bind(): You are binding a component method to the component. ' +
          'React does this for you automatically in a high-performance ' +
          'way, so you can safely remove this call. See %s',
          componentName
        ) : null);
        return boundMethod;
      }
      var reboundMethod = _bind.apply(boundMethod, arguments);
      reboundMethod.__reactBoundContext = component;
      reboundMethod.__reactBoundMethod = method;
      reboundMethod.__reactBoundArguments = args;
      return reboundMethod;
      /* eslint-enable */
    };
  }
  return boundMethod;
}

/**
 * Binds all auto-bound methods in a component.
 *
 * @param {object} component Component whose method is going to be bound.
 */
function bindAutoBindMethods(component) {
  for (var autoBindKey in component.__reactAutoBindMap) {
    if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
      var method = component.__reactAutoBindMap[autoBindKey];
      component[autoBindKey] = bindAutoBindMethod(
        component,
        ReactErrorUtils.guard(
          method,
          component.constructor.displayName + '.' + autoBindKey
        )
      );
    }
  }
}

var typeDeprecationDescriptor = {
  enumerable: false,
  get: function() {
    var displayName = this.displayName || this.name || 'Component';
    ("production" !== process.env.NODE_ENV ? warning(
      false,
      '%s.type is deprecated. Use %s directly to access the class.',
      displayName,
      displayName
    ) : null);
    Object.defineProperty(this, 'type', {
      value: this
    });
    return this;
  }
};

/**
 * Add more to the ReactClass base class. These are all legacy features and
 * therefore not already part of the modern ReactComponent.
 */
var ReactClassMixin = {

  /**
   * TODO: This will be deprecated because state should always keep a consistent
   * type signature and the only use case for this, is to avoid that.
   */
  replaceState: function(newState, callback) {
    ReactUpdateQueue.enqueueReplaceState(this, newState);
    if (callback) {
      ReactUpdateQueue.enqueueCallback(this, callback);
    }
  },

  /**
   * Checks whether or not this composite component is mounted.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function() {
    if ("production" !== process.env.NODE_ENV) {
      var owner = ReactCurrentOwner.current;
      if (owner !== null) {
        ("production" !== process.env.NODE_ENV ? warning(
          owner._warnedAboutRefsInRender,
          '%s is accessing isMounted inside its render() function. ' +
          'render() should be a pure function of props and state. It should ' +
          'never access something that requires stale data from the previous ' +
          'render, such as refs. Move this logic to componentDidMount and ' +
          'componentDidUpdate instead.',
          owner.getName() || 'A component'
        ) : null);
        owner._warnedAboutRefsInRender = true;
      }
    }
    var internalInstance = ReactInstanceMap.get(this);
    return (
      internalInstance &&
      internalInstance !== ReactLifeCycle.currentlyMountingInstance
    );
  },

  /**
   * Sets a subset of the props.
   *
   * @param {object} partialProps Subset of the next props.
   * @param {?function} callback Called after props are updated.
   * @final
   * @public
   * @deprecated
   */
  setProps: function(partialProps, callback) {
    ReactUpdateQueue.enqueueSetProps(this, partialProps);
    if (callback) {
      ReactUpdateQueue.enqueueCallback(this, callback);
    }
  },

  /**
   * Replace all the props.
   *
   * @param {object} newProps Subset of the next props.
   * @param {?function} callback Called after props are updated.
   * @final
   * @public
   * @deprecated
   */
  replaceProps: function(newProps, callback) {
    ReactUpdateQueue.enqueueReplaceProps(this, newProps);
    if (callback) {
      ReactUpdateQueue.enqueueCallback(this, callback);
    }
  }
};

var ReactClassComponent = function() {};
assign(
  ReactClassComponent.prototype,
  ReactComponent.prototype,
  ReactClassMixin
);

/**
 * Module for creating composite components.
 *
 * @class ReactClass
 */
var ReactClass = {

  /**
   * Creates a composite component class given a class specification.
   *
   * @param {object} spec Class specification (which must define `render`).
   * @return {function} Component constructor function.
   * @public
   */
  createClass: function(spec) {
    var Constructor = function(props, context) {
      // This constructor is overridden by mocks. The argument is used
      // by mocks to assert on what gets mounted.

      if ("production" !== process.env.NODE_ENV) {
        ("production" !== process.env.NODE_ENV ? warning(
          this instanceof Constructor,
          'Something is calling a React component directly. Use a factory or ' +
          'JSX instead. See: https://fb.me/react-legacyfactory'
        ) : null);
      }

      // Wire up auto-binding
      if (this.__reactAutoBindMap) {
        bindAutoBindMethods(this);
      }

      this.props = props;
      this.context = context;
      this.state = null;

      // ReactClasses doesn't have constructors. Instead, they use the
      // getInitialState and componentWillMount methods for initialization.

      var initialState = this.getInitialState ? this.getInitialState() : null;
      if ("production" !== process.env.NODE_ENV) {
        // We allow auto-mocks to proceed as if they're returning null.
        if (typeof initialState === 'undefined' &&
            this.getInitialState._isMockFunction) {
          // This is probably bad practice. Consider warning here and
          // deprecating this convenience.
          initialState = null;
        }
      }
      ("production" !== process.env.NODE_ENV ? invariant(
        typeof initialState === 'object' && !Array.isArray(initialState),
        '%s.getInitialState(): must return an object or null',
        Constructor.displayName || 'ReactCompositeComponent'
      ) : invariant(typeof initialState === 'object' && !Array.isArray(initialState)));

      this.state = initialState;
    };
    Constructor.prototype = new ReactClassComponent();
    Constructor.prototype.constructor = Constructor;

    injectedMixins.forEach(
      mixSpecIntoComponent.bind(null, Constructor)
    );

    mixSpecIntoComponent(Constructor, spec);

    // Initialize the defaultProps property after all mixins have been merged
    if (Constructor.getDefaultProps) {
      Constructor.defaultProps = Constructor.getDefaultProps();
    }

    if ("production" !== process.env.NODE_ENV) {
      // This is a tag to indicate that the use of these method names is ok,
      // since it's used with createClass. If it's not, then it's likely a
      // mistake so we'll warn you to use the static property, property
      // initializer or constructor respectively.
      if (Constructor.getDefaultProps) {
        Constructor.getDefaultProps.isReactClassApproved = {};
      }
      if (Constructor.prototype.getInitialState) {
        Constructor.prototype.getInitialState.isReactClassApproved = {};
      }
    }

    ("production" !== process.env.NODE_ENV ? invariant(
      Constructor.prototype.render,
      'createClass(...): Class specification must implement a `render` method.'
    ) : invariant(Constructor.prototype.render));

    if ("production" !== process.env.NODE_ENV) {
      ("production" !== process.env.NODE_ENV ? warning(
        !Constructor.prototype.componentShouldUpdate,
        '%s has a method called ' +
        'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
        'The name is phrased as a question because the function is ' +
        'expected to return a value.',
        spec.displayName || 'A component'
      ) : null);
    }

    // Reduce time spent doing lookups by setting these on the prototype.
    for (var methodName in ReactClassInterface) {
      if (!Constructor.prototype[methodName]) {
        Constructor.prototype[methodName] = null;
      }
    }

    // Legacy hook
    Constructor.type = Constructor;
    if ("production" !== process.env.NODE_ENV) {
      try {
        Object.defineProperty(Constructor, 'type', typeDeprecationDescriptor);
      } catch (x) {
        // IE will fail on defineProperty (es5-shim/sham too)
      }
    }

    return Constructor;
  },

  injection: {
    injectMixin: function(mixin) {
      injectedMixins.push(mixin);
    }
  }

};

module.exports = ReactClass;

}).call(this,require('_process'))
},{"./Object.assign":182,"./ReactComponent":192,"./ReactCurrentOwner":198,"./ReactElement":216,"./ReactErrorUtils":219,"./ReactInstanceMap":226,"./ReactLifeCycle":227,"./ReactPropTypeLocationNames":237,"./ReactPropTypeLocations":238,"./ReactUpdateQueue":252,"./invariant":304,"./keyMirror":310,"./keyOf":311,"./warning":325,"_process":2}],192:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponent
 */

'use strict';

var ReactUpdateQueue = require("./ReactUpdateQueue");

var invariant = require("./invariant");
var warning = require("./warning");

/**
 * Base class helpers for the updating state of a component.
 */
function ReactComponent(props, context) {
  this.props = props;
  this.context = context;
}

/**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */
ReactComponent.prototype.setState = function(partialState, callback) {
  ("production" !== process.env.NODE_ENV ? invariant(
    typeof partialState === 'object' ||
    typeof partialState === 'function' ||
    partialState == null,
    'setState(...): takes an object of state variables to update or a ' +
    'function which returns an object of state variables.'
  ) : invariant(typeof partialState === 'object' ||
  typeof partialState === 'function' ||
  partialState == null));
  if ("production" !== process.env.NODE_ENV) {
    ("production" !== process.env.NODE_ENV ? warning(
      partialState != null,
      'setState(...): You passed an undefined or null state object; ' +
      'instead, use forceUpdate().'
    ) : null);
  }
  ReactUpdateQueue.enqueueSetState(this, partialState);
  if (callback) {
    ReactUpdateQueue.enqueueCallback(this, callback);
  }
};

/**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */
ReactComponent.prototype.forceUpdate = function(callback) {
  ReactUpdateQueue.enqueueForceUpdate(this);
  if (callback) {
    ReactUpdateQueue.enqueueCallback(this, callback);
  }
};

/**
 * Deprecated APIs. These APIs used to exist on classic React classes but since
 * we would like to deprecate them, we're not going to move them over to this
 * modern base class. Instead, we define a getter that warns if it's accessed.
 */
if ("production" !== process.env.NODE_ENV) {
  var deprecatedAPIs = {
    getDOMNode: [
      'getDOMNode',
      'Use React.findDOMNode(component) instead.'
    ],
    isMounted: [
      'isMounted',
      'Instead, make sure to clean up subscriptions and pending requests in ' +
      'componentWillUnmount to prevent memory leaks.'
    ],
    replaceProps: [
      'replaceProps',
      'Instead, call React.render again at the top level.'
    ],
    replaceState: [
      'replaceState',
      'Refactor your code to use setState instead (see ' +
      'https://github.com/facebook/react/issues/3236).'
    ],
    setProps: [
      'setProps',
      'Instead, call React.render again at the top level.'
    ]
  };
  var defineDeprecationWarning = function(methodName, info) {
    try {
      Object.defineProperty(ReactComponent.prototype, methodName, {
        get: function() {
          ("production" !== process.env.NODE_ENV ? warning(
            false,
            '%s(...) is deprecated in plain JavaScript React classes. %s',
            info[0],
            info[1]
          ) : null);
          return undefined;
        }
      });
    } catch (x) {
      // IE will fail on defineProperty (es5-shim/sham too)
    }
  };
  for (var fnName in deprecatedAPIs) {
    if (deprecatedAPIs.hasOwnProperty(fnName)) {
      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    }
  }
}

module.exports = ReactComponent;

}).call(this,require('_process'))
},{"./ReactUpdateQueue":252,"./invariant":304,"./warning":325,"_process":2}],193:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponentBrowserEnvironment
 */

/*jslint evil: true */

'use strict';

var ReactDOMIDOperations = require("./ReactDOMIDOperations");
var ReactMount = require("./ReactMount");

/**
 * Abstracts away all functionality of the reconciler that requires knowledge of
 * the browser context. TODO: These callers should be refactored to avoid the
 * need for this injection.
 */
var ReactComponentBrowserEnvironment = {

  processChildrenUpdates:
    ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

  replaceNodeWithMarkupByID:
    ReactDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,

  /**
   * If a particular environment requires that some resources be cleaned up,
   * specify this in the injected Mixin. In the DOM, we would likely want to
   * purge any cached node ID lookups.
   *
   * @private
   */
  unmountIDFromEnvironment: function(rootNodeID) {
    ReactMount.purgeID(rootNodeID);
  }

};

module.exports = ReactComponentBrowserEnvironment;

},{"./ReactDOMIDOperations":203,"./ReactMount":230}],194:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponentEnvironment
 */

'use strict';

var invariant = require("./invariant");

var injected = false;

var ReactComponentEnvironment = {

  /**
   * Optionally injectable environment dependent cleanup hook. (server vs.
   * browser etc). Example: A browser system caches DOM nodes based on component
   * ID and must remove that cache entry when this instance is unmounted.
   */
  unmountIDFromEnvironment: null,

  /**
   * Optionally injectable hook for swapping out mount images in the middle of
   * the tree.
   */
  replaceNodeWithMarkupByID: null,

  /**
   * Optionally injectable hook for processing a queue of child updates. Will
   * later move into MultiChildComponents.
   */
  processChildrenUpdates: null,

  injection: {
    injectEnvironment: function(environment) {
      ("production" !== process.env.NODE_ENV ? invariant(
        !injected,
        'ReactCompositeComponent: injectEnvironment() can only be called once.'
      ) : invariant(!injected));
      ReactComponentEnvironment.unmountIDFromEnvironment =
        environment.unmountIDFromEnvironment;
      ReactComponentEnvironment.replaceNodeWithMarkupByID =
        environment.replaceNodeWithMarkupByID;
      ReactComponentEnvironment.processChildrenUpdates =
        environment.processChildrenUpdates;
      injected = true;
    }
  }

};

module.exports = ReactComponentEnvironment;

}).call(this,require('_process'))
},{"./invariant":304,"_process":2}],195:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
* @providesModule ReactComponentWithPureRenderMixin
*/

'use strict';

var shallowEqual = require("./shallowEqual");

/**
 * If your React component's render function is "pure", e.g. it will render the
 * same result given the same props and state, provide this Mixin for a
 * considerable performance boost.
 *
 * Most React components have pure render functions.
 *
 * Example:
 *
 *   var ReactComponentWithPureRenderMixin =
 *     require('ReactComponentWithPureRenderMixin');
 *   React.createClass({
 *     mixins: [ReactComponentWithPureRenderMixin],
 *
 *     render: function() {
 *       return <div className={this.props.className}>foo</div>;
 *     }
 *   });
 *
 * Note: This only checks shallow equality for props and state. If these contain
 * complex data structures this mixin may have false-negatives for deeper
 * differences. Only mixin to components which have simple props and state, or
 * use `forceUpdate()` when you know deep data structures have changed.
 */
var ReactComponentWithPureRenderMixin = {
  shouldComponentUpdate: function(nextProps, nextState) {
    return !shallowEqual(this.props, nextProps) ||
           !shallowEqual(this.state, nextState);
  }
};

module.exports = ReactComponentWithPureRenderMixin;

},{"./shallowEqual":320}],196:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCompositeComponent
 */

'use strict';

var ReactComponentEnvironment = require("./ReactComponentEnvironment");
var ReactContext = require("./ReactContext");
var ReactCurrentOwner = require("./ReactCurrentOwner");
var ReactElement = require("./ReactElement");
var ReactElementValidator = require("./ReactElementValidator");
var ReactInstanceMap = require("./ReactInstanceMap");
var ReactLifeCycle = require("./ReactLifeCycle");
var ReactNativeComponent = require("./ReactNativeComponent");
var ReactPerf = require("./ReactPerf");
var ReactPropTypeLocations = require("./ReactPropTypeLocations");
var ReactPropTypeLocationNames = require("./ReactPropTypeLocationNames");
var ReactReconciler = require("./ReactReconciler");
var ReactUpdates = require("./ReactUpdates");

var assign = require("./Object.assign");
var emptyObject = require("./emptyObject");
var invariant = require("./invariant");
var shouldUpdateReactComponent = require("./shouldUpdateReactComponent");
var warning = require("./warning");

function getDeclarationErrorAddendum(component) {
  var owner = component._currentElement._owner || null;
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * ------------------ The Life-Cycle of a Composite Component ------------------
 *
 * - constructor: Initialization of state. The instance is now retained.
 *   - componentWillMount
 *   - render
 *   - [children's constructors]
 *     - [children's componentWillMount and render]
 *     - [children's componentDidMount]
 *     - componentDidMount
 *
 *       Update Phases:
 *       - componentWillReceiveProps (only called if parent updated)
 *       - shouldComponentUpdate
 *         - componentWillUpdate
 *           - render
 *           - [children's constructors or receive props phases]
 *         - componentDidUpdate
 *
 *     - componentWillUnmount
 *     - [children's componentWillUnmount]
 *   - [children destroyed]
 * - (destroyed): The instance is now blank, released by React and ready for GC.
 *
 * -----------------------------------------------------------------------------
 */

/**
 * An incrementing ID assigned to each component when it is mounted. This is
 * used to enforce the order in which `ReactUpdates` updates dirty components.
 *
 * @private
 */
var nextMountID = 1;

/**
 * @lends {ReactCompositeComponent.prototype}
 */
var ReactCompositeComponentMixin = {

  /**
   * Base constructor for all composite component.
   *
   * @param {ReactElement} element
   * @final
   * @internal
   */
  construct: function(element) {
    this._currentElement = element;
    this._rootNodeID = null;
    this._instance = null;

    // See ReactUpdateQueue
    this._pendingElement = null;
    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    this._renderedComponent = null;

    this._context = null;
    this._mountOrder = 0;
    this._isTopLevel = false;

    // See ReactUpdates and ReactUpdateQueue.
    this._pendingCallbacks = null;
  },

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: function(rootID, transaction, context) {
    this._context = context;
    this._mountOrder = nextMountID++;
    this._rootNodeID = rootID;

    var publicProps = this._processProps(this._currentElement.props);
    var publicContext = this._processContext(this._currentElement._context);

    var Component = ReactNativeComponent.getComponentClassForElement(
      this._currentElement
    );

    // Initialize the public class
    var inst = new Component(publicProps, publicContext);

    if ("production" !== process.env.NODE_ENV) {
      // This will throw later in _renderValidatedComponent, but add an early
      // warning now to help debugging
      ("production" !== process.env.NODE_ENV ? warning(
        inst.render != null,
        '%s(...): No `render` method found on the returned component ' +
        'instance: you may have forgotten to define `render` in your ' +
        'component or you may have accidentally tried to render an element ' +
        'whose type is a function that isn\'t a React component.',
        Component.displayName || Component.name || 'Component'
      ) : null);
    }

    // These should be set up in the constructor, but as a convenience for
    // simpler class abstractions, we set them up after the fact.
    inst.props = publicProps;
    inst.context = publicContext;
    inst.refs = emptyObject;

    this._instance = inst;

    // Store a reference from the instance back to the internal representation
    ReactInstanceMap.set(inst, this);

    if ("production" !== process.env.NODE_ENV) {
      this._warnIfContextsDiffer(this._currentElement._context, context);
    }

    if ("production" !== process.env.NODE_ENV) {
      // Since plain JS classes are defined without any special initialization
      // logic, we can not catch common errors early. Therefore, we have to
      // catch them here, at initialization time, instead.
      ("production" !== process.env.NODE_ENV ? warning(
        !inst.getInitialState ||
        inst.getInitialState.isReactClassApproved,
        'getInitialState was defined on %s, a plain JavaScript class. ' +
        'This is only supported for classes created using React.createClass. ' +
        'Did you mean to define a state property instead?',
        this.getName() || 'a component'
      ) : null);
      ("production" !== process.env.NODE_ENV ? warning(
        !inst.getDefaultProps ||
        inst.getDefaultProps.isReactClassApproved,
        'getDefaultProps was defined on %s, a plain JavaScript class. ' +
        'This is only supported for classes created using React.createClass. ' +
        'Use a static property to define defaultProps instead.',
        this.getName() || 'a component'
      ) : null);
      ("production" !== process.env.NODE_ENV ? warning(
        !inst.propTypes,
        'propTypes was defined as an instance property on %s. Use a static ' +
        'property to define propTypes instead.',
        this.getName() || 'a component'
      ) : null);
      ("production" !== process.env.NODE_ENV ? warning(
        !inst.contextTypes,
        'contextTypes was defined as an instance property on %s. Use a ' +
        'static property to define contextTypes instead.',
        this.getName() || 'a component'
      ) : null);
      ("production" !== process.env.NODE_ENV ? warning(
        typeof inst.componentShouldUpdate !== 'function',
        '%s has a method called ' +
        'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
        'The name is phrased as a question because the function is ' +
        'expected to return a value.',
        (this.getName() || 'A component')
      ) : null);
    }

    var initialState = inst.state;
    if (initialState === undefined) {
      inst.state = initialState = null;
    }
    ("production" !== process.env.NODE_ENV ? invariant(
      typeof initialState === 'object' && !Array.isArray(initialState),
      '%s.state: must be set to an object or null',
      this.getName() || 'ReactCompositeComponent'
    ) : invariant(typeof initialState === 'object' && !Array.isArray(initialState)));

    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    var childContext;
    var renderedElement;

    var previouslyMounting = ReactLifeCycle.currentlyMountingInstance;
    ReactLifeCycle.currentlyMountingInstance = this;
    try {
      if (inst.componentWillMount) {
        inst.componentWillMount();
        // When mounting, calls to `setState` by `componentWillMount` will set
        // `this._pendingStateQueue` without triggering a re-render.
        if (this._pendingStateQueue) {
          inst.state = this._processPendingState(inst.props, inst.context);
        }
      }

      childContext = this._getValidatedChildContext(context);
      renderedElement = this._renderValidatedComponent(childContext);
    } finally {
      ReactLifeCycle.currentlyMountingInstance = previouslyMounting;
    }

    this._renderedComponent = this._instantiateReactComponent(
      renderedElement,
      this._currentElement.type // The wrapping type
    );

    var markup = ReactReconciler.mountComponent(
      this._renderedComponent,
      rootID,
      transaction,
      this._mergeChildContext(context, childContext)
    );
    if (inst.componentDidMount) {
      transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
    }

    return markup;
  },

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function() {
    var inst = this._instance;

    if (inst.componentWillUnmount) {
      var previouslyUnmounting = ReactLifeCycle.currentlyUnmountingInstance;
      ReactLifeCycle.currentlyUnmountingInstance = this;
      try {
        inst.componentWillUnmount();
      } finally {
        ReactLifeCycle.currentlyUnmountingInstance = previouslyUnmounting;
      }
    }

    ReactReconciler.unmountComponent(this._renderedComponent);
    this._renderedComponent = null;

    // Reset pending fields
    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;
    this._pendingCallbacks = null;
    this._pendingElement = null;

    // These fields do not really need to be reset since this object is no
    // longer accessible.
    this._context = null;
    this._rootNodeID = null;

    // Delete the reference from the instance to this internal representation
    // which allow the internals to be properly cleaned up even if the user
    // leaks a reference to the public instance.
    ReactInstanceMap.remove(inst);

    // Some existing components rely on inst.props even after they've been
    // destroyed (in event handlers).
    // TODO: inst.props = null;
    // TODO: inst.state = null;
    // TODO: inst.context = null;
  },

  /**
   * Schedule a partial update to the props. Only used for internal testing.
   *
   * @param {object} partialProps Subset of the next props.
   * @param {?function} callback Called after props are updated.
   * @final
   * @internal
   */
  _setPropsInternal: function(partialProps, callback) {
    // This is a deoptimized path. We optimize for always having an element.
    // This creates an extra internal element.
    var element = this._pendingElement || this._currentElement;
    this._pendingElement = ReactElement.cloneAndReplaceProps(
      element,
      assign({}, element.props, partialProps)
    );
    ReactUpdates.enqueueUpdate(this, callback);
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _maskContext: function(context) {
    var maskedContext = null;
    // This really should be getting the component class for the element,
    // but we know that we're not going to need it for built-ins.
    if (typeof this._currentElement.type === 'string') {
      return emptyObject;
    }
    var contextTypes = this._currentElement.type.contextTypes;
    if (!contextTypes) {
      return emptyObject;
    }
    maskedContext = {};
    for (var contextName in contextTypes) {
      maskedContext[contextName] = context[contextName];
    }
    return maskedContext;
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`, and asserts that they are valid.
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _processContext: function(context) {
    var maskedContext = this._maskContext(context);
    if ("production" !== process.env.NODE_ENV) {
      var Component = ReactNativeComponent.getComponentClassForElement(
        this._currentElement
      );
      if (Component.contextTypes) {
        this._checkPropTypes(
          Component.contextTypes,
          maskedContext,
          ReactPropTypeLocations.context
        );
      }
    }
    return maskedContext;
  },

  /**
   * @param {object} currentContext
   * @return {object}
   * @private
   */
  _getValidatedChildContext: function(currentContext) {
    var inst = this._instance;
    var childContext = inst.getChildContext && inst.getChildContext();
    if (childContext) {
      ("production" !== process.env.NODE_ENV ? invariant(
        typeof inst.constructor.childContextTypes === 'object',
        '%s.getChildContext(): childContextTypes must be defined in order to ' +
        'use getChildContext().',
        this.getName() || 'ReactCompositeComponent'
      ) : invariant(typeof inst.constructor.childContextTypes === 'object'));
      if ("production" !== process.env.NODE_ENV) {
        this._checkPropTypes(
          inst.constructor.childContextTypes,
          childContext,
          ReactPropTypeLocations.childContext
        );
      }
      for (var name in childContext) {
        ("production" !== process.env.NODE_ENV ? invariant(
          name in inst.constructor.childContextTypes,
          '%s.getChildContext(): key "%s" is not defined in childContextTypes.',
          this.getName() || 'ReactCompositeComponent',
          name
        ) : invariant(name in inst.constructor.childContextTypes));
      }
      return childContext;
    }
    return null;
  },

  _mergeChildContext: function(currentContext, childContext) {
    if (childContext) {
      return assign({}, currentContext, childContext);
    }
    return currentContext;
  },

  /**
   * Processes props by setting default values for unspecified props and
   * asserting that the props are valid. Does not mutate its argument; returns
   * a new props object with defaults merged in.
   *
   * @param {object} newProps
   * @return {object}
   * @private
   */
  _processProps: function(newProps) {
    if ("production" !== process.env.NODE_ENV) {
      var Component = ReactNativeComponent.getComponentClassForElement(
        this._currentElement
      );
      if (Component.propTypes) {
        this._checkPropTypes(
          Component.propTypes,
          newProps,
          ReactPropTypeLocations.prop
        );
      }
    }
    return newProps;
  },

  /**
   * Assert that the props are valid
   *
   * @param {object} propTypes Map of prop name to a ReactPropType
   * @param {object} props
   * @param {string} location e.g. "prop", "context", "child context"
   * @private
   */
  _checkPropTypes: function(propTypes, props, location) {
    // TODO: Stop validating prop types here and only use the element
    // validation.
    var componentName = this.getName();
    for (var propName in propTypes) {
      if (propTypes.hasOwnProperty(propName)) {
        var error;
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          ("production" !== process.env.NODE_ENV ? invariant(
            typeof propTypes[propName] === 'function',
            '%s: %s type `%s` is invalid; it must be a function, usually ' +
            'from React.PropTypes.',
            componentName || 'React class',
            ReactPropTypeLocationNames[location],
            propName
          ) : invariant(typeof propTypes[propName] === 'function'));
          error = propTypes[propName](props, propName, componentName, location);
        } catch (ex) {
          error = ex;
        }
        if (error instanceof Error) {
          // We may want to extend this logic for similar errors in
          // React.render calls, so I'm abstracting it away into
          // a function to minimize refactoring in the future
          var addendum = getDeclarationErrorAddendum(this);

          if (location === ReactPropTypeLocations.prop) {
            // Preface gives us something to blacklist in warning module
            ("production" !== process.env.NODE_ENV ? warning(
              false,
              'Failed Composite propType: %s%s',
              error.message,
              addendum
            ) : null);
          } else {
            ("production" !== process.env.NODE_ENV ? warning(
              false,
              'Failed Context Types: %s%s',
              error.message,
              addendum
            ) : null);
          }
        }
      }
    }
  },

  receiveComponent: function(nextElement, transaction, nextContext) {
    var prevElement = this._currentElement;
    var prevContext = this._context;

    this._pendingElement = null;

    this.updateComponent(
      transaction,
      prevElement,
      nextElement,
      prevContext,
      nextContext
    );
  },

  /**
   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
   * is set, update the component.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function(transaction) {
    if (this._pendingElement != null) {
      ReactReconciler.receiveComponent(
        this,
        this._pendingElement || this._currentElement,
        transaction,
        this._context
      );
    }

    if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
      if ("production" !== process.env.NODE_ENV) {
        ReactElementValidator.checkAndWarnForMutatedProps(
          this._currentElement
        );
      }

      this.updateComponent(
        transaction,
        this._currentElement,
        this._currentElement,
        this._context,
        this._context
      );
    }
  },

  /**
   * Compare two contexts, warning if they are different
   * TODO: Remove this check when owner-context is removed
   */
   _warnIfContextsDiffer: function(ownerBasedContext, parentBasedContext) {
    ownerBasedContext = this._maskContext(ownerBasedContext);
    parentBasedContext = this._maskContext(parentBasedContext);
    var parentKeys = Object.keys(parentBasedContext).sort();
    var displayName = this.getName() || 'ReactCompositeComponent';
    for (var i = 0; i < parentKeys.length; i++) {
      var key = parentKeys[i];
      ("production" !== process.env.NODE_ENV ? warning(
        ownerBasedContext[key] === parentBasedContext[key],
        'owner-based and parent-based contexts differ '  +
        '(values: `%s` vs `%s`) for key (%s) while mounting %s ' +
        '(see: http://fb.me/react-context-by-parent)',
        ownerBasedContext[key],
        parentBasedContext[key],
        key,
        displayName
      ) : null);
    }
  },

  /**
   * Perform an update to a mounted component. The componentWillReceiveProps and
   * shouldComponentUpdate methods are called, then (assuming the update isn't
   * skipped) the remaining update lifecycle methods are called and the DOM
   * representation is updated.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevParentElement
   * @param {ReactElement} nextParentElement
   * @internal
   * @overridable
   */
  updateComponent: function(
    transaction,
    prevParentElement,
    nextParentElement,
    prevUnmaskedContext,
    nextUnmaskedContext
  ) {
    var inst = this._instance;

    var nextContext = inst.context;
    var nextProps = inst.props;

    // Distinguish between a props update versus a simple state update
    if (prevParentElement !== nextParentElement) {
      nextContext = this._processContext(nextParentElement._context);
      nextProps = this._processProps(nextParentElement.props);

      if ("production" !== process.env.NODE_ENV) {
        if (nextUnmaskedContext != null) {
          this._warnIfContextsDiffer(
            nextParentElement._context,
            nextUnmaskedContext
          );
        }
      }

      // An update here will schedule an update but immediately set
      // _pendingStateQueue which will ensure that any state updates gets
      // immediately reconciled instead of waiting for the next batch.

      if (inst.componentWillReceiveProps) {
        inst.componentWillReceiveProps(nextProps, nextContext);
      }
    }

    var nextState = this._processPendingState(nextProps, nextContext);

    var shouldUpdate =
      this._pendingForceUpdate ||
      !inst.shouldComponentUpdate ||
      inst.shouldComponentUpdate(nextProps, nextState, nextContext);

    if ("production" !== process.env.NODE_ENV) {
      ("production" !== process.env.NODE_ENV ? warning(
        typeof shouldUpdate !== 'undefined',
        '%s.shouldComponentUpdate(): Returned undefined instead of a ' +
        'boolean value. Make sure to return true or false.',
        this.getName() || 'ReactCompositeComponent'
      ) : null);
    }

    if (shouldUpdate) {
      this._pendingForceUpdate = false;
      // Will set `this.props`, `this.state` and `this.context`.
      this._performComponentUpdate(
        nextParentElement,
        nextProps,
        nextState,
        nextContext,
        transaction,
        nextUnmaskedContext
      );
    } else {
      // If it's determined that a component should not update, we still want
      // to set props and state but we shortcut the rest of the update.
      this._currentElement = nextParentElement;
      this._context = nextUnmaskedContext;
      inst.props = nextProps;
      inst.state = nextState;
      inst.context = nextContext;
    }
  },

  _processPendingState: function(props, context) {
    var inst = this._instance;
    var queue = this._pendingStateQueue;
    var replace = this._pendingReplaceState;
    this._pendingReplaceState = false;
    this._pendingStateQueue = null;

    if (!queue) {
      return inst.state;
    }

    if (replace && queue.length === 1) {
      return queue[0];
    }

    var nextState = assign({}, replace ? queue[0] : inst.state);
    for (var i = replace ? 1 : 0; i < queue.length; i++) {
      var partial = queue[i];
      assign(
        nextState,
        typeof partial === 'function' ?
          partial.call(inst, nextState, props, context) :
          partial
      );
    }

    return nextState;
  },

  /**
   * Merges new props and state, notifies delegate methods of update and
   * performs update.
   *
   * @param {ReactElement} nextElement Next element
   * @param {object} nextProps Next public object to set as properties.
   * @param {?object} nextState Next object to set as state.
   * @param {?object} nextContext Next public object to set as context.
   * @param {ReactReconcileTransaction} transaction
   * @param {?object} unmaskedContext
   * @private
   */
  _performComponentUpdate: function(
    nextElement,
    nextProps,
    nextState,
    nextContext,
    transaction,
    unmaskedContext
  ) {
    var inst = this._instance;

    var prevProps = inst.props;
    var prevState = inst.state;
    var prevContext = inst.context;

    if (inst.componentWillUpdate) {
      inst.componentWillUpdate(nextProps, nextState, nextContext);
    }

    this._currentElement = nextElement;
    this._context = unmaskedContext;
    inst.props = nextProps;
    inst.state = nextState;
    inst.context = nextContext;

    this._updateRenderedComponent(transaction, unmaskedContext);

    if (inst.componentDidUpdate) {
      transaction.getReactMountReady().enqueue(
        inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext),
        inst
      );
    }
  },

  /**
   * Call the component's `render` method and update the DOM accordingly.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  _updateRenderedComponent: function(transaction, context) {
    var prevComponentInstance = this._renderedComponent;
    var prevRenderedElement = prevComponentInstance._currentElement;
    var childContext = this._getValidatedChildContext();
    var nextRenderedElement = this._renderValidatedComponent(childContext);
    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
      ReactReconciler.receiveComponent(
        prevComponentInstance,
        nextRenderedElement,
        transaction,
        this._mergeChildContext(context, childContext)
      );
    } else {
      // These two IDs are actually the same! But nothing should rely on that.
      var thisID = this._rootNodeID;
      var prevComponentID = prevComponentInstance._rootNodeID;
      ReactReconciler.unmountComponent(prevComponentInstance);

      this._renderedComponent = this._instantiateReactComponent(
        nextRenderedElement,
        this._currentElement.type
      );
      var nextMarkup = ReactReconciler.mountComponent(
        this._renderedComponent,
        thisID,
        transaction,
        this._mergeChildContext(context, childContext)
      );
      this._replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
    }
  },

  /**
   * @protected
   */
  _replaceNodeWithMarkupByID: function(prevComponentID, nextMarkup) {
    ReactComponentEnvironment.replaceNodeWithMarkupByID(
      prevComponentID,
      nextMarkup
    );
  },

  /**
   * @protected
   */
  _renderValidatedComponentWithoutOwnerOrContext: function() {
    var inst = this._instance;
    var renderedComponent = inst.render();
    if ("production" !== process.env.NODE_ENV) {
      // We allow auto-mocks to proceed as if they're returning null.
      if (typeof renderedComponent === 'undefined' &&
          inst.render._isMockFunction) {
        // This is probably bad practice. Consider warning here and
        // deprecating this convenience.
        renderedComponent = null;
      }
    }

    return renderedComponent;
  },

  /**
   * @private
   */
  _renderValidatedComponent: function(childContext) {
    var renderedComponent;
    var previousContext = ReactContext.current;
    ReactContext.current = this._mergeChildContext(
      this._currentElement._context,
      childContext
    );
    ReactCurrentOwner.current = this;
    try {
      renderedComponent =
        this._renderValidatedComponentWithoutOwnerOrContext();
    } finally {
      ReactContext.current = previousContext;
      ReactCurrentOwner.current = null;
    }
    ("production" !== process.env.NODE_ENV ? invariant(
      // TODO: An `isValidNode` function would probably be more appropriate
      renderedComponent === null || renderedComponent === false ||
      ReactElement.isValidElement(renderedComponent),
      '%s.render(): A valid ReactComponent must be returned. You may have ' +
        'returned undefined, an array or some other invalid object.',
      this.getName() || 'ReactCompositeComponent'
    ) : invariant(// TODO: An `isValidNode` function would probably be more appropriate
    renderedComponent === null || renderedComponent === false ||
    ReactElement.isValidElement(renderedComponent)));
    return renderedComponent;
  },

  /**
   * Lazily allocates the refs object and stores `component` as `ref`.
   *
   * @param {string} ref Reference name.
   * @param {component} component Component to store as `ref`.
   * @final
   * @private
   */
  attachRef: function(ref, component) {
    var inst = this.getPublicInstance();
    var refs = inst.refs === emptyObject ? (inst.refs = {}) : inst.refs;
    refs[ref] = component.getPublicInstance();
  },

  /**
   * Detaches a reference name.
   *
   * @param {string} ref Name to dereference.
   * @final
   * @private
   */
  detachRef: function(ref) {
    var refs = this.getPublicInstance().refs;
    delete refs[ref];
  },

  /**
   * Get a text description of the component that can be used to identify it
   * in error messages.
   * @return {string} The name or null.
   * @internal
   */
  getName: function() {
    var type = this._currentElement.type;
    var constructor = this._instance && this._instance.constructor;
    return (
      type.displayName || (constructor && constructor.displayName) ||
      type.name || (constructor && constructor.name) ||
      null
    );
  },

  /**
   * Get the publicly accessible representation of this component - i.e. what
   * is exposed by refs and returned by React.render. Can be null for stateless
   * components.
   *
   * @return {ReactComponent} the public component instance.
   * @internal
   */
  getPublicInstance: function() {
    return this._instance;
  },

  // Stub
  _instantiateReactComponent: null

};

ReactPerf.measureMethods(
  ReactCompositeComponentMixin,
  'ReactCompositeComponent',
  {
    mountComponent: 'mountComponent',
    updateComponent: 'updateComponent',
    _renderValidatedComponent: '_renderValidatedComponent'
  }
);

var ReactCompositeComponent = {

  Mixin: ReactCompositeComponentMixin

};

module.exports = ReactCompositeComponent;

}).call(this,require('_process'))
},{"./Object.assign":182,"./ReactComponentEnvironment":194,"./ReactContext":197,"./ReactCurrentOwner":198,"./ReactElement":216,"./ReactElementValidator":217,"./ReactInstanceMap":226,"./ReactLifeCycle":227,"./ReactNativeComponent":233,"./ReactPerf":235,"./ReactPropTypeLocationNames":237,"./ReactPropTypeLocations":238,"./ReactReconciler":242,"./ReactUpdates":253,"./emptyObject":284,"./invariant":304,"./shouldUpdateReactComponent":321,"./warning":325,"_process":2}],197:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactContext
 */

'use strict';

var assign = require("./Object.assign");
var emptyObject = require("./emptyObject");
var warning = require("./warning");

var didWarn = false;

/**
 * Keeps track of the current context.
 *
 * The context is automatically passed down the component ownership hierarchy
 * and is accessible via `this.context` on ReactCompositeComponents.
 */
var ReactContext = {

  /**
   * @internal
   * @type {object}
   */
  current: emptyObject,

  /**
   * Temporarily extends the current context while executing scopedCallback.
   *
   * A typical use case might look like
   *
   *  render: function() {
   *    var children = ReactContext.withContext({foo: 'foo'}, () => (
   *
   *    ));
   *    return <div>{children}</div>;
   *  }
   *
   * @param {object} newContext New context to merge into the existing context
   * @param {function} scopedCallback Callback to run with the new context
   * @return {ReactComponent|array<ReactComponent>}
   */
  withContext: function(newContext, scopedCallback) {
    if ("production" !== process.env.NODE_ENV) {
      ("production" !== process.env.NODE_ENV ? warning(
        didWarn,
        'withContext is deprecated and will be removed in a future version. ' +
        'Use a wrapper component with getChildContext instead.'
      ) : null);

      didWarn = true;
    }

    var result;
    var previousContext = ReactContext.current;
    ReactContext.current = assign({}, previousContext, newContext);
    try {
      result = scopedCallback();
    } finally {
      ReactContext.current = previousContext;
    }
    return result;
  }

};

module.exports = ReactContext;

}).call(this,require('_process'))
},{"./Object.assign":182,"./emptyObject":284,"./warning":325,"_process":2}],198:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCurrentOwner
 */

'use strict';

/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 *
 * The depth indicate how many composite components are above this render level.
 */
var ReactCurrentOwner = {

  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null

};

module.exports = ReactCurrentOwner;

},{}],199:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOM
 * @typechecks static-only
 */

'use strict';

var ReactElement = require("./ReactElement");
var ReactElementValidator = require("./ReactElementValidator");

var mapObject = require("./mapObject");

/**
 * Create a factory that creates HTML tag elements.
 *
 * @param {string} tag Tag name (e.g. `div`).
 * @private
 */
function createDOMFactory(tag) {
  if ("production" !== process.env.NODE_ENV) {
    return ReactElementValidator.createFactory(tag);
  }
  return ReactElement.createFactory(tag);
}

/**
 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
 * This is also accessible via `React.DOM`.
 *
 * @public
 */
var ReactDOM = mapObject({
  a: 'a',
  abbr: 'abbr',
  address: 'address',
  area: 'area',
  article: 'article',
  aside: 'aside',
  audio: 'audio',
  b: 'b',
  base: 'base',
  bdi: 'bdi',
  bdo: 'bdo',
  big: 'big',
  blockquote: 'blockquote',
  body: 'body',
  br: 'br',
  button: 'button',
  canvas: 'canvas',
  caption: 'caption',
  cite: 'cite',
  code: 'code',
  col: 'col',
  colgroup: 'colgroup',
  data: 'data',
  datalist: 'datalist',
  dd: 'dd',
  del: 'del',
  details: 'details',
  dfn: 'dfn',
  dialog: 'dialog',
  div: 'div',
  dl: 'dl',
  dt: 'dt',
  em: 'em',
  embed: 'embed',
  fieldset: 'fieldset',
  figcaption: 'figcaption',
  figure: 'figure',
  footer: 'footer',
  form: 'form',
  h1: 'h1',
  h2: 'h2',
  h3: 'h3',
  h4: 'h4',
  h5: 'h5',
  h6: 'h6',
  head: 'head',
  header: 'header',
  hr: 'hr',
  html: 'html',
  i: 'i',
  iframe: 'iframe',
  img: 'img',
  input: 'input',
  ins: 'ins',
  kbd: 'kbd',
  keygen: 'keygen',
  label: 'label',
  legend: 'legend',
  li: 'li',
  link: 'link',
  main: 'main',
  map: 'map',
  mark: 'mark',
  menu: 'menu',
  menuitem: 'menuitem',
  meta: 'meta',
  meter: 'meter',
  nav: 'nav',
  noscript: 'noscript',
  object: 'object',
  ol: 'ol',
  optgroup: 'optgroup',
  option: 'option',
  output: 'output',
  p: 'p',
  param: 'param',
  picture: 'picture',
  pre: 'pre',
  progress: 'progress',
  q: 'q',
  rp: 'rp',
  rt: 'rt',
  ruby: 'ruby',
  s: 's',
  samp: 'samp',
  script: 'script',
  section: 'section',
  select: 'select',
  small: 'small',
  source: 'source',
  span: 'span',
  strong: 'strong',
  style: 'style',
  sub: 'sub',
  summary: 'summary',
  sup: 'sup',
  table: 'table',
  tbody: 'tbody',
  td: 'td',
  textarea: 'textarea',
  tfoot: 'tfoot',
  th: 'th',
  thead: 'thead',
  time: 'time',
  title: 'title',
  tr: 'tr',
  track: 'track',
  u: 'u',
  ul: 'ul',
  'var': 'var',
  video: 'video',
  wbr: 'wbr',

  // SVG
  circle: 'circle',
  clipPath: 'clipPath',
  defs: 'defs',
  ellipse: 'ellipse',
  g: 'g',
  line: 'line',
  linearGradient: 'linearGradient',
  mask: 'mask',
  path: 'path',
  pattern: 'pattern',
  polygon: 'polygon',
  polyline: 'polyline',
  radialGradient: 'radialGradient',
  rect: 'rect',
  stop: 'stop',
  svg: 'svg',
  text: 'text',
  tspan: 'tspan'

}, createDOMFactory);

module.exports = ReactDOM;

}).call(this,require('_process'))
},{"./ReactElement":216,"./ReactElementValidator":217,"./mapObject":312,"_process":2}],200:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMButton
 */

'use strict';

var AutoFocusMixin = require("./AutoFocusMixin");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactClass = require("./ReactClass");
var ReactElement = require("./ReactElement");

var keyMirror = require("./keyMirror");

var button = ReactElement.createFactory('button');

var mouseListenerNames = keyMirror({
  onClick: true,
  onDoubleClick: true,
  onMouseDown: true,
  onMouseMove: true,
  onMouseUp: true,
  onClickCapture: true,
  onDoubleClickCapture: true,
  onMouseDownCapture: true,
  onMouseMoveCapture: true,
  onMouseUpCapture: true
});

/**
 * Implements a <button> native component that does not receive mouse events
 * when `disabled` is set.
 */
var ReactDOMButton = ReactClass.createClass({
  displayName: 'ReactDOMButton',
  tagName: 'BUTTON',

  mixins: [AutoFocusMixin, ReactBrowserComponentMixin],

  render: function() {
    var props = {};

    // Copy the props; except the mouse listeners if we're disabled
    for (var key in this.props) {
      if (this.props.hasOwnProperty(key) &&
          (!this.props.disabled || !mouseListenerNames[key])) {
        props[key] = this.props[key];
      }
    }

    return button(props, this.props.children);
  }

});

module.exports = ReactDOMButton;

},{"./AutoFocusMixin":155,"./ReactBrowserComponentMixin":185,"./ReactClass":191,"./ReactElement":216,"./keyMirror":310}],201:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMComponent
 * @typechecks static-only
 */

/* global hasOwnProperty:true */

'use strict';

var CSSPropertyOperations = require("./CSSPropertyOperations");
var DOMProperty = require("./DOMProperty");
var DOMPropertyOperations = require("./DOMPropertyOperations");
var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");
var ReactComponentBrowserEnvironment =
  require("./ReactComponentBrowserEnvironment");
var ReactMount = require("./ReactMount");
var ReactMultiChild = require("./ReactMultiChild");
var ReactPerf = require("./ReactPerf");

var assign = require("./Object.assign");
var escapeTextContentForBrowser = require("./escapeTextContentForBrowser");
var invariant = require("./invariant");
var isEventSupported = require("./isEventSupported");
var keyOf = require("./keyOf");
var warning = require("./warning");

var deleteListener = ReactBrowserEventEmitter.deleteListener;
var listenTo = ReactBrowserEventEmitter.listenTo;
var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;

// For quickly matching children type, to test if can be treated as content.
var CONTENT_TYPES = {'string': true, 'number': true};

var STYLE = keyOf({style: null});

var ELEMENT_NODE_TYPE = 1;

/**
 * Optionally injectable operations for mutating the DOM
 */
var BackendIDOperations = null;

/**
 * @param {?object} props
 */
function assertValidProps(props) {
  if (!props) {
    return;
  }
  // Note the use of `==` which checks for null or undefined.
  if (props.dangerouslySetInnerHTML != null) {
    ("production" !== process.env.NODE_ENV ? invariant(
      props.children == null,
      'Can only set one of `children` or `props.dangerouslySetInnerHTML`.'
    ) : invariant(props.children == null));
    ("production" !== process.env.NODE_ENV ? invariant(
      typeof props.dangerouslySetInnerHTML === 'object' &&
      '__html' in props.dangerouslySetInnerHTML,
      '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' +
      'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' +
      'for more information.'
    ) : invariant(typeof props.dangerouslySetInnerHTML === 'object' &&
    '__html' in props.dangerouslySetInnerHTML));
  }
  if ("production" !== process.env.NODE_ENV) {
    ("production" !== process.env.NODE_ENV ? warning(
      props.innerHTML == null,
      'Directly setting property `innerHTML` is not permitted. ' +
      'For more information, lookup documentation on `dangerouslySetInnerHTML`.'
    ) : null);
    ("production" !== process.env.NODE_ENV ? warning(
      !props.contentEditable || props.children == null,
      'A component is `contentEditable` and contains `children` managed by ' +
      'React. It is now your responsibility to guarantee that none of ' +
      'those nodes are unexpectedly modified or duplicated. This is ' +
      'probably not intentional.'
    ) : null);
  }
  ("production" !== process.env.NODE_ENV ? invariant(
    props.style == null || typeof props.style === 'object',
    'The `style` prop expects a mapping from style properties to values, ' +
    'not a string. For example, style={{marginRight: spacing + \'em\'}} when ' +
    'using JSX.'
  ) : invariant(props.style == null || typeof props.style === 'object'));
}

function putListener(id, registrationName, listener, transaction) {
  if ("production" !== process.env.NODE_ENV) {
    // IE8 has no API for event capturing and the `onScroll` event doesn't
    // bubble.
    ("production" !== process.env.NODE_ENV ? warning(
      registrationName !== 'onScroll' || isEventSupported('scroll', true),
      'This browser doesn\'t support the `onScroll` event'
    ) : null);
  }
  var container = ReactMount.findReactContainerForID(id);
  if (container) {
    var doc = container.nodeType === ELEMENT_NODE_TYPE ?
      container.ownerDocument :
      container;
    listenTo(registrationName, doc);
  }
  transaction.getPutListenerQueue().enqueuePutListener(
    id,
    registrationName,
    listener
  );
}

// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special cased tags.

var omittedCloseTags = {
  'area': true,
  'base': true,
  'br': true,
  'col': true,
  'embed': true,
  'hr': true,
  'img': true,
  'input': true,
  'keygen': true,
  'link': true,
  'meta': true,
  'param': true,
  'source': true,
  'track': true,
  'wbr': true
  // NOTE: menuitem's close tag should be omitted, but that causes problems.
};

// We accept any tag to be rendered but since this gets injected into abitrary
// HTML, we want to make sure that it's a safe tag.
// http://www.w3.org/TR/REC-xml/#NT-Name

var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
var validatedTagCache = {};
var hasOwnProperty = {}.hasOwnProperty;

function validateDangerousTag(tag) {
  if (!hasOwnProperty.call(validatedTagCache, tag)) {
    ("production" !== process.env.NODE_ENV ? invariant(VALID_TAG_REGEX.test(tag), 'Invalid tag: %s', tag) : invariant(VALID_TAG_REGEX.test(tag)));
    validatedTagCache[tag] = true;
  }
}

/**
 * Creates a new React class that is idempotent and capable of containing other
 * React components. It accepts event listeners and DOM properties that are
 * valid according to `DOMProperty`.
 *
 *  - Event listeners: `onClick`, `onMouseDown`, etc.
 *  - DOM properties: `className`, `name`, `title`, etc.
 *
 * The `style` property functions differently from the DOM API. It accepts an
 * object mapping of style properties to values.
 *
 * @constructor ReactDOMComponent
 * @extends ReactMultiChild
 */
function ReactDOMComponent(tag) {
  validateDangerousTag(tag);
  this._tag = tag;
  this._renderedChildren = null;
  this._previousStyleCopy = null;
  this._rootNodeID = null;
}

ReactDOMComponent.displayName = 'ReactDOMComponent';

ReactDOMComponent.Mixin = {

  construct: function(element) {
    this._currentElement = element;
  },

  /**
   * Generates root tag markup then recurses. This method has side effects and
   * is not idempotent.
   *
   * @internal
   * @param {string} rootID The root DOM ID for this node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} The computed markup.
   */
  mountComponent: function(rootID, transaction, context) {
    this._rootNodeID = rootID;
    assertValidProps(this._currentElement.props);
    var closeTag = omittedCloseTags[this._tag] ? '' : '</' + this._tag + '>';
    return (
      this._createOpenTagMarkupAndPutListeners(transaction) +
      this._createContentMarkup(transaction, context) +
      closeTag
    );
  },

  /**
   * Creates markup for the open tag and all attributes.
   *
   * This method has side effects because events get registered.
   *
   * Iterating over object properties is faster than iterating over arrays.
   * @see http://jsperf.com/obj-vs-arr-iteration
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Markup of opening tag.
   */
  _createOpenTagMarkupAndPutListeners: function(transaction) {
    var props = this._currentElement.props;
    var ret = '<' + this._tag;

    for (var propKey in props) {
      if (!props.hasOwnProperty(propKey)) {
        continue;
      }
      var propValue = props[propKey];
      if (propValue == null) {
        continue;
      }
      if (registrationNameModules.hasOwnProperty(propKey)) {
        putListener(this._rootNodeID, propKey, propValue, transaction);
      } else {
        if (propKey === STYLE) {
          if (propValue) {
            propValue = this._previousStyleCopy = assign({}, props.style);
          }
          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
        }
        var markup =
          DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
        if (markup) {
          ret += ' ' + markup;
        }
      }
    }

    // For static pages, no need to put React ID and checksum. Saves lots of
    // bytes.
    if (transaction.renderToStaticMarkup) {
      return ret + '>';
    }

    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
    return ret + ' ' + markupForID + '>';
  },

  /**
   * Creates markup for the content between the tags.
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} context
   * @return {string} Content markup.
   */
  _createContentMarkup: function(transaction, context) {
    var prefix = '';
    if (this._tag === 'listing' ||
        this._tag === 'pre' ||
        this._tag === 'textarea') {
      // Add an initial newline because browsers ignore the first newline in
      // a <listing>, <pre>, or <textarea> as an "authoring convenience" -- see
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody.
      prefix = '\n';
    }

    var props = this._currentElement.props;

    // Intentional use of != to avoid catching zero/false.
    var innerHTML = props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        return prefix + innerHTML.__html;
      }
    } else {
      var contentToUse =
        CONTENT_TYPES[typeof props.children] ? props.children : null;
      var childrenToUse = contentToUse != null ? null : props.children;
      if (contentToUse != null) {
        return prefix + escapeTextContentForBrowser(contentToUse);
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(
          childrenToUse,
          transaction,
          context
        );
        return prefix + mountImages.join('');
      }
    }
    return prefix;
  },

  receiveComponent: function(nextElement, transaction, context) {
    var prevElement = this._currentElement;
    this._currentElement = nextElement;
    this.updateComponent(transaction, prevElement, nextElement, context);
  },

  /**
   * Updates a native DOM component after it has already been allocated and
   * attached to the DOM. Reconciles the root DOM node, then recurses.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevElement
   * @param {ReactElement} nextElement
   * @internal
   * @overridable
   */
  updateComponent: function(transaction, prevElement, nextElement, context) {
    assertValidProps(this._currentElement.props);
    this._updateDOMProperties(prevElement.props, transaction);
    this._updateDOMChildren(prevElement.props, transaction, context);
  },

  /**
   * Reconciles the properties by detecting differences in property values and
   * updating the DOM as necessary. This function is probably the single most
   * critical path for performance optimization.
   *
   * TODO: Benchmark whether checking for changed values in memory actually
   *       improves performance (especially statically positioned elements).
   * TODO: Benchmark the effects of putting this at the top since 99% of props
   *       do not change for a given reconciliation.
   * TODO: Benchmark areas that can be improved with caching.
   *
   * @private
   * @param {object} lastProps
   * @param {ReactReconcileTransaction} transaction
   */
  _updateDOMProperties: function(lastProps, transaction) {
    var nextProps = this._currentElement.props;
    var propKey;
    var styleName;
    var styleUpdates;
    for (propKey in lastProps) {
      if (nextProps.hasOwnProperty(propKey) ||
         !lastProps.hasOwnProperty(propKey)) {
        continue;
      }
      if (propKey === STYLE) {
        var lastStyle = this._previousStyleCopy;
        for (styleName in lastStyle) {
          if (lastStyle.hasOwnProperty(styleName)) {
            styleUpdates = styleUpdates || {};
            styleUpdates[styleName] = '';
          }
        }
        this._previousStyleCopy = null;
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        deleteListener(this._rootNodeID, propKey);
      } else if (
          DOMProperty.isStandardName[propKey] ||
          DOMProperty.isCustomAttribute(propKey)) {
        BackendIDOperations.deletePropertyByID(
          this._rootNodeID,
          propKey
        );
      }
    }
    for (propKey in nextProps) {
      var nextProp = nextProps[propKey];
      var lastProp = propKey === STYLE ?
        this._previousStyleCopy :
        lastProps[propKey];
      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
        continue;
      }
      if (propKey === STYLE) {
        if (nextProp) {
          nextProp = this._previousStyleCopy = assign({}, nextProp);
        } else {
          this._previousStyleCopy = null;
        }
        if (lastProp) {
          // Unset styles on `lastProp` but not on `nextProp`.
          for (styleName in lastProp) {
            if (lastProp.hasOwnProperty(styleName) &&
                (!nextProp || !nextProp.hasOwnProperty(styleName))) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = '';
            }
          }
          // Update styles that changed since `lastProp`.
          for (styleName in nextProp) {
            if (nextProp.hasOwnProperty(styleName) &&
                lastProp[styleName] !== nextProp[styleName]) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = nextProp[styleName];
            }
          }
        } else {
          // Relies on `updateStylesByID` not mutating `styleUpdates`.
          styleUpdates = nextProp;
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        putListener(this._rootNodeID, propKey, nextProp, transaction);
      } else if (
          DOMProperty.isStandardName[propKey] ||
          DOMProperty.isCustomAttribute(propKey)) {
        BackendIDOperations.updatePropertyByID(
          this._rootNodeID,
          propKey,
          nextProp
        );
      }
    }
    if (styleUpdates) {
      BackendIDOperations.updateStylesByID(
        this._rootNodeID,
        styleUpdates
      );
    }
  },

  /**
   * Reconciles the children with the various properties that affect the
   * children content.
   *
   * @param {object} lastProps
   * @param {ReactReconcileTransaction} transaction
   */
  _updateDOMChildren: function(lastProps, transaction, context) {
    var nextProps = this._currentElement.props;

    var lastContent =
      CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
    var nextContent =
      CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

    var lastHtml =
      lastProps.dangerouslySetInnerHTML &&
      lastProps.dangerouslySetInnerHTML.__html;
    var nextHtml =
      nextProps.dangerouslySetInnerHTML &&
      nextProps.dangerouslySetInnerHTML.__html;

    // Note the use of `!=` which checks for null or undefined.
    var lastChildren = lastContent != null ? null : lastProps.children;
    var nextChildren = nextContent != null ? null : nextProps.children;

    // If we're switching from children to content/html or vice versa, remove
    // the old content
    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
    if (lastChildren != null && nextChildren == null) {
      this.updateChildren(null, transaction, context);
    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
      this.updateTextContent('');
    }

    if (nextContent != null) {
      if (lastContent !== nextContent) {
        this.updateTextContent('' + nextContent);
      }
    } else if (nextHtml != null) {
      if (lastHtml !== nextHtml) {
        BackendIDOperations.updateInnerHTMLByID(
          this._rootNodeID,
          nextHtml
        );
      }
    } else if (nextChildren != null) {
      this.updateChildren(nextChildren, transaction, context);
    }
  },

  /**
   * Destroys all event registrations for this instance. Does not remove from
   * the DOM. That must be done by the parent.
   *
   * @internal
   */
  unmountComponent: function() {
    this.unmountChildren();
    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
    this._rootNodeID = null;
  }

};

ReactPerf.measureMethods(ReactDOMComponent, 'ReactDOMComponent', {
  mountComponent: 'mountComponent',
  updateComponent: 'updateComponent'
});

assign(
  ReactDOMComponent.prototype,
  ReactDOMComponent.Mixin,
  ReactMultiChild.Mixin
);

ReactDOMComponent.injection = {
  injectIDOperations: function(IDOperations) {
    ReactDOMComponent.BackendIDOperations = BackendIDOperations = IDOperations;
  }
};

module.exports = ReactDOMComponent;

}).call(this,require('_process'))
},{"./CSSPropertyOperations":159,"./DOMProperty":164,"./DOMPropertyOperations":165,"./Object.assign":182,"./ReactBrowserEventEmitter":186,"./ReactComponentBrowserEnvironment":193,"./ReactMount":230,"./ReactMultiChild":231,"./ReactPerf":235,"./escapeTextContentForBrowser":285,"./invariant":304,"./isEventSupported":305,"./keyOf":311,"./warning":325,"_process":2}],202:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMForm
 */

'use strict';

var EventConstants = require("./EventConstants");
var LocalEventTrapMixin = require("./LocalEventTrapMixin");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactClass = require("./ReactClass");
var ReactElement = require("./ReactElement");

var form = ReactElement.createFactory('form');

/**
 * Since onSubmit doesn't bubble OR capture on the top level in IE8, we need
 * to capture it on the <form> element itself. There are lots of hacks we could
 * do to accomplish this, but the most reliable is to make <form> a
 * composite component and use `componentDidMount` to attach the event handlers.
 */
var ReactDOMForm = ReactClass.createClass({
  displayName: 'ReactDOMForm',
  tagName: 'FORM',

  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

  render: function() {
    // TODO: Instead of using `ReactDOM` directly, we should use JSX. However,
    // `jshint` fails to parse JSX so in order for linting to work in the open
    // source repo, we need to just use `ReactDOM.form`.
    return form(this.props);
  },

  componentDidMount: function() {
    this.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset');
    this.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit');
  }
});

module.exports = ReactDOMForm;

},{"./EventConstants":169,"./LocalEventTrapMixin":180,"./ReactBrowserComponentMixin":185,"./ReactClass":191,"./ReactElement":216}],203:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMIDOperations
 * @typechecks static-only
 */

/*jslint evil: true */

'use strict';

var CSSPropertyOperations = require("./CSSPropertyOperations");
var DOMChildrenOperations = require("./DOMChildrenOperations");
var DOMPropertyOperations = require("./DOMPropertyOperations");
var ReactMount = require("./ReactMount");
var ReactPerf = require("./ReactPerf");

var invariant = require("./invariant");
var setInnerHTML = require("./setInnerHTML");

/**
 * Errors for properties that should not be updated with `updatePropertyById()`.
 *
 * @type {object}
 * @private
 */
var INVALID_PROPERTY_ERRORS = {
  dangerouslySetInnerHTML:
    '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
  style: '`style` must be set using `updateStylesByID()`.'
};

/**
 * Operations used to process updates to DOM nodes. This is made injectable via
 * `ReactDOMComponent.BackendIDOperations`.
 */
var ReactDOMIDOperations = {

  /**
   * Updates a DOM node with new property values. This should only be used to
   * update DOM properties in `DOMProperty`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} name A valid property name, see `DOMProperty`.
   * @param {*} value New value of the property.
   * @internal
   */
  updatePropertyByID: function(id, name, value) {
    var node = ReactMount.getNode(id);
    ("production" !== process.env.NODE_ENV ? invariant(
      !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
      'updatePropertyByID(...): %s',
      INVALID_PROPERTY_ERRORS[name]
    ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));

    // If we're updating to null or undefined, we should remove the property
    // from the DOM node instead of inadvertantly setting to a string. This
    // brings us in line with the same behavior we have on initial render.
    if (value != null) {
      DOMPropertyOperations.setValueForProperty(node, name, value);
    } else {
      DOMPropertyOperations.deleteValueForProperty(node, name);
    }
  },

  /**
   * Updates a DOM node to remove a property. This should only be used to remove
   * DOM properties in `DOMProperty`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} name A property name to remove, see `DOMProperty`.
   * @internal
   */
  deletePropertyByID: function(id, name, value) {
    var node = ReactMount.getNode(id);
    ("production" !== process.env.NODE_ENV ? invariant(
      !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
      'updatePropertyByID(...): %s',
      INVALID_PROPERTY_ERRORS[name]
    ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));
    DOMPropertyOperations.deleteValueForProperty(node, name, value);
  },

  /**
   * Updates a DOM node with new style values. If a value is specified as '',
   * the corresponding style property will be unset.
   *
   * @param {string} id ID of the node to update.
   * @param {object} styles Mapping from styles to values.
   * @internal
   */
  updateStylesByID: function(id, styles) {
    var node = ReactMount.getNode(id);
    CSSPropertyOperations.setValueForStyles(node, styles);
  },

  /**
   * Updates a DOM node's innerHTML.
   *
   * @param {string} id ID of the node to update.
   * @param {string} html An HTML string.
   * @internal
   */
  updateInnerHTMLByID: function(id, html) {
    var node = ReactMount.getNode(id);
    setInnerHTML(node, html);
  },

  /**
   * Updates a DOM node's text content set by `props.content`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} content Text content.
   * @internal
   */
  updateTextContentByID: function(id, content) {
    var node = ReactMount.getNode(id);
    DOMChildrenOperations.updateTextContent(node, content);
  },

  /**
   * Replaces a DOM node that exists in the document with markup.
   *
   * @param {string} id ID of child to be replaced.
   * @param {string} markup Dangerous markup to inject in place of child.
   * @internal
   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
   */
  dangerouslyReplaceNodeWithMarkupByID: function(id, markup) {
    var node = ReactMount.getNode(id);
    DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
  },

  /**
   * Updates a component's children by processing a series of updates.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markup List of markup strings.
   * @internal
   */
  dangerouslyProcessChildrenUpdates: function(updates, markup) {
    for (var i = 0; i < updates.length; i++) {
      updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
    }
    DOMChildrenOperations.processUpdates(updates, markup);
  }
};

ReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {
  updatePropertyByID: 'updatePropertyByID',
  deletePropertyByID: 'deletePropertyByID',
  updateStylesByID: 'updateStylesByID',
  updateInnerHTMLByID: 'updateInnerHTMLByID',
  updateTextContentByID: 'updateTextContentByID',
  dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',
  dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'
});

module.exports = ReactDOMIDOperations;

}).call(this,require('_process'))
},{"./CSSPropertyOperations":159,"./DOMChildrenOperations":163,"./DOMPropertyOperations":165,"./ReactMount":230,"./ReactPerf":235,"./invariant":304,"./setInnerHTML":318,"_process":2}],204:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMIframe
 */

'use strict';

var EventConstants = require("./EventConstants");
var LocalEventTrapMixin = require("./LocalEventTrapMixin");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactClass = require("./ReactClass");
var ReactElement = require("./ReactElement");

var iframe = ReactElement.createFactory('iframe');

/**
 * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to
 * capture it on the <iframe> element itself. There are lots of hacks we could
 * do to accomplish this, but the most reliable is to make <iframe> a composite
 * component and use `componentDidMount` to attach the event handlers.
 */
var ReactDOMIframe = ReactClass.createClass({
  displayName: 'ReactDOMIframe',
  tagName: 'IFRAME',

  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

  render: function() {
    return iframe(this.props);
  },

  componentDidMount: function() {
    this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');
  }
});

module.exports = ReactDOMIframe;

},{"./EventConstants":169,"./LocalEventTrapMixin":180,"./ReactBrowserComponentMixin":185,"./ReactClass":191,"./ReactElement":216}],205:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMImg
 */

'use strict';

var EventConstants = require("./EventConstants");
var LocalEventTrapMixin = require("./LocalEventTrapMixin");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactClass = require("./ReactClass");
var ReactElement = require("./ReactElement");

var img = ReactElement.createFactory('img');

/**
 * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to
 * capture it on the <img> element itself. There are lots of hacks we could do
 * to accomplish this, but the most reliable is to make <img> a composite
 * component and use `componentDidMount` to attach the event handlers.
 */
var ReactDOMImg = ReactClass.createClass({
  displayName: 'ReactDOMImg',
  tagName: 'IMG',

  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

  render: function() {
    return img(this.props);
  },

  componentDidMount: function() {
    this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');
    this.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error');
  }
});

module.exports = ReactDOMImg;

},{"./EventConstants":169,"./LocalEventTrapMixin":180,"./ReactBrowserComponentMixin":185,"./ReactClass":191,"./ReactElement":216}],206:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMInput
 */

'use strict';

var AutoFocusMixin = require("./AutoFocusMixin");
var DOMPropertyOperations = require("./DOMPropertyOperations");
var LinkedValueUtils = require("./LinkedValueUtils");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactClass = require("./ReactClass");
var ReactElement = require("./ReactElement");
var ReactMount = require("./ReactMount");
var ReactUpdates = require("./ReactUpdates");

var assign = require("./Object.assign");
var invariant = require("./invariant");

var input = ReactElement.createFactory('input');

var instancesByReactID = {};

function forceUpdateIfMounted() {
  /*jshint validthis:true */
  if (this.isMounted()) {
    this.forceUpdate();
  }
}

/**
 * Implements an <input> native component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */
var ReactDOMInput = ReactClass.createClass({
  displayName: 'ReactDOMInput',
  tagName: 'INPUT',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  getInitialState: function() {
    var defaultValue = this.props.defaultValue;
    return {
      initialChecked: this.props.defaultChecked || false,
      initialValue: defaultValue != null ? defaultValue : null
    };
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = assign({}, this.props);

    props.defaultChecked = null;
    props.defaultValue = null;

    var value = LinkedValueUtils.getValue(this);
    props.value = value != null ? value : this.state.initialValue;

    var checked = LinkedValueUtils.getChecked(this);
    props.checked = checked != null ? checked : this.state.initialChecked;

    props.onChange = this._handleChange;

    return input(props, this.props.children);
  },

  componentDidMount: function() {
    var id = ReactMount.getID(this.getDOMNode());
    instancesByReactID[id] = this;
  },

  componentWillUnmount: function() {
    var rootNode = this.getDOMNode();
    var id = ReactMount.getID(rootNode);
    delete instancesByReactID[id];
  },

  componentDidUpdate: function(prevProps, prevState, prevContext) {
    var rootNode = this.getDOMNode();
    if (this.props.checked != null) {
      DOMPropertyOperations.setValueForProperty(
        rootNode,
        'checked',
        this.props.checked || false
      );
    }

    var value = LinkedValueUtils.getValue(this);
    if (value != null) {
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      returnValue = onChange.call(this, event);
    }
    // Here we use asap to wait until all updates have propagated, which
    // is important when using controlled components within layers:
    // https://github.com/facebook/react/issues/1698
    ReactUpdates.asap(forceUpdateIfMounted, this);

    var name = this.props.name;
    if (this.props.type === 'radio' && name != null) {
      var rootNode = this.getDOMNode();
      var queryRoot = rootNode;

      while (queryRoot.parentNode) {
        queryRoot = queryRoot.parentNode;
      }

      // If `rootNode.form` was non-null, then we could try `form.elements`,
      // but that sometimes behaves strangely in IE8. We could also try using
      // `form.getElementsByName`, but that will only return direct children
      // and won't include inputs that use the HTML5 `form=` attribute. Since
      // the input might not even be in a form, let's just use the global
      // `querySelectorAll` to ensure we don't miss anything.
      var group = queryRoot.querySelectorAll(
        'input[name=' + JSON.stringify('' + name) + '][type="radio"]');

      for (var i = 0, groupLen = group.length; i < groupLen; i++) {
        var otherNode = group[i];
        if (otherNode === rootNode ||
            otherNode.form !== rootNode.form) {
          continue;
        }
        var otherID = ReactMount.getID(otherNode);
        ("production" !== process.env.NODE_ENV ? invariant(
          otherID,
          'ReactDOMInput: Mixing React and non-React radio inputs with the ' +
          'same `name` is not supported.'
        ) : invariant(otherID));
        var otherInstance = instancesByReactID[otherID];
        ("production" !== process.env.NODE_ENV ? invariant(
          otherInstance,
          'ReactDOMInput: Unknown radio button ID %s.',
          otherID
        ) : invariant(otherInstance));
        // If this is a controlled radio button group, forcing the input that
        // was previously checked to update will cause it to be come re-checked
        // as appropriate.
        ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
      }
    }

    return returnValue;
  }

});

module.exports = ReactDOMInput;

}).call(this,require('_process'))
},{"./AutoFocusMixin":155,"./DOMPropertyOperations":165,"./LinkedValueUtils":179,"./Object.assign":182,"./ReactBrowserComponentMixin":185,"./ReactClass":191,"./ReactElement":216,"./ReactMount":230,"./ReactUpdates":253,"./invariant":304,"_process":2}],207:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMOption
 */

'use strict';

var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactClass = require("./ReactClass");
var ReactElement = require("./ReactElement");

var warning = require("./warning");

var option = ReactElement.createFactory('option');

/**
 * Implements an <option> native component that warns when `selected` is set.
 */
var ReactDOMOption = ReactClass.createClass({
  displayName: 'ReactDOMOption',
  tagName: 'OPTION',

  mixins: [ReactBrowserComponentMixin],

  componentWillMount: function() {
    // TODO (yungsters): Remove support for `selected` in <option>.
    if ("production" !== process.env.NODE_ENV) {
      ("production" !== process.env.NODE_ENV ? warning(
        this.props.selected == null,
        'Use the `defaultValue` or `value` props on <select> instead of ' +
        'setting `selected` on <option>.'
      ) : null);
    }
  },

  render: function() {
    return option(this.props, this.props.children);
  }

});

module.exports = ReactDOMOption;

}).call(this,require('_process'))
},{"./ReactBrowserComponentMixin":185,"./ReactClass":191,"./ReactElement":216,"./warning":325,"_process":2}],208:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMSelect
 */

'use strict';

var AutoFocusMixin = require("./AutoFocusMixin");
var LinkedValueUtils = require("./LinkedValueUtils");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactClass = require("./ReactClass");
var ReactElement = require("./ReactElement");
var ReactUpdates = require("./ReactUpdates");

var assign = require("./Object.assign");

var select = ReactElement.createFactory('select');

function updateOptionsIfPendingUpdateAndMounted() {
  /*jshint validthis:true */
  if (this._pendingUpdate) {
    this._pendingUpdate = false;
    var value = LinkedValueUtils.getValue(this);
    if (value != null && this.isMounted()) {
      updateOptions(this, value);
    }
  }
}

/**
 * Validation function for `value` and `defaultValue`.
 * @private
 */
function selectValueType(props, propName, componentName) {
  if (props[propName] == null) {
    return null;
  }
  if (props.multiple) {
    if (!Array.isArray(props[propName])) {
      return new Error(
        ("The `" + propName + "` prop supplied to <select> must be an array if ") +
        ("`multiple` is true.")
      );
    }
  } else {
    if (Array.isArray(props[propName])) {
      return new Error(
        ("The `" + propName + "` prop supplied to <select> must be a scalar ") +
        ("value if `multiple` is false.")
      );
    }
  }
}

/**
 * @param {ReactComponent} component Instance of ReactDOMSelect
 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
 * @private
 */
function updateOptions(component, propValue) {
  var selectedValue, i, l;
  var options = component.getDOMNode().options;

  if (component.props.multiple) {
    selectedValue = {};
    for (i = 0, l = propValue.length; i < l; i++) {
      selectedValue['' + propValue[i]] = true;
    }
    for (i = 0, l = options.length; i < l; i++) {
      var selected = selectedValue.hasOwnProperty(options[i].value);
      if (options[i].selected !== selected) {
        options[i].selected = selected;
      }
    }
  } else {
    // Do not set `select.value` as exact behavior isn't consistent across all
    // browsers for all cases.
    selectedValue = '' + propValue;
    for (i = 0, l = options.length; i < l; i++) {
      if (options[i].value === selectedValue) {
        options[i].selected = true;
        return;
      }
    }
    if (options.length) {
      options[0].selected = true;
    }
  }
}

/**
 * Implements a <select> native component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */
var ReactDOMSelect = ReactClass.createClass({
  displayName: 'ReactDOMSelect',
  tagName: 'SELECT',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  propTypes: {
    defaultValue: selectValueType,
    value: selectValueType
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = assign({}, this.props);

    props.onChange = this._handleChange;
    props.value = null;

    return select(props, this.props.children);
  },

  componentWillMount: function() {
    this._pendingUpdate = false;
  },

  componentDidMount: function() {
    var value = LinkedValueUtils.getValue(this);
    if (value != null) {
      updateOptions(this, value);
    } else if (this.props.defaultValue != null) {
      updateOptions(this, this.props.defaultValue);
    }
  },

  componentDidUpdate: function(prevProps) {
    var value = LinkedValueUtils.getValue(this);
    if (value != null) {
      this._pendingUpdate = false;
      updateOptions(this, value);
    } else if (!prevProps.multiple !== !this.props.multiple) {
      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
      if (this.props.defaultValue != null) {
        updateOptions(this, this.props.defaultValue);
      } else {
        // Revert the select back to its default unselected state.
        updateOptions(this, this.props.multiple ? [] : '');
      }
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      returnValue = onChange.call(this, event);
    }

    this._pendingUpdate = true;
    ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
    return returnValue;
  }

});

module.exports = ReactDOMSelect;

},{"./AutoFocusMixin":155,"./LinkedValueUtils":179,"./Object.assign":182,"./ReactBrowserComponentMixin":185,"./ReactClass":191,"./ReactElement":216,"./ReactUpdates":253}],209:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMSelection
 */

'use strict';

var ExecutionEnvironment = require("./ExecutionEnvironment");

var getNodeForCharacterOffset = require("./getNodeForCharacterOffset");
var getTextContentAccessor = require("./getTextContentAccessor");

/**
 * While `isCollapsed` is available on the Selection object and `collapsed`
 * is available on the Range object, IE11 sometimes gets them wrong.
 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
 */
function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
  return anchorNode === focusNode && anchorOffset === focusOffset;
}

/**
 * Get the appropriate anchor and focus node/offset pairs for IE.
 *
 * The catch here is that IE's selection API doesn't provide information
 * about whether the selection is forward or backward, so we have to
 * behave as though it's always forward.
 *
 * IE text differs from modern selection in that it behaves as though
 * block elements end with a new line. This means character offsets will
 * differ between the two APIs.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getIEOffsets(node) {
  var selection = document.selection;
  var selectedRange = selection.createRange();
  var selectedLength = selectedRange.text.length;

  // Duplicate selection so we can move range without breaking user selection.
  var fromStart = selectedRange.duplicate();
  fromStart.moveToElementText(node);
  fromStart.setEndPoint('EndToStart', selectedRange);

  var startOffset = fromStart.text.length;
  var endOffset = startOffset + selectedLength;

  return {
    start: startOffset,
    end: endOffset
  };
}

/**
 * @param {DOMElement} node
 * @return {?object}
 */
function getModernOffsets(node) {
  var selection = window.getSelection && window.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode;
  var anchorOffset = selection.anchorOffset;
  var focusNode = selection.focusNode;
  var focusOffset = selection.focusOffset;

  var currentRange = selection.getRangeAt(0);

  // If the node and offset values are the same, the selection is collapsed.
  // `Selection.isCollapsed` is available natively, but IE sometimes gets
  // this value wrong.
  var isSelectionCollapsed = isCollapsed(
    selection.anchorNode,
    selection.anchorOffset,
    selection.focusNode,
    selection.focusOffset
  );

  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

  var tempRange = currentRange.cloneRange();
  tempRange.selectNodeContents(node);
  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

  var isTempRangeCollapsed = isCollapsed(
    tempRange.startContainer,
    tempRange.startOffset,
    tempRange.endContainer,
    tempRange.endOffset
  );

  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
  var end = start + rangeLength;

  // Detect whether the selection is backward.
  var detectionRange = document.createRange();
  detectionRange.setStart(anchorNode, anchorOffset);
  detectionRange.setEnd(focusNode, focusOffset);
  var isBackward = detectionRange.collapsed;

  return {
    start: isBackward ? end : start,
    end: isBackward ? start : end
  };
}

/**
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setIEOffsets(node, offsets) {
  var range = document.selection.createRange().duplicate();
  var start, end;

  if (typeof offsets.end === 'undefined') {
    start = offsets.start;
    end = start;
  } else if (offsets.start > offsets.end) {
    start = offsets.end;
    end = offsets.start;
  } else {
    start = offsets.start;
    end = offsets.end;
  }

  range.moveToElementText(node);
  range.moveStart('character', start);
  range.setEndPoint('EndToStart', range);
  range.moveEnd('character', end - start);
  range.select();
}

/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setModernOffsets(node, offsets) {
  if (!window.getSelection) {
    return;
  }

  var selection = window.getSelection();
  var length = node[getTextContentAccessor()].length;
  var start = Math.min(offsets.start, length);
  var end = typeof offsets.end === 'undefined' ?
            start : Math.min(offsets.end, length);

  // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.
  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    var range = document.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }
  }
}

var useIEOffsets = (
  ExecutionEnvironment.canUseDOM &&
  'selection' in document &&
  !('getSelection' in window)
);

var ReactDOMSelection = {
  /**
   * @param {DOMElement} node
   */
  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

  /**
   * @param {DOMElement|DOMTextNode} node
   * @param {object} offsets
   */
  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
};

module.exports = ReactDOMSelection;

},{"./ExecutionEnvironment":175,"./getNodeForCharacterOffset":297,"./getTextContentAccessor":299}],210:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMTextComponent
 * @typechecks static-only
 */

'use strict';

var DOMPropertyOperations = require("./DOMPropertyOperations");
var ReactComponentBrowserEnvironment =
  require("./ReactComponentBrowserEnvironment");
var ReactDOMComponent = require("./ReactDOMComponent");

var assign = require("./Object.assign");
var escapeTextContentForBrowser = require("./escapeTextContentForBrowser");

/**
 * Text nodes violate a couple assumptions that React makes about components:
 *
 *  - When mounting text into the DOM, adjacent text nodes are merged.
 *  - Text nodes cannot be assigned a React root ID.
 *
 * This component is used to wrap strings in elements so that they can undergo
 * the same reconciliation that is applied to elements.
 *
 * TODO: Investigate representing React components in the DOM with text nodes.
 *
 * @class ReactDOMTextComponent
 * @extends ReactComponent
 * @internal
 */
var ReactDOMTextComponent = function(props) {
  // This constructor and its argument is currently used by mocks.
};

assign(ReactDOMTextComponent.prototype, {

  /**
   * @param {ReactText} text
   * @internal
   */
  construct: function(text) {
    // TODO: This is really a ReactText (ReactNode), not a ReactElement
    this._currentElement = text;
    this._stringText = '' + text;

    // Properties
    this._rootNodeID = null;
    this._mountIndex = 0;
  },

  /**
   * Creates the markup for this text node. This node is not intended to have
   * any features besides containing text content.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Markup for this text node.
   * @internal
   */
  mountComponent: function(rootID, transaction, context) {
    this._rootNodeID = rootID;
    var escapedText = escapeTextContentForBrowser(this._stringText);

    if (transaction.renderToStaticMarkup) {
      // Normally we'd wrap this in a `span` for the reasons stated above, but
      // since this is a situation where React won't take over (static pages),
      // we can simply return the text as it is.
      return escapedText;
    }

    return (
      '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' +
        escapedText +
      '</span>'
    );
  },

  /**
   * Updates this component by updating the text content.
   *
   * @param {ReactText} nextText The next text content
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  receiveComponent: function(nextText, transaction) {
    if (nextText !== this._currentElement) {
      this._currentElement = nextText;
      var nextStringText = '' + nextText;
      if (nextStringText !== this._stringText) {
        // TODO: Save this as pending props and use performUpdateIfNecessary
        // and/or updateComponent to do the actual update for consistency with
        // other component types?
        this._stringText = nextStringText;
        ReactDOMComponent.BackendIDOperations.updateTextContentByID(
          this._rootNodeID,
          nextStringText
        );
      }
    }
  },

  unmountComponent: function() {
    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
  }

});

module.exports = ReactDOMTextComponent;

},{"./DOMPropertyOperations":165,"./Object.assign":182,"./ReactComponentBrowserEnvironment":193,"./ReactDOMComponent":201,"./escapeTextContentForBrowser":285}],211:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMTextarea
 */

'use strict';

var AutoFocusMixin = require("./AutoFocusMixin");
var DOMPropertyOperations = require("./DOMPropertyOperations");
var LinkedValueUtils = require("./LinkedValueUtils");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactClass = require("./ReactClass");
var ReactElement = require("./ReactElement");
var ReactUpdates = require("./ReactUpdates");

var assign = require("./Object.assign");
var invariant = require("./invariant");

var warning = require("./warning");

var textarea = ReactElement.createFactory('textarea');

function forceUpdateIfMounted() {
  /*jshint validthis:true */
  if (this.isMounted()) {
    this.forceUpdate();
  }
}

/**
 * Implements a <textarea> native component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */
var ReactDOMTextarea = ReactClass.createClass({
  displayName: 'ReactDOMTextarea',
  tagName: 'TEXTAREA',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  getInitialState: function() {
    var defaultValue = this.props.defaultValue;
    // TODO (yungsters): Remove support for children content in <textarea>.
    var children = this.props.children;
    if (children != null) {
      if ("production" !== process.env.NODE_ENV) {
        ("production" !== process.env.NODE_ENV ? warning(
          false,
          'Use the `defaultValue` or `value` props instead of setting ' +
          'children on <textarea>.'
        ) : null);
      }
      ("production" !== process.env.NODE_ENV ? invariant(
        defaultValue == null,
        'If you supply `defaultValue` on a <textarea>, do not pass children.'
      ) : invariant(defaultValue == null));
      if (Array.isArray(children)) {
        ("production" !== process.env.NODE_ENV ? invariant(
          children.length <= 1,
          '<textarea> can only have at most one child.'
        ) : invariant(children.length <= 1));
        children = children[0];
      }

      defaultValue = '' + children;
    }
    if (defaultValue == null) {
      defaultValue = '';
    }
    var value = LinkedValueUtils.getValue(this);
    return {
      // We save the initial value so that `ReactDOMComponent` doesn't update
      // `textContent` (unnecessary since we update value).
      // The initial value can be a boolean or object so that's why it's
      // forced to be a string.
      initialValue: '' + (value != null ? value : defaultValue)
    };
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = assign({}, this.props);

    ("production" !== process.env.NODE_ENV ? invariant(
      props.dangerouslySetInnerHTML == null,
      '`dangerouslySetInnerHTML` does not make sense on <textarea>.'
    ) : invariant(props.dangerouslySetInnerHTML == null));

    props.defaultValue = null;
    props.value = null;
    props.onChange = this._handleChange;

    // Always set children to the same thing. In IE9, the selection range will
    // get reset if `textContent` is mutated.
    return textarea(props, this.state.initialValue);
  },

  componentDidUpdate: function(prevProps, prevState, prevContext) {
    var value = LinkedValueUtils.getValue(this);
    if (value != null) {
      var rootNode = this.getDOMNode();
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      returnValue = onChange.call(this, event);
    }
    ReactUpdates.asap(forceUpdateIfMounted, this);
    return returnValue;
  }

});

module.exports = ReactDOMTextarea;

}).call(this,require('_process'))
},{"./AutoFocusMixin":155,"./DOMPropertyOperations":165,"./LinkedValueUtils":179,"./Object.assign":182,"./ReactBrowserComponentMixin":185,"./ReactClass":191,"./ReactElement":216,"./ReactUpdates":253,"./invariant":304,"./warning":325,"_process":2}],212:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultBatchingStrategy
 */

'use strict';

var ReactUpdates = require("./ReactUpdates");
var Transaction = require("./Transaction");

var assign = require("./Object.assign");
var emptyFunction = require("./emptyFunction");

var RESET_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: function() {
    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
  }
};

var FLUSH_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
};

var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

function ReactDefaultBatchingStrategyTransaction() {
  this.reinitializeTransaction();
}

assign(
  ReactDefaultBatchingStrategyTransaction.prototype,
  Transaction.Mixin,
  {
    getTransactionWrappers: function() {
      return TRANSACTION_WRAPPERS;
    }
  }
);

var transaction = new ReactDefaultBatchingStrategyTransaction();

var ReactDefaultBatchingStrategy = {
  isBatchingUpdates: false,

  /**
   * Call the provided function in a context within which calls to `setState`
   * and friends are batched such that components aren't updated unnecessarily.
   */
  batchedUpdates: function(callback, a, b, c, d) {
    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

    // The code is written this way to avoid extra allocations
    if (alreadyBatchingUpdates) {
      callback(a, b, c, d);
    } else {
      transaction.perform(callback, null, a, b, c, d);
    }
  }
};

module.exports = ReactDefaultBatchingStrategy;

},{"./Object.assign":182,"./ReactUpdates":253,"./Transaction":270,"./emptyFunction":283}],213:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultInjection
 */

'use strict';

var BeforeInputEventPlugin = require("./BeforeInputEventPlugin");
var ChangeEventPlugin = require("./ChangeEventPlugin");
var ClientReactRootIndex = require("./ClientReactRootIndex");
var DefaultEventPluginOrder = require("./DefaultEventPluginOrder");
var EnterLeaveEventPlugin = require("./EnterLeaveEventPlugin");
var ExecutionEnvironment = require("./ExecutionEnvironment");
var HTMLDOMPropertyConfig = require("./HTMLDOMPropertyConfig");
var MobileSafariClickEventPlugin = require("./MobileSafariClickEventPlugin");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactClass = require("./ReactClass");
var ReactComponentBrowserEnvironment =
  require("./ReactComponentBrowserEnvironment");
var ReactDefaultBatchingStrategy = require("./ReactDefaultBatchingStrategy");
var ReactDOMComponent = require("./ReactDOMComponent");
var ReactDOMButton = require("./ReactDOMButton");
var ReactDOMForm = require("./ReactDOMForm");
var ReactDOMImg = require("./ReactDOMImg");
var ReactDOMIDOperations = require("./ReactDOMIDOperations");
var ReactDOMIframe = require("./ReactDOMIframe");
var ReactDOMInput = require("./ReactDOMInput");
var ReactDOMOption = require("./ReactDOMOption");
var ReactDOMSelect = require("./ReactDOMSelect");
var ReactDOMTextarea = require("./ReactDOMTextarea");
var ReactDOMTextComponent = require("./ReactDOMTextComponent");
var ReactElement = require("./ReactElement");
var ReactEventListener = require("./ReactEventListener");
var ReactInjection = require("./ReactInjection");
var ReactInstanceHandles = require("./ReactInstanceHandles");
var ReactMount = require("./ReactMount");
var ReactReconcileTransaction = require("./ReactReconcileTransaction");
var SelectEventPlugin = require("./SelectEventPlugin");
var ServerReactRootIndex = require("./ServerReactRootIndex");
var SimpleEventPlugin = require("./SimpleEventPlugin");
var SVGDOMPropertyConfig = require("./SVGDOMPropertyConfig");

var createFullPageComponent = require("./createFullPageComponent");

function autoGenerateWrapperClass(type) {
  return ReactClass.createClass({
    tagName: type.toUpperCase(),
    render: function() {
      return new ReactElement(
        type,
        null,
        null,
        null,
        null,
        this.props
      );
    }
  });
}

function inject() {
  ReactInjection.EventEmitter.injectReactEventListener(
    ReactEventListener
  );

  /**
   * Inject modules for resolving DOM hierarchy and plugin ordering.
   */
  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
  ReactInjection.EventPluginHub.injectMount(ReactMount);

  /**
   * Some important event plugins included by default (without having to require
   * them).
   */
  ReactInjection.EventPluginHub.injectEventPluginsByName({
    SimpleEventPlugin: SimpleEventPlugin,
    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
    ChangeEventPlugin: ChangeEventPlugin,
    MobileSafariClickEventPlugin: MobileSafariClickEventPlugin,
    SelectEventPlugin: SelectEventPlugin,
    BeforeInputEventPlugin: BeforeInputEventPlugin
  });

  ReactInjection.NativeComponent.injectGenericComponentClass(
    ReactDOMComponent
  );

  ReactInjection.NativeComponent.injectTextComponentClass(
    ReactDOMTextComponent
  );

  ReactInjection.NativeComponent.injectAutoWrapper(
    autoGenerateWrapperClass
  );

  // This needs to happen before createFullPageComponent() otherwise the mixin
  // won't be included.
  ReactInjection.Class.injectMixin(ReactBrowserComponentMixin);

  ReactInjection.NativeComponent.injectComponentClasses({
    'button': ReactDOMButton,
    'form': ReactDOMForm,
    'iframe': ReactDOMIframe,
    'img': ReactDOMImg,
    'input': ReactDOMInput,
    'option': ReactDOMOption,
    'select': ReactDOMSelect,
    'textarea': ReactDOMTextarea,

    'html': createFullPageComponent('html'),
    'head': createFullPageComponent('head'),
    'body': createFullPageComponent('body')
  });

  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');

  ReactInjection.Updates.injectReconcileTransaction(
    ReactReconcileTransaction
  );
  ReactInjection.Updates.injectBatchingStrategy(
    ReactDefaultBatchingStrategy
  );

  ReactInjection.RootIndex.injectCreateReactRootIndex(
    ExecutionEnvironment.canUseDOM ?
      ClientReactRootIndex.createReactRootIndex :
      ServerReactRootIndex.createReactRootIndex
  );

  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
  ReactInjection.DOMComponent.injectIDOperations(ReactDOMIDOperations);

  if ("production" !== process.env.NODE_ENV) {
    var url = (ExecutionEnvironment.canUseDOM && window.location.href) || '';
    if ((/[?&]react_perf\b/).test(url)) {
      var ReactDefaultPerf = require("./ReactDefaultPerf");
      ReactDefaultPerf.start();
    }
  }
}

module.exports = {
  inject: inject
};

}).call(this,require('_process'))
},{"./BeforeInputEventPlugin":156,"./ChangeEventPlugin":161,"./ClientReactRootIndex":162,"./DefaultEventPluginOrder":167,"./EnterLeaveEventPlugin":168,"./ExecutionEnvironment":175,"./HTMLDOMPropertyConfig":177,"./MobileSafariClickEventPlugin":181,"./ReactBrowserComponentMixin":185,"./ReactClass":191,"./ReactComponentBrowserEnvironment":193,"./ReactDOMButton":200,"./ReactDOMComponent":201,"./ReactDOMForm":202,"./ReactDOMIDOperations":203,"./ReactDOMIframe":204,"./ReactDOMImg":205,"./ReactDOMInput":206,"./ReactDOMOption":207,"./ReactDOMSelect":208,"./ReactDOMTextComponent":210,"./ReactDOMTextarea":211,"./ReactDefaultBatchingStrategy":212,"./ReactDefaultPerf":214,"./ReactElement":216,"./ReactEventListener":221,"./ReactInjection":223,"./ReactInstanceHandles":225,"./ReactMount":230,"./ReactReconcileTransaction":241,"./SVGDOMPropertyConfig":255,"./SelectEventPlugin":256,"./ServerReactRootIndex":257,"./SimpleEventPlugin":258,"./createFullPageComponent":279,"_process":2}],214:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultPerf
 * @typechecks static-only
 */

'use strict';

var DOMProperty = require("./DOMProperty");
var ReactDefaultPerfAnalysis = require("./ReactDefaultPerfAnalysis");
var ReactMount = require("./ReactMount");
var ReactPerf = require("./ReactPerf");

var performanceNow = require("./performanceNow");

function roundFloat(val) {
  return Math.floor(val * 100) / 100;
}

function addValue(obj, key, val) {
  obj[key] = (obj[key] || 0) + val;
}

var ReactDefaultPerf = {
  _allMeasurements: [], // last item in the list is the current one
  _mountStack: [0],
  _injected: false,

  start: function() {
    if (!ReactDefaultPerf._injected) {
      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
    }

    ReactDefaultPerf._allMeasurements.length = 0;
    ReactPerf.enableMeasure = true;
  },

  stop: function() {
    ReactPerf.enableMeasure = false;
  },

  getLastMeasurements: function() {
    return ReactDefaultPerf._allMeasurements;
  },

  printExclusive: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
    console.table(summary.map(function(item) {
      return {
        'Component class name': item.componentName,
        'Total inclusive time (ms)': roundFloat(item.inclusive),
        'Exclusive mount time (ms)': roundFloat(item.exclusive),
        'Exclusive render time (ms)': roundFloat(item.render),
        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
        'Render time per instance (ms)': roundFloat(item.render / item.count),
        'Instances': item.count
      };
    }));
    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
    // number.
  },

  printInclusive: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
    console.table(summary.map(function(item) {
      return {
        'Owner > component': item.componentName,
        'Inclusive time (ms)': roundFloat(item.time),
        'Instances': item.count
      };
    }));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  getMeasurementsSummaryMap: function(measurements) {
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(
      measurements,
      true
    );
    return summary.map(function(item) {
      return {
        'Owner > component': item.componentName,
        'Wasted time (ms)': item.time,
        'Instances': item.count
      };
    });
  },

  printWasted: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  printDOM: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
    console.table(summary.map(function(item) {
      var result = {};
      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
      result['type'] = item.type;
      result['args'] = JSON.stringify(item.args);
      return result;
    }));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  _recordWrite: function(id, fnName, totalTime, args) {
    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
    var writes =
      ReactDefaultPerf
        ._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1]
        .writes;
    writes[id] = writes[id] || [];
    writes[id].push({
      type: fnName,
      time: totalTime,
      args: args
    });
  },

  measure: function(moduleName, fnName, func) {
    return function() {for (var args=[],$__0=0,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
      var totalTime;
      var rv;
      var start;

      if (fnName === '_renderNewRootComponent' ||
          fnName === 'flushBatchedUpdates') {
        // A "measurement" is a set of metrics recorded for each flush. We want
        // to group the metrics for a given flush together so we can look at the
        // components that rendered and the DOM operations that actually
        // happened to determine the amount of "wasted work" performed.
        ReactDefaultPerf._allMeasurements.push({
          exclusive: {},
          inclusive: {},
          render: {},
          counts: {},
          writes: {},
          displayNames: {},
          totalTime: 0
        });
        start = performanceNow();
        rv = func.apply(this, args);
        ReactDefaultPerf._allMeasurements[
          ReactDefaultPerf._allMeasurements.length - 1
        ].totalTime = performanceNow() - start;
        return rv;
      } else if (fnName === '_mountImageIntoNode' ||
          moduleName === 'ReactDOMIDOperations') {
        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (fnName === '_mountImageIntoNode') {
          var mountID = ReactMount.getID(args[1]);
          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
          // special format
          args[0].forEach(function(update) {
            var writeArgs = {};
            if (update.fromIndex !== null) {
              writeArgs.fromIndex = update.fromIndex;
            }
            if (update.toIndex !== null) {
              writeArgs.toIndex = update.toIndex;
            }
            if (update.textContent !== null) {
              writeArgs.textContent = update.textContent;
            }
            if (update.markupIndex !== null) {
              writeArgs.markup = args[1][update.markupIndex];
            }
            ReactDefaultPerf._recordWrite(
              update.parentID,
              update.type,
              totalTime,
              writeArgs
            );
          });
        } else {
          // basic format
          ReactDefaultPerf._recordWrite(
            args[0],
            fnName,
            totalTime,
            Array.prototype.slice.call(args, 1)
          );
        }
        return rv;
      } else if (moduleName === 'ReactCompositeComponent' && (
        (// TODO: receiveComponent()?
        (fnName === 'mountComponent' ||
        fnName === 'updateComponent' || fnName === '_renderValidatedComponent')))) {

        if (typeof this._currentElement.type === 'string') {
          return func.apply(this, args);
        }

        var rootNodeID = fnName === 'mountComponent' ?
          args[0] :
          this._rootNodeID;
        var isRender = fnName === '_renderValidatedComponent';
        var isMount = fnName === 'mountComponent';

        var mountStack = ReactDefaultPerf._mountStack;
        var entry = ReactDefaultPerf._allMeasurements[
          ReactDefaultPerf._allMeasurements.length - 1
        ];

        if (isRender) {
          addValue(entry.counts, rootNodeID, 1);
        } else if (isMount) {
          mountStack.push(0);
        }

        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (isRender) {
          addValue(entry.render, rootNodeID, totalTime);
        } else if (isMount) {
          var subMountTime = mountStack.pop();
          mountStack[mountStack.length - 1] += totalTime;
          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
          addValue(entry.inclusive, rootNodeID, totalTime);
        } else {
          addValue(entry.inclusive, rootNodeID, totalTime);
        }

        entry.displayNames[rootNodeID] = {
          current: this.getName(),
          owner: this._currentElement._owner ?
            this._currentElement._owner.getName() :
            '<root>'
        };

        return rv;
      } else {
        return func.apply(this, args);
      }
    };
  }
};

module.exports = ReactDefaultPerf;

},{"./DOMProperty":164,"./ReactDefaultPerfAnalysis":215,"./ReactMount":230,"./ReactPerf":235,"./performanceNow":316}],215:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultPerfAnalysis
 */

var assign = require("./Object.assign");

// Don't try to save users less than 1.2ms (a number I made up)
var DONT_CARE_THRESHOLD = 1.2;
var DOM_OPERATION_TYPES = {
  '_mountImageIntoNode': 'set innerHTML',
  INSERT_MARKUP: 'set innerHTML',
  MOVE_EXISTING: 'move',
  REMOVE_NODE: 'remove',
  TEXT_CONTENT: 'set textContent',
  'updatePropertyByID': 'update attribute',
  'deletePropertyByID': 'delete attribute',
  'updateStylesByID': 'update styles',
  'updateInnerHTMLByID': 'set innerHTML',
  'dangerouslyReplaceNodeWithMarkupByID': 'replace'
};

function getTotalTime(measurements) {
  // TODO: return number of DOM ops? could be misleading.
  // TODO: measure dropped frames after reconcile?
  // TODO: log total time of each reconcile and the top-level component
  // class that triggered it.
  var totalTime = 0;
  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    totalTime += measurement.totalTime;
  }
  return totalTime;
}

function getDOMSummary(measurements) {
  var items = [];
  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var id;

    for (id in measurement.writes) {
      measurement.writes[id].forEach(function(write) {
        items.push({
          id: id,
          type: DOM_OPERATION_TYPES[write.type] || write.type,
          args: write.args
        });
      });
    }
  }
  return items;
}

function getExclusiveSummary(measurements) {
  var candidates = {};
  var displayName;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = assign(
      {},
      measurement.exclusive,
      measurement.inclusive
    );

    for (var id in allIDs) {
      displayName = measurement.displayNames[id].current;

      candidates[displayName] = candidates[displayName] || {
        componentName: displayName,
        inclusive: 0,
        exclusive: 0,
        render: 0,
        count: 0
      };
      if (measurement.render[id]) {
        candidates[displayName].render += measurement.render[id];
      }
      if (measurement.exclusive[id]) {
        candidates[displayName].exclusive += measurement.exclusive[id];
      }
      if (measurement.inclusive[id]) {
        candidates[displayName].inclusive += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[displayName].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (displayName in candidates) {
    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[displayName]);
    }
  }

  arr.sort(function(a, b) {
    return b.exclusive - a.exclusive;
  });

  return arr;
}

function getInclusiveSummary(measurements, onlyClean) {
  var candidates = {};
  var inclusiveKey;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = assign(
      {},
      measurement.exclusive,
      measurement.inclusive
    );
    var cleanComponents;

    if (onlyClean) {
      cleanComponents = getUnchangedComponents(measurement);
    }

    for (var id in allIDs) {
      if (onlyClean && !cleanComponents[id]) {
        continue;
      }

      var displayName = measurement.displayNames[id];

      // Inclusive time is not useful for many components without knowing where
      // they are instantiated. So we aggregate inclusive time with both the
      // owner and current displayName as the key.
      inclusiveKey = displayName.owner + ' > ' + displayName.current;

      candidates[inclusiveKey] = candidates[inclusiveKey] || {
        componentName: inclusiveKey,
        time: 0,
        count: 0
      };

      if (measurement.inclusive[id]) {
        candidates[inclusiveKey].time += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[inclusiveKey].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (inclusiveKey in candidates) {
    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[inclusiveKey]);
    }
  }

  arr.sort(function(a, b) {
    return b.time - a.time;
  });

  return arr;
}

function getUnchangedComponents(measurement) {
  // For a given reconcile, look at which components did not actually
  // render anything to the DOM and return a mapping of their ID to
  // the amount of time it took to render the entire subtree.
  var cleanComponents = {};
  var dirtyLeafIDs = Object.keys(measurement.writes);
  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

  for (var id in allIDs) {
    var isDirty = false;
    // For each component that rendered, see if a component that triggered
    // a DOM op is in its subtree.
    for (var i = 0; i < dirtyLeafIDs.length; i++) {
      if (dirtyLeafIDs[i].indexOf(id) === 0) {
        isDirty = true;
        break;
      }
    }
    if (!isDirty && measurement.counts[id] > 0) {
      cleanComponents[id] = true;
    }
  }
  return cleanComponents;
}

var ReactDefaultPerfAnalysis = {
  getExclusiveSummary: getExclusiveSummary,
  getInclusiveSummary: getInclusiveSummary,
  getDOMSummary: getDOMSummary,
  getTotalTime: getTotalTime
};

module.exports = ReactDefaultPerfAnalysis;

},{"./Object.assign":182}],216:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactElement
 */

'use strict';

var ReactContext = require("./ReactContext");
var ReactCurrentOwner = require("./ReactCurrentOwner");

var assign = require("./Object.assign");
var warning = require("./warning");

var RESERVED_PROPS = {
  key: true,
  ref: true
};

/**
 * Warn for mutations.
 *
 * @internal
 * @param {object} object
 * @param {string} key
 */
function defineWarningProperty(object, key) {
  Object.defineProperty(object, key, {

    configurable: false,
    enumerable: true,

    get: function() {
      if (!this._store) {
        return null;
      }
      return this._store[key];
    },

    set: function(value) {
      ("production" !== process.env.NODE_ENV ? warning(
        false,
        'Don\'t set the %s property of the React element. Instead, ' +
        'specify the correct value when initially creating the element.',
        key
      ) : null);
      this._store[key] = value;
    }

  });
}

/**
 * This is updated to true if the membrane is successfully created.
 */
var useMutationMembrane = false;

/**
 * Warn for mutations.
 *
 * @internal
 * @param {object} element
 */
function defineMutationMembrane(prototype) {
  try {
    var pseudoFrozenProperties = {
      props: true
    };
    for (var key in pseudoFrozenProperties) {
      defineWarningProperty(prototype, key);
    }
    useMutationMembrane = true;
  } catch (x) {
    // IE will fail on defineProperty
  }
}

/**
 * Base constructor for all React elements. This is only used to make this
 * work with a dynamic instanceof check. Nothing should live on this prototype.
 *
 * @param {*} type
 * @param {string|object} ref
 * @param {*} key
 * @param {*} props
 * @internal
 */
var ReactElement = function(type, key, ref, owner, context, props) {
  // Built-in properties that belong on the element
  this.type = type;
  this.key = key;
  this.ref = ref;

  // Record the component responsible for creating this element.
  this._owner = owner;

  // TODO: Deprecate withContext, and then the context becomes accessible
  // through the owner.
  this._context = context;

  if ("production" !== process.env.NODE_ENV) {
    // The validation flag and props are currently mutative. We put them on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    this._store = {props: props, originalProps: assign({}, props)};

    // To make comparing ReactElements easier for testing purposes, we make
    // the validation flag non-enumerable (where possible, which should
    // include every environment we run tests in), so the test framework
    // ignores it.
    try {
      Object.defineProperty(this._store, 'validated', {
        configurable: false,
        enumerable: false,
        writable: true
      });
    } catch (x) {
    }
    this._store.validated = false;

    // We're not allowed to set props directly on the object so we early
    // return and rely on the prototype membrane to forward to the backing
    // store.
    if (useMutationMembrane) {
      Object.freeze(this);
      return;
    }
  }

  this.props = props;
};

// We intentionally don't expose the function on the constructor property.
// ReactElement should be indistinguishable from a plain object.
ReactElement.prototype = {
  _isReactElement: true
};

if ("production" !== process.env.NODE_ENV) {
  defineMutationMembrane(ReactElement.prototype);
}

ReactElement.createElement = function(type, config, children) {
  var propName;

  // Reserved names are extracted
  var props = {};

  var key = null;
  var ref = null;

  if (config != null) {
    ref = config.ref === undefined ? null : config.ref;
    key = config.key === undefined ? null : '' + config.key;
    // Remaining properties are added to a new props object
    for (propName in config) {
      if (config.hasOwnProperty(propName) &&
          !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  // Resolve default props
  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;
    for (propName in defaultProps) {
      if (typeof props[propName] === 'undefined') {
        props[propName] = defaultProps[propName];
      }
    }
  }

  return new ReactElement(
    type,
    key,
    ref,
    ReactCurrentOwner.current,
    ReactContext.current,
    props
  );
};

ReactElement.createFactory = function(type) {
  var factory = ReactElement.createElement.bind(null, type);
  // Expose the type on the factory and the prototype so that it can be
  // easily accessed on elements. E.g. <Foo />.type === Foo.type.
  // This should not be named `constructor` since this may not be the function
  // that created the element, and it may not even be a constructor.
  // Legacy hook TODO: Warn if this is accessed
  factory.type = type;
  return factory;
};

ReactElement.cloneAndReplaceProps = function(oldElement, newProps) {
  var newElement = new ReactElement(
    oldElement.type,
    oldElement.key,
    oldElement.ref,
    oldElement._owner,
    oldElement._context,
    newProps
  );

  if ("production" !== process.env.NODE_ENV) {
    // If the key on the original is valid, then the clone is valid
    newElement._store.validated = oldElement._store.validated;
  }
  return newElement;
};

ReactElement.cloneElement = function(element, config, children) {
  var propName;

  // Original props are copied
  var props = assign({}, element.props);

  // Reserved names are extracted
  var key = element.key;
  var ref = element.ref;

  // Owner will be preserved, unless ref is overridden
  var owner = element._owner;

  if (config != null) {
    if (config.ref !== undefined) {
      // Silently steal the ref from the parent.
      ref = config.ref;
      owner = ReactCurrentOwner.current;
    }
    if (config.key !== undefined) {
      key = '' + config.key;
    }
    // Remaining properties override existing props
    for (propName in config) {
      if (config.hasOwnProperty(propName) &&
          !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  return new ReactElement(
    element.type,
    key,
    ref,
    owner,
    element._context,
    props
  );
};

/**
 * @param {?object} object
 * @return {boolean} True if `object` is a valid component.
 * @final
 */
ReactElement.isValidElement = function(object) {
  // ReactTestUtils is often used outside of beforeEach where as React is
  // within it. This leads to two different instances of React on the same
  // page. To identify a element from a different React instance we use
  // a flag instead of an instanceof check.
  var isElement = !!(object && object._isReactElement);
  // if (isElement && !(object instanceof ReactElement)) {
  // This is an indicator that you're using multiple versions of React at the
  // same time. This will screw with ownership and stuff. Fix it, please.
  // TODO: We could possibly warn here.
  // }
  return isElement;
};

module.exports = ReactElement;

}).call(this,require('_process'))
},{"./Object.assign":182,"./ReactContext":197,"./ReactCurrentOwner":198,"./warning":325,"_process":2}],217:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactElementValidator
 */

/**
 * ReactElementValidator provides a wrapper around a element factory
 * which validates the props passed to the element. This is intended to be
 * used only in DEV and could be replaced by a static type checker for languages
 * that support it.
 */

'use strict';

var ReactElement = require("./ReactElement");
var ReactFragment = require("./ReactFragment");
var ReactPropTypeLocations = require("./ReactPropTypeLocations");
var ReactPropTypeLocationNames = require("./ReactPropTypeLocationNames");
var ReactCurrentOwner = require("./ReactCurrentOwner");
var ReactNativeComponent = require("./ReactNativeComponent");

var getIteratorFn = require("./getIteratorFn");
var invariant = require("./invariant");
var warning = require("./warning");

function getDeclarationErrorAddendum() {
  if (ReactCurrentOwner.current) {
    var name = ReactCurrentOwner.current.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */
var ownerHasKeyUseWarning = {};

var loggedTypeFailures = {};

var NUMERIC_PROPERTY_REGEX = /^\d+$/;

/**
 * Gets the instance's name for use in warnings.
 *
 * @internal
 * @return {?string} Display name or undefined
 */
function getName(instance) {
  var publicInstance = instance && instance.getPublicInstance();
  if (!publicInstance) {
    return undefined;
  }
  var constructor = publicInstance.constructor;
  if (!constructor) {
    return undefined;
  }
  return constructor.displayName || constructor.name || undefined;
}

/**
 * Gets the current owner's displayName for use in warnings.
 *
 * @internal
 * @return {?string} Display name or undefined
 */
function getCurrentOwnerDisplayName() {
  var current = ReactCurrentOwner.current;
  return (
    current && getName(current) || undefined
  );
}

/**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */
function validateExplicitKey(element, parentType) {
  if (element._store.validated || element.key != null) {
    return;
  }
  element._store.validated = true;

  warnAndMonitorForKeyUse(
    'Each child in an array or iterator should have a unique "key" prop.',
    element,
    parentType
  );
}

/**
 * Warn if the key is being defined as an object property but has an incorrect
 * value.
 *
 * @internal
 * @param {string} name Property name of the key.
 * @param {ReactElement} element Component that requires a key.
 * @param {*} parentType element's parent's type.
 */
function validatePropertyKey(name, element, parentType) {
  if (!NUMERIC_PROPERTY_REGEX.test(name)) {
    return;
  }
  warnAndMonitorForKeyUse(
    'Child objects should have non-numeric keys so ordering is preserved.',
    element,
    parentType
  );
}

/**
 * Shared warning and monitoring code for the key warnings.
 *
 * @internal
 * @param {string} message The base warning that gets output.
 * @param {ReactElement} element Component that requires a key.
 * @param {*} parentType element's parent's type.
 */
function warnAndMonitorForKeyUse(message, element, parentType) {
  var ownerName = getCurrentOwnerDisplayName();
  var parentName = typeof parentType === 'string' ?
    parentType : parentType.displayName || parentType.name;

  var useName = ownerName || parentName;
  var memoizer = ownerHasKeyUseWarning[message] || (
    (ownerHasKeyUseWarning[message] = {})
  );
  if (memoizer.hasOwnProperty(useName)) {
    return;
  }
  memoizer[useName] = true;

  var parentOrOwnerAddendum =
    ownerName ? (" Check the render method of " + ownerName + ".") :
    parentName ? (" Check the React.render call using <" + parentName + ">.") :
    '';

  // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.
  var childOwnerAddendum = '';
  if (element &&
      element._owner &&
      element._owner !== ReactCurrentOwner.current) {
    // Name of the component that originally created this child.
    var childOwnerName = getName(element._owner);

    childOwnerAddendum = (" It was passed a child from " + childOwnerName + ".");
  }

  ("production" !== process.env.NODE_ENV ? warning(
    false,
    message + '%s%s See https://fb.me/react-warning-keys for more information.',
    parentOrOwnerAddendum,
    childOwnerAddendum
  ) : null);
}

/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */
function validateChildKeys(node, parentType) {
  if (Array.isArray(node)) {
    for (var i = 0; i < node.length; i++) {
      var child = node[i];
      if (ReactElement.isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (ReactElement.isValidElement(node)) {
    // This element was passed in a valid location.
    node._store.validated = true;
  } else if (node) {
    var iteratorFn = getIteratorFn(node);
    // Entry iterators provide implicit keys.
    if (iteratorFn) {
      if (iteratorFn !== node.entries) {
        var iterator = iteratorFn.call(node);
        var step;
        while (!(step = iterator.next()).done) {
          if (ReactElement.isValidElement(step.value)) {
            validateExplicitKey(step.value, parentType);
          }
        }
      }
    } else if (typeof node === 'object') {
      var fragment = ReactFragment.extractIfFragment(node);
      for (var key in fragment) {
        if (fragment.hasOwnProperty(key)) {
          validatePropertyKey(key, fragment[key], parentType);
        }
      }
    }
  }
}

/**
 * Assert that the props are valid
 *
 * @param {string} componentName Name of the component for error messages.
 * @param {object} propTypes Map of prop name to a ReactPropType
 * @param {object} props
 * @param {string} location e.g. "prop", "context", "child context"
 * @private
 */
function checkPropTypes(componentName, propTypes, props, location) {
  for (var propName in propTypes) {
    if (propTypes.hasOwnProperty(propName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        // This is intentionally an invariant that gets caught. It's the same
        // behavior as without this statement except with a better message.
        ("production" !== process.env.NODE_ENV ? invariant(
          typeof propTypes[propName] === 'function',
          '%s: %s type `%s` is invalid; it must be a function, usually from ' +
          'React.PropTypes.',
          componentName || 'React class',
          ReactPropTypeLocationNames[location],
          propName
        ) : invariant(typeof propTypes[propName] === 'function'));
        error = propTypes[propName](props, propName, componentName, location);
      } catch (ex) {
        error = ex;
      }
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var addendum = getDeclarationErrorAddendum(this);
        ("production" !== process.env.NODE_ENV ? warning(false, 'Failed propType: %s%s', error.message, addendum) : null);
      }
    }
  }
}

var warnedPropsMutations = {};

/**
 * Warn about mutating props when setting `propName` on `element`.
 *
 * @param {string} propName The string key within props that was set
 * @param {ReactElement} element
 */
function warnForPropsMutation(propName, element) {
  var type = element.type;
  var elementName = typeof type === 'string' ? type : type.displayName;
  var ownerName = element._owner ?
    element._owner.getPublicInstance().constructor.displayName : null;

  var warningKey = propName + '|' + elementName + '|' + ownerName;
  if (warnedPropsMutations.hasOwnProperty(warningKey)) {
    return;
  }
  warnedPropsMutations[warningKey] = true;

  var elementInfo = '';
  if (elementName) {
    elementInfo = ' <' + elementName + ' />';
  }
  var ownerInfo = '';
  if (ownerName) {
    ownerInfo = ' The element was created by ' + ownerName + '.';
  }

  ("production" !== process.env.NODE_ENV ? warning(
    false,
    'Don\'t set .props.%s of the React component%s. Instead, specify the ' +
    'correct value when initially creating the element or use ' +
    'React.cloneElement to make a new element with updated props.%s',
    propName,
    elementInfo,
    ownerInfo
  ) : null);
}

// Inline Object.is polyfill
function is(a, b) {
  if (a !== a) {
    // NaN
    return b !== b;
  }
  if (a === 0 && b === 0) {
    // +-0
    return 1 / a === 1 / b;
  }
  return a === b;
}

/**
 * Given an element, check if its props have been mutated since element
 * creation (or the last call to this function). In particular, check if any
 * new props have been added, which we can't directly catch by defining warning
 * properties on the props object.
 *
 * @param {ReactElement} element
 */
function checkAndWarnForMutatedProps(element) {
  if (!element._store) {
    // Element was created using `new ReactElement` directly or with
    // `ReactElement.createElement`; skip mutation checking
    return;
  }

  var originalProps = element._store.originalProps;
  var props = element.props;

  for (var propName in props) {
    if (props.hasOwnProperty(propName)) {
      if (!originalProps.hasOwnProperty(propName) ||
          !is(originalProps[propName], props[propName])) {
        warnForPropsMutation(propName, element);

        // Copy over the new value so that the two props objects match again
        originalProps[propName] = props[propName];
      }
    }
  }
}

/**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */
function validatePropTypes(element) {
  if (element.type == null) {
    // This has already warned. Don't throw.
    return;
  }
  // Extract the component class from the element. Converts string types
  // to a composite class which may have propTypes.
  // TODO: Validating a string's propTypes is not decoupled from the
  // rendering target which is problematic.
  var componentClass = ReactNativeComponent.getComponentClassForElement(
    element
  );
  var name = componentClass.displayName || componentClass.name;
  if (componentClass.propTypes) {
    checkPropTypes(
      name,
      componentClass.propTypes,
      element.props,
      ReactPropTypeLocations.prop
    );
  }
  if (typeof componentClass.getDefaultProps === 'function') {
    ("production" !== process.env.NODE_ENV ? warning(
      componentClass.getDefaultProps.isReactClassApproved,
      'getDefaultProps is only used on classic React.createClass ' +
      'definitions. Use a static property named `defaultProps` instead.'
    ) : null);
  }
}

var ReactElementValidator = {

  checkAndWarnForMutatedProps: checkAndWarnForMutatedProps,

  createElement: function(type, props, children) {
    // We warn in this case but don't throw. We expect the element creation to
    // succeed and there will likely be errors in render.
    ("production" !== process.env.NODE_ENV ? warning(
      type != null,
      'React.createElement: type should not be null or undefined. It should ' +
        'be a string (for DOM elements) or a ReactClass (for composite ' +
        'components).'
    ) : null);

    var element = ReactElement.createElement.apply(this, arguments);

    // The result can be nullish if a mock or a custom function is used.
    // TODO: Drop this when these are no longer allowed as the type argument.
    if (element == null) {
      return element;
    }

    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], type);
    }

    validatePropTypes(element);

    return element;
  },

  createFactory: function(type) {
    var validatedFactory = ReactElementValidator.createElement.bind(
      null,
      type
    );
    // Legacy hook TODO: Warn if this is accessed
    validatedFactory.type = type;

    if ("production" !== process.env.NODE_ENV) {
      try {
        Object.defineProperty(
          validatedFactory,
          'type',
          {
            enumerable: false,
            get: function() {
              ("production" !== process.env.NODE_ENV ? warning(
                false,
                'Factory.type is deprecated. Access the class directly ' +
                'before passing it to createFactory.'
              ) : null);
              Object.defineProperty(this, 'type', {
                value: type
              });
              return type;
            }
          }
        );
      } catch (x) {
        // IE will fail on defineProperty (es5-shim/sham too)
      }
    }


    return validatedFactory;
  },

  cloneElement: function(element, props, children) {
    var newElement = ReactElement.cloneElement.apply(this, arguments);
    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], newElement.type);
    }
    validatePropTypes(newElement);
    return newElement;
  }

};

module.exports = ReactElementValidator;

}).call(this,require('_process'))
},{"./ReactCurrentOwner":198,"./ReactElement":216,"./ReactFragment":222,"./ReactNativeComponent":233,"./ReactPropTypeLocationNames":237,"./ReactPropTypeLocations":238,"./getIteratorFn":295,"./invariant":304,"./warning":325,"_process":2}],218:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEmptyComponent
 */

'use strict';

var ReactElement = require("./ReactElement");
var ReactInstanceMap = require("./ReactInstanceMap");

var invariant = require("./invariant");

var component;
// This registry keeps track of the React IDs of the components that rendered to
// `null` (in reality a placeholder such as `noscript`)
var nullComponentIDsRegistry = {};

var ReactEmptyComponentInjection = {
  injectEmptyComponent: function(emptyComponent) {
    component = ReactElement.createFactory(emptyComponent);
  }
};

var ReactEmptyComponentType = function() {};
ReactEmptyComponentType.prototype.componentDidMount = function() {
  var internalInstance = ReactInstanceMap.get(this);
  // TODO: Make sure we run these methods in the correct order, we shouldn't
  // need this check. We're going to assume if we're here it means we ran
  // componentWillUnmount already so there is no internal instance (it gets
  // removed as part of the unmounting process).
  if (!internalInstance) {
    return;
  }
  registerNullComponentID(internalInstance._rootNodeID);
};
ReactEmptyComponentType.prototype.componentWillUnmount = function() {
  var internalInstance = ReactInstanceMap.get(this);
  // TODO: Get rid of this check. See TODO in componentDidMount.
  if (!internalInstance) {
    return;
  }
  deregisterNullComponentID(internalInstance._rootNodeID);
};
ReactEmptyComponentType.prototype.render = function() {
  ("production" !== process.env.NODE_ENV ? invariant(
    component,
    'Trying to return null from a render, but no null placeholder component ' +
    'was injected.'
  ) : invariant(component));
  return component();
};

var emptyElement = ReactElement.createElement(ReactEmptyComponentType);

/**
 * Mark the component as having rendered to null.
 * @param {string} id Component's `_rootNodeID`.
 */
function registerNullComponentID(id) {
  nullComponentIDsRegistry[id] = true;
}

/**
 * Unmark the component as having rendered to null: it renders to something now.
 * @param {string} id Component's `_rootNodeID`.
 */
function deregisterNullComponentID(id) {
  delete nullComponentIDsRegistry[id];
}

/**
 * @param {string} id Component's `_rootNodeID`.
 * @return {boolean} True if the component is rendered to null.
 */
function isNullComponentID(id) {
  return !!nullComponentIDsRegistry[id];
}

var ReactEmptyComponent = {
  emptyElement: emptyElement,
  injection: ReactEmptyComponentInjection,
  isNullComponentID: isNullComponentID
};

module.exports = ReactEmptyComponent;

}).call(this,require('_process'))
},{"./ReactElement":216,"./ReactInstanceMap":226,"./invariant":304,"_process":2}],219:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactErrorUtils
 * @typechecks
 */

"use strict";

var ReactErrorUtils = {
  /**
   * Creates a guarded version of a function. This is supposed to make debugging
   * of event handlers easier. To aid debugging with the browser's debugger,
   * this currently simply returns the original function.
   *
   * @param {function} func Function to be executed
   * @param {string} name The name of the guard
   * @return {function}
   */
  guard: function(func, name) {
    return func;
  }
};

module.exports = ReactErrorUtils;

},{}],220:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEventEmitterMixin
 */

'use strict';

var EventPluginHub = require("./EventPluginHub");

function runEventQueueInBatch(events) {
  EventPluginHub.enqueueEvents(events);
  EventPluginHub.processEventQueue();
}

var ReactEventEmitterMixin = {

  /**
   * Streams a fired top-level event to `EventPluginHub` where plugins have the
   * opportunity to create `ReactEvent`s to be dispatched.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {object} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native environment event.
   */
  handleTopLevel: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var events = EventPluginHub.extractEvents(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent
    );

    runEventQueueInBatch(events);
  }
};

module.exports = ReactEventEmitterMixin;

},{"./EventPluginHub":171}],221:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEventListener
 * @typechecks static-only
 */

'use strict';

var EventListener = require("./EventListener");
var ExecutionEnvironment = require("./ExecutionEnvironment");
var PooledClass = require("./PooledClass");
var ReactInstanceHandles = require("./ReactInstanceHandles");
var ReactMount = require("./ReactMount");
var ReactUpdates = require("./ReactUpdates");

var assign = require("./Object.assign");
var getEventTarget = require("./getEventTarget");
var getUnboundedScrollPosition = require("./getUnboundedScrollPosition");

/**
 * Finds the parent React component of `node`.
 *
 * @param {*} node
 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
 *                           is not nested.
 */
function findParent(node) {
  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
  // traversal, but caching is difficult to do correctly without using a
  // mutation observer to listen for all DOM changes.
  var nodeID = ReactMount.getID(node);
  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
  var container = ReactMount.findReactContainerForID(rootID);
  var parent = ReactMount.getFirstReactDOM(container);
  return parent;
}

// Used to store ancestor hierarchy in top level callback
function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
  this.topLevelType = topLevelType;
  this.nativeEvent = nativeEvent;
  this.ancestors = [];
}
assign(TopLevelCallbackBookKeeping.prototype, {
  destructor: function() {
    this.topLevelType = null;
    this.nativeEvent = null;
    this.ancestors.length = 0;
  }
});
PooledClass.addPoolingTo(
  TopLevelCallbackBookKeeping,
  PooledClass.twoArgumentPooler
);

function handleTopLevelImpl(bookKeeping) {
  var topLevelTarget = ReactMount.getFirstReactDOM(
    getEventTarget(bookKeeping.nativeEvent)
  ) || window;

  // Loop through the hierarchy, in case there's any nested components.
  // It's important that we build the array of ancestors before calling any
  // event handlers, because event handlers can modify the DOM, leading to
  // inconsistencies with ReactMount's node cache. See #1105.
  var ancestor = topLevelTarget;
  while (ancestor) {
    bookKeeping.ancestors.push(ancestor);
    ancestor = findParent(ancestor);
  }

  for (var i = 0, l = bookKeeping.ancestors.length; i < l; i++) {
    topLevelTarget = bookKeeping.ancestors[i];
    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
    ReactEventListener._handleTopLevel(
      bookKeeping.topLevelType,
      topLevelTarget,
      topLevelTargetID,
      bookKeeping.nativeEvent
    );
  }
}

function scrollValueMonitor(cb) {
  var scrollPosition = getUnboundedScrollPosition(window);
  cb(scrollPosition);
}

var ReactEventListener = {
  _enabled: true,
  _handleTopLevel: null,

  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

  setHandleTopLevel: function(handleTopLevel) {
    ReactEventListener._handleTopLevel = handleTopLevel;
  },

  setEnabled: function(enabled) {
    ReactEventListener._enabled = !!enabled;
  },

  isEnabled: function() {
    return ReactEventListener._enabled;
  },


  /**
   * Traps top-level events by using event bubbling.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
    var element = handle;
    if (!element) {
      return null;
    }
    return EventListener.listen(
      element,
      handlerBaseName,
      ReactEventListener.dispatchEvent.bind(null, topLevelType)
    );
  },

  /**
   * Traps a top-level event by using event capturing.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
    var element = handle;
    if (!element) {
      return null;
    }
    return EventListener.capture(
      element,
      handlerBaseName,
      ReactEventListener.dispatchEvent.bind(null, topLevelType)
    );
  },

  monitorScrollValue: function(refresh) {
    var callback = scrollValueMonitor.bind(null, refresh);
    EventListener.listen(window, 'scroll', callback);
  },

  dispatchEvent: function(topLevelType, nativeEvent) {
    if (!ReactEventListener._enabled) {
      return;
    }

    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(
      topLevelType,
      nativeEvent
    );
    try {
      // Event queue being processed in the same cycle allows
      // `preventDefault`.
      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
    } finally {
      TopLevelCallbackBookKeeping.release(bookKeeping);
    }
  }
};

module.exports = ReactEventListener;

},{"./EventListener":170,"./ExecutionEnvironment":175,"./Object.assign":182,"./PooledClass":183,"./ReactInstanceHandles":225,"./ReactMount":230,"./ReactUpdates":253,"./getEventTarget":294,"./getUnboundedScrollPosition":300}],222:[function(require,module,exports){
(function (process){
/**
 * Copyright 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
* @providesModule ReactFragment
*/

'use strict';

var ReactElement = require("./ReactElement");

var warning = require("./warning");

/**
 * We used to allow keyed objects to serve as a collection of ReactElements,
 * or nested sets. This allowed us a way to explicitly key a set a fragment of
 * components. This is now being replaced with an opaque data structure.
 * The upgrade path is to call React.addons.createFragment({ key: value }) to
 * create a keyed fragment. The resulting data structure is opaque, for now.
 */

if ("production" !== process.env.NODE_ENV) {
  var fragmentKey = '_reactFragment';
  var didWarnKey = '_reactDidWarn';
  var canWarnForReactFragment = false;

  try {
    // Feature test. Don't even try to issue this warning if we can't use
    // enumerable: false.

    var dummy = function() {
      return 1;
    };

    Object.defineProperty(
      {},
      fragmentKey,
      {enumerable: false, value: true}
    );

    Object.defineProperty(
      {},
      'key',
      {enumerable: true, get: dummy}
    );

    canWarnForReactFragment = true;
  } catch (x) { }

  var proxyPropertyAccessWithWarning = function(obj, key) {
    Object.defineProperty(obj, key, {
      enumerable: true,
      get: function() {
        ("production" !== process.env.NODE_ENV ? warning(
          this[didWarnKey],
          'A ReactFragment is an opaque type. Accessing any of its ' +
          'properties is deprecated. Pass it to one of the React.Children ' +
          'helpers.'
        ) : null);
        this[didWarnKey] = true;
        return this[fragmentKey][key];
      },
      set: function(value) {
        ("production" !== process.env.NODE_ENV ? warning(
          this[didWarnKey],
          'A ReactFragment is an immutable opaque type. Mutating its ' +
          'properties is deprecated.'
        ) : null);
        this[didWarnKey] = true;
        this[fragmentKey][key] = value;
      }
    });
  };

  var issuedWarnings = {};

  var didWarnForFragment = function(fragment) {
    // We use the keys and the type of the value as a heuristic to dedupe the
    // warning to avoid spamming too much.
    var fragmentCacheKey = '';
    for (var key in fragment) {
      fragmentCacheKey += key + ':' + (typeof fragment[key]) + ',';
    }
    var alreadyWarnedOnce = !!issuedWarnings[fragmentCacheKey];
    issuedWarnings[fragmentCacheKey] = true;
    return alreadyWarnedOnce;
  };
}

var ReactFragment = {
  // Wrap a keyed object in an opaque proxy that warns you if you access any
  // of its properties.
  create: function(object) {
    if ("production" !== process.env.NODE_ENV) {
      if (typeof object !== 'object' || !object || Array.isArray(object)) {
        ("production" !== process.env.NODE_ENV ? warning(
          false,
          'React.addons.createFragment only accepts a single object.',
          object
        ) : null);
        return object;
      }
      if (ReactElement.isValidElement(object)) {
        ("production" !== process.env.NODE_ENV ? warning(
          false,
          'React.addons.createFragment does not accept a ReactElement ' +
          'without a wrapper object.'
        ) : null);
        return object;
      }
      if (canWarnForReactFragment) {
        var proxy = {};
        Object.defineProperty(proxy, fragmentKey, {
          enumerable: false,
          value: object
        });
        Object.defineProperty(proxy, didWarnKey, {
          writable: true,
          enumerable: false,
          value: false
        });
        for (var key in object) {
          proxyPropertyAccessWithWarning(proxy, key);
        }
        Object.preventExtensions(proxy);
        return proxy;
      }
    }
    return object;
  },
  // Extract the original keyed object from the fragment opaque type. Warn if
  // a plain object is passed here.
  extract: function(fragment) {
    if ("production" !== process.env.NODE_ENV) {
      if (canWarnForReactFragment) {
        if (!fragment[fragmentKey]) {
          ("production" !== process.env.NODE_ENV ? warning(
            didWarnForFragment(fragment),
            'Any use of a keyed object should be wrapped in ' +
            'React.addons.createFragment(object) before being passed as a ' +
            'child.'
          ) : null);
          return fragment;
        }
        return fragment[fragmentKey];
      }
    }
    return fragment;
  },
  // Check if this is a fragment and if so, extract the keyed object. If it
  // is a fragment-like object, warn that it should be wrapped. Ignore if we
  // can't determine what kind of object this is.
  extractIfFragment: function(fragment) {
    if ("production" !== process.env.NODE_ENV) {
      if (canWarnForReactFragment) {
        // If it is the opaque type, return the keyed object.
        if (fragment[fragmentKey]) {
          return fragment[fragmentKey];
        }
        // Otherwise, check each property if it has an element, if it does
        // it is probably meant as a fragment, so we can warn early. Defer,
        // the warning to extract.
        for (var key in fragment) {
          if (fragment.hasOwnProperty(key) &&
              ReactElement.isValidElement(fragment[key])) {
            // This looks like a fragment object, we should provide an
            // early warning.
            return ReactFragment.extract(fragment);
          }
        }
      }
    }
    return fragment;
  }
};

module.exports = ReactFragment;

}).call(this,require('_process'))
},{"./ReactElement":216,"./warning":325,"_process":2}],223:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInjection
 */

'use strict';

var DOMProperty = require("./DOMProperty");
var EventPluginHub = require("./EventPluginHub");
var ReactComponentEnvironment = require("./ReactComponentEnvironment");
var ReactClass = require("./ReactClass");
var ReactEmptyComponent = require("./ReactEmptyComponent");
var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");
var ReactNativeComponent = require("./ReactNativeComponent");
var ReactDOMComponent = require("./ReactDOMComponent");
var ReactPerf = require("./ReactPerf");
var ReactRootIndex = require("./ReactRootIndex");
var ReactUpdates = require("./ReactUpdates");

var ReactInjection = {
  Component: ReactComponentEnvironment.injection,
  Class: ReactClass.injection,
  DOMComponent: ReactDOMComponent.injection,
  DOMProperty: DOMProperty.injection,
  EmptyComponent: ReactEmptyComponent.injection,
  EventPluginHub: EventPluginHub.injection,
  EventEmitter: ReactBrowserEventEmitter.injection,
  NativeComponent: ReactNativeComponent.injection,
  Perf: ReactPerf.injection,
  RootIndex: ReactRootIndex.injection,
  Updates: ReactUpdates.injection
};

module.exports = ReactInjection;

},{"./DOMProperty":164,"./EventPluginHub":171,"./ReactBrowserEventEmitter":186,"./ReactClass":191,"./ReactComponentEnvironment":194,"./ReactDOMComponent":201,"./ReactEmptyComponent":218,"./ReactNativeComponent":233,"./ReactPerf":235,"./ReactRootIndex":244,"./ReactUpdates":253}],224:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInputSelection
 */

'use strict';

var ReactDOMSelection = require("./ReactDOMSelection");

var containsNode = require("./containsNode");
var focusNode = require("./focusNode");
var getActiveElement = require("./getActiveElement");

function isInDocument(node) {
  return containsNode(document.documentElement, node);
}

/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */
var ReactInputSelection = {

  hasSelectionCapabilities: function(elem) {
    return elem && (
      ((elem.nodeName === 'INPUT' && elem.type === 'text') ||
      elem.nodeName === 'TEXTAREA' || elem.contentEditable === 'true')
    );
  },

  getSelectionInformation: function() {
    var focusedElem = getActiveElement();
    return {
      focusedElem: focusedElem,
      selectionRange:
          ReactInputSelection.hasSelectionCapabilities(focusedElem) ?
          ReactInputSelection.getSelection(focusedElem) :
          null
    };
  },

  /**
   * @restoreSelection: If any selection information was potentially lost,
   * restore it. This is useful when performing operations that could remove dom
   * nodes and place them back in, resulting in focus being lost.
   */
  restoreSelection: function(priorSelectionInformation) {
    var curFocusedElem = getActiveElement();
    var priorFocusedElem = priorSelectionInformation.focusedElem;
    var priorSelectionRange = priorSelectionInformation.selectionRange;
    if (curFocusedElem !== priorFocusedElem &&
        isInDocument(priorFocusedElem)) {
      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
        ReactInputSelection.setSelection(
          priorFocusedElem,
          priorSelectionRange
        );
      }
      focusNode(priorFocusedElem);
    }
  },

  /**
   * @getSelection: Gets the selection bounds of a focused textarea, input or
   * contentEditable node.
   * -@input: Look up selection bounds of this input
   * -@return {start: selectionStart, end: selectionEnd}
   */
  getSelection: function(input) {
    var selection;

    if ('selectionStart' in input) {
      // Modern browser with input or textarea.
      selection = {
        start: input.selectionStart,
        end: input.selectionEnd
      };
    } else if (document.selection && input.nodeName === 'INPUT') {
      // IE8 input.
      var range = document.selection.createRange();
      // There can only be one selection per document in IE, so it must
      // be in our element.
      if (range.parentElement() === input) {
        selection = {
          start: -range.moveStart('character', -input.value.length),
          end: -range.moveEnd('character', -input.value.length)
        };
      }
    } else {
      // Content editable or old IE textarea.
      selection = ReactDOMSelection.getOffsets(input);
    }

    return selection || {start: 0, end: 0};
  },

  /**
   * @setSelection: Sets the selection bounds of a textarea or input and focuses
   * the input.
   * -@input     Set selection bounds of this input or textarea
   * -@offsets   Object of same form that is returned from get*
   */
  setSelection: function(input, offsets) {
    var start = offsets.start;
    var end = offsets.end;
    if (typeof end === 'undefined') {
      end = start;
    }

    if ('selectionStart' in input) {
      input.selectionStart = start;
      input.selectionEnd = Math.min(end, input.value.length);
    } else if (document.selection && input.nodeName === 'INPUT') {
      var range = input.createTextRange();
      range.collapse(true);
      range.moveStart('character', start);
      range.moveEnd('character', end - start);
      range.select();
    } else {
      ReactDOMSelection.setOffsets(input, offsets);
    }
  }
};

module.exports = ReactInputSelection;

},{"./ReactDOMSelection":209,"./containsNode":277,"./focusNode":288,"./getActiveElement":290}],225:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInstanceHandles
 * @typechecks static-only
 */

'use strict';

var ReactRootIndex = require("./ReactRootIndex");

var invariant = require("./invariant");

var SEPARATOR = '.';
var SEPARATOR_LENGTH = SEPARATOR.length;

/**
 * Maximum depth of traversals before we consider the possibility of a bad ID.
 */
var MAX_TREE_DEPTH = 100;

/**
 * Creates a DOM ID prefix to use when mounting React components.
 *
 * @param {number} index A unique integer
 * @return {string} React root ID.
 * @internal
 */
function getReactRootIDString(index) {
  return SEPARATOR + index.toString(36);
}

/**
 * Checks if a character in the supplied ID is a separator or the end.
 *
 * @param {string} id A React DOM ID.
 * @param {number} index Index of the character to check.
 * @return {boolean} True if the character is a separator or end of the ID.
 * @private
 */
function isBoundary(id, index) {
  return id.charAt(index) === SEPARATOR || index === id.length;
}

/**
 * Checks if the supplied string is a valid React DOM ID.
 *
 * @param {string} id A React DOM ID, maybe.
 * @return {boolean} True if the string is a valid React DOM ID.
 * @private
 */
function isValidID(id) {
  return id === '' || (
    id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR
  );
}

/**
 * Checks if the first ID is an ancestor of or equal to the second ID.
 *
 * @param {string} ancestorID
 * @param {string} descendantID
 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
 * @internal
 */
function isAncestorIDOf(ancestorID, descendantID) {
  return (
    descendantID.indexOf(ancestorID) === 0 &&
    isBoundary(descendantID, ancestorID.length)
  );
}

/**
 * Gets the parent ID of the supplied React DOM ID, `id`.
 *
 * @param {string} id ID of a component.
 * @return {string} ID of the parent, or an empty string.
 * @private
 */
function getParentID(id) {
  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
}

/**
 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
 * supplied `destinationID`. If they are equal, the ID is returned.
 *
 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
 * @param {string} destinationID ID of the destination node.
 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
 * @private
 */
function getNextDescendantID(ancestorID, destinationID) {
  ("production" !== process.env.NODE_ENV ? invariant(
    isValidID(ancestorID) && isValidID(destinationID),
    'getNextDescendantID(%s, %s): Received an invalid React DOM ID.',
    ancestorID,
    destinationID
  ) : invariant(isValidID(ancestorID) && isValidID(destinationID)));
  ("production" !== process.env.NODE_ENV ? invariant(
    isAncestorIDOf(ancestorID, destinationID),
    'getNextDescendantID(...): React has made an invalid assumption about ' +
    'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.',
    ancestorID,
    destinationID
  ) : invariant(isAncestorIDOf(ancestorID, destinationID)));
  if (ancestorID === destinationID) {
    return ancestorID;
  }
  // Skip over the ancestor and the immediate separator. Traverse until we hit
  // another separator or we reach the end of `destinationID`.
  var start = ancestorID.length + SEPARATOR_LENGTH;
  var i;
  for (i = start; i < destinationID.length; i++) {
    if (isBoundary(destinationID, i)) {
      break;
    }
  }
  return destinationID.substr(0, i);
}

/**
 * Gets the nearest common ancestor ID of two IDs.
 *
 * Using this ID scheme, the nearest common ancestor ID is the longest common
 * prefix of the two IDs that immediately preceded a "marker" in both strings.
 *
 * @param {string} oneID
 * @param {string} twoID
 * @return {string} Nearest common ancestor ID, or the empty string if none.
 * @private
 */
function getFirstCommonAncestorID(oneID, twoID) {
  var minLength = Math.min(oneID.length, twoID.length);
  if (minLength === 0) {
    return '';
  }
  var lastCommonMarkerIndex = 0;
  // Use `<=` to traverse until the "EOL" of the shorter string.
  for (var i = 0; i <= minLength; i++) {
    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
      lastCommonMarkerIndex = i;
    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
      break;
    }
  }
  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
  ("production" !== process.env.NODE_ENV ? invariant(
    isValidID(longestCommonID),
    'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s',
    oneID,
    twoID,
    longestCommonID
  ) : invariant(isValidID(longestCommonID)));
  return longestCommonID;
}

/**
 * Traverses the parent path between two IDs (either up or down). The IDs must
 * not be the same, and there must exist a parent path between them. If the
 * callback returns `false`, traversal is stopped.
 *
 * @param {?string} start ID at which to start traversal.
 * @param {?string} stop ID at which to end traversal.
 * @param {function} cb Callback to invoke each ID with.
 * @param {?boolean} skipFirst Whether or not to skip the first node.
 * @param {?boolean} skipLast Whether or not to skip the last node.
 * @private
 */
function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
  start = start || '';
  stop = stop || '';
  ("production" !== process.env.NODE_ENV ? invariant(
    start !== stop,
    'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.',
    start
  ) : invariant(start !== stop));
  var traverseUp = isAncestorIDOf(stop, start);
  ("production" !== process.env.NODE_ENV ? invariant(
    traverseUp || isAncestorIDOf(start, stop),
    'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' +
    'not have a parent path.',
    start,
    stop
  ) : invariant(traverseUp || isAncestorIDOf(start, stop)));
  // Traverse from `start` to `stop` one depth at a time.
  var depth = 0;
  var traverse = traverseUp ? getParentID : getNextDescendantID;
  for (var id = start; /* until break */; id = traverse(id, stop)) {
    var ret;
    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
      ret = cb(id, traverseUp, arg);
    }
    if (ret === false || id === stop) {
      // Only break //after// visiting `stop`.
      break;
    }
    ("production" !== process.env.NODE_ENV ? invariant(
      depth++ < MAX_TREE_DEPTH,
      'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' +
      'traversing the React DOM ID tree. This may be due to malformed IDs: %s',
      start, stop
    ) : invariant(depth++ < MAX_TREE_DEPTH));
  }
}

/**
 * Manages the IDs assigned to DOM representations of React components. This
 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
 * order to simulate events).
 *
 * @internal
 */
var ReactInstanceHandles = {

  /**
   * Constructs a React root ID
   * @return {string} A React root ID.
   */
  createReactRootID: function() {
    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
  },

  /**
   * Constructs a React ID by joining a root ID with a name.
   *
   * @param {string} rootID Root ID of a parent component.
   * @param {string} name A component's name (as flattened children).
   * @return {string} A React ID.
   * @internal
   */
  createReactID: function(rootID, name) {
    return rootID + name;
  },

  /**
   * Gets the DOM ID of the React component that is the root of the tree that
   * contains the React component with the supplied DOM ID.
   *
   * @param {string} id DOM ID of a React component.
   * @return {?string} DOM ID of the React component that is the root.
   * @internal
   */
  getReactRootIDFromNodeID: function(id) {
    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
      var index = id.indexOf(SEPARATOR, 1);
      return index > -1 ? id.substr(0, index) : id;
    }
    return null;
  },

  /**
   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
   * should would receive a `mouseEnter` or `mouseLeave` event.
   *
   * NOTE: Does not invoke the callback on the nearest common ancestor because
   * nothing "entered" or "left" that element.
   *
   * @param {string} leaveID ID being left.
   * @param {string} enterID ID being entered.
   * @param {function} cb Callback to invoke on each entered/left ID.
   * @param {*} upArg Argument to invoke the callback with on left IDs.
   * @param {*} downArg Argument to invoke the callback with on entered IDs.
   * @internal
   */
  traverseEnterLeave: function(leaveID, enterID, cb, upArg, downArg) {
    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
    if (ancestorID !== leaveID) {
      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
    }
    if (ancestorID !== enterID) {
      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
    }
  },

  /**
   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseTwoPhase: function(targetID, cb, arg) {
    if (targetID) {
      traverseParentPath('', targetID, cb, arg, true, false);
      traverseParentPath(targetID, '', cb, arg, false, true);
    }
  },

  /**
   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
   * example, passing `.0.$row-0.1` would result in `cb` getting called
   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseAncestors: function(targetID, cb, arg) {
    traverseParentPath('', targetID, cb, arg, true, false);
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _getFirstCommonAncestorID: getFirstCommonAncestorID,

  /**
   * Exposed for unit testing.
   * @private
   */
  _getNextDescendantID: getNextDescendantID,

  isAncestorIDOf: isAncestorIDOf,

  SEPARATOR: SEPARATOR

};

module.exports = ReactInstanceHandles;

}).call(this,require('_process'))
},{"./ReactRootIndex":244,"./invariant":304,"_process":2}],226:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInstanceMap
 */

'use strict';

/**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 */

// TODO: Replace this with ES6: var ReactInstanceMap = new Map();
var ReactInstanceMap = {

  /**
   * This API should be called `delete` but we'd have to make sure to always
   * transform these to strings for IE support. When this transform is fully
   * supported we can rename it.
   */
  remove: function(key) {
    key._reactInternalInstance = undefined;
  },

  get: function(key) {
    return key._reactInternalInstance;
  },

  has: function(key) {
    return key._reactInternalInstance !== undefined;
  },

  set: function(key, value) {
    key._reactInternalInstance = value;
  }

};

module.exports = ReactInstanceMap;

},{}],227:[function(require,module,exports){
/**
 * Copyright 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactLifeCycle
 */

'use strict';

/**
 * This module manages the bookkeeping when a component is in the process
 * of being mounted or being unmounted. This is used as a way to enforce
 * invariants (or warnings) when it is not recommended to call
 * setState/forceUpdate.
 *
 * currentlyMountingInstance: During the construction phase, it is not possible
 * to trigger an update since the instance is not fully mounted yet. However, we
 * currently allow this as a convenience for mutating the initial state.
 *
 * currentlyUnmountingInstance: During the unmounting phase, the instance is
 * still mounted and can therefore schedule an update. However, this is not
 * recommended and probably an error since it's about to be unmounted.
 * Therefore we still want to trigger in an error for that case.
 */

var ReactLifeCycle = {
  currentlyMountingInstance: null,
  currentlyUnmountingInstance: null
};

module.exports = ReactLifeCycle;

},{}],228:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactLink
 * @typechecks static-only
 */

'use strict';

/**
 * ReactLink encapsulates a common pattern in which a component wants to modify
 * a prop received from its parent. ReactLink allows the parent to pass down a
 * value coupled with a callback that, when invoked, expresses an intent to
 * modify that value. For example:
 *
 * React.createClass({
 *   getInitialState: function() {
 *     return {value: ''};
 *   },
 *   render: function() {
 *     var valueLink = new ReactLink(this.state.value, this._handleValueChange);
 *     return <input valueLink={valueLink} />;
 *   },
 *   this._handleValueChange: function(newValue) {
 *     this.setState({value: newValue});
 *   }
 * });
 *
 * We have provided some sugary mixins to make the creation and
 * consumption of ReactLink easier; see LinkedValueUtils and LinkedStateMixin.
 */

var React = require("./React");

/**
 * @param {*} value current value of the link
 * @param {function} requestChange callback to request a change
 */
function ReactLink(value, requestChange) {
  this.value = value;
  this.requestChange = requestChange;
}

/**
 * Creates a PropType that enforces the ReactLink API and optionally checks the
 * type of the value being passed inside the link. Example:
 *
 * MyComponent.propTypes = {
 *   tabIndexLink: ReactLink.PropTypes.link(React.PropTypes.number)
 * }
 */
function createLinkTypeChecker(linkType) {
  var shapes = {
    value: typeof linkType === 'undefined' ?
      React.PropTypes.any.isRequired :
      linkType.isRequired,
    requestChange: React.PropTypes.func.isRequired
  };
  return React.PropTypes.shape(shapes);
}

ReactLink.PropTypes = {
  link: createLinkTypeChecker
};

module.exports = ReactLink;

},{"./React":184}],229:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMarkupChecksum
 */

'use strict';

var adler32 = require("./adler32");

var ReactMarkupChecksum = {
  CHECKSUM_ATTR_NAME: 'data-react-checksum',

  /**
   * @param {string} markup Markup string
   * @return {string} Markup string with checksum attribute attached
   */
  addChecksumToMarkup: function(markup) {
    var checksum = adler32(markup);
    return markup.replace(
      '>',
      ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '">'
    );
  },

  /**
   * @param {string} markup to use
   * @param {DOMElement} element root React element
   * @returns {boolean} whether or not the markup is the same
   */
  canReuseMarkup: function(markup, element) {
    var existingChecksum = element.getAttribute(
      ReactMarkupChecksum.CHECKSUM_ATTR_NAME
    );
    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
    var markupChecksum = adler32(markup);
    return markupChecksum === existingChecksum;
  }
};

module.exports = ReactMarkupChecksum;

},{"./adler32":273}],230:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMount
 */

'use strict';

var DOMProperty = require("./DOMProperty");
var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");
var ReactCurrentOwner = require("./ReactCurrentOwner");
var ReactElement = require("./ReactElement");
var ReactElementValidator = require("./ReactElementValidator");
var ReactEmptyComponent = require("./ReactEmptyComponent");
var ReactInstanceHandles = require("./ReactInstanceHandles");
var ReactInstanceMap = require("./ReactInstanceMap");
var ReactMarkupChecksum = require("./ReactMarkupChecksum");
var ReactPerf = require("./ReactPerf");
var ReactReconciler = require("./ReactReconciler");
var ReactUpdateQueue = require("./ReactUpdateQueue");
var ReactUpdates = require("./ReactUpdates");

var emptyObject = require("./emptyObject");
var containsNode = require("./containsNode");
var getReactRootElementInContainer = require("./getReactRootElementInContainer");
var instantiateReactComponent = require("./instantiateReactComponent");
var invariant = require("./invariant");
var setInnerHTML = require("./setInnerHTML");
var shouldUpdateReactComponent = require("./shouldUpdateReactComponent");
var warning = require("./warning");

var SEPARATOR = ReactInstanceHandles.SEPARATOR;

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var nodeCache = {};

var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;

/** Mapping from reactRootID to React component instance. */
var instancesByReactRootID = {};

/** Mapping from reactRootID to `container` nodes. */
var containersByReactRootID = {};

if ("production" !== process.env.NODE_ENV) {
  /** __DEV__-only mapping from reactRootID to root elements. */
  var rootElementsByReactRootID = {};
}

// Used to store breadth-first search state in findComponentRoot.
var findComponentRootReusableArray = [];

/**
 * Finds the index of the first character
 * that's not common between the two given strings.
 *
 * @return {number} the index of the character where the strings diverge
 */
function firstDifferenceIndex(string1, string2) {
  var minLen = Math.min(string1.length, string2.length);
  for (var i = 0; i < minLen; i++) {
    if (string1.charAt(i) !== string2.charAt(i)) {
      return i;
    }
  }
  return string1.length === string2.length ? -1 : minLen;
}

/**
 * @param {DOMElement} container DOM element that may contain a React component.
 * @return {?string} A "reactRoot" ID, if a React component is rendered.
 */
function getReactRootID(container) {
  var rootElement = getReactRootElementInContainer(container);
  return rootElement && ReactMount.getID(rootElement);
}

/**
 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
 * element can return its control whose name or ID equals ATTR_NAME. All
 * DOM nodes support `getAttributeNode` but this can also get called on
 * other objects so just return '' if we're given something other than a
 * DOM node (such as window).
 *
 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
 * @return {string} ID of the supplied `domNode`.
 */
function getID(node) {
  var id = internalGetID(node);
  if (id) {
    if (nodeCache.hasOwnProperty(id)) {
      var cached = nodeCache[id];
      if (cached !== node) {
        ("production" !== process.env.NODE_ENV ? invariant(
          !isValid(cached, id),
          'ReactMount: Two valid but unequal nodes with the same `%s`: %s',
          ATTR_NAME, id
        ) : invariant(!isValid(cached, id)));

        nodeCache[id] = node;
      }
    } else {
      nodeCache[id] = node;
    }
  }

  return id;
}

function internalGetID(node) {
  // If node is something like a window, document, or text node, none of
  // which support attributes or a .getAttribute method, gracefully return
  // the empty string, as if the attribute were missing.
  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
}

/**
 * Sets the React-specific ID of the given node.
 *
 * @param {DOMElement} node The DOM node whose ID will be set.
 * @param {string} id The value of the ID attribute.
 */
function setID(node, id) {
  var oldID = internalGetID(node);
  if (oldID !== id) {
    delete nodeCache[oldID];
  }
  node.setAttribute(ATTR_NAME, id);
  nodeCache[id] = node;
}

/**
 * Finds the node with the supplied React-generated DOM ID.
 *
 * @param {string} id A React-generated DOM ID.
 * @return {DOMElement} DOM node with the suppled `id`.
 * @internal
 */
function getNode(id) {
  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
    nodeCache[id] = ReactMount.findReactNodeByID(id);
  }
  return nodeCache[id];
}

/**
 * Finds the node with the supplied public React instance.
 *
 * @param {*} instance A public React instance.
 * @return {?DOMElement} DOM node with the suppled `id`.
 * @internal
 */
function getNodeFromInstance(instance) {
  var id = ReactInstanceMap.get(instance)._rootNodeID;
  if (ReactEmptyComponent.isNullComponentID(id)) {
    return null;
  }
  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
    nodeCache[id] = ReactMount.findReactNodeByID(id);
  }
  return nodeCache[id];
}

/**
 * A node is "valid" if it is contained by a currently mounted container.
 *
 * This means that the node does not have to be contained by a document in
 * order to be considered valid.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @param {string} id The expected ID of the node.
 * @return {boolean} Whether the node is contained by a mounted container.
 */
function isValid(node, id) {
  if (node) {
    ("production" !== process.env.NODE_ENV ? invariant(
      internalGetID(node) === id,
      'ReactMount: Unexpected modification of `%s`',
      ATTR_NAME
    ) : invariant(internalGetID(node) === id));

    var container = ReactMount.findReactContainerForID(id);
    if (container && containsNode(container, node)) {
      return true;
    }
  }

  return false;
}

/**
 * Causes the cache to forget about one React-specific ID.
 *
 * @param {string} id The ID to forget.
 */
function purgeID(id) {
  delete nodeCache[id];
}

var deepestNodeSoFar = null;
function findDeepestCachedAncestorImpl(ancestorID) {
  var ancestor = nodeCache[ancestorID];
  if (ancestor && isValid(ancestor, ancestorID)) {
    deepestNodeSoFar = ancestor;
  } else {
    // This node isn't populated in the cache, so presumably none of its
    // descendants are. Break out of the loop.
    return false;
  }
}

/**
 * Return the deepest cached node whose ID is a prefix of `targetID`.
 */
function findDeepestCachedAncestor(targetID) {
  deepestNodeSoFar = null;
  ReactInstanceHandles.traverseAncestors(
    targetID,
    findDeepestCachedAncestorImpl
  );

  var foundNode = deepestNodeSoFar;
  deepestNodeSoFar = null;
  return foundNode;
}

/**
 * Mounts this component and inserts it into the DOM.
 *
 * @param {ReactComponent} componentInstance The instance to mount.
 * @param {string} rootID DOM ID of the root node.
 * @param {DOMElement} container DOM element to mount into.
 * @param {ReactReconcileTransaction} transaction
 * @param {boolean} shouldReuseMarkup If true, do not insert markup
 */
function mountComponentIntoNode(
    componentInstance,
    rootID,
    container,
    transaction,
    shouldReuseMarkup) {
  var markup = ReactReconciler.mountComponent(
    componentInstance, rootID, transaction, emptyObject
  );
  componentInstance._isTopLevel = true;
  ReactMount._mountImageIntoNode(markup, container, shouldReuseMarkup);
}

/**
 * Batched mount.
 *
 * @param {ReactComponent} componentInstance The instance to mount.
 * @param {string} rootID DOM ID of the root node.
 * @param {DOMElement} container DOM element to mount into.
 * @param {boolean} shouldReuseMarkup If true, do not insert markup
 */
function batchedMountComponentIntoNode(
    componentInstance,
    rootID,
    container,
    shouldReuseMarkup) {
  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();
  transaction.perform(
    mountComponentIntoNode,
    null,
    componentInstance,
    rootID,
    container,
    transaction,
    shouldReuseMarkup
  );
  ReactUpdates.ReactReconcileTransaction.release(transaction);
}

/**
 * Mounting is the process of initializing a React component by creating its
 * representative DOM elements and inserting them into a supplied `container`.
 * Any prior content inside `container` is destroyed in the process.
 *
 *   ReactMount.render(
 *     component,
 *     document.getElementById('container')
 *   );
 *
 *   <div id="container">                   <-- Supplied `container`.
 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
 *       // ...                                 component.
 *     </div>
 *   </div>
 *
 * Inside of `container`, the first element rendered is the "reactRoot".
 */
var ReactMount = {
  /** Exposed for debugging purposes **/
  _instancesByReactRootID: instancesByReactRootID,

  /**
   * This is a hook provided to support rendering React components while
   * ensuring that the apparent scroll position of its `container` does not
   * change.
   *
   * @param {DOMElement} container The `container` being rendered into.
   * @param {function} renderCallback This must be called once to do the render.
   */
  scrollMonitor: function(container, renderCallback) {
    renderCallback();
  },

  /**
   * Take a component that's already mounted into the DOM and replace its props
   * @param {ReactComponent} prevComponent component instance already in the DOM
   * @param {ReactElement} nextElement component instance to render
   * @param {DOMElement} container container to render into
   * @param {?function} callback function triggered on completion
   */
  _updateRootComponent: function(
      prevComponent,
      nextElement,
      container,
      callback) {
    if ("production" !== process.env.NODE_ENV) {
      ReactElementValidator.checkAndWarnForMutatedProps(nextElement);
    }

    ReactMount.scrollMonitor(container, function() {
      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);
      if (callback) {
        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
      }
    });

    if ("production" !== process.env.NODE_ENV) {
      // Record the root element in case it later gets transplanted.
      rootElementsByReactRootID[getReactRootID(container)] =
        getReactRootElementInContainer(container);
    }

    return prevComponent;
  },

  /**
   * Register a component into the instance map and starts scroll value
   * monitoring
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @return {string} reactRoot ID prefix
   */
  _registerComponent: function(nextComponent, container) {
    ("production" !== process.env.NODE_ENV ? invariant(
      container && (
        (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
      ),
      '_registerComponent(...): Target container is not a DOM element.'
    ) : invariant(container && (
      (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
    )));

    ReactBrowserEventEmitter.ensureScrollValueMonitoring();

    var reactRootID = ReactMount.registerContainer(container);
    instancesByReactRootID[reactRootID] = nextComponent;
    return reactRootID;
  },

  /**
   * Render a new component into the DOM.
   * @param {ReactElement} nextElement element to render
   * @param {DOMElement} container container to render into
   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
   * @return {ReactComponent} nextComponent
   */
  _renderNewRootComponent: function(
    nextElement,
    container,
    shouldReuseMarkup
  ) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case.
    ("production" !== process.env.NODE_ENV ? warning(
      ReactCurrentOwner.current == null,
      '_renderNewRootComponent(): Render methods should be a pure function ' +
      'of props and state; triggering nested component updates from ' +
      'render is not allowed. If necessary, trigger nested updates in ' +
      'componentDidUpdate.'
    ) : null);

    var componentInstance = instantiateReactComponent(nextElement, null);
    var reactRootID = ReactMount._registerComponent(
      componentInstance,
      container
    );

    // The initial render is synchronous but any updates that happen during
    // rendering, in componentWillMount or componentDidMount, will be batched
    // according to the current batching strategy.

    ReactUpdates.batchedUpdates(
      batchedMountComponentIntoNode,
      componentInstance,
      reactRootID,
      container,
      shouldReuseMarkup
    );

    if ("production" !== process.env.NODE_ENV) {
      // Record the root element in case it later gets transplanted.
      rootElementsByReactRootID[reactRootID] =
        getReactRootElementInContainer(container);
    }

    return componentInstance;
  },

  /**
   * Renders a React component into the DOM in the supplied `container`.
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  render: function(nextElement, container, callback) {
    ("production" !== process.env.NODE_ENV ? invariant(
      ReactElement.isValidElement(nextElement),
      'React.render(): Invalid component element.%s',
      (
        typeof nextElement === 'string' ?
          ' Instead of passing an element string, make sure to instantiate ' +
          'it by passing it to React.createElement.' :
        typeof nextElement === 'function' ?
          ' Instead of passing a component class, make sure to instantiate ' +
          'it by passing it to React.createElement.' :
        // Check if it quacks like an element
        nextElement != null && nextElement.props !== undefined ?
          ' This may be caused by unintentionally loading two independent ' +
          'copies of React.' :
          ''
      )
    ) : invariant(ReactElement.isValidElement(nextElement)));

    var prevComponent = instancesByReactRootID[getReactRootID(container)];

    if (prevComponent) {
      var prevElement = prevComponent._currentElement;
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        return ReactMount._updateRootComponent(
          prevComponent,
          nextElement,
          container,
          callback
        ).getPublicInstance();
      } else {
        ReactMount.unmountComponentAtNode(container);
      }
    }

    var reactRootElement = getReactRootElementInContainer(container);
    var containerHasReactMarkup =
      reactRootElement && ReactMount.isRenderedByReact(reactRootElement);

    if ("production" !== process.env.NODE_ENV) {
      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
        var rootElementSibling = reactRootElement;
        while (rootElementSibling) {
          if (ReactMount.isRenderedByReact(rootElementSibling)) {
            ("production" !== process.env.NODE_ENV ? warning(
              false,
              'render(): Target node has markup rendered by React, but there ' +
              'are unrelated nodes as well. This is most commonly caused by ' +
              'white-space inserted around server-rendered markup.'
            ) : null);
            break;
          }

          rootElementSibling = rootElementSibling.nextSibling;
        }
      }
    }

    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent;

    var component = ReactMount._renderNewRootComponent(
      nextElement,
      container,
      shouldReuseMarkup
    ).getPublicInstance();
    if (callback) {
      callback.call(component);
    }
    return component;
  },

  /**
   * Constructs a component instance of `constructor` with `initialProps` and
   * renders it into the supplied `container`.
   *
   * @param {function} constructor React component constructor.
   * @param {?object} props Initial props of the component instance.
   * @param {DOMElement} container DOM element to render into.
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  constructAndRenderComponent: function(constructor, props, container) {
    var element = ReactElement.createElement(constructor, props);
    return ReactMount.render(element, container);
  },

  /**
   * Constructs a component instance of `constructor` with `initialProps` and
   * renders it into a container node identified by supplied `id`.
   *
   * @param {function} componentConstructor React component constructor
   * @param {?object} props Initial props of the component instance.
   * @param {string} id ID of the DOM element to render into.
   * @return {ReactComponent} Component instance rendered in the container node.
   */
  constructAndRenderComponentByID: function(constructor, props, id) {
    var domNode = document.getElementById(id);
    ("production" !== process.env.NODE_ENV ? invariant(
      domNode,
      'Tried to get element with id of "%s" but it is not present on the page.',
      id
    ) : invariant(domNode));
    return ReactMount.constructAndRenderComponent(constructor, props, domNode);
  },

  /**
   * Registers a container node into which React components will be rendered.
   * This also creates the "reactRoot" ID that will be assigned to the element
   * rendered within.
   *
   * @param {DOMElement} container DOM element to register as a container.
   * @return {string} The "reactRoot" ID of elements rendered within.
   */
  registerContainer: function(container) {
    var reactRootID = getReactRootID(container);
    if (reactRootID) {
      // If one exists, make sure it is a valid "reactRoot" ID.
      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
    }
    if (!reactRootID) {
      // No valid "reactRoot" ID found, create one.
      reactRootID = ReactInstanceHandles.createReactRootID();
    }
    containersByReactRootID[reactRootID] = container;
    return reactRootID;
  },

  /**
   * Unmounts and destroys the React component rendered in the `container`.
   *
   * @param {DOMElement} container DOM element containing a React component.
   * @return {boolean} True if a component was found in and unmounted from
   *                   `container`
   */
  unmountComponentAtNode: function(container) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case. (Strictly speaking, unmounting won't cause a
    // render but we still don't expect to be in a render call here.)
    ("production" !== process.env.NODE_ENV ? warning(
      ReactCurrentOwner.current == null,
      'unmountComponentAtNode(): Render methods should be a pure function of ' +
      'props and state; triggering nested component updates from render is ' +
      'not allowed. If necessary, trigger nested updates in ' +
      'componentDidUpdate.'
    ) : null);

    ("production" !== process.env.NODE_ENV ? invariant(
      container && (
        (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
      ),
      'unmountComponentAtNode(...): Target container is not a DOM element.'
    ) : invariant(container && (
      (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
    )));

    var reactRootID = getReactRootID(container);
    var component = instancesByReactRootID[reactRootID];
    if (!component) {
      return false;
    }
    ReactMount.unmountComponentFromNode(component, container);
    delete instancesByReactRootID[reactRootID];
    delete containersByReactRootID[reactRootID];
    if ("production" !== process.env.NODE_ENV) {
      delete rootElementsByReactRootID[reactRootID];
    }
    return true;
  },

  /**
   * Unmounts a component and removes it from the DOM.
   *
   * @param {ReactComponent} instance React component instance.
   * @param {DOMElement} container DOM element to unmount from.
   * @final
   * @internal
   * @see {ReactMount.unmountComponentAtNode}
   */
  unmountComponentFromNode: function(instance, container) {
    ReactReconciler.unmountComponent(instance);

    if (container.nodeType === DOC_NODE_TYPE) {
      container = container.documentElement;
    }

    // http://jsperf.com/emptying-a-node
    while (container.lastChild) {
      container.removeChild(container.lastChild);
    }
  },

  /**
   * Finds the container DOM element that contains React component to which the
   * supplied DOM `id` belongs.
   *
   * @param {string} id The ID of an element rendered by a React component.
   * @return {?DOMElement} DOM element that contains the `id`.
   */
  findReactContainerForID: function(id) {
    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
    var container = containersByReactRootID[reactRootID];

    if ("production" !== process.env.NODE_ENV) {
      var rootElement = rootElementsByReactRootID[reactRootID];
      if (rootElement && rootElement.parentNode !== container) {
        ("production" !== process.env.NODE_ENV ? invariant(
          // Call internalGetID here because getID calls isValid which calls
          // findReactContainerForID (this function).
          internalGetID(rootElement) === reactRootID,
          'ReactMount: Root element ID differed from reactRootID.'
        ) : invariant(// Call internalGetID here because getID calls isValid which calls
        // findReactContainerForID (this function).
        internalGetID(rootElement) === reactRootID));

        var containerChild = container.firstChild;
        if (containerChild &&
            reactRootID === internalGetID(containerChild)) {
          // If the container has a new child with the same ID as the old
          // root element, then rootElementsByReactRootID[reactRootID] is
          // just stale and needs to be updated. The case that deserves a
          // warning is when the container is empty.
          rootElementsByReactRootID[reactRootID] = containerChild;
        } else {
          ("production" !== process.env.NODE_ENV ? warning(
            false,
            'ReactMount: Root element has been removed from its original ' +
            'container. New container:', rootElement.parentNode
          ) : null);
        }
      }
    }

    return container;
  },

  /**
   * Finds an element rendered by React with the supplied ID.
   *
   * @param {string} id ID of a DOM node in the React component.
   * @return {DOMElement} Root DOM node of the React component.
   */
  findReactNodeByID: function(id) {
    var reactRoot = ReactMount.findReactContainerForID(id);
    return ReactMount.findComponentRoot(reactRoot, id);
  },

  /**
   * True if the supplied `node` is rendered by React.
   *
   * @param {*} node DOM Element to check.
   * @return {boolean} True if the DOM Element appears to be rendered by React.
   * @internal
   */
  isRenderedByReact: function(node) {
    if (node.nodeType !== 1) {
      // Not a DOMElement, therefore not a React component
      return false;
    }
    var id = ReactMount.getID(node);
    return id ? id.charAt(0) === SEPARATOR : false;
  },

  /**
   * Traverses up the ancestors of the supplied node to find a node that is a
   * DOM representation of a React component.
   *
   * @param {*} node
   * @return {?DOMEventTarget}
   * @internal
   */
  getFirstReactDOM: function(node) {
    var current = node;
    while (current && current.parentNode !== current) {
      if (ReactMount.isRenderedByReact(current)) {
        return current;
      }
      current = current.parentNode;
    }
    return null;
  },

  /**
   * Finds a node with the supplied `targetID` inside of the supplied
   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
   * quickly.
   *
   * @param {DOMEventTarget} ancestorNode Search from this root.
   * @pararm {string} targetID ID of the DOM representation of the component.
   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
   * @internal
   */
  findComponentRoot: function(ancestorNode, targetID) {
    var firstChildren = findComponentRootReusableArray;
    var childIndex = 0;

    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;

    firstChildren[0] = deepestAncestor.firstChild;
    firstChildren.length = 1;

    while (childIndex < firstChildren.length) {
      var child = firstChildren[childIndex++];
      var targetChild;

      while (child) {
        var childID = ReactMount.getID(child);
        if (childID) {
          // Even if we find the node we're looking for, we finish looping
          // through its siblings to ensure they're cached so that we don't have
          // to revisit this node again. Otherwise, we make n^2 calls to getID
          // when visiting the many children of a single node in order.

          if (targetID === childID) {
            targetChild = child;
          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
            // If we find a child whose ID is an ancestor of the given ID,
            // then we can be sure that we only want to search the subtree
            // rooted at this child, so we can throw out the rest of the
            // search state.
            firstChildren.length = childIndex = 0;
            firstChildren.push(child.firstChild);
          }

        } else {
          // If this child had no ID, then there's a chance that it was
          // injected automatically by the browser, as when a `<table>`
          // element sprouts an extra `<tbody>` child as a side effect of
          // `.innerHTML` parsing. Optimistically continue down this
          // branch, but not before examining the other siblings.
          firstChildren.push(child.firstChild);
        }

        child = child.nextSibling;
      }

      if (targetChild) {
        // Emptying firstChildren/findComponentRootReusableArray is
        // not necessary for correctness, but it helps the GC reclaim
        // any nodes that were left at the end of the search.
        firstChildren.length = 0;

        return targetChild;
      }
    }

    firstChildren.length = 0;

    ("production" !== process.env.NODE_ENV ? invariant(
      false,
      'findComponentRoot(..., %s): Unable to find element. This probably ' +
      'means the DOM was unexpectedly mutated (e.g., by the browser), ' +
      'usually due to forgetting a <tbody> when using tables, nesting tags ' +
      'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' +
      'parent. ' +
      'Try inspecting the child nodes of the element with React ID `%s`.',
      targetID,
      ReactMount.getID(ancestorNode)
    ) : invariant(false));
  },

  _mountImageIntoNode: function(markup, container, shouldReuseMarkup) {
    ("production" !== process.env.NODE_ENV ? invariant(
      container && (
        (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
      ),
      'mountComponentIntoNode(...): Target container is not valid.'
    ) : invariant(container && (
      (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
    )));

    if (shouldReuseMarkup) {
      var rootElement = getReactRootElementInContainer(container);
      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
        return;
      } else {
        var checksum = rootElement.getAttribute(
          ReactMarkupChecksum.CHECKSUM_ATTR_NAME
        );
        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

        var rootMarkup = rootElement.outerHTML;
        rootElement.setAttribute(
          ReactMarkupChecksum.CHECKSUM_ATTR_NAME,
          checksum
        );

        var diffIndex = firstDifferenceIndex(markup, rootMarkup);
        var difference = ' (client) ' +
          markup.substring(diffIndex - 20, diffIndex + 20) +
          '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

        ("production" !== process.env.NODE_ENV ? invariant(
          container.nodeType !== DOC_NODE_TYPE,
          'You\'re trying to render a component to the document using ' +
          'server rendering but the checksum was invalid. This usually ' +
          'means you rendered a different component type or props on ' +
          'the client from the one on the server, or your render() ' +
          'methods are impure. React cannot handle this case due to ' +
          'cross-browser quirks by rendering at the document root. You ' +
          'should look for environment dependent code in your components ' +
          'and ensure the props are the same client and server side:\n%s',
          difference
        ) : invariant(container.nodeType !== DOC_NODE_TYPE));

        if ("production" !== process.env.NODE_ENV) {
          ("production" !== process.env.NODE_ENV ? warning(
            false,
            'React attempted to reuse markup in a container but the ' +
            'checksum was invalid. This generally means that you are ' +
            'using server rendering and the markup generated on the ' +
            'server was not what the client was expecting. React injected ' +
            'new markup to compensate which works but you have lost many ' +
            'of the benefits of server rendering. Instead, figure out ' +
            'why the markup being generated is different on the client ' +
            'or server:\n%s',
            difference
          ) : null);
        }
      }
    }

    ("production" !== process.env.NODE_ENV ? invariant(
      container.nodeType !== DOC_NODE_TYPE,
      'You\'re trying to render a component to the document but ' +
        'you didn\'t use server rendering. We can\'t do this ' +
        'without using server rendering due to cross-browser quirks. ' +
        'See React.renderToString() for server rendering.'
    ) : invariant(container.nodeType !== DOC_NODE_TYPE));

    setInnerHTML(container, markup);
  },

  /**
   * React ID utilities.
   */

  getReactRootID: getReactRootID,

  getID: getID,

  setID: setID,

  getNode: getNode,

  getNodeFromInstance: getNodeFromInstance,

  purgeID: purgeID
};

ReactPerf.measureMethods(ReactMount, 'ReactMount', {
  _renderNewRootComponent: '_renderNewRootComponent',
  _mountImageIntoNode: '_mountImageIntoNode'
});

module.exports = ReactMount;

}).call(this,require('_process'))
},{"./DOMProperty":164,"./ReactBrowserEventEmitter":186,"./ReactCurrentOwner":198,"./ReactElement":216,"./ReactElementValidator":217,"./ReactEmptyComponent":218,"./ReactInstanceHandles":225,"./ReactInstanceMap":226,"./ReactMarkupChecksum":229,"./ReactPerf":235,"./ReactReconciler":242,"./ReactUpdateQueue":252,"./ReactUpdates":253,"./containsNode":277,"./emptyObject":284,"./getReactRootElementInContainer":298,"./instantiateReactComponent":303,"./invariant":304,"./setInnerHTML":318,"./shouldUpdateReactComponent":321,"./warning":325,"_process":2}],231:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMultiChild
 * @typechecks static-only
 */

'use strict';

var ReactComponentEnvironment = require("./ReactComponentEnvironment");
var ReactMultiChildUpdateTypes = require("./ReactMultiChildUpdateTypes");

var ReactReconciler = require("./ReactReconciler");
var ReactChildReconciler = require("./ReactChildReconciler");

/**
 * Updating children of a component may trigger recursive updates. The depth is
 * used to batch recursive updates to render markup more efficiently.
 *
 * @type {number}
 * @private
 */
var updateDepth = 0;

/**
 * Queue of update configuration objects.
 *
 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
 *
 * @type {array<object>}
 * @private
 */
var updateQueue = [];

/**
 * Queue of markup to be rendered.
 *
 * @type {array<string>}
 * @private
 */
var markupQueue = [];

/**
 * Enqueues markup to be rendered and inserted at a supplied index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} markup Markup that renders into an element.
 * @param {number} toIndex Destination index.
 * @private
 */
function enqueueMarkup(parentID, markup, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
    markupIndex: markupQueue.push(markup) - 1,
    textContent: null,
    fromIndex: null,
    toIndex: toIndex
  });
}

/**
 * Enqueues moving an existing element to another index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Source index of the existing element.
 * @param {number} toIndex Destination index of the element.
 * @private
 */
function enqueueMove(parentID, fromIndex, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
    markupIndex: null,
    textContent: null,
    fromIndex: fromIndex,
    toIndex: toIndex
  });
}

/**
 * Enqueues removing an element at an index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Index of the element to remove.
 * @private
 */
function enqueueRemove(parentID, fromIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
    markupIndex: null,
    textContent: null,
    fromIndex: fromIndex,
    toIndex: null
  });
}

/**
 * Enqueues setting the text content.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} textContent Text content to set.
 * @private
 */
function enqueueTextContent(parentID, textContent) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
    markupIndex: null,
    textContent: textContent,
    fromIndex: null,
    toIndex: null
  });
}

/**
 * Processes any enqueued updates.
 *
 * @private
 */
function processQueue() {
  if (updateQueue.length) {
    ReactComponentEnvironment.processChildrenUpdates(
      updateQueue,
      markupQueue
    );
    clearQueue();
  }
}

/**
 * Clears any enqueued updates.
 *
 * @private
 */
function clearQueue() {
  updateQueue.length = 0;
  markupQueue.length = 0;
}

/**
 * ReactMultiChild are capable of reconciling multiple children.
 *
 * @class ReactMultiChild
 * @internal
 */
var ReactMultiChild = {

  /**
   * Provides common functionality for components that must reconcile multiple
   * children. This is used by `ReactDOMComponent` to mount, update, and
   * unmount child components.
   *
   * @lends {ReactMultiChild.prototype}
   */
  Mixin: {

    /**
     * Generates a "mount image" for each of the supplied children. In the case
     * of `ReactDOMComponent`, a mount image is a string of markup.
     *
     * @param {?object} nestedChildren Nested child maps.
     * @return {array} An array of mounted representations.
     * @internal
     */
    mountChildren: function(nestedChildren, transaction, context) {
      var children = ReactChildReconciler.instantiateChildren(
        nestedChildren, transaction, context
      );
      this._renderedChildren = children;
      var mountImages = [];
      var index = 0;
      for (var name in children) {
        if (children.hasOwnProperty(name)) {
          var child = children[name];
          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
          var rootID = this._rootNodeID + name;
          var mountImage = ReactReconciler.mountComponent(
            child,
            rootID,
            transaction,
            context
          );
          child._mountIndex = index;
          mountImages.push(mountImage);
          index++;
        }
      }
      return mountImages;
    },

    /**
     * Replaces any rendered children with a text content string.
     *
     * @param {string} nextContent String of content.
     * @internal
     */
    updateTextContent: function(nextContent) {
      updateDepth++;
      var errorThrown = true;
      try {
        var prevChildren = this._renderedChildren;
        // Remove any rendered children.
        ReactChildReconciler.unmountChildren(prevChildren);
        // TODO: The setTextContent operation should be enough
        for (var name in prevChildren) {
          if (prevChildren.hasOwnProperty(name)) {
            this._unmountChildByName(prevChildren[name], name);
          }
        }
        // Set new text content.
        this.setTextContent(nextContent);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          if (errorThrown) {
            clearQueue();
          } else {
            processQueue();
          }
        }
      }
    },

    /**
     * Updates the rendered children with new children.
     *
     * @param {?object} nextNestedChildren Nested child maps.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    updateChildren: function(nextNestedChildren, transaction, context) {
      updateDepth++;
      var errorThrown = true;
      try {
        this._updateChildren(nextNestedChildren, transaction, context);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          if (errorThrown) {
            clearQueue();
          } else {
            processQueue();
          }
        }

      }
    },

    /**
     * Improve performance by isolating this hot code path from the try/catch
     * block in `updateChildren`.
     *
     * @param {?object} nextNestedChildren Nested child maps.
     * @param {ReactReconcileTransaction} transaction
     * @final
     * @protected
     */
    _updateChildren: function(nextNestedChildren, transaction, context) {
      var prevChildren = this._renderedChildren;
      var nextChildren = ReactChildReconciler.updateChildren(
        prevChildren, nextNestedChildren, transaction, context
      );
      this._renderedChildren = nextChildren;
      if (!nextChildren && !prevChildren) {
        return;
      }
      var name;
      // `nextIndex` will increment for each child in `nextChildren`, but
      // `lastIndex` will be the last index visited in `prevChildren`.
      var lastIndex = 0;
      var nextIndex = 0;
      for (name in nextChildren) {
        if (!nextChildren.hasOwnProperty(name)) {
          continue;
        }
        var prevChild = prevChildren && prevChildren[name];
        var nextChild = nextChildren[name];
        if (prevChild === nextChild) {
          this.moveChild(prevChild, nextIndex, lastIndex);
          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
          prevChild._mountIndex = nextIndex;
        } else {
          if (prevChild) {
            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
            this._unmountChildByName(prevChild, name);
          }
          // The child must be instantiated before it's mounted.
          this._mountChildByNameAtIndex(
            nextChild, name, nextIndex, transaction, context
          );
        }
        nextIndex++;
      }
      // Remove children that are no longer present.
      for (name in prevChildren) {
        if (prevChildren.hasOwnProperty(name) &&
            !(nextChildren && nextChildren.hasOwnProperty(name))) {
          this._unmountChildByName(prevChildren[name], name);
        }
      }
    },

    /**
     * Unmounts all rendered children. This should be used to clean up children
     * when this component is unmounted.
     *
     * @internal
     */
    unmountChildren: function() {
      var renderedChildren = this._renderedChildren;
      ReactChildReconciler.unmountChildren(renderedChildren);
      this._renderedChildren = null;
    },

    /**
     * Moves a child component to the supplied index.
     *
     * @param {ReactComponent} child Component to move.
     * @param {number} toIndex Destination index of the element.
     * @param {number} lastIndex Last index visited of the siblings of `child`.
     * @protected
     */
    moveChild: function(child, toIndex, lastIndex) {
      // If the index of `child` is less than `lastIndex`, then it needs to
      // be moved. Otherwise, we do not need to move it because a child will be
      // inserted or moved before `child`.
      if (child._mountIndex < lastIndex) {
        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
      }
    },

    /**
     * Creates a child component.
     *
     * @param {ReactComponent} child Component to create.
     * @param {string} mountImage Markup to insert.
     * @protected
     */
    createChild: function(child, mountImage) {
      enqueueMarkup(this._rootNodeID, mountImage, child._mountIndex);
    },

    /**
     * Removes a child component.
     *
     * @param {ReactComponent} child Child to remove.
     * @protected
     */
    removeChild: function(child) {
      enqueueRemove(this._rootNodeID, child._mountIndex);
    },

    /**
     * Sets this text content string.
     *
     * @param {string} textContent Text content to set.
     * @protected
     */
    setTextContent: function(textContent) {
      enqueueTextContent(this._rootNodeID, textContent);
    },

    /**
     * Mounts a child with the supplied name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to mount.
     * @param {string} name Name of the child.
     * @param {number} index Index at which to insert the child.
     * @param {ReactReconcileTransaction} transaction
     * @private
     */
    _mountChildByNameAtIndex: function(
      child,
      name,
      index,
      transaction,
      context) {
      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
      var rootID = this._rootNodeID + name;
      var mountImage = ReactReconciler.mountComponent(
        child,
        rootID,
        transaction,
        context
      );
      child._mountIndex = index;
      this.createChild(child, mountImage);
    },

    /**
     * Unmounts a rendered child by name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to unmount.
     * @param {string} name Name of the child in `this._renderedChildren`.
     * @private
     */
    _unmountChildByName: function(child, name) {
      this.removeChild(child);
      child._mountIndex = null;
    }

  }

};

module.exports = ReactMultiChild;

},{"./ReactChildReconciler":189,"./ReactComponentEnvironment":194,"./ReactMultiChildUpdateTypes":232,"./ReactReconciler":242}],232:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMultiChildUpdateTypes
 */

'use strict';

var keyMirror = require("./keyMirror");

/**
 * When a component's children are updated, a series of update configuration
 * objects are created in order to batch and serialize the required changes.
 *
 * Enumerates all the possible types of update configurations.
 *
 * @internal
 */
var ReactMultiChildUpdateTypes = keyMirror({
  INSERT_MARKUP: null,
  MOVE_EXISTING: null,
  REMOVE_NODE: null,
  TEXT_CONTENT: null
});

module.exports = ReactMultiChildUpdateTypes;

},{"./keyMirror":310}],233:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactNativeComponent
 */

'use strict';

var assign = require("./Object.assign");
var invariant = require("./invariant");

var autoGenerateWrapperClass = null;
var genericComponentClass = null;
// This registry keeps track of wrapper classes around native tags
var tagToComponentClass = {};
var textComponentClass = null;

var ReactNativeComponentInjection = {
  // This accepts a class that receives the tag string. This is a catch all
  // that can render any kind of tag.
  injectGenericComponentClass: function(componentClass) {
    genericComponentClass = componentClass;
  },
  // This accepts a text component class that takes the text string to be
  // rendered as props.
  injectTextComponentClass: function(componentClass) {
    textComponentClass = componentClass;
  },
  // This accepts a keyed object with classes as values. Each key represents a
  // tag. That particular tag will use this class instead of the generic one.
  injectComponentClasses: function(componentClasses) {
    assign(tagToComponentClass, componentClasses);
  },
  // Temporary hack since we expect DOM refs to behave like composites,
  // for this release.
  injectAutoWrapper: function(wrapperFactory) {
    autoGenerateWrapperClass = wrapperFactory;
  }
};

/**
 * Get a composite component wrapper class for a specific tag.
 *
 * @param {ReactElement} element The tag for which to get the class.
 * @return {function} The React class constructor function.
 */
function getComponentClassForElement(element) {
  if (typeof element.type === 'function') {
    return element.type;
  }
  var tag = element.type;
  var componentClass = tagToComponentClass[tag];
  if (componentClass == null) {
    tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);
  }
  return componentClass;
}

/**
 * Get a native internal component class for a specific tag.
 *
 * @param {ReactElement} element The element to create.
 * @return {function} The internal class constructor function.
 */
function createInternalComponent(element) {
  ("production" !== process.env.NODE_ENV ? invariant(
    genericComponentClass,
    'There is no registered component for the tag %s',
    element.type
  ) : invariant(genericComponentClass));
  return new genericComponentClass(element.type, element.props);
}

/**
 * @param {ReactText} text
 * @return {ReactComponent}
 */
function createInstanceForText(text) {
  return new textComponentClass(text);
}

/**
 * @param {ReactComponent} component
 * @return {boolean}
 */
function isTextComponent(component) {
  return component instanceof textComponentClass;
}

var ReactNativeComponent = {
  getComponentClassForElement: getComponentClassForElement,
  createInternalComponent: createInternalComponent,
  createInstanceForText: createInstanceForText,
  isTextComponent: isTextComponent,
  injection: ReactNativeComponentInjection
};

module.exports = ReactNativeComponent;

}).call(this,require('_process'))
},{"./Object.assign":182,"./invariant":304,"_process":2}],234:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactOwner
 */

'use strict';

var invariant = require("./invariant");

/**
 * ReactOwners are capable of storing references to owned components.
 *
 * All components are capable of //being// referenced by owner components, but
 * only ReactOwner components are capable of //referencing// owned components.
 * The named reference is known as a "ref".
 *
 * Refs are available when mounted and updated during reconciliation.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return (
 *         <div onClick={this.handleClick}>
 *           <CustomComponent ref="custom" />
 *         </div>
 *       );
 *     },
 *     handleClick: function() {
 *       this.refs.custom.handleClick();
 *     },
 *     componentDidMount: function() {
 *       this.refs.custom.initialize();
 *     }
 *   });
 *
 * Refs should rarely be used. When refs are used, they should only be done to
 * control data that is not handled by React's data flow.
 *
 * @class ReactOwner
 */
var ReactOwner = {

  /**
   * @param {?object} object
   * @return {boolean} True if `object` is a valid owner.
   * @final
   */
  isValidOwner: function(object) {
    return !!(
      (object &&
      typeof object.attachRef === 'function' && typeof object.detachRef === 'function')
    );
  },

  /**
   * Adds a component by ref to an owner component.
   *
   * @param {ReactComponent} component Component to reference.
   * @param {string} ref Name by which to refer to the component.
   * @param {ReactOwner} owner Component on which to record the ref.
   * @final
   * @internal
   */
  addComponentAsRefTo: function(component, ref, owner) {
    ("production" !== process.env.NODE_ENV ? invariant(
      ReactOwner.isValidOwner(owner),
      'addComponentAsRefTo(...): Only a ReactOwner can have refs. This ' +
      'usually means that you\'re trying to add a ref to a component that ' +
      'doesn\'t have an owner (that is, was not created inside of another ' +
      'component\'s `render` method). Try rendering this component inside of ' +
      'a new top-level component which will hold the ref.'
    ) : invariant(ReactOwner.isValidOwner(owner)));
    owner.attachRef(ref, component);
  },

  /**
   * Removes a component by ref from an owner component.
   *
   * @param {ReactComponent} component Component to dereference.
   * @param {string} ref Name of the ref to remove.
   * @param {ReactOwner} owner Component on which the ref is recorded.
   * @final
   * @internal
   */
  removeComponentAsRefFrom: function(component, ref, owner) {
    ("production" !== process.env.NODE_ENV ? invariant(
      ReactOwner.isValidOwner(owner),
      'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. This ' +
      'usually means that you\'re trying to remove a ref to a component that ' +
      'doesn\'t have an owner (that is, was not created inside of another ' +
      'component\'s `render` method). Try rendering this component inside of ' +
      'a new top-level component which will hold the ref.'
    ) : invariant(ReactOwner.isValidOwner(owner)));
    // Check that `component` is still the current ref because we do not want to
    // detach the ref if another component stole it.
    if (owner.getPublicInstance().refs[ref] === component.getPublicInstance()) {
      owner.detachRef(ref);
    }
  }

};

module.exports = ReactOwner;

}).call(this,require('_process'))
},{"./invariant":304,"_process":2}],235:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPerf
 * @typechecks static-only
 */

'use strict';

/**
 * ReactPerf is a general AOP system designed to measure performance. This
 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
 */
var ReactPerf = {
  /**
   * Boolean to enable/disable measurement. Set to false by default to prevent
   * accidental logging and perf loss.
   */
  enableMeasure: false,

  /**
   * Holds onto the measure function in use. By default, don't measure
   * anything, but we'll override this if we inject a measure function.
   */
  storedMeasure: _noMeasure,

  /**
   * @param {object} object
   * @param {string} objectName
   * @param {object<string>} methodNames
   */
  measureMethods: function(object, objectName, methodNames) {
    if ("production" !== process.env.NODE_ENV) {
      for (var key in methodNames) {
        if (!methodNames.hasOwnProperty(key)) {
          continue;
        }
        object[key] = ReactPerf.measure(
          objectName,
          methodNames[key],
          object[key]
        );
      }
    }
  },

  /**
   * Use this to wrap methods you want to measure. Zero overhead in production.
   *
   * @param {string} objName
   * @param {string} fnName
   * @param {function} func
   * @return {function}
   */
  measure: function(objName, fnName, func) {
    if ("production" !== process.env.NODE_ENV) {
      var measuredFunc = null;
      var wrapper = function() {
        if (ReactPerf.enableMeasure) {
          if (!measuredFunc) {
            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
          }
          return measuredFunc.apply(this, arguments);
        }
        return func.apply(this, arguments);
      };
      wrapper.displayName = objName + '_' + fnName;
      return wrapper;
    }
    return func;
  },

  injection: {
    /**
     * @param {function} measure
     */
    injectMeasure: function(measure) {
      ReactPerf.storedMeasure = measure;
    }
  }
};

/**
 * Simply passes through the measured function, without measuring it.
 *
 * @param {string} objName
 * @param {string} fnName
 * @param {function} func
 * @return {function}
 */
function _noMeasure(objName, fnName, func) {
  return func;
}

module.exports = ReactPerf;

}).call(this,require('_process'))
},{"_process":2}],236:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTransferer
 */

'use strict';

var assign = require("./Object.assign");
var emptyFunction = require("./emptyFunction");
var joinClasses = require("./joinClasses");

/**
 * Creates a transfer strategy that will merge prop values using the supplied
 * `mergeStrategy`. If a prop was previously unset, this just sets it.
 *
 * @param {function} mergeStrategy
 * @return {function}
 */
function createTransferStrategy(mergeStrategy) {
  return function(props, key, value) {
    if (!props.hasOwnProperty(key)) {
      props[key] = value;
    } else {
      props[key] = mergeStrategy(props[key], value);
    }
  };
}

var transferStrategyMerge = createTransferStrategy(function(a, b) {
  // `merge` overrides the first object's (`props[key]` above) keys using the
  // second object's (`value`) keys. An object's style's existing `propA` would
  // get overridden. Flip the order here.
  return assign({}, b, a);
});

/**
 * Transfer strategies dictate how props are transferred by `transferPropsTo`.
 * NOTE: if you add any more exceptions to this list you should be sure to
 * update `cloneWithProps()` accordingly.
 */
var TransferStrategies = {
  /**
   * Never transfer `children`.
   */
  children: emptyFunction,
  /**
   * Transfer the `className` prop by merging them.
   */
  className: createTransferStrategy(joinClasses),
  /**
   * Transfer the `style` prop (which is an object) by merging them.
   */
  style: transferStrategyMerge
};

/**
 * Mutates the first argument by transferring the properties from the second
 * argument.
 *
 * @param {object} props
 * @param {object} newProps
 * @return {object}
 */
function transferInto(props, newProps) {
  for (var thisKey in newProps) {
    if (!newProps.hasOwnProperty(thisKey)) {
      continue;
    }

    var transferStrategy = TransferStrategies[thisKey];

    if (transferStrategy && TransferStrategies.hasOwnProperty(thisKey)) {
      transferStrategy(props, thisKey, newProps[thisKey]);
    } else if (!props.hasOwnProperty(thisKey)) {
      props[thisKey] = newProps[thisKey];
    }
  }
  return props;
}

/**
 * ReactPropTransferer are capable of transferring props to another component
 * using a `transferPropsTo` method.
 *
 * @class ReactPropTransferer
 */
var ReactPropTransferer = {

  /**
   * Merge two props objects using TransferStrategies.
   *
   * @param {object} oldProps original props (they take precedence)
   * @param {object} newProps new props to merge in
   * @return {object} a new object containing both sets of props merged.
   */
  mergeProps: function(oldProps, newProps) {
    return transferInto(assign({}, oldProps), newProps);
  }

};

module.exports = ReactPropTransferer;

},{"./Object.assign":182,"./emptyFunction":283,"./joinClasses":309}],237:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypeLocationNames
 */

'use strict';

var ReactPropTypeLocationNames = {};

if ("production" !== process.env.NODE_ENV) {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;

}).call(this,require('_process'))
},{"_process":2}],238:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypeLocations
 */

'use strict';

var keyMirror = require("./keyMirror");

var ReactPropTypeLocations = keyMirror({
  prop: null,
  context: null,
  childContext: null
});

module.exports = ReactPropTypeLocations;

},{"./keyMirror":310}],239:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypes
 */

'use strict';

var ReactElement = require("./ReactElement");
var ReactFragment = require("./ReactFragment");
var ReactPropTypeLocationNames = require("./ReactPropTypeLocationNames");

var emptyFunction = require("./emptyFunction");

/**
 * Collection of methods that allow declaration and validation of props that are
 * supplied to React components. Example usage:
 *
 *   var Props = require('ReactPropTypes');
 *   var MyArticle = React.createClass({
 *     propTypes: {
 *       // An optional string prop named "description".
 *       description: Props.string,
 *
 *       // A required enum prop named "category".
 *       category: Props.oneOf(['News','Photos']).isRequired,
 *
 *       // A prop named "dialog" that requires an instance of Dialog.
 *       dialog: Props.instanceOf(Dialog).isRequired
 *     },
 *     render: function() { ... }
 *   });
 *
 * A more formal specification of how these methods are used:
 *
 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
 *   decl := ReactPropTypes.{type}(.isRequired)?
 *
 * Each and every declaration produces a function with the same signature. This
 * allows the creation of custom validation functions. For example:
 *
 *  var MyLink = React.createClass({
 *    propTypes: {
 *      // An optional string or URI prop named "href".
 *      href: function(props, propName, componentName) {
 *        var propValue = props[propName];
 *        if (propValue != null && typeof propValue !== 'string' &&
 *            !(propValue instanceof URI)) {
 *          return new Error(
 *            'Expected a string or an URI for ' + propName + ' in ' +
 *            componentName
 *          );
 *        }
 *      }
 *    },
 *    render: function() {...}
 *  });
 *
 * @internal
 */

var ANONYMOUS = '<<anonymous>>';

var elementTypeChecker = createElementTypeChecker();
var nodeTypeChecker = createNodeChecker();

var ReactPropTypes = {
  array: createPrimitiveTypeChecker('array'),
  bool: createPrimitiveTypeChecker('boolean'),
  func: createPrimitiveTypeChecker('function'),
  number: createPrimitiveTypeChecker('number'),
  object: createPrimitiveTypeChecker('object'),
  string: createPrimitiveTypeChecker('string'),

  any: createAnyTypeChecker(),
  arrayOf: createArrayOfTypeChecker,
  element: elementTypeChecker,
  instanceOf: createInstanceTypeChecker,
  node: nodeTypeChecker,
  objectOf: createObjectOfTypeChecker,
  oneOf: createEnumTypeChecker,
  oneOfType: createUnionTypeChecker,
  shape: createShapeTypeChecker
};

function createChainableTypeChecker(validate) {
  function checkType(isRequired, props, propName, componentName, location) {
    componentName = componentName || ANONYMOUS;
    if (props[propName] == null) {
      var locationName = ReactPropTypeLocationNames[location];
      if (isRequired) {
        return new Error(
          ("Required " + locationName + " `" + propName + "` was not specified in ") +
          ("`" + componentName + "`.")
        );
      }
      return null;
    } else {
      return validate(props, propName, componentName, location);
    }
  }

  var chainedCheckType = checkType.bind(null, false);
  chainedCheckType.isRequired = checkType.bind(null, true);

  return chainedCheckType;
}

function createPrimitiveTypeChecker(expectedType) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== expectedType) {
      var locationName = ReactPropTypeLocationNames[location];
      // `propValue` being instance of, say, date/regexp, pass the 'object'
      // check, but we can offer a more precise error message here rather than
      // 'of type `object`'.
      var preciseType = getPreciseType(propValue);

      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type `" + preciseType + "` ") +
        ("supplied to `" + componentName + "`, expected `" + expectedType + "`.")
      );
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createAnyTypeChecker() {
  return createChainableTypeChecker(emptyFunction.thatReturns(null));
}

function createArrayOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    if (!Array.isArray(propValue)) {
      var locationName = ReactPropTypeLocationNames[location];
      var propType = getPropType(propValue);
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type ") +
        ("`" + propType + "` supplied to `" + componentName + "`, expected an array.")
      );
    }
    for (var i = 0; i < propValue.length; i++) {
      var error = typeChecker(propValue, i, componentName, location);
      if (error instanceof Error) {
        return error;
      }
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createElementTypeChecker() {
  function validate(props, propName, componentName, location) {
    if (!ReactElement.isValidElement(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected a ReactElement.")
      );
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createInstanceTypeChecker(expectedClass) {
  function validate(props, propName, componentName, location) {
    if (!(props[propName] instanceof expectedClass)) {
      var locationName = ReactPropTypeLocationNames[location];
      var expectedClassName = expectedClass.name || ANONYMOUS;
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected instance of `" + expectedClassName + "`.")
      );
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createEnumTypeChecker(expectedValues) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    for (var i = 0; i < expectedValues.length; i++) {
      if (propValue === expectedValues[i]) {
        return null;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    var valuesString = JSON.stringify(expectedValues);
    return new Error(
      ("Invalid " + locationName + " `" + propName + "` of value `" + propValue + "` ") +
      ("supplied to `" + componentName + "`, expected one of " + valuesString + ".")
    );
  }
  return createChainableTypeChecker(validate);
}

function createObjectOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type ") +
        ("`" + propType + "` supplied to `" + componentName + "`, expected an object.")
      );
    }
    for (var key in propValue) {
      if (propValue.hasOwnProperty(key)) {
        var error = typeChecker(propValue, key, componentName, location);
        if (error instanceof Error) {
          return error;
        }
      }
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createUnionTypeChecker(arrayOfTypeCheckers) {
  function validate(props, propName, componentName, location) {
    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (checker(props, propName, componentName, location) == null) {
        return null;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    return new Error(
      ("Invalid " + locationName + " `" + propName + "` supplied to ") +
      ("`" + componentName + "`.")
    );
  }
  return createChainableTypeChecker(validate);
}

function createNodeChecker() {
  function validate(props, propName, componentName, location) {
    if (!isNode(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected a ReactNode.")
      );
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createShapeTypeChecker(shapeTypes) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type `" + propType + "` ") +
        ("supplied to `" + componentName + "`, expected `object`.")
      );
    }
    for (var key in shapeTypes) {
      var checker = shapeTypes[key];
      if (!checker) {
        continue;
      }
      var error = checker(propValue, key, componentName, location);
      if (error) {
        return error;
      }
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function isNode(propValue) {
  switch (typeof propValue) {
    case 'number':
    case 'string':
    case 'undefined':
      return true;
    case 'boolean':
      return !propValue;
    case 'object':
      if (Array.isArray(propValue)) {
        return propValue.every(isNode);
      }
      if (propValue === null || ReactElement.isValidElement(propValue)) {
        return true;
      }
      propValue = ReactFragment.extractIfFragment(propValue);
      for (var k in propValue) {
        if (!isNode(propValue[k])) {
          return false;
        }
      }
      return true;
    default:
      return false;
  }
}

// Equivalent of `typeof` but with special handling for array and regexp.
function getPropType(propValue) {
  var propType = typeof propValue;
  if (Array.isArray(propValue)) {
    return 'array';
  }
  if (propValue instanceof RegExp) {
    // Old webkits (at least until Android 4.0) return 'function' rather than
    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
    // passes PropTypes.object.
    return 'object';
  }
  return propType;
}

// This handles more types than `getPropType`. Only used for error messages.
// See `createPrimitiveTypeChecker`.
function getPreciseType(propValue) {
  var propType = getPropType(propValue);
  if (propType === 'object') {
    if (propValue instanceof Date) {
      return 'date';
    } else if (propValue instanceof RegExp) {
      return 'regexp';
    }
  }
  return propType;
}

module.exports = ReactPropTypes;

},{"./ReactElement":216,"./ReactFragment":222,"./ReactPropTypeLocationNames":237,"./emptyFunction":283}],240:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPutListenerQueue
 */

'use strict';

var PooledClass = require("./PooledClass");
var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");

var assign = require("./Object.assign");

function ReactPutListenerQueue() {
  this.listenersToPut = [];
}

assign(ReactPutListenerQueue.prototype, {
  enqueuePutListener: function(rootNodeID, propKey, propValue) {
    this.listenersToPut.push({
      rootNodeID: rootNodeID,
      propKey: propKey,
      propValue: propValue
    });
  },

  putListeners: function() {
    for (var i = 0; i < this.listenersToPut.length; i++) {
      var listenerToPut = this.listenersToPut[i];
      ReactBrowserEventEmitter.putListener(
        listenerToPut.rootNodeID,
        listenerToPut.propKey,
        listenerToPut.propValue
      );
    }
  },

  reset: function() {
    this.listenersToPut.length = 0;
  },

  destructor: function() {
    this.reset();
  }
});

PooledClass.addPoolingTo(ReactPutListenerQueue);

module.exports = ReactPutListenerQueue;

},{"./Object.assign":182,"./PooledClass":183,"./ReactBrowserEventEmitter":186}],241:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactReconcileTransaction
 * @typechecks static-only
 */

'use strict';

var CallbackQueue = require("./CallbackQueue");
var PooledClass = require("./PooledClass");
var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");
var ReactInputSelection = require("./ReactInputSelection");
var ReactPutListenerQueue = require("./ReactPutListenerQueue");
var Transaction = require("./Transaction");

var assign = require("./Object.assign");

/**
 * Ensures that, when possible, the selection range (currently selected text
 * input) is not disturbed by performing the transaction.
 */
var SELECTION_RESTORATION = {
  /**
   * @return {Selection} Selection information.
   */
  initialize: ReactInputSelection.getSelectionInformation,
  /**
   * @param {Selection} sel Selection information returned from `initialize`.
   */
  close: ReactInputSelection.restoreSelection
};

/**
 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
 * high level DOM manipulations (like temporarily removing a text input from the
 * DOM).
 */
var EVENT_SUPPRESSION = {
  /**
   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
   * the reconciliation.
   */
  initialize: function() {
    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
    ReactBrowserEventEmitter.setEnabled(false);
    return currentlyEnabled;
  },

  /**
   * @param {boolean} previouslyEnabled Enabled status of
   *   `ReactBrowserEventEmitter` before the reconciliation occured. `close`
   *   restores the previous value.
   */
  close: function(previouslyEnabled) {
    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
  }
};

/**
 * Provides a queue for collecting `componentDidMount` and
 * `componentDidUpdate` callbacks during the the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function() {
    this.reactMountReady.reset();
  },

  /**
   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
   */
  close: function() {
    this.reactMountReady.notifyAll();
  }
};

var PUT_LISTENER_QUEUEING = {
  initialize: function() {
    this.putListenerQueue.reset();
  },

  close: function() {
    this.putListenerQueue.putListeners();
  }
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [
  PUT_LISTENER_QUEUEING,
  SELECTION_RESTORATION,
  EVENT_SUPPRESSION,
  ON_DOM_READY_QUEUEING
];

/**
 * Currently:
 * - The order that these are listed in the transaction is critical:
 * - Suppresses events.
 * - Restores selection range.
 *
 * Future:
 * - Restore document/overflow scroll positions that were unintentionally
 *   modified via DOM insertions above the top viewport boundary.
 * - Implement/integrate with customized constraint based layout system and keep
 *   track of which dimensions must be remeasured.
 *
 * @class ReactReconcileTransaction
 */
function ReactReconcileTransaction() {
  this.reinitializeTransaction();
  // Only server-side rendering really needs this option (see
  // `ReactServerRendering`), but server-side uses
  // `ReactServerRenderingTransaction` instead. This option is here so that it's
  // accessible and defaults to false when `ReactDOMComponent` and
  // `ReactTextComponent` checks it in `mountComponent`.`
  this.renderToStaticMarkup = false;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.putListenerQueue = ReactPutListenerQueue.getPooled();
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array<object>} List of operation wrap proceedures.
   *   TODO: convert to array<TransactionWrapper>
   */
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function() {
    return this.reactMountReady;
  },

  getPutListenerQueue: function() {
    return this.putListenerQueue;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be resused.
   */
  destructor: function() {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;

    ReactPutListenerQueue.release(this.putListenerQueue);
    this.putListenerQueue = null;
  }
};


assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

PooledClass.addPoolingTo(ReactReconcileTransaction);

module.exports = ReactReconcileTransaction;

},{"./CallbackQueue":160,"./Object.assign":182,"./PooledClass":183,"./ReactBrowserEventEmitter":186,"./ReactInputSelection":224,"./ReactPutListenerQueue":240,"./Transaction":270}],242:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactReconciler
 */

'use strict';

var ReactRef = require("./ReactRef");
var ReactElementValidator = require("./ReactElementValidator");

/**
 * Helper to call ReactRef.attachRefs with this composite component, split out
 * to avoid allocations in the transaction mount-ready queue.
 */
function attachRefs() {
  ReactRef.attachRefs(this, this._currentElement);
}

var ReactReconciler = {

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {ReactComponent} internalInstance
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: function(internalInstance, rootID, transaction, context) {
    var markup = internalInstance.mountComponent(rootID, transaction, context);
    if ("production" !== process.env.NODE_ENV) {
      ReactElementValidator.checkAndWarnForMutatedProps(
        internalInstance._currentElement
      );
    }
    transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
    return markup;
  },

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function(internalInstance) {
    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
    internalInstance.unmountComponent();
  },

  /**
   * Update a component using a new element.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactElement} nextElement
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   * @internal
   */
  receiveComponent: function(
    internalInstance, nextElement, transaction, context
  ) {
    var prevElement = internalInstance._currentElement;

    if (nextElement === prevElement && nextElement._owner != null) {
      // Since elements are immutable after the owner is rendered,
      // we can do a cheap identity compare here to determine if this is a
      // superfluous reconcile. It's possible for state to be mutable but such
      // change should trigger an update of the owner which would recreate
      // the element. We explicitly check for the existence of an owner since
      // it's possible for an element created outside a composite to be
      // deeply mutated and reused.
      return;
    }

    if ("production" !== process.env.NODE_ENV) {
      ReactElementValidator.checkAndWarnForMutatedProps(nextElement);
    }

    var refsChanged = ReactRef.shouldUpdateRefs(
      prevElement,
      nextElement
    );

    if (refsChanged) {
      ReactRef.detachRefs(internalInstance, prevElement);
    }

    internalInstance.receiveComponent(nextElement, transaction, context);

    if (refsChanged) {
      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
    }
  },

  /**
   * Flush any dirty changes in a component.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function(
    internalInstance,
    transaction
  ) {
    internalInstance.performUpdateIfNecessary(transaction);
  }

};

module.exports = ReactReconciler;

}).call(this,require('_process'))
},{"./ReactElementValidator":217,"./ReactRef":243,"_process":2}],243:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactRef
 */

'use strict';

var ReactOwner = require("./ReactOwner");

var ReactRef = {};

function attachRef(ref, component, owner) {
  if (typeof ref === 'function') {
    ref(component.getPublicInstance());
  } else {
    // Legacy ref
    ReactOwner.addComponentAsRefTo(component, ref, owner);
  }
}

function detachRef(ref, component, owner) {
  if (typeof ref === 'function') {
    ref(null);
  } else {
    // Legacy ref
    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
  }
}

ReactRef.attachRefs = function(instance, element) {
  var ref = element.ref;
  if (ref != null) {
    attachRef(ref, instance, element._owner);
  }
};

ReactRef.shouldUpdateRefs = function(prevElement, nextElement) {
  // If either the owner or a `ref` has changed, make sure the newest owner
  // has stored a reference to `this`, and the previous owner (if different)
  // has forgotten the reference to `this`. We use the element instead
  // of the public this.props because the post processing cannot determine
  // a ref. The ref conceptually lives on the element.

  // TODO: Should this even be possible? The owner cannot change because
  // it's forbidden by shouldUpdateReactComponent. The ref can change
  // if you swap the keys of but not the refs. Reconsider where this check
  // is made. It probably belongs where the key checking and
  // instantiateReactComponent is done.

  return (
    nextElement._owner !== prevElement._owner ||
    nextElement.ref !== prevElement.ref
  );
};

ReactRef.detachRefs = function(instance, element) {
  var ref = element.ref;
  if (ref != null) {
    detachRef(ref, instance, element._owner);
  }
};

module.exports = ReactRef;

},{"./ReactOwner":234}],244:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactRootIndex
 * @typechecks
 */

'use strict';

var ReactRootIndexInjection = {
  /**
   * @param {function} _createReactRootIndex
   */
  injectCreateReactRootIndex: function(_createReactRootIndex) {
    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
  }
};

var ReactRootIndex = {
  createReactRootIndex: null,
  injection: ReactRootIndexInjection
};

module.exports = ReactRootIndex;

},{}],245:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks static-only
 * @providesModule ReactServerRendering
 */
'use strict';

var ReactElement = require("./ReactElement");
var ReactInstanceHandles = require("./ReactInstanceHandles");
var ReactMarkupChecksum = require("./ReactMarkupChecksum");
var ReactServerRenderingTransaction =
  require("./ReactServerRenderingTransaction");

var emptyObject = require("./emptyObject");
var instantiateReactComponent = require("./instantiateReactComponent");
var invariant = require("./invariant");

/**
 * @param {ReactElement} element
 * @return {string} the HTML markup
 */
function renderToString(element) {
  ("production" !== process.env.NODE_ENV ? invariant(
    ReactElement.isValidElement(element),
    'renderToString(): You must pass a valid ReactElement.'
  ) : invariant(ReactElement.isValidElement(element)));

  var transaction;
  try {
    var id = ReactInstanceHandles.createReactRootID();
    transaction = ReactServerRenderingTransaction.getPooled(false);

    return transaction.perform(function() {
      var componentInstance = instantiateReactComponent(element, null);
      var markup =
        componentInstance.mountComponent(id, transaction, emptyObject);
      return ReactMarkupChecksum.addChecksumToMarkup(markup);
    }, null);
  } finally {
    ReactServerRenderingTransaction.release(transaction);
  }
}

/**
 * @param {ReactElement} element
 * @return {string} the HTML markup, without the extra React ID and checksum
 * (for generating static pages)
 */
function renderToStaticMarkup(element) {
  ("production" !== process.env.NODE_ENV ? invariant(
    ReactElement.isValidElement(element),
    'renderToStaticMarkup(): You must pass a valid ReactElement.'
  ) : invariant(ReactElement.isValidElement(element)));

  var transaction;
  try {
    var id = ReactInstanceHandles.createReactRootID();
    transaction = ReactServerRenderingTransaction.getPooled(true);

    return transaction.perform(function() {
      var componentInstance = instantiateReactComponent(element, null);
      return componentInstance.mountComponent(id, transaction, emptyObject);
    }, null);
  } finally {
    ReactServerRenderingTransaction.release(transaction);
  }
}

module.exports = {
  renderToString: renderToString,
  renderToStaticMarkup: renderToStaticMarkup
};

}).call(this,require('_process'))
},{"./ReactElement":216,"./ReactInstanceHandles":225,"./ReactMarkupChecksum":229,"./ReactServerRenderingTransaction":246,"./emptyObject":284,"./instantiateReactComponent":303,"./invariant":304,"_process":2}],246:[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactServerRenderingTransaction
 * @typechecks
 */

'use strict';

var PooledClass = require("./PooledClass");
var CallbackQueue = require("./CallbackQueue");
var ReactPutListenerQueue = require("./ReactPutListenerQueue");
var Transaction = require("./Transaction");

var assign = require("./Object.assign");
var emptyFunction = require("./emptyFunction");

/**
 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
 * during the performing of the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function() {
    this.reactMountReady.reset();
  },

  close: emptyFunction
};

var PUT_LISTENER_QUEUEING = {
  initialize: function() {
    this.putListenerQueue.reset();
  },

  close: emptyFunction
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [
  PUT_LISTENER_QUEUEING,
  ON_DOM_READY_QUEUEING
];

/**
 * @class ReactServerRenderingTransaction
 * @param {boolean} renderToStaticMarkup
 */
function ReactServerRenderingTransaction(renderToStaticMarkup) {
  this.reinitializeTransaction();
  this.renderToStaticMarkup = renderToStaticMarkup;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.putListenerQueue = ReactPutListenerQueue.getPooled();
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array} Empty list of operation wrap proceedures.
   */
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function() {
    return this.reactMountReady;
  },

  getPutListenerQueue: function() {
    return this.putListenerQueue;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be resused.
   */
  destructor: function() {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;

    ReactPutListenerQueue.release(this.putListenerQueue);
    this.putListenerQueue = null;
  }
};


assign(
  ReactServerRenderingTransaction.prototype,
  Transaction.Mixin,
  Mixin
);

PooledClass.addPoolingTo(ReactServerRenderingTransaction);

module.exports = ReactServerRenderingTransaction;

},{"./CallbackQueue":160,"./Object.assign":182,"./PooledClass":183,"./ReactPutListenerQueue":240,"./Transaction":270,"./emptyFunction":283}],247:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactStateSetters
 */

'use strict';

var ReactStateSetters = {
  /**
   * Returns a function that calls the provided function, and uses the result
   * of that to set the component's state.
   *
   * @param {ReactCompositeComponent} component
   * @param {function} funcReturningState Returned callback uses this to
   *                                      determine how to update state.
   * @return {function} callback that when invoked uses funcReturningState to
   *                    determined the object literal to setState.
   */
  createStateSetter: function(component, funcReturningState) {
    return function(a, b, c, d, e, f) {
      var partialState = funcReturningState.call(component, a, b, c, d, e, f);
      if (partialState) {
        component.setState(partialState);
      }
    };
  },

  /**
   * Returns a single-argument callback that can be used to update a single
   * key in the component's state.
   *
   * Note: this is memoized function, which makes it inexpensive to call.
   *
   * @param {ReactCompositeComponent} component
   * @param {string} key The key in the state that you should update.
   * @return {function} callback of 1 argument which calls setState() with
   *                    the provided keyName and callback argument.
   */
  createStateKeySetter: function(component, key) {
    // Memoize the setters.
    var cache = component.__keySetters || (component.__keySetters = {});
    return cache[key] || (cache[key] = createStateKeySetter(component, key));
  }
};

function createStateKeySetter(component, key) {
  // Partial state is allocated outside of the function closure so it can be
  // reused with every call, avoiding memory allocation when this function
  // is called.
  var partialState = {};
  return function stateKeySetter(value) {
    partialState[key] = value;
    component.setState(partialState);
  };
}

ReactStateSetters.Mixin = {
  /**
   * Returns a function that calls the provided function, and uses the result
   * of that to set the component's state.
   *
   * For example, these statements are equivalent:
   *
   *   this.setState({x: 1});
   *   this.createStateSetter(function(xValue) {
   *     return {x: xValue};
   *   })(1);
   *
   * @param {function} funcReturningState Returned callback uses this to
   *                                      determine how to update state.
   * @return {function} callback that when invoked uses funcReturningState to
   *                    determined the object literal to setState.
   */
  createStateSetter: function(funcReturningState) {
    return ReactStateSetters.createStateSetter(this, funcReturningState);
  },

  /**
   * Returns a single-argument callback that can be used to update a single
   * key in the component's state.
   *
   * For example, these statements are equivalent:
   *
   *   this.setState({x: 1});
   *   this.createStateKeySetter('x')(1);
   *
   * Note: this is memoized function, which makes it inexpensive to call.
   *
   * @param {string} key The key in the state that you should update.
   * @return {function} callback of 1 argument which calls setState() with
   *                    the provided keyName and callback argument.
   */
  createStateKeySetter: function(key) {
    return ReactStateSetters.createStateKeySetter(this, key);
  }
};

module.exports = ReactStateSetters;

},{}],248:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactTestUtils
 */

'use strict';

var EventConstants = require("./EventConstants");
var EventPluginHub = require("./EventPluginHub");
var EventPropagators = require("./EventPropagators");
var React = require("./React");
var ReactElement = require("./ReactElement");
var ReactEmptyComponent = require("./ReactEmptyComponent");
var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");
var ReactCompositeComponent = require("./ReactCompositeComponent");
var ReactInstanceHandles = require("./ReactInstanceHandles");
var ReactInstanceMap = require("./ReactInstanceMap");
var ReactMount = require("./ReactMount");
var ReactUpdates = require("./ReactUpdates");
var SyntheticEvent = require("./SyntheticEvent");

var assign = require("./Object.assign");
var emptyObject = require("./emptyObject");

var topLevelTypes = EventConstants.topLevelTypes;

function Event(suffix) {}

/**
 * @class ReactTestUtils
 */

/**
 * Todo: Support the entire DOM.scry query syntax. For now, these simple
 * utilities will suffice for testing purposes.
 * @lends ReactTestUtils
 */
var ReactTestUtils = {
  renderIntoDocument: function(instance) {
    var div = document.createElement('div');
    // None of our tests actually require attaching the container to the
    // DOM, and doing so creates a mess that we rely on test isolation to
    // clean up, so we're going to stop honoring the name of this method
    // (and probably rename it eventually) if no problems arise.
    // document.documentElement.appendChild(div);
    return React.render(instance, div);
  },

  isElement: function(element) {
    return ReactElement.isValidElement(element);
  },

  isElementOfType: function(inst, convenienceConstructor) {
    return (
      ReactElement.isValidElement(inst) &&
      inst.type === convenienceConstructor
    );
  },

  isDOMComponent: function(inst) {
    // TODO: Fix this heuristic. It's just here because composites can currently
    // pretend to be DOM components.
    return !!(inst && inst.tagName && inst.getDOMNode);
  },

  isDOMComponentElement: function(inst) {
    return !!(inst &&
              ReactElement.isValidElement(inst) &&
              !!inst.tagName);
  },

  isCompositeComponent: function(inst) {
    return typeof inst.render === 'function' &&
           typeof inst.setState === 'function';
  },

  isCompositeComponentWithType: function(inst, type) {
    return !!(ReactTestUtils.isCompositeComponent(inst) &&
             (inst.constructor === type));
  },

  isCompositeComponentElement: function(inst) {
    if (!ReactElement.isValidElement(inst)) {
      return false;
    }
    // We check the prototype of the type that will get mounted, not the
    // instance itself. This is a future proof way of duck typing.
    var prototype = inst.type.prototype;
    return (
      typeof prototype.render === 'function' &&
      typeof prototype.setState === 'function'
    );
  },

  isCompositeComponentElementWithType: function(inst, type) {
    return !!(ReactTestUtils.isCompositeComponentElement(inst) &&
             (inst.constructor === type));
  },

  getRenderedChildOfCompositeComponent: function(inst) {
    if (!ReactTestUtils.isCompositeComponent(inst)) {
      return null;
    }
    var internalInstance = ReactInstanceMap.get(inst);
    return internalInstance._renderedComponent.getPublicInstance();
  },

  findAllInRenderedTree: function(inst, test) {
    if (!inst) {
      return [];
    }
    var ret = test(inst) ? [inst] : [];
    if (ReactTestUtils.isDOMComponent(inst)) {
      var internalInstance = ReactInstanceMap.get(inst);
      var renderedChildren = internalInstance
        ._renderedComponent
        ._renderedChildren;
      var key;
      for (key in renderedChildren) {
        if (!renderedChildren.hasOwnProperty(key)) {
          continue;
        }
        if (!renderedChildren[key].getPublicInstance) {
          continue;
        }
        ret = ret.concat(
          ReactTestUtils.findAllInRenderedTree(
            renderedChildren[key].getPublicInstance(),
            test
          )
        );
      }
    } else if (ReactTestUtils.isCompositeComponent(inst)) {
      ret = ret.concat(
        ReactTestUtils.findAllInRenderedTree(
          ReactTestUtils.getRenderedChildOfCompositeComponent(inst),
          test
        )
      );
    }
    return ret;
  },

  /**
   * Finds all instance of components in the rendered tree that are DOM
   * components with the class name matching `className`.
   * @return an array of all the matches.
   */
  scryRenderedDOMComponentsWithClass: function(root, className) {
    return ReactTestUtils.findAllInRenderedTree(root, function(inst) {
      var instClassName = inst.props.className;
      return ReactTestUtils.isDOMComponent(inst) && (
        (instClassName && (' ' + instClassName + ' ').indexOf(' ' + className + ' ') !== -1)
      );
    });
  },

  /**
   * Like scryRenderedDOMComponentsWithClass but expects there to be one result,
   * and returns that one result, or throws exception if there is any other
   * number of matches besides one.
   * @return {!ReactDOMComponent} The one match.
   */
  findRenderedDOMComponentWithClass: function(root, className) {
    var all =
      ReactTestUtils.scryRenderedDOMComponentsWithClass(root, className);
    if (all.length !== 1) {
      throw new Error('Did not find exactly one match ' +
        '(found: ' + all.length + ') for class:' + className
      );
    }
    return all[0];
  },


  /**
   * Finds all instance of components in the rendered tree that are DOM
   * components with the tag name matching `tagName`.
   * @return an array of all the matches.
   */
  scryRenderedDOMComponentsWithTag: function(root, tagName) {
    return ReactTestUtils.findAllInRenderedTree(root, function(inst) {
      return ReactTestUtils.isDOMComponent(inst) &&
            inst.tagName === tagName.toUpperCase();
    });
  },

  /**
   * Like scryRenderedDOMComponentsWithTag but expects there to be one result,
   * and returns that one result, or throws exception if there is any other
   * number of matches besides one.
   * @return {!ReactDOMComponent} The one match.
   */
  findRenderedDOMComponentWithTag: function(root, tagName) {
    var all = ReactTestUtils.scryRenderedDOMComponentsWithTag(root, tagName);
    if (all.length !== 1) {
      throw new Error('Did not find exactly one match for tag:' + tagName);
    }
    return all[0];
  },


  /**
   * Finds all instances of components with type equal to `componentType`.
   * @return an array of all the matches.
   */
  scryRenderedComponentsWithType: function(root, componentType) {
    return ReactTestUtils.findAllInRenderedTree(root, function(inst) {
      return ReactTestUtils.isCompositeComponentWithType(
        inst,
        componentType
      );
    });
  },

  /**
   * Same as `scryRenderedComponentsWithType` but expects there to be one result
   * and returns that one result, or throws exception if there is any other
   * number of matches besides one.
   * @return {!ReactComponent} The one match.
   */
  findRenderedComponentWithType: function(root, componentType) {
    var all = ReactTestUtils.scryRenderedComponentsWithType(
      root,
      componentType
    );
    if (all.length !== 1) {
      throw new Error(
        'Did not find exactly one match for componentType:' + componentType
      );
    }
    return all[0];
  },

  /**
   * Pass a mocked component module to this method to augment it with
   * useful methods that allow it to be used as a dummy React component.
   * Instead of rendering as usual, the component will become a simple
   * <div> containing any provided children.
   *
   * @param {object} module the mock function object exported from a
   *                        module that defines the component to be mocked
   * @param {?string} mockTagName optional dummy root tag name to return
   *                              from render method (overrides
   *                              module.mockTagName if provided)
   * @return {object} the ReactTestUtils object (for chaining)
   */
  mockComponent: function(module, mockTagName) {
    mockTagName = mockTagName || module.mockTagName || "div";

    module.prototype.render.mockImplementation(function() {
      return React.createElement(
        mockTagName,
        null,
        this.props.children
      );
    });

    return this;
  },

  /**
   * Simulates a top level event being dispatched from a raw event that occured
   * on an `Element` node.
   * @param topLevelType {Object} A type from `EventConstants.topLevelTypes`
   * @param {!Element} node The dom to simulate an event occurring on.
   * @param {?Event} fakeNativeEvent Fake native event to use in SyntheticEvent.
   */
  simulateNativeEventOnNode: function(topLevelType, node, fakeNativeEvent) {
    fakeNativeEvent.target = node;
    ReactBrowserEventEmitter.ReactEventListener.dispatchEvent(
      topLevelType,
      fakeNativeEvent
    );
  },

  /**
   * Simulates a top level event being dispatched from a raw event that occured
   * on the `ReactDOMComponent` `comp`.
   * @param topLevelType {Object} A type from `EventConstants.topLevelTypes`.
   * @param comp {!ReactDOMComponent}
   * @param {?Event} fakeNativeEvent Fake native event to use in SyntheticEvent.
   */
  simulateNativeEventOnDOMComponent: function(
      topLevelType,
      comp,
      fakeNativeEvent) {
    ReactTestUtils.simulateNativeEventOnNode(
      topLevelType,
      comp.getDOMNode(),
      fakeNativeEvent
    );
  },

  nativeTouchData: function(x, y) {
    return {
      touches: [
        {pageX: x, pageY: y}
      ]
    };
  },

  createRenderer: function() {
    return new ReactShallowRenderer();
  },

  Simulate: null,
  SimulateNative: {}
};

/**
 * @class ReactShallowRenderer
 */
var ReactShallowRenderer = function() {
  this._instance = null;
};

ReactShallowRenderer.prototype.getRenderOutput = function() {
  return (
    (this._instance && this._instance._renderedComponent &&
     this._instance._renderedComponent._renderedOutput)
    || null
  );
};

var NoopInternalComponent = function(element) {
  this._renderedOutput = element;
  this._currentElement = element === null || element === false ?
    ReactEmptyComponent.emptyElement :
    element;
};

NoopInternalComponent.prototype = {

  mountComponent: function() {
  },

  receiveComponent: function(element) {
    this._renderedOutput = element;
    this._currentElement = element === null || element === false ?
      ReactEmptyComponent.emptyElement :
      element;
  },

  unmountComponent: function() {
  }

};

var ShallowComponentWrapper = function() { };
assign(
  ShallowComponentWrapper.prototype,
  ReactCompositeComponent.Mixin, {
    _instantiateReactComponent: function(element) {
      return new NoopInternalComponent(element);
    },
    _replaceNodeWithMarkupByID: function() {},
    _renderValidatedComponent:
      ReactCompositeComponent.Mixin.
        _renderValidatedComponentWithoutOwnerOrContext
  }
);

ReactShallowRenderer.prototype.render = function(element, context) {
  if (!context) {
    context = emptyObject;
  }
  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();
  this._render(element, transaction, context);
  ReactUpdates.ReactReconcileTransaction.release(transaction);
};

ReactShallowRenderer.prototype.unmount = function() {
  if (this._instance) {
    this._instance.unmountComponent();
  }
};

ReactShallowRenderer.prototype._render = function(element, transaction, context) {
  if (!this._instance) {
    var rootID = ReactInstanceHandles.createReactRootID();
    var instance = new ShallowComponentWrapper(element.type);
    instance.construct(element);

    instance.mountComponent(rootID, transaction, context);

    this._instance = instance;
  } else {
    this._instance.receiveComponent(element, transaction, context);
  }
};

/**
 * Exports:
 *
 * - `ReactTestUtils.Simulate.click(Element/ReactDOMComponent)`
 * - `ReactTestUtils.Simulate.mouseMove(Element/ReactDOMComponent)`
 * - `ReactTestUtils.Simulate.change(Element/ReactDOMComponent)`
 * - ... (All keys from event plugin `eventTypes` objects)
 */
function makeSimulator(eventType) {
  return function(domComponentOrNode, eventData) {
    var node;
    if (ReactTestUtils.isDOMComponent(domComponentOrNode)) {
      node = domComponentOrNode.getDOMNode();
    } else if (domComponentOrNode.tagName) {
      node = domComponentOrNode;
    }

    var fakeNativeEvent = new Event();
    fakeNativeEvent.target = node;
    // We don't use SyntheticEvent.getPooled in order to not have to worry about
    // properly destroying any properties assigned from `eventData` upon release
    var event = new SyntheticEvent(
      ReactBrowserEventEmitter.eventNameDispatchConfigs[eventType],
      ReactMount.getID(node),
      fakeNativeEvent
    );
    assign(event, eventData);
    EventPropagators.accumulateTwoPhaseDispatches(event);

    ReactUpdates.batchedUpdates(function() {
      EventPluginHub.enqueueEvents(event);
      EventPluginHub.processEventQueue();
    });
  };
}

function buildSimulators() {
  ReactTestUtils.Simulate = {};

  var eventType;
  for (eventType in ReactBrowserEventEmitter.eventNameDispatchConfigs) {
    /**
     * @param {!Element || ReactDOMComponent} domComponentOrNode
     * @param {?object} eventData Fake event data to use in SyntheticEvent.
     */
    ReactTestUtils.Simulate[eventType] = makeSimulator(eventType);
  }
}

// Rebuild ReactTestUtils.Simulate whenever event plugins are injected
var oldInjectEventPluginOrder = EventPluginHub.injection.injectEventPluginOrder;
EventPluginHub.injection.injectEventPluginOrder = function() {
  oldInjectEventPluginOrder.apply(this, arguments);
  buildSimulators();
};
var oldInjectEventPlugins = EventPluginHub.injection.injectEventPluginsByName;
EventPluginHub.injection.injectEventPluginsByName = function() {
  oldInjectEventPlugins.apply(this, arguments);
  buildSimulators();
};

buildSimulators();

/**
 * Exports:
 *
 * - `ReactTestUtils.SimulateNative.click(Element/ReactDOMComponent)`
 * - `ReactTestUtils.SimulateNative.mouseMove(Element/ReactDOMComponent)`
 * - `ReactTestUtils.SimulateNative.mouseIn/ReactDOMComponent)`
 * - `ReactTestUtils.SimulateNative.mouseOut(Element/ReactDOMComponent)`
 * - ... (All keys from `EventConstants.topLevelTypes`)
 *
 * Note: Top level event types are a subset of the entire set of handler types
 * (which include a broader set of "synthetic" events). For example, onDragDone
 * is a synthetic event. Except when testing an event plugin or React's event
 * handling code specifically, you probably want to use ReactTestUtils.Simulate
 * to dispatch synthetic events.
 */

function makeNativeSimulator(eventType) {
  return function(domComponentOrNode, nativeEventData) {
    var fakeNativeEvent = new Event(eventType);
    assign(fakeNativeEvent, nativeEventData);
    if (ReactTestUtils.isDOMComponent(domComponentOrNode)) {
      ReactTestUtils.simulateNativeEventOnDOMComponent(
        eventType,
        domComponentOrNode,
        fakeNativeEvent
      );
    } else if (!!domComponentOrNode.tagName) {
      // Will allow on actual dom nodes.
      ReactTestUtils.simulateNativeEventOnNode(
        eventType,
        domComponentOrNode,
        fakeNativeEvent
      );
    }
  };
}

var eventType;
for (eventType in topLevelTypes) {
  // Event type is stored as 'topClick' - we transform that to 'click'
  var convenienceName = eventType.indexOf('top') === 0 ?
    eventType.charAt(3).toLowerCase() + eventType.substr(4) : eventType;
  /**
   * @param {!Element || ReactDOMComponent} domComponentOrNode
   * @param {?Event} nativeEventData Fake native event to use in SyntheticEvent.
   */
  ReactTestUtils.SimulateNative[convenienceName] =
    makeNativeSimulator(eventType);
}

module.exports = ReactTestUtils;

},{"./EventConstants":169,"./EventPluginHub":171,"./EventPropagators":174,"./Object.assign":182,"./React":184,"./ReactBrowserEventEmitter":186,"./ReactCompositeComponent":196,"./ReactElement":216,"./ReactEmptyComponent":218,"./ReactInstanceHandles":225,"./ReactInstanceMap":226,"./ReactMount":230,"./ReactUpdates":253,"./SyntheticEvent":262,"./emptyObject":284}],249:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks static-only
 * @providesModule ReactTransitionChildMapping
 */

'use strict';

var ReactChildren = require("./ReactChildren");
var ReactFragment = require("./ReactFragment");

var ReactTransitionChildMapping = {
  /**
   * Given `this.props.children`, return an object mapping key to child. Just
   * simple syntactic sugar around ReactChildren.map().
   *
   * @param {*} children `this.props.children`
   * @return {object} Mapping of key to child
   */
  getChildMapping: function(children) {
    if (!children) {
      return children;
    }
    return ReactFragment.extract(ReactChildren.map(children, function(child) {
      return child;
    }));
  },

  /**
   * When you're adding or removing children some may be added or removed in the
   * same render pass. We want to show *both* since we want to simultaneously
   * animate elements in and out. This function takes a previous set of keys
   * and a new set of keys and merges them with its best guess of the correct
   * ordering. In the future we may expose some of the utilities in
   * ReactMultiChild to make this easy, but for now React itself does not
   * directly have this concept of the union of prevChildren and nextChildren
   * so we implement it here.
   *
   * @param {object} prev prev children as returned from
   * `ReactTransitionChildMapping.getChildMapping()`.
   * @param {object} next next children as returned from
   * `ReactTransitionChildMapping.getChildMapping()`.
   * @return {object} a key set that contains all keys in `prev` and all keys
   * in `next` in a reasonable order.
   */
  mergeChildMappings: function(prev, next) {
    prev = prev || {};
    next = next || {};

    function getValueForKey(key) {
      if (next.hasOwnProperty(key)) {
        return next[key];
      } else {
        return prev[key];
      }
    }

    // For each key of `next`, the list of keys to insert before that key in
    // the combined list
    var nextKeysPending = {};

    var pendingKeys = [];
    for (var prevKey in prev) {
      if (next.hasOwnProperty(prevKey)) {
        if (pendingKeys.length) {
          nextKeysPending[prevKey] = pendingKeys;
          pendingKeys = [];
        }
      } else {
        pendingKeys.push(prevKey);
      }
    }

    var i;
    var childMapping = {};
    for (var nextKey in next) {
      if (nextKeysPending.hasOwnProperty(nextKey)) {
        for (i = 0; i < nextKeysPending[nextKey].length; i++) {
          var pendingNextKey = nextKeysPending[nextKey][i];
          childMapping[nextKeysPending[nextKey][i]] = getValueForKey(
            pendingNextKey
          );
        }
      }
      childMapping[nextKey] = getValueForKey(nextKey);
    }

    // Finally, add the keys which didn't appear before any key in `next`
    for (i = 0; i < pendingKeys.length; i++) {
      childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
    }

    return childMapping;
  }
};

module.exports = ReactTransitionChildMapping;

},{"./ReactChildren":190,"./ReactFragment":222}],250:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactTransitionEvents
 */

'use strict';

var ExecutionEnvironment = require("./ExecutionEnvironment");

/**
 * EVENT_NAME_MAP is used to determine which event fired when a
 * transition/animation ends, based on the style property used to
 * define that event.
 */
var EVENT_NAME_MAP = {
  transitionend: {
    'transition': 'transitionend',
    'WebkitTransition': 'webkitTransitionEnd',
    'MozTransition': 'mozTransitionEnd',
    'OTransition': 'oTransitionEnd',
    'msTransition': 'MSTransitionEnd'
  },

  animationend: {
    'animation': 'animationend',
    'WebkitAnimation': 'webkitAnimationEnd',
    'MozAnimation': 'mozAnimationEnd',
    'OAnimation': 'oAnimationEnd',
    'msAnimation': 'MSAnimationEnd'
  }
};

var endEvents = [];

function detectEvents() {
  var testEl = document.createElement('div');
  var style = testEl.style;

  // On some platforms, in particular some releases of Android 4.x,
  // the un-prefixed "animation" and "transition" properties are defined on the
  // style object but the events that fire will still be prefixed, so we need
  // to check if the un-prefixed events are useable, and if not remove them
  // from the map
  if (!('AnimationEvent' in window)) {
    delete EVENT_NAME_MAP.animationend.animation;
  }

  if (!('TransitionEvent' in window)) {
    delete EVENT_NAME_MAP.transitionend.transition;
  }

  for (var baseEventName in EVENT_NAME_MAP) {
    var baseEvents = EVENT_NAME_MAP[baseEventName];
    for (var styleName in baseEvents) {
      if (styleName in style) {
        endEvents.push(baseEvents[styleName]);
        break;
      }
    }
  }
}

if (ExecutionEnvironment.canUseDOM) {
  detectEvents();
}

// We use the raw {add|remove}EventListener() call because EventListener
// does not know how to remove event listeners and we really should
// clean up. Also, these events are not triggered in older browsers
// so we should be A-OK here.

function addEventListener(node, eventName, eventListener) {
  node.addEventListener(eventName, eventListener, false);
}

function removeEventListener(node, eventName, eventListener) {
  node.removeEventListener(eventName, eventListener, false);
}

var ReactTransitionEvents = {
  addEndEventListener: function(node, eventListener) {
    if (endEvents.length === 0) {
      // If CSS transitions are not supported, trigger an "end animation"
      // event immediately.
      window.setTimeout(eventListener, 0);
      return;
    }
    endEvents.forEach(function(endEvent) {
      addEventListener(node, endEvent, eventListener);
    });
  },

  removeEndEventListener: function(node, eventListener) {
    if (endEvents.length === 0) {
      return;
    }
    endEvents.forEach(function(endEvent) {
      removeEventListener(node, endEvent, eventListener);
    });
  }
};

module.exports = ReactTransitionEvents;

},{"./ExecutionEnvironment":175}],251:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactTransitionGroup
 */

'use strict';

var React = require("./React");
var ReactTransitionChildMapping = require("./ReactTransitionChildMapping");

var assign = require("./Object.assign");
var cloneWithProps = require("./cloneWithProps");
var emptyFunction = require("./emptyFunction");

var ReactTransitionGroup = React.createClass({
  displayName: 'ReactTransitionGroup',

  propTypes: {
    component: React.PropTypes.any,
    childFactory: React.PropTypes.func
  },

  getDefaultProps: function() {
    return {
      component: 'span',
      childFactory: emptyFunction.thatReturnsArgument
    };
  },

  getInitialState: function() {
    return {
      children: ReactTransitionChildMapping.getChildMapping(this.props.children)
    };
  },

  componentWillMount: function() {
    this.currentlyTransitioningKeys = {};
    this.keysToEnter = [];
    this.keysToLeave = [];
  },

  componentDidMount: function() {
    var initialChildMapping = this.state.children;
    for (var key in initialChildMapping) {
      if (initialChildMapping[key]) {
        this.performAppear(key);
      }
    }
  },

  componentWillReceiveProps: function(nextProps) {
    var nextChildMapping = ReactTransitionChildMapping.getChildMapping(
      nextProps.children
    );
    var prevChildMapping = this.state.children;

    this.setState({
      children: ReactTransitionChildMapping.mergeChildMappings(
        prevChildMapping,
        nextChildMapping
      )
    });

    var key;

    for (key in nextChildMapping) {
      var hasPrev = prevChildMapping && prevChildMapping.hasOwnProperty(key);
      if (nextChildMapping[key] && !hasPrev &&
          !this.currentlyTransitioningKeys[key]) {
        this.keysToEnter.push(key);
      }
    }

    for (key in prevChildMapping) {
      var hasNext = nextChildMapping && nextChildMapping.hasOwnProperty(key);
      if (prevChildMapping[key] && !hasNext &&
          !this.currentlyTransitioningKeys[key]) {
        this.keysToLeave.push(key);
      }
    }

    // If we want to someday check for reordering, we could do it here.
  },

  componentDidUpdate: function() {
    var keysToEnter = this.keysToEnter;
    this.keysToEnter = [];
    keysToEnter.forEach(this.performEnter);

    var keysToLeave = this.keysToLeave;
    this.keysToLeave = [];
    keysToLeave.forEach(this.performLeave);
  },

  performAppear: function(key) {
    this.currentlyTransitioningKeys[key] = true;

    var component = this.refs[key];

    if (component.componentWillAppear) {
      component.componentWillAppear(
        this._handleDoneAppearing.bind(this, key)
      );
    } else {
      this._handleDoneAppearing(key);
    }
  },

  _handleDoneAppearing: function(key) {
    var component = this.refs[key];
    if (component.componentDidAppear) {
      component.componentDidAppear();
    }

    delete this.currentlyTransitioningKeys[key];

    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(
      this.props.children
    );

    if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {
      // This was removed before it had fully appeared. Remove it.
      this.performLeave(key);
    }
  },

  performEnter: function(key) {
    this.currentlyTransitioningKeys[key] = true;

    var component = this.refs[key];

    if (component.componentWillEnter) {
      component.componentWillEnter(
        this._handleDoneEntering.bind(this, key)
      );
    } else {
      this._handleDoneEntering(key);
    }
  },

  _handleDoneEntering: function(key) {
    var component = this.refs[key];
    if (component.componentDidEnter) {
      component.componentDidEnter();
    }

    delete this.currentlyTransitioningKeys[key];

    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(
      this.props.children
    );

    if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {
      // This was removed before it had fully entered. Remove it.
      this.performLeave(key);
    }
  },

  performLeave: function(key) {
    this.currentlyTransitioningKeys[key] = true;

    var component = this.refs[key];
    if (component.componentWillLeave) {
      component.componentWillLeave(this._handleDoneLeaving.bind(this, key));
    } else {
      // Note that this is somewhat dangerous b/c it calls setState()
      // again, effectively mutating the component before all the work
      // is done.
      this._handleDoneLeaving(key);
    }
  },

  _handleDoneLeaving: function(key) {
    var component = this.refs[key];

    if (component.componentDidLeave) {
      component.componentDidLeave();
    }

    delete this.currentlyTransitioningKeys[key];

    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(
      this.props.children
    );

    if (currentChildMapping && currentChildMapping.hasOwnProperty(key)) {
      // This entered again before it fully left. Add it again.
      this.performEnter(key);
    } else {
      var newChildren = assign({}, this.state.children);
      delete newChildren[key];
      this.setState({children: newChildren});
    }
  },

  render: function() {
    // TODO: we could get rid of the need for the wrapper node
    // by cloning a single child
    var childrenToRender = [];
    for (var key in this.state.children) {
      var child = this.state.children[key];
      if (child) {
        // You may need to apply reactive updates to a child as it is leaving.
        // The normal React way to do it won't work since the child will have
        // already been removed. In case you need this behavior you can provide
        // a childFactory function to wrap every child, even the ones that are
        // leaving.
        childrenToRender.push(cloneWithProps(
          this.props.childFactory(child),
          {ref: key, key: key}
        ));
      }
    }
    return React.createElement(
      this.props.component,
      this.props,
      childrenToRender
    );
  }
});

module.exports = ReactTransitionGroup;

},{"./Object.assign":182,"./React":184,"./ReactTransitionChildMapping":249,"./cloneWithProps":276,"./emptyFunction":283}],252:[function(require,module,exports){
(function (process){
/**
 * Copyright 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactUpdateQueue
 */

'use strict';

var ReactLifeCycle = require("./ReactLifeCycle");
var ReactCurrentOwner = require("./ReactCurrentOwner");
var ReactElement = require("./ReactElement");
var ReactInstanceMap = require("./ReactInstanceMap");
var ReactUpdates = require("./ReactUpdates");

var assign = require("./Object.assign");
var invariant = require("./invariant");
var warning = require("./warning");

function enqueueUpdate(internalInstance) {
  if (internalInstance !== ReactLifeCycle.currentlyMountingInstance) {
    // If we're in a componentWillMount handler, don't enqueue a rerender
    // because ReactUpdates assumes we're in a browser context (which is
    // wrong for server rendering) and we're about to do a render anyway.
    // See bug in #1740.
    ReactUpdates.enqueueUpdate(internalInstance);
  }
}

function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
  ("production" !== process.env.NODE_ENV ? invariant(
    ReactCurrentOwner.current == null,
    '%s(...): Cannot update during an existing state transition ' +
    '(such as within `render`). Render methods should be a pure function ' +
    'of props and state.',
    callerName
  ) : invariant(ReactCurrentOwner.current == null));

  var internalInstance = ReactInstanceMap.get(publicInstance);
  if (!internalInstance) {
    if ("production" !== process.env.NODE_ENV) {
      // Only warn when we have a callerName. Otherwise we should be silent.
      // We're probably calling from enqueueCallback. We don't want to warn
      // there because we already warned for the corresponding lifecycle method.
      ("production" !== process.env.NODE_ENV ? warning(
        !callerName,
        '%s(...): Can only update a mounted or mounting component. ' +
        'This usually means you called %s() on an unmounted ' +
        'component. This is a no-op.',
        callerName,
        callerName
      ) : null);
    }
    return null;
  }

  if (internalInstance === ReactLifeCycle.currentlyUnmountingInstance) {
    return null;
  }

  return internalInstance;
}

/**
 * ReactUpdateQueue allows for state updates to be scheduled into a later
 * reconciliation step.
 */
var ReactUpdateQueue = {

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @internal
   */
  enqueueCallback: function(publicInstance, callback) {
    ("production" !== process.env.NODE_ENV ? invariant(
      typeof callback === 'function',
      'enqueueCallback(...): You called `setProps`, `replaceProps`, ' +
      '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +
      'isn\'t callable.'
    ) : invariant(typeof callback === 'function'));
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

    // Previously we would throw an error if we didn't have an internal
    // instance. Since we want to make it a no-op instead, we mirror the same
    // behavior we have in other enqueue* methods.
    // We also need to ignore callbacks in componentWillMount. See
    // enqueueUpdates.
    if (!internalInstance ||
        internalInstance === ReactLifeCycle.currentlyMountingInstance) {
      return null;
    }

    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);
    } else {
      internalInstance._pendingCallbacks = [callback];
    }
    // TODO: The callback here is ignored when setState is called from
    // componentWillMount. Either fix it or disallow doing so completely in
    // favor of getInitialState. Alternatively, we can disallow
    // componentWillMount during server-side rendering.
    enqueueUpdate(internalInstance);
  },

  enqueueCallbackInternal: function(internalInstance, callback) {
    ("production" !== process.env.NODE_ENV ? invariant(
      typeof callback === 'function',
      'enqueueCallback(...): You called `setProps`, `replaceProps`, ' +
      '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +
      'isn\'t callable.'
    ) : invariant(typeof callback === 'function'));
    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);
    } else {
      internalInstance._pendingCallbacks = [callback];
    }
    enqueueUpdate(internalInstance);
  },

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldUpdateComponent`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */
  enqueueForceUpdate: function(publicInstance) {
    var internalInstance = getInternalInstanceReadyForUpdate(
      publicInstance,
      'forceUpdate'
    );

    if (!internalInstance) {
      return;
    }

    internalInstance._pendingForceUpdate = true;

    enqueueUpdate(internalInstance);
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @internal
   */
  enqueueReplaceState: function(publicInstance, completeState) {
    var internalInstance = getInternalInstanceReadyForUpdate(
      publicInstance,
      'replaceState'
    );

    if (!internalInstance) {
      return;
    }

    internalInstance._pendingStateQueue = [completeState];
    internalInstance._pendingReplaceState = true;

    enqueueUpdate(internalInstance);
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @internal
   */
  enqueueSetState: function(publicInstance, partialState) {
    var internalInstance = getInternalInstanceReadyForUpdate(
      publicInstance,
      'setState'
    );

    if (!internalInstance) {
      return;
    }

    var queue =
      internalInstance._pendingStateQueue ||
      (internalInstance._pendingStateQueue = []);
    queue.push(partialState);

    enqueueUpdate(internalInstance);
  },

  /**
   * Sets a subset of the props.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialProps Subset of the next props.
   * @internal
   */
  enqueueSetProps: function(publicInstance, partialProps) {
    var internalInstance = getInternalInstanceReadyForUpdate(
      publicInstance,
      'setProps'
    );

    if (!internalInstance) {
      return;
    }

    ("production" !== process.env.NODE_ENV ? invariant(
      internalInstance._isTopLevel,
      'setProps(...): You called `setProps` on a ' +
      'component with a parent. This is an anti-pattern since props will ' +
      'get reactively updated when rendered. Instead, change the owner\'s ' +
      '`render` method to pass the correct value as props to the component ' +
      'where it is created.'
    ) : invariant(internalInstance._isTopLevel));

    // Merge with the pending element if it exists, otherwise with existing
    // element props.
    var element = internalInstance._pendingElement ||
                  internalInstance._currentElement;
    var props = assign({}, element.props, partialProps);
    internalInstance._pendingElement = ReactElement.cloneAndReplaceProps(
      element,
      props
    );

    enqueueUpdate(internalInstance);
  },

  /**
   * Replaces all of the props.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} props New props.
   * @internal
   */
  enqueueReplaceProps: function(publicInstance, props) {
    var internalInstance = getInternalInstanceReadyForUpdate(
      publicInstance,
      'replaceProps'
    );

    if (!internalInstance) {
      return;
    }

    ("production" !== process.env.NODE_ENV ? invariant(
      internalInstance._isTopLevel,
      'replaceProps(...): You called `replaceProps` on a ' +
      'component with a parent. This is an anti-pattern since props will ' +
      'get reactively updated when rendered. Instead, change the owner\'s ' +
      '`render` method to pass the correct value as props to the component ' +
      'where it is created.'
    ) : invariant(internalInstance._isTopLevel));

    // Merge with the pending element if it exists, otherwise with existing
    // element props.
    var element = internalInstance._pendingElement ||
                  internalInstance._currentElement;
    internalInstance._pendingElement = ReactElement.cloneAndReplaceProps(
      element,
      props
    );

    enqueueUpdate(internalInstance);
  },

  enqueueElementInternal: function(internalInstance, newElement) {
    internalInstance._pendingElement = newElement;
    enqueueUpdate(internalInstance);
  }

};

module.exports = ReactUpdateQueue;

}).call(this,require('_process'))
},{"./Object.assign":182,"./ReactCurrentOwner":198,"./ReactElement":216,"./ReactInstanceMap":226,"./ReactLifeCycle":227,"./ReactUpdates":253,"./invariant":304,"./warning":325,"_process":2}],253:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactUpdates
 */

'use strict';

var CallbackQueue = require("./CallbackQueue");
var PooledClass = require("./PooledClass");
var ReactCurrentOwner = require("./ReactCurrentOwner");
var ReactPerf = require("./ReactPerf");
var ReactReconciler = require("./ReactReconciler");
var Transaction = require("./Transaction");

var assign = require("./Object.assign");
var invariant = require("./invariant");
var warning = require("./warning");

var dirtyComponents = [];
var asapCallbackQueue = CallbackQueue.getPooled();
var asapEnqueued = false;

var batchingStrategy = null;

function ensureInjected() {
  ("production" !== process.env.NODE_ENV ? invariant(
    ReactUpdates.ReactReconcileTransaction && batchingStrategy,
    'ReactUpdates: must inject a reconcile transaction class and batching ' +
    'strategy'
  ) : invariant(ReactUpdates.ReactReconcileTransaction && batchingStrategy));
}

var NESTED_UPDATES = {
  initialize: function() {
    this.dirtyComponentsLength = dirtyComponents.length;
  },
  close: function() {
    if (this.dirtyComponentsLength !== dirtyComponents.length) {
      // Additional updates were enqueued by componentDidUpdate handlers or
      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
      // these new updates so that if A's componentDidUpdate calls setState on
      // B, B will update before the callback A's updater provided when calling
      // setState.
      dirtyComponents.splice(0, this.dirtyComponentsLength);
      flushBatchedUpdates();
    } else {
      dirtyComponents.length = 0;
    }
  }
};

var UPDATE_QUEUEING = {
  initialize: function() {
    this.callbackQueue.reset();
  },
  close: function() {
    this.callbackQueue.notifyAll();
  }
};

var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

function ReactUpdatesFlushTransaction() {
  this.reinitializeTransaction();
  this.dirtyComponentsLength = null;
  this.callbackQueue = CallbackQueue.getPooled();
  this.reconcileTransaction =
    ReactUpdates.ReactReconcileTransaction.getPooled();
}

assign(
  ReactUpdatesFlushTransaction.prototype,
  Transaction.Mixin, {
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  destructor: function() {
    this.dirtyComponentsLength = null;
    CallbackQueue.release(this.callbackQueue);
    this.callbackQueue = null;
    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
    this.reconcileTransaction = null;
  },

  perform: function(method, scope, a) {
    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
    // with this transaction's wrappers around it.
    return Transaction.Mixin.perform.call(
      this,
      this.reconcileTransaction.perform,
      this.reconcileTransaction,
      method,
      scope,
      a
    );
  }
});

PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

function batchedUpdates(callback, a, b, c, d) {
  ensureInjected();
  batchingStrategy.batchedUpdates(callback, a, b, c, d);
}

/**
 * Array comparator for ReactComponents by mount ordering.
 *
 * @param {ReactComponent} c1 first component you're comparing
 * @param {ReactComponent} c2 second component you're comparing
 * @return {number} Return value usable by Array.prototype.sort().
 */
function mountOrderComparator(c1, c2) {
  return c1._mountOrder - c2._mountOrder;
}

function runBatchedUpdates(transaction) {
  var len = transaction.dirtyComponentsLength;
  ("production" !== process.env.NODE_ENV ? invariant(
    len === dirtyComponents.length,
    'Expected flush transaction\'s stored dirty-components length (%s) to ' +
    'match dirty-components array length (%s).',
    len,
    dirtyComponents.length
  ) : invariant(len === dirtyComponents.length));

  // Since reconciling a component higher in the owner hierarchy usually (not
  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
  // them before their children by sorting the array.
  dirtyComponents.sort(mountOrderComparator);

  for (var i = 0; i < len; i++) {
    // If a component is unmounted before pending changes apply, it will still
    // be here, but we assume that it has cleared its _pendingCallbacks and
    // that performUpdateIfNecessary is a noop.
    var component = dirtyComponents[i];

    // If performUpdateIfNecessary happens to enqueue any new updates, we
    // shouldn't execute the callbacks until the next render happens, so
    // stash the callbacks first
    var callbacks = component._pendingCallbacks;
    component._pendingCallbacks = null;

    ReactReconciler.performUpdateIfNecessary(
      component,
      transaction.reconcileTransaction
    );

    if (callbacks) {
      for (var j = 0; j < callbacks.length; j++) {
        transaction.callbackQueue.enqueue(
          callbacks[j],
          component.getPublicInstance()
        );
      }
    }
  }
}

var flushBatchedUpdates = function() {
  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
  // array and perform any updates enqueued by mount-ready handlers (i.e.,
  // componentDidUpdate) but we need to check here too in order to catch
  // updates enqueued by setState callbacks and asap calls.
  while (dirtyComponents.length || asapEnqueued) {
    if (dirtyComponents.length) {
      var transaction = ReactUpdatesFlushTransaction.getPooled();
      transaction.perform(runBatchedUpdates, null, transaction);
      ReactUpdatesFlushTransaction.release(transaction);
    }

    if (asapEnqueued) {
      asapEnqueued = false;
      var queue = asapCallbackQueue;
      asapCallbackQueue = CallbackQueue.getPooled();
      queue.notifyAll();
      CallbackQueue.release(queue);
    }
  }
};
flushBatchedUpdates = ReactPerf.measure(
  'ReactUpdates',
  'flushBatchedUpdates',
  flushBatchedUpdates
);

/**
 * Mark a component as needing a rerender, adding an optional callback to a
 * list of functions which will be executed once the rerender occurs.
 */
function enqueueUpdate(component) {
  ensureInjected();

  // Various parts of our code (such as ReactCompositeComponent's
  // _renderValidatedComponent) assume that calls to render aren't nested;
  // verify that that's the case. (This is called by each top-level update
  // function, like setProps, setState, forceUpdate, etc.; creation and
  // destruction of top-level components is guarded in ReactMount.)
  ("production" !== process.env.NODE_ENV ? warning(
    ReactCurrentOwner.current == null,
    'enqueueUpdate(): Render methods should be a pure function of props ' +
    'and state; triggering nested component updates from render is not ' +
    'allowed. If necessary, trigger nested updates in ' +
    'componentDidUpdate.'
  ) : null);

  if (!batchingStrategy.isBatchingUpdates) {
    batchingStrategy.batchedUpdates(enqueueUpdate, component);
    return;
  }

  dirtyComponents.push(component);
}

/**
 * Enqueue a callback to be run at the end of the current batching cycle. Throws
 * if no updates are currently being performed.
 */
function asap(callback, context) {
  ("production" !== process.env.NODE_ENV ? invariant(
    batchingStrategy.isBatchingUpdates,
    'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' +
    'updates are not being batched.'
  ) : invariant(batchingStrategy.isBatchingUpdates));
  asapCallbackQueue.enqueue(callback, context);
  asapEnqueued = true;
}

var ReactUpdatesInjection = {
  injectReconcileTransaction: function(ReconcileTransaction) {
    ("production" !== process.env.NODE_ENV ? invariant(
      ReconcileTransaction,
      'ReactUpdates: must provide a reconcile transaction class'
    ) : invariant(ReconcileTransaction));
    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
  },

  injectBatchingStrategy: function(_batchingStrategy) {
    ("production" !== process.env.NODE_ENV ? invariant(
      _batchingStrategy,
      'ReactUpdates: must provide a batching strategy'
    ) : invariant(_batchingStrategy));
    ("production" !== process.env.NODE_ENV ? invariant(
      typeof _batchingStrategy.batchedUpdates === 'function',
      'ReactUpdates: must provide a batchedUpdates() function'
    ) : invariant(typeof _batchingStrategy.batchedUpdates === 'function'));
    ("production" !== process.env.NODE_ENV ? invariant(
      typeof _batchingStrategy.isBatchingUpdates === 'boolean',
      'ReactUpdates: must provide an isBatchingUpdates boolean attribute'
    ) : invariant(typeof _batchingStrategy.isBatchingUpdates === 'boolean'));
    batchingStrategy = _batchingStrategy;
  }
};

var ReactUpdates = {
  /**
   * React references `ReactReconcileTransaction` using this property in order
   * to allow dependency injection.
   *
   * @internal
   */
  ReactReconcileTransaction: null,

  batchedUpdates: batchedUpdates,
  enqueueUpdate: enqueueUpdate,
  flushBatchedUpdates: flushBatchedUpdates,
  injection: ReactUpdatesInjection,
  asap: asap
};

module.exports = ReactUpdates;

}).call(this,require('_process'))
},{"./CallbackQueue":160,"./Object.assign":182,"./PooledClass":183,"./ReactCurrentOwner":198,"./ReactPerf":235,"./ReactReconciler":242,"./Transaction":270,"./invariant":304,"./warning":325,"_process":2}],254:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactWithAddons
 */

/**
 * This module exists purely in the open source project, and is meant as a way
 * to create a separate standalone build of React. This build has "addons", or
 * functionality we've built and think might be useful but doesn't have a good
 * place to live inside React core.
 */

'use strict';

var LinkedStateMixin = require("./LinkedStateMixin");
var React = require("./React");
var ReactComponentWithPureRenderMixin =
  require("./ReactComponentWithPureRenderMixin");
var ReactCSSTransitionGroup = require("./ReactCSSTransitionGroup");
var ReactFragment = require("./ReactFragment");
var ReactTransitionGroup = require("./ReactTransitionGroup");
var ReactUpdates = require("./ReactUpdates");

var cx = require("./cx");
var cloneWithProps = require("./cloneWithProps");
var update = require("./update");

React.addons = {
  CSSTransitionGroup: ReactCSSTransitionGroup,
  LinkedStateMixin: LinkedStateMixin,
  PureRenderMixin: ReactComponentWithPureRenderMixin,
  TransitionGroup: ReactTransitionGroup,

  batchedUpdates: ReactUpdates.batchedUpdates,
  classSet: cx,
  cloneWithProps: cloneWithProps,
  createFragment: ReactFragment.create,
  update: update
};

if ("production" !== process.env.NODE_ENV) {
  React.addons.Perf = require("./ReactDefaultPerf");
  React.addons.TestUtils = require("./ReactTestUtils");
}

module.exports = React;

}).call(this,require('_process'))
},{"./LinkedStateMixin":178,"./React":184,"./ReactCSSTransitionGroup":187,"./ReactComponentWithPureRenderMixin":195,"./ReactDefaultPerf":214,"./ReactFragment":222,"./ReactTestUtils":248,"./ReactTransitionGroup":251,"./ReactUpdates":253,"./cloneWithProps":276,"./cx":281,"./update":324,"_process":2}],255:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SVGDOMPropertyConfig
 */

/*jslint bitwise: true*/

'use strict';

var DOMProperty = require("./DOMProperty");

var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;

var SVGDOMPropertyConfig = {
  Properties: {
    clipPath: MUST_USE_ATTRIBUTE,
    cx: MUST_USE_ATTRIBUTE,
    cy: MUST_USE_ATTRIBUTE,
    d: MUST_USE_ATTRIBUTE,
    dx: MUST_USE_ATTRIBUTE,
    dy: MUST_USE_ATTRIBUTE,
    fill: MUST_USE_ATTRIBUTE,
    fillOpacity: MUST_USE_ATTRIBUTE,
    fontFamily: MUST_USE_ATTRIBUTE,
    fontSize: MUST_USE_ATTRIBUTE,
    fx: MUST_USE_ATTRIBUTE,
    fy: MUST_USE_ATTRIBUTE,
    gradientTransform: MUST_USE_ATTRIBUTE,
    gradientUnits: MUST_USE_ATTRIBUTE,
    markerEnd: MUST_USE_ATTRIBUTE,
    markerMid: MUST_USE_ATTRIBUTE,
    markerStart: MUST_USE_ATTRIBUTE,
    offset: MUST_USE_ATTRIBUTE,
    opacity: MUST_USE_ATTRIBUTE,
    patternContentUnits: MUST_USE_ATTRIBUTE,
    patternUnits: MUST_USE_ATTRIBUTE,
    points: MUST_USE_ATTRIBUTE,
    preserveAspectRatio: MUST_USE_ATTRIBUTE,
    r: MUST_USE_ATTRIBUTE,
    rx: MUST_USE_ATTRIBUTE,
    ry: MUST_USE_ATTRIBUTE,
    spreadMethod: MUST_USE_ATTRIBUTE,
    stopColor: MUST_USE_ATTRIBUTE,
    stopOpacity: MUST_USE_ATTRIBUTE,
    stroke: MUST_USE_ATTRIBUTE,
    strokeDasharray: MUST_USE_ATTRIBUTE,
    strokeLinecap: MUST_USE_ATTRIBUTE,
    strokeOpacity: MUST_USE_ATTRIBUTE,
    strokeWidth: MUST_USE_ATTRIBUTE,
    textAnchor: MUST_USE_ATTRIBUTE,
    transform: MUST_USE_ATTRIBUTE,
    version: MUST_USE_ATTRIBUTE,
    viewBox: MUST_USE_ATTRIBUTE,
    x1: MUST_USE_ATTRIBUTE,
    x2: MUST_USE_ATTRIBUTE,
    x: MUST_USE_ATTRIBUTE,
    y1: MUST_USE_ATTRIBUTE,
    y2: MUST_USE_ATTRIBUTE,
    y: MUST_USE_ATTRIBUTE
  },
  DOMAttributeNames: {
    clipPath: 'clip-path',
    fillOpacity: 'fill-opacity',
    fontFamily: 'font-family',
    fontSize: 'font-size',
    gradientTransform: 'gradientTransform',
    gradientUnits: 'gradientUnits',
    markerEnd: 'marker-end',
    markerMid: 'marker-mid',
    markerStart: 'marker-start',
    patternContentUnits: 'patternContentUnits',
    patternUnits: 'patternUnits',
    preserveAspectRatio: 'preserveAspectRatio',
    spreadMethod: 'spreadMethod',
    stopColor: 'stop-color',
    stopOpacity: 'stop-opacity',
    strokeDasharray: 'stroke-dasharray',
    strokeLinecap: 'stroke-linecap',
    strokeOpacity: 'stroke-opacity',
    strokeWidth: 'stroke-width',
    textAnchor: 'text-anchor',
    viewBox: 'viewBox'
  }
};

module.exports = SVGDOMPropertyConfig;

},{"./DOMProperty":164}],256:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SelectEventPlugin
 */

'use strict';

var EventConstants = require("./EventConstants");
var EventPropagators = require("./EventPropagators");
var ReactInputSelection = require("./ReactInputSelection");
var SyntheticEvent = require("./SyntheticEvent");

var getActiveElement = require("./getActiveElement");
var isTextInputElement = require("./isTextInputElement");
var keyOf = require("./keyOf");
var shallowEqual = require("./shallowEqual");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  select: {
    phasedRegistrationNames: {
      bubbled: keyOf({onSelect: null}),
      captured: keyOf({onSelectCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topContextMenu,
      topLevelTypes.topFocus,
      topLevelTypes.topKeyDown,
      topLevelTypes.topMouseDown,
      topLevelTypes.topMouseUp,
      topLevelTypes.topSelectionChange
    ]
  }
};

var activeElement = null;
var activeElementID = null;
var lastSelection = null;
var mouseDown = false;

/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @param {object}
 */
function getSelection(node) {
  if ('selectionStart' in node &&
      ReactInputSelection.hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else if (window.getSelection) {
    var selection = window.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  } else if (document.selection) {
    var range = document.selection.createRange();
    return {
      parentElement: range.parentElement(),
      text: range.text,
      top: range.boundingTop,
      left: range.boundingLeft
    };
  }
}

/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @return {?SyntheticEvent}
 */
function constructSelectEvent(nativeEvent) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  if (mouseDown ||
      activeElement == null ||
      activeElement !== getActiveElement()) {
    return null;
  }

  // Only fire when selection has actually changed.
  var currentSelection = getSelection(activeElement);
  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;

    var syntheticEvent = SyntheticEvent.getPooled(
      eventTypes.select,
      activeElementID,
      nativeEvent
    );

    syntheticEvent.type = 'select';
    syntheticEvent.target = activeElement;

    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

    return syntheticEvent;
  }
}

/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */
var SelectEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    switch (topLevelType) {
      // Track the input node that has focus.
      case topLevelTypes.topFocus:
        if (isTextInputElement(topLevelTarget) ||
            topLevelTarget.contentEditable === 'true') {
          activeElement = topLevelTarget;
          activeElementID = topLevelTargetID;
          lastSelection = null;
        }
        break;
      case topLevelTypes.topBlur:
        activeElement = null;
        activeElementID = null;
        lastSelection = null;
        break;

      // Don't fire the event while the user is dragging. This matches the
      // semantics of the native select event.
      case topLevelTypes.topMouseDown:
        mouseDown = true;
        break;
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topMouseUp:
        mouseDown = false;
        return constructSelectEvent(nativeEvent);

      // Chrome and IE fire non-standard event when selection is changed (and
      // sometimes when it hasn't).
      // Firefox doesn't support selectionchange, so check selection status
      // after each key entry. The selection changes after keydown and before
      // keyup, but we check on keydown as well in the case of holding down a
      // key, when multiple keydown events are fired but only one keyup is.
      case topLevelTypes.topSelectionChange:
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        return constructSelectEvent(nativeEvent);
    }
  }
};

module.exports = SelectEventPlugin;

},{"./EventConstants":169,"./EventPropagators":174,"./ReactInputSelection":224,"./SyntheticEvent":262,"./getActiveElement":290,"./isTextInputElement":307,"./keyOf":311,"./shallowEqual":320}],257:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ServerReactRootIndex
 * @typechecks
 */

'use strict';

/**
 * Size of the reactRoot ID space. We generate random numbers for React root
 * IDs and if there's a collision the events and DOM update system will
 * get confused. In the future we need a way to generate GUIDs but for
 * now this will work on a smaller scale.
 */
var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);

var ServerReactRootIndex = {
  createReactRootIndex: function() {
    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
  }
};

module.exports = ServerReactRootIndex;

},{}],258:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SimpleEventPlugin
 */

'use strict';

var EventConstants = require("./EventConstants");
var EventPluginUtils = require("./EventPluginUtils");
var EventPropagators = require("./EventPropagators");
var SyntheticClipboardEvent = require("./SyntheticClipboardEvent");
var SyntheticEvent = require("./SyntheticEvent");
var SyntheticFocusEvent = require("./SyntheticFocusEvent");
var SyntheticKeyboardEvent = require("./SyntheticKeyboardEvent");
var SyntheticMouseEvent = require("./SyntheticMouseEvent");
var SyntheticDragEvent = require("./SyntheticDragEvent");
var SyntheticTouchEvent = require("./SyntheticTouchEvent");
var SyntheticUIEvent = require("./SyntheticUIEvent");
var SyntheticWheelEvent = require("./SyntheticWheelEvent");

var getEventCharCode = require("./getEventCharCode");

var invariant = require("./invariant");
var keyOf = require("./keyOf");
var warning = require("./warning");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  blur: {
    phasedRegistrationNames: {
      bubbled: keyOf({onBlur: true}),
      captured: keyOf({onBlurCapture: true})
    }
  },
  click: {
    phasedRegistrationNames: {
      bubbled: keyOf({onClick: true}),
      captured: keyOf({onClickCapture: true})
    }
  },
  contextMenu: {
    phasedRegistrationNames: {
      bubbled: keyOf({onContextMenu: true}),
      captured: keyOf({onContextMenuCapture: true})
    }
  },
  copy: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCopy: true}),
      captured: keyOf({onCopyCapture: true})
    }
  },
  cut: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCut: true}),
      captured: keyOf({onCutCapture: true})
    }
  },
  doubleClick: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDoubleClick: true}),
      captured: keyOf({onDoubleClickCapture: true})
    }
  },
  drag: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDrag: true}),
      captured: keyOf({onDragCapture: true})
    }
  },
  dragEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragEnd: true}),
      captured: keyOf({onDragEndCapture: true})
    }
  },
  dragEnter: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragEnter: true}),
      captured: keyOf({onDragEnterCapture: true})
    }
  },
  dragExit: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragExit: true}),
      captured: keyOf({onDragExitCapture: true})
    }
  },
  dragLeave: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragLeave: true}),
      captured: keyOf({onDragLeaveCapture: true})
    }
  },
  dragOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragOver: true}),
      captured: keyOf({onDragOverCapture: true})
    }
  },
  dragStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragStart: true}),
      captured: keyOf({onDragStartCapture: true})
    }
  },
  drop: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDrop: true}),
      captured: keyOf({onDropCapture: true})
    }
  },
  focus: {
    phasedRegistrationNames: {
      bubbled: keyOf({onFocus: true}),
      captured: keyOf({onFocusCapture: true})
    }
  },
  input: {
    phasedRegistrationNames: {
      bubbled: keyOf({onInput: true}),
      captured: keyOf({onInputCapture: true})
    }
  },
  keyDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyDown: true}),
      captured: keyOf({onKeyDownCapture: true})
    }
  },
  keyPress: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyPress: true}),
      captured: keyOf({onKeyPressCapture: true})
    }
  },
  keyUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyUp: true}),
      captured: keyOf({onKeyUpCapture: true})
    }
  },
  load: {
    phasedRegistrationNames: {
      bubbled: keyOf({onLoad: true}),
      captured: keyOf({onLoadCapture: true})
    }
  },
  error: {
    phasedRegistrationNames: {
      bubbled: keyOf({onError: true}),
      captured: keyOf({onErrorCapture: true})
    }
  },
  // Note: We do not allow listening to mouseOver events. Instead, use the
  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
  mouseDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseDown: true}),
      captured: keyOf({onMouseDownCapture: true})
    }
  },
  mouseMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseMove: true}),
      captured: keyOf({onMouseMoveCapture: true})
    }
  },
  mouseOut: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseOut: true}),
      captured: keyOf({onMouseOutCapture: true})
    }
  },
  mouseOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseOver: true}),
      captured: keyOf({onMouseOverCapture: true})
    }
  },
  mouseUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseUp: true}),
      captured: keyOf({onMouseUpCapture: true})
    }
  },
  paste: {
    phasedRegistrationNames: {
      bubbled: keyOf({onPaste: true}),
      captured: keyOf({onPasteCapture: true})
    }
  },
  reset: {
    phasedRegistrationNames: {
      bubbled: keyOf({onReset: true}),
      captured: keyOf({onResetCapture: true})
    }
  },
  scroll: {
    phasedRegistrationNames: {
      bubbled: keyOf({onScroll: true}),
      captured: keyOf({onScrollCapture: true})
    }
  },
  submit: {
    phasedRegistrationNames: {
      bubbled: keyOf({onSubmit: true}),
      captured: keyOf({onSubmitCapture: true})
    }
  },
  touchCancel: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchCancel: true}),
      captured: keyOf({onTouchCancelCapture: true})
    }
  },
  touchEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchEnd: true}),
      captured: keyOf({onTouchEndCapture: true})
    }
  },
  touchMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchMove: true}),
      captured: keyOf({onTouchMoveCapture: true})
    }
  },
  touchStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchStart: true}),
      captured: keyOf({onTouchStartCapture: true})
    }
  },
  wheel: {
    phasedRegistrationNames: {
      bubbled: keyOf({onWheel: true}),
      captured: keyOf({onWheelCapture: true})
    }
  }
};

var topLevelEventsToDispatchConfig = {
  topBlur:        eventTypes.blur,
  topClick:       eventTypes.click,
  topContextMenu: eventTypes.contextMenu,
  topCopy:        eventTypes.copy,
  topCut:         eventTypes.cut,
  topDoubleClick: eventTypes.doubleClick,
  topDrag:        eventTypes.drag,
  topDragEnd:     eventTypes.dragEnd,
  topDragEnter:   eventTypes.dragEnter,
  topDragExit:    eventTypes.dragExit,
  topDragLeave:   eventTypes.dragLeave,
  topDragOver:    eventTypes.dragOver,
  topDragStart:   eventTypes.dragStart,
  topDrop:        eventTypes.drop,
  topError:       eventTypes.error,
  topFocus:       eventTypes.focus,
  topInput:       eventTypes.input,
  topKeyDown:     eventTypes.keyDown,
  topKeyPress:    eventTypes.keyPress,
  topKeyUp:       eventTypes.keyUp,
  topLoad:        eventTypes.load,
  topMouseDown:   eventTypes.mouseDown,
  topMouseMove:   eventTypes.mouseMove,
  topMouseOut:    eventTypes.mouseOut,
  topMouseOver:   eventTypes.mouseOver,
  topMouseUp:     eventTypes.mouseUp,
  topPaste:       eventTypes.paste,
  topReset:       eventTypes.reset,
  topScroll:      eventTypes.scroll,
  topSubmit:      eventTypes.submit,
  topTouchCancel: eventTypes.touchCancel,
  topTouchEnd:    eventTypes.touchEnd,
  topTouchMove:   eventTypes.touchMove,
  topTouchStart:  eventTypes.touchStart,
  topWheel:       eventTypes.wheel
};

for (var type in topLevelEventsToDispatchConfig) {
  topLevelEventsToDispatchConfig[type].dependencies = [type];
}

var SimpleEventPlugin = {

  eventTypes: eventTypes,

  /**
   * Same as the default implementation, except cancels the event when return
   * value is false. This behavior will be disabled in a future release.
   *
   * @param {object} Event to be dispatched.
   * @param {function} Application-level callback.
   * @param {string} domID DOM ID to pass to the callback.
   */
  executeDispatch: function(event, listener, domID) {
    var returnValue = EventPluginUtils.executeDispatch(event, listener, domID);

    ("production" !== process.env.NODE_ENV ? warning(
      typeof returnValue !== 'boolean',
      'Returning `false` from an event handler is deprecated and will be ' +
      'ignored in a future release. Instead, manually call ' +
      'e.stopPropagation() or e.preventDefault(), as appropriate.'
    ) : null);

    if (returnValue === false) {
      event.stopPropagation();
      event.preventDefault();
    }
  },

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
    if (!dispatchConfig) {
      return null;
    }
    var EventConstructor;
    switch (topLevelType) {
      case topLevelTypes.topInput:
      case topLevelTypes.topLoad:
      case topLevelTypes.topError:
      case topLevelTypes.topReset:
      case topLevelTypes.topSubmit:
        // HTML Events
        // @see http://www.w3.org/TR/html5/index.html#events-0
        EventConstructor = SyntheticEvent;
        break;
      case topLevelTypes.topKeyPress:
        // FireFox creates a keypress event for function keys too. This removes
        // the unwanted keypress events. Enter is however both printable and
        // non-printable. One would expect Tab to be as well (but it isn't).
        if (getEventCharCode(nativeEvent) === 0) {
          return null;
        }
        /* falls through */
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        EventConstructor = SyntheticKeyboardEvent;
        break;
      case topLevelTypes.topBlur:
      case topLevelTypes.topFocus:
        EventConstructor = SyntheticFocusEvent;
        break;
      case topLevelTypes.topClick:
        // Firefox creates a click event on right mouse clicks. This removes the
        // unwanted click events.
        if (nativeEvent.button === 2) {
          return null;
        }
        /* falls through */
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topDoubleClick:
      case topLevelTypes.topMouseDown:
      case topLevelTypes.topMouseMove:
      case topLevelTypes.topMouseOut:
      case topLevelTypes.topMouseOver:
      case topLevelTypes.topMouseUp:
        EventConstructor = SyntheticMouseEvent;
        break;
      case topLevelTypes.topDrag:
      case topLevelTypes.topDragEnd:
      case topLevelTypes.topDragEnter:
      case topLevelTypes.topDragExit:
      case topLevelTypes.topDragLeave:
      case topLevelTypes.topDragOver:
      case topLevelTypes.topDragStart:
      case topLevelTypes.topDrop:
        EventConstructor = SyntheticDragEvent;
        break;
      case topLevelTypes.topTouchCancel:
      case topLevelTypes.topTouchEnd:
      case topLevelTypes.topTouchMove:
      case topLevelTypes.topTouchStart:
        EventConstructor = SyntheticTouchEvent;
        break;
      case topLevelTypes.topScroll:
        EventConstructor = SyntheticUIEvent;
        break;
      case topLevelTypes.topWheel:
        EventConstructor = SyntheticWheelEvent;
        break;
      case topLevelTypes.topCopy:
      case topLevelTypes.topCut:
      case topLevelTypes.topPaste:
        EventConstructor = SyntheticClipboardEvent;
        break;
    }
    ("production" !== process.env.NODE_ENV ? invariant(
      EventConstructor,
      'SimpleEventPlugin: Unhandled event type, `%s`.',
      topLevelType
    ) : invariant(EventConstructor));
    var event = EventConstructor.getPooled(
      dispatchConfig,
      topLevelTargetID,
      nativeEvent
    );
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  }

};

module.exports = SimpleEventPlugin;

}).call(this,require('_process'))
},{"./EventConstants":169,"./EventPluginUtils":173,"./EventPropagators":174,"./SyntheticClipboardEvent":259,"./SyntheticDragEvent":261,"./SyntheticEvent":262,"./SyntheticFocusEvent":263,"./SyntheticKeyboardEvent":265,"./SyntheticMouseEvent":266,"./SyntheticTouchEvent":267,"./SyntheticUIEvent":268,"./SyntheticWheelEvent":269,"./getEventCharCode":291,"./invariant":304,"./keyOf":311,"./warning":325,"_process":2}],259:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticClipboardEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticEvent = require("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */
var ClipboardEventInterface = {
  clipboardData: function(event) {
    return (
      'clipboardData' in event ?
        event.clipboardData :
        window.clipboardData
    );
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

module.exports = SyntheticClipboardEvent;

},{"./SyntheticEvent":262}],260:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticCompositionEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticEvent = require("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */
var CompositionEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticCompositionEvent(
  dispatchConfig,
  dispatchMarker,
  nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(
  SyntheticCompositionEvent,
  CompositionEventInterface
);

module.exports = SyntheticCompositionEvent;

},{"./SyntheticEvent":262}],261:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticDragEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticMouseEvent = require("./SyntheticMouseEvent");

/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var DragEventInterface = {
  dataTransfer: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

module.exports = SyntheticDragEvent;

},{"./SyntheticMouseEvent":266}],262:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticEvent
 * @typechecks static-only
 */

'use strict';

var PooledClass = require("./PooledClass");

var assign = require("./Object.assign");
var emptyFunction = require("./emptyFunction");
var getEventTarget = require("./getEventTarget");

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var EventInterface = {
  type: null,
  target: getEventTarget,
  // currentTarget is set when dispatching; no use in copying it here
  currentTarget: emptyFunction.thatReturnsNull,
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function(event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 */
function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  this.dispatchConfig = dispatchConfig;
  this.dispatchMarker = dispatchMarker;
  this.nativeEvent = nativeEvent;

  var Interface = this.constructor.Interface;
  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;
    }
    var normalize = Interface[propName];
    if (normalize) {
      this[propName] = normalize(nativeEvent);
    } else {
      this[propName] = nativeEvent[propName];
    }
  }

  var defaultPrevented = nativeEvent.defaultPrevented != null ?
    nativeEvent.defaultPrevented :
    nativeEvent.returnValue === false;
  if (defaultPrevented) {
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  } else {
    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
  }
  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
}

assign(SyntheticEvent.prototype, {

  preventDefault: function() {
    this.defaultPrevented = true;
    var event = this.nativeEvent;
    if (event.preventDefault) {
      event.preventDefault();
    } else {
      event.returnValue = false;
    }
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  },

  stopPropagation: function() {
    var event = this.nativeEvent;
    if (event.stopPropagation) {
      event.stopPropagation();
    } else {
      event.cancelBubble = true;
    }
    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
  },

  /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */
  persist: function() {
    this.isPersistent = emptyFunction.thatReturnsTrue;
  },

  /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */
  isPersistent: emptyFunction.thatReturnsFalse,

  /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */
  destructor: function() {
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      this[propName] = null;
    }
    this.dispatchConfig = null;
    this.dispatchMarker = null;
    this.nativeEvent = null;
  }

});

SyntheticEvent.Interface = EventInterface;

/**
 * Helper to reduce boilerplate when creating subclasses.
 *
 * @param {function} Class
 * @param {?object} Interface
 */
SyntheticEvent.augmentClass = function(Class, Interface) {
  var Super = this;

  var prototype = Object.create(Super.prototype);
  assign(prototype, Class.prototype);
  Class.prototype = prototype;
  Class.prototype.constructor = Class;

  Class.Interface = assign({}, Super.Interface, Interface);
  Class.augmentClass = Super.augmentClass;

  PooledClass.addPoolingTo(Class, PooledClass.threeArgumentPooler);
};

PooledClass.addPoolingTo(SyntheticEvent, PooledClass.threeArgumentPooler);

module.exports = SyntheticEvent;

},{"./Object.assign":182,"./PooledClass":183,"./emptyFunction":283,"./getEventTarget":294}],263:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticFocusEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticUIEvent = require("./SyntheticUIEvent");

/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var FocusEventInterface = {
  relatedTarget: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

module.exports = SyntheticFocusEvent;

},{"./SyntheticUIEvent":268}],264:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticInputEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticEvent = require("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */
var InputEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticInputEvent(
  dispatchConfig,
  dispatchMarker,
  nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(
  SyntheticInputEvent,
  InputEventInterface
);

module.exports = SyntheticInputEvent;

},{"./SyntheticEvent":262}],265:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticKeyboardEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticUIEvent = require("./SyntheticUIEvent");

var getEventCharCode = require("./getEventCharCode");
var getEventKey = require("./getEventKey");
var getEventModifierState = require("./getEventModifierState");

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var KeyboardEventInterface = {
  key: getEventKey,
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function(event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.

    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    return 0;
  },
  keyCode: function(event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.

    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  },
  which: function(event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

module.exports = SyntheticKeyboardEvent;

},{"./SyntheticUIEvent":268,"./getEventCharCode":291,"./getEventKey":292,"./getEventModifierState":293}],266:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticMouseEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticUIEvent = require("./SyntheticUIEvent");
var ViewportMetrics = require("./ViewportMetrics");

var getEventModifierState = require("./getEventModifierState");

/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var MouseEventInterface = {
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  getModifierState: getEventModifierState,
  button: function(event) {
    // Webkit, Firefox, IE9+
    // which:  1 2 3
    // button: 0 1 2 (standard)
    var button = event.button;
    if ('which' in event) {
      return button;
    }
    // IE<9
    // which:  undefined
    // button: 0 0 0
    // button: 1 4 2 (onmouseup)
    return button === 2 ? 2 : button === 4 ? 1 : 0;
  },
  buttons: null,
  relatedTarget: function(event) {
    return event.relatedTarget || (
      ((event.fromElement === event.srcElement ? event.toElement : event.fromElement))
    );
  },
  // "Proprietary" Interface.
  pageX: function(event) {
    return 'pageX' in event ?
      event.pageX :
      event.clientX + ViewportMetrics.currentScrollLeft;
  },
  pageY: function(event) {
    return 'pageY' in event ?
      event.pageY :
      event.clientY + ViewportMetrics.currentScrollTop;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

module.exports = SyntheticMouseEvent;

},{"./SyntheticUIEvent":268,"./ViewportMetrics":271,"./getEventModifierState":293}],267:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticTouchEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticUIEvent = require("./SyntheticUIEvent");

var getEventModifierState = require("./getEventModifierState");

/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */
var TouchEventInterface = {
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null,
  getModifierState: getEventModifierState
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

module.exports = SyntheticTouchEvent;

},{"./SyntheticUIEvent":268,"./getEventModifierState":293}],268:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticUIEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticEvent = require("./SyntheticEvent");

var getEventTarget = require("./getEventTarget");

/**
 * @interface UIEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var UIEventInterface = {
  view: function(event) {
    if (event.view) {
      return event.view;
    }

    var target = getEventTarget(event);
    if (target != null && target.window === target) {
      // target is a window object
      return target;
    }

    var doc = target.ownerDocument;
    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
    if (doc) {
      return doc.defaultView || doc.parentWindow;
    } else {
      return window;
    }
  },
  detail: function(event) {
    return event.detail || 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

module.exports = SyntheticUIEvent;

},{"./SyntheticEvent":262,"./getEventTarget":294}],269:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticWheelEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticMouseEvent = require("./SyntheticMouseEvent");

/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var WheelEventInterface = {
  deltaX: function(event) {
    return (
      'deltaX' in event ? event.deltaX :
      // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
      'wheelDeltaX' in event ? -event.wheelDeltaX : 0
    );
  },
  deltaY: function(event) {
    return (
      'deltaY' in event ? event.deltaY :
      // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
      'wheelDeltaY' in event ? -event.wheelDeltaY :
      // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
      'wheelDelta' in event ? -event.wheelDelta : 0
    );
  },
  deltaZ: null,

  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticMouseEvent}
 */
function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

module.exports = SyntheticWheelEvent;

},{"./SyntheticMouseEvent":266}],270:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Transaction
 */

'use strict';

var invariant = require("./invariant");

/**
 * `Transaction` creates a black box that is able to wrap any method such that
 * certain invariants are maintained before and after the method is invoked
 * (Even if an exception is thrown while invoking the wrapped method). Whoever
 * instantiates a transaction can provide enforcers of the invariants at
 * creation time. The `Transaction` class itself will supply one additional
 * automatic invariant for you - the invariant that any transaction instance
 * should not be run while it is already being run. You would typically create a
 * single instance of a `Transaction` for reuse multiple times, that potentially
 * is used to wrap several different methods. Wrappers are extremely simple -
 * they only require implementing two methods.
 *
 * <pre>
 *                       wrappers (injected at creation time)
 *                                      +        +
 *                                      |        |
 *                    +-----------------|--------|--------------+
 *                    |                 v        |              |
 *                    |      +---------------+   |              |
 *                    |   +--|    wrapper1   |---|----+         |
 *                    |   |  +---------------+   v    |         |
 *                    |   |          +-------------+  |         |
 *                    |   |     +----|   wrapper2  |--------+   |
 *                    |   |     |    +-------------+  |     |   |
 *                    |   |     |                     |     |   |
 *                    |   v     v                     v     v   | wrapper
 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | +---+ +---+   +---------+   +---+ +---+ |
 *                    |  initialize                    close    |
 *                    +-----------------------------------------+
 * </pre>
 *
 * Use cases:
 * - Preserving the input selection ranges before/after reconciliation.
 *   Restoring selection even in the event of an unexpected error.
 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
 *   while guaranteeing that afterwards, the event system is reactivated.
 * - Flushing a queue of collected DOM mutations to the main UI thread after a
 *   reconciliation takes place in a worker thread.
 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
 *   content.
 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
 * - (Future use case): Layout calculations before and after DOM updates.
 *
 * Transactional plugin API:
 * - A module that has an `initialize` method that returns any precomputation.
 * - and a `close` method that accepts the precomputation. `close` is invoked
 *   when the wrapped process is completed, or has failed.
 *
 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
 * that implement `initialize` and `close`.
 * @return {Transaction} Single transaction for reuse in thread.
 *
 * @class Transaction
 */
var Mixin = {
  /**
   * Sets up this instance so that it is prepared for collecting metrics. Does
   * so such that this setup method may be used on an instance that is already
   * initialized, in a way that does not consume additional memory upon reuse.
   * That can be useful if you decide to make your subclass of this mixin a
   * "PooledClass".
   */
  reinitializeTransaction: function() {
    this.transactionWrappers = this.getTransactionWrappers();
    if (!this.wrapperInitData) {
      this.wrapperInitData = [];
    } else {
      this.wrapperInitData.length = 0;
    }
    this._isInTransaction = false;
  },

  _isInTransaction: false,

  /**
   * @abstract
   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
   */
  getTransactionWrappers: null,

  isInTransaction: function() {
    return !!this._isInTransaction;
  },

  /**
   * Executes the function within a safety window. Use this for the top level
   * methods that result in large amounts of computation/mutations that would
   * need to be safety checked.
   *
   * @param {function} method Member of scope to call.
   * @param {Object} scope Scope to invoke from.
   * @param {Object?=} args... Arguments to pass to the method (optional).
   *                           Helps prevent need to bind in many cases.
   * @return Return value from `method`.
   */
  perform: function(method, scope, a, b, c, d, e, f) {
    ("production" !== process.env.NODE_ENV ? invariant(
      !this.isInTransaction(),
      'Transaction.perform(...): Cannot initialize a transaction when there ' +
      'is already an outstanding transaction.'
    ) : invariant(!this.isInTransaction()));
    var errorThrown;
    var ret;
    try {
      this._isInTransaction = true;
      // Catching errors makes debugging more difficult, so we start with
      // errorThrown set to true before setting it to false after calling
      // close -- if it's still set to true in the finally block, it means
      // one of these calls threw.
      errorThrown = true;
      this.initializeAll(0);
      ret = method.call(scope, a, b, c, d, e, f);
      errorThrown = false;
    } finally {
      try {
        if (errorThrown) {
          // If `method` throws, prefer to show that stack trace over any thrown
          // by invoking `closeAll`.
          try {
            this.closeAll(0);
          } catch (err) {
          }
        } else {
          // Since `method` didn't throw, we don't want to silence the exception
          // here.
          this.closeAll(0);
        }
      } finally {
        this._isInTransaction = false;
      }
    }
    return ret;
  },

  initializeAll: function(startIndex) {
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      try {
        // Catching errors makes debugging more difficult, so we start with the
        // OBSERVED_ERROR state before overwriting it with the real return value
        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
        // block, it means wrapper.initialize threw.
        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
        this.wrapperInitData[i] = wrapper.initialize ?
          wrapper.initialize.call(this) :
          null;
      } finally {
        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
          // The initializer for wrapper i threw an error; initialize the
          // remaining wrappers but silence any exceptions from them to ensure
          // that the first error is the one to bubble up.
          try {
            this.initializeAll(i + 1);
          } catch (err) {
          }
        }
      }
    }
  },

  /**
   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
   * them the respective return values of `this.transactionWrappers.init[i]`
   * (`close`rs that correspond to initializers that failed will not be
   * invoked).
   */
  closeAll: function(startIndex) {
    ("production" !== process.env.NODE_ENV ? invariant(
      this.isInTransaction(),
      'Transaction.closeAll(): Cannot close transaction when none are open.'
    ) : invariant(this.isInTransaction()));
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      var initData = this.wrapperInitData[i];
      var errorThrown;
      try {
        // Catching errors makes debugging more difficult, so we start with
        // errorThrown set to true before setting it to false after calling
        // close -- if it's still set to true in the finally block, it means
        // wrapper.close threw.
        errorThrown = true;
        if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {
          wrapper.close.call(this, initData);
        }
        errorThrown = false;
      } finally {
        if (errorThrown) {
          // The closer for wrapper i threw an error; close the remaining
          // wrappers but silence any exceptions from them to ensure that the
          // first error is the one to bubble up.
          try {
            this.closeAll(i + 1);
          } catch (e) {
          }
        }
      }
    }
    this.wrapperInitData.length = 0;
  }
};

var Transaction = {

  Mixin: Mixin,

  /**
   * Token to look for to determine if an error occured.
   */
  OBSERVED_ERROR: {}

};

module.exports = Transaction;

}).call(this,require('_process'))
},{"./invariant":304,"_process":2}],271:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ViewportMetrics
 */

'use strict';

var ViewportMetrics = {

  currentScrollLeft: 0,

  currentScrollTop: 0,

  refreshScrollValues: function(scrollPosition) {
    ViewportMetrics.currentScrollLeft = scrollPosition.x;
    ViewportMetrics.currentScrollTop = scrollPosition.y;
  }

};

module.exports = ViewportMetrics;

},{}],272:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule accumulateInto
 */

'use strict';

var invariant = require("./invariant");

/**
 *
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */

function accumulateInto(current, next) {
  ("production" !== process.env.NODE_ENV ? invariant(
    next != null,
    'accumulateInto(...): Accumulated items must not be null or undefined.'
  ) : invariant(next != null));
  if (current == null) {
    return next;
  }

  // Both are not empty. Warning: Never call x.concat(y) when you are not
  // certain that x is an Array (x could be a string with concat method).
  var currentIsArray = Array.isArray(current);
  var nextIsArray = Array.isArray(next);

  if (currentIsArray && nextIsArray) {
    current.push.apply(current, next);
    return current;
  }

  if (currentIsArray) {
    current.push(next);
    return current;
  }

  if (nextIsArray) {
    // A bit too dangerous to mutate `next`.
    return [current].concat(next);
  }

  return [current, next];
}

module.exports = accumulateInto;

}).call(this,require('_process'))
},{"./invariant":304,"_process":2}],273:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule adler32
 */

/* jslint bitwise:true */

'use strict';

var MOD = 65521;

// This is a clean-room implementation of adler32 designed for detecting
// if markup is not what we expect it to be. It does not need to be
// cryptographically strong, only reasonably good at detecting if markup
// generated on the server is different than that on the client.
function adler32(data) {
  var a = 1;
  var b = 0;
  for (var i = 0; i < data.length; i++) {
    a = (a + data.charCodeAt(i)) % MOD;
    b = (b + a) % MOD;
  }
  return a | (b << 16);
}

module.exports = adler32;

},{}],274:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule camelize
 * @typechecks
 */

var _hyphenPattern = /-(.)/g;

/**
 * Camelcases a hyphenated string, for example:
 *
 *   > camelize('background-color')
 *   < "backgroundColor"
 *
 * @param {string} string
 * @return {string}
 */
function camelize(string) {
  return string.replace(_hyphenPattern, function(_, character) {
    return character.toUpperCase();
  });
}

module.exports = camelize;

},{}],275:[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule camelizeStyleName
 * @typechecks
 */

"use strict";

var camelize = require("./camelize");

var msPattern = /^-ms-/;

/**
 * Camelcases a hyphenated CSS property name, for example:
 *
 *   > camelizeStyleName('background-color')
 *   < "backgroundColor"
 *   > camelizeStyleName('-moz-transition')
 *   < "MozTransition"
 *   > camelizeStyleName('-ms-transition')
 *   < "msTransition"
 *
 * As Andi Smith suggests
 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
 * is converted to lowercase `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function camelizeStyleName(string) {
  return camelize(string.replace(msPattern, 'ms-'));
}

module.exports = camelizeStyleName;

},{"./camelize":274}],276:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks static-only
 * @providesModule cloneWithProps
 */

'use strict';

var ReactElement = require("./ReactElement");
var ReactPropTransferer = require("./ReactPropTransferer");

var keyOf = require("./keyOf");
var warning = require("./warning");

var CHILDREN_PROP = keyOf({children: null});

/**
 * Sometimes you want to change the props of a child passed to you. Usually
 * this is to add a CSS class.
 *
 * @param {ReactElement} child child element you'd like to clone
 * @param {object} props props you'd like to modify. className and style will be
 * merged automatically.
 * @return {ReactElement} a clone of child with props merged in.
 */
function cloneWithProps(child, props) {
  if ("production" !== process.env.NODE_ENV) {
    ("production" !== process.env.NODE_ENV ? warning(
      !child.ref,
      'You are calling cloneWithProps() on a child with a ref. This is ' +
      'dangerous because you\'re creating a new child which will not be ' +
      'added as a ref to its parent.'
    ) : null);
  }

  var newProps = ReactPropTransferer.mergeProps(props, child.props);

  // Use `child.props.children` if it is provided.
  if (!newProps.hasOwnProperty(CHILDREN_PROP) &&
      child.props.hasOwnProperty(CHILDREN_PROP)) {
    newProps.children = child.props.children;
  }

  // The current API doesn't retain _owner and _context, which is why this
  // doesn't use ReactElement.cloneAndReplaceProps.
  return ReactElement.createElement(child.type, newProps);
}

module.exports = cloneWithProps;

}).call(this,require('_process'))
},{"./ReactElement":216,"./ReactPropTransferer":236,"./keyOf":311,"./warning":325,"_process":2}],277:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule containsNode
 * @typechecks
 */

var isTextNode = require("./isTextNode");

/*jslint bitwise:true */

/**
 * Checks if a given DOM node contains or is another DOM node.
 *
 * @param {?DOMNode} outerNode Outer DOM node.
 * @param {?DOMNode} innerNode Inner DOM node.
 * @return {boolean} True if `outerNode` contains or is `innerNode`.
 */
function containsNode(outerNode, innerNode) {
  if (!outerNode || !innerNode) {
    return false;
  } else if (outerNode === innerNode) {
    return true;
  } else if (isTextNode(outerNode)) {
    return false;
  } else if (isTextNode(innerNode)) {
    return containsNode(outerNode, innerNode.parentNode);
  } else if (outerNode.contains) {
    return outerNode.contains(innerNode);
  } else if (outerNode.compareDocumentPosition) {
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
  } else {
    return false;
  }
}

module.exports = containsNode;

},{"./isTextNode":308}],278:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createArrayFromMixed
 * @typechecks
 */

var toArray = require("./toArray");

/**
 * Perform a heuristic test to determine if an object is "array-like".
 *
 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
 *   Joshu replied: "Mu."
 *
 * This function determines if its argument has "array nature": it returns
 * true if the argument is an actual array, an `arguments' object, or an
 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
 *
 * It will return false for other array-like objects like Filelist.
 *
 * @param {*} obj
 * @return {boolean}
 */
function hasArrayNature(obj) {
  return (
    // not null/false
    !!obj &&
    // arrays are objects, NodeLists are functions in Safari
    (typeof obj == 'object' || typeof obj == 'function') &&
    // quacks like an array
    ('length' in obj) &&
    // not window
    !('setInterval' in obj) &&
    // no DOM node should be considered an array-like
    // a 'select' element has 'length' and 'item' properties on IE8
    (typeof obj.nodeType != 'number') &&
    (
      // a real array
      (// HTMLCollection/NodeList
      (Array.isArray(obj) ||
      // arguments
      ('callee' in obj) || 'item' in obj))
    )
  );
}

/**
 * Ensure that the argument is an array by wrapping it in an array if it is not.
 * Creates a copy of the argument if it is already an array.
 *
 * This is mostly useful idiomatically:
 *
 *   var createArrayFromMixed = require('createArrayFromMixed');
 *
 *   function takesOneOrMoreThings(things) {
 *     things = createArrayFromMixed(things);
 *     ...
 *   }
 *
 * This allows you to treat `things' as an array, but accept scalars in the API.
 *
 * If you need to convert an array-like object, like `arguments`, into an array
 * use toArray instead.
 *
 * @param {*} obj
 * @return {array}
 */
function createArrayFromMixed(obj) {
  if (!hasArrayNature(obj)) {
    return [obj];
  } else if (Array.isArray(obj)) {
    return obj.slice();
  } else {
    return toArray(obj);
  }
}

module.exports = createArrayFromMixed;

},{"./toArray":322}],279:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createFullPageComponent
 * @typechecks
 */

'use strict';

// Defeat circular references by requiring this directly.
var ReactClass = require("./ReactClass");
var ReactElement = require("./ReactElement");

var invariant = require("./invariant");

/**
 * Create a component that will throw an exception when unmounted.
 *
 * Components like <html> <head> and <body> can't be removed or added
 * easily in a cross-browser way, however it's valuable to be able to
 * take advantage of React's reconciliation for styling and <title>
 * management. So we just document it and throw in dangerous cases.
 *
 * @param {string} tag The tag to wrap
 * @return {function} convenience constructor of new component
 */
function createFullPageComponent(tag) {
  var elementFactory = ReactElement.createFactory(tag);

  var FullPageComponent = ReactClass.createClass({
    tagName: tag.toUpperCase(),
    displayName: 'ReactFullPageComponent' + tag,

    componentWillUnmount: function() {
      ("production" !== process.env.NODE_ENV ? invariant(
        false,
        '%s tried to unmount. Because of cross-browser quirks it is ' +
        'impossible to unmount some top-level components (eg <html>, <head>, ' +
        'and <body>) reliably and efficiently. To fix this, have a single ' +
        'top-level component that never unmounts render these elements.',
        this.constructor.displayName
      ) : invariant(false));
    },

    render: function() {
      return elementFactory(this.props);
    }
  });

  return FullPageComponent;
}

module.exports = createFullPageComponent;

}).call(this,require('_process'))
},{"./ReactClass":191,"./ReactElement":216,"./invariant":304,"_process":2}],280:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createNodesFromMarkup
 * @typechecks
 */

/*jslint evil: true, sub: true */

var ExecutionEnvironment = require("./ExecutionEnvironment");

var createArrayFromMixed = require("./createArrayFromMixed");
var getMarkupWrap = require("./getMarkupWrap");
var invariant = require("./invariant");

/**
 * Dummy container used to render all markup.
 */
var dummyNode =
  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Pattern used by `getNodeName`.
 */
var nodeNamePattern = /^\s*<(\w+)/;

/**
 * Extracts the `nodeName` of the first element in a string of markup.
 *
 * @param {string} markup String of markup.
 * @return {?string} Node name of the supplied markup.
 */
function getNodeName(markup) {
  var nodeNameMatch = markup.match(nodeNamePattern);
  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
}

/**
 * Creates an array containing the nodes rendered from the supplied markup. The
 * optionally supplied `handleScript` function will be invoked once for each
 * <script> element that is rendered. If no `handleScript` function is supplied,
 * an exception is thrown if any <script> elements are rendered.
 *
 * @param {string} markup A string of valid HTML markup.
 * @param {?function} handleScript Invoked once for each rendered <script>.
 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
 */
function createNodesFromMarkup(markup, handleScript) {
  var node = dummyNode;
  ("production" !== process.env.NODE_ENV ? invariant(!!dummyNode, 'createNodesFromMarkup dummy not initialized') : invariant(!!dummyNode));
  var nodeName = getNodeName(markup);

  var wrap = nodeName && getMarkupWrap(nodeName);
  if (wrap) {
    node.innerHTML = wrap[1] + markup + wrap[2];

    var wrapDepth = wrap[0];
    while (wrapDepth--) {
      node = node.lastChild;
    }
  } else {
    node.innerHTML = markup;
  }

  var scripts = node.getElementsByTagName('script');
  if (scripts.length) {
    ("production" !== process.env.NODE_ENV ? invariant(
      handleScript,
      'createNodesFromMarkup(...): Unexpected <script> element rendered.'
    ) : invariant(handleScript));
    createArrayFromMixed(scripts).forEach(handleScript);
  }

  var nodes = createArrayFromMixed(node.childNodes);
  while (node.lastChild) {
    node.removeChild(node.lastChild);
  }
  return nodes;
}

module.exports = createNodesFromMarkup;

}).call(this,require('_process'))
},{"./ExecutionEnvironment":175,"./createArrayFromMixed":278,"./getMarkupWrap":296,"./invariant":304,"_process":2}],281:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule cx
 */

/**
 * This function is used to mark string literals representing CSS class names
 * so that they can be transformed statically. This allows for modularization
 * and minification of CSS class names.
 *
 * In static_upstream, this function is actually implemented, but it should
 * eventually be replaced with something more descriptive, and the transform
 * that is used in the main stack should be ported for use elsewhere.
 *
 * @param string|object className to modularize, or an object of key/values.
 *                      In the object case, the values are conditions that
 *                      determine if the className keys should be included.
 * @param [string ...]  Variable list of classNames in the string case.
 * @return string       Renderable space-separated CSS className.
 */

'use strict';
var warning = require("./warning");

var warned = false;

function cx(classNames) {
  if ("production" !== process.env.NODE_ENV) {
    ("production" !== process.env.NODE_ENV ? warning(
      warned,
      'React.addons.classSet will be deprecated in a future version. See ' +
      'http://fb.me/react-addons-classset'
    ) : null);
    warned = true;
  }

  if (typeof classNames == 'object') {
    return Object.keys(classNames).filter(function(className) {
      return classNames[className];
    }).join(' ');
  } else {
    return Array.prototype.join.call(arguments, ' ');
  }
}

module.exports = cx;

}).call(this,require('_process'))
},{"./warning":325,"_process":2}],282:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule dangerousStyleValue
 * @typechecks static-only
 */

'use strict';

var CSSProperty = require("./CSSProperty");

var isUnitlessNumber = CSSProperty.isUnitlessNumber;

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */
function dangerousStyleValue(name, value) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901

  var isEmpty = value == null || typeof value === 'boolean' || value === '';
  if (isEmpty) {
    return '';
  }

  var isNonNumeric = isNaN(value);
  if (isNonNumeric || value === 0 ||
      isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
    return '' + value; // cast to string
  }

  if (typeof value === 'string') {
    value = value.trim();
  }
  return value + 'px';
}

module.exports = dangerousStyleValue;

},{"./CSSProperty":158}],283:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule emptyFunction
 */

function makeEmptyFunction(arg) {
  return function() {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
function emptyFunction() {}

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function() { return this; };
emptyFunction.thatReturnsArgument = function(arg) { return arg; };

module.exports = emptyFunction;

},{}],284:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule emptyObject
 */

"use strict";

var emptyObject = {};

if ("production" !== process.env.NODE_ENV) {
  Object.freeze(emptyObject);
}

module.exports = emptyObject;

}).call(this,require('_process'))
},{"_process":2}],285:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule escapeTextContentForBrowser
 */

'use strict';

var ESCAPE_LOOKUP = {
  '&': '&amp;',
  '>': '&gt;',
  '<': '&lt;',
  '"': '&quot;',
  '\'': '&#x27;'
};

var ESCAPE_REGEX = /[&><"']/g;

function escaper(match) {
  return ESCAPE_LOOKUP[match];
}

/**
 * Escapes text to prevent scripting attacks.
 *
 * @param {*} text Text value to escape.
 * @return {string} An escaped string.
 */
function escapeTextContentForBrowser(text) {
  return ('' + text).replace(ESCAPE_REGEX, escaper);
}

module.exports = escapeTextContentForBrowser;

},{}],286:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule findDOMNode
 * @typechecks static-only
 */

'use strict';

var ReactCurrentOwner = require("./ReactCurrentOwner");
var ReactInstanceMap = require("./ReactInstanceMap");
var ReactMount = require("./ReactMount");

var invariant = require("./invariant");
var isNode = require("./isNode");
var warning = require("./warning");

/**
 * Returns the DOM node rendered by this element.
 *
 * @param {ReactComponent|DOMElement} componentOrElement
 * @return {DOMElement} The root node of this element.
 */
function findDOMNode(componentOrElement) {
  if ("production" !== process.env.NODE_ENV) {
    var owner = ReactCurrentOwner.current;
    if (owner !== null) {
      ("production" !== process.env.NODE_ENV ? warning(
        owner._warnedAboutRefsInRender,
        '%s is accessing getDOMNode or findDOMNode inside its render(). ' +
        'render() should be a pure function of props and state. It should ' +
        'never access something that requires stale data from the previous ' +
        'render, such as refs. Move this logic to componentDidMount and ' +
        'componentDidUpdate instead.',
        owner.getName() || 'A component'
      ) : null);
      owner._warnedAboutRefsInRender = true;
    }
  }
  if (componentOrElement == null) {
    return null;
  }
  if (isNode(componentOrElement)) {
    return componentOrElement;
  }
  if (ReactInstanceMap.has(componentOrElement)) {
    return ReactMount.getNodeFromInstance(componentOrElement);
  }
  ("production" !== process.env.NODE_ENV ? invariant(
    componentOrElement.render == null ||
    typeof componentOrElement.render !== 'function',
    'Component (with keys: %s) contains `render` method ' +
    'but is not mounted in the DOM',
    Object.keys(componentOrElement)
  ) : invariant(componentOrElement.render == null ||
  typeof componentOrElement.render !== 'function'));
  ("production" !== process.env.NODE_ENV ? invariant(
    false,
    'Element appears to be neither ReactComponent nor DOMNode (keys: %s)',
    Object.keys(componentOrElement)
  ) : invariant(false));
}

module.exports = findDOMNode;

}).call(this,require('_process'))
},{"./ReactCurrentOwner":198,"./ReactInstanceMap":226,"./ReactMount":230,"./invariant":304,"./isNode":306,"./warning":325,"_process":2}],287:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule flattenChildren
 */

'use strict';

var traverseAllChildren = require("./traverseAllChildren");
var warning = require("./warning");

/**
 * @param {function} traverseContext Context passed through traversal.
 * @param {?ReactComponent} child React child component.
 * @param {!string} name String name of key path to child.
 */
function flattenSingleChildIntoContext(traverseContext, child, name) {
  // We found a component instance.
  var result = traverseContext;
  var keyUnique = !result.hasOwnProperty(name);
  if ("production" !== process.env.NODE_ENV) {
    ("production" !== process.env.NODE_ENV ? warning(
      keyUnique,
      'flattenChildren(...): Encountered two children with the same key, ' +
      '`%s`. Child keys must be unique; when two children share a key, only ' +
      'the first child will be used.',
      name
    ) : null);
  }
  if (keyUnique && child != null) {
    result[name] = child;
  }
}

/**
 * Flattens children that are typically specified as `props.children`. Any null
 * children will not be included in the resulting object.
 * @return {!object} flattened children keyed by name.
 */
function flattenChildren(children) {
  if (children == null) {
    return children;
  }
  var result = {};
  traverseAllChildren(children, flattenSingleChildIntoContext, result);
  return result;
}

module.exports = flattenChildren;

}).call(this,require('_process'))
},{"./traverseAllChildren":323,"./warning":325,"_process":2}],288:[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule focusNode
 */

"use strict";

/**
 * @param {DOMElement} node input/textarea to focus
 */
function focusNode(node) {
  // IE8 can throw "Can't move focus to the control because it is invisible,
  // not enabled, or of a type that does not accept the focus." for all kinds of
  // reasons that are too expensive and fragile to test.
  try {
    node.focus();
  } catch(e) {
  }
}

module.exports = focusNode;

},{}],289:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule forEachAccumulated
 */

'use strict';

/**
 * @param {array} an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 */
var forEachAccumulated = function(arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);
  } else if (arr) {
    cb.call(scope, arr);
  }
};

module.exports = forEachAccumulated;

},{}],290:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getActiveElement
 * @typechecks
 */

/**
 * Same as document.activeElement but wraps in a try-catch block. In IE it is
 * not safe to call document.activeElement if there is nothing focused.
 *
 * The activeElement will be null only if the document body is not yet defined.
 */
function getActiveElement() /*?DOMElement*/ {
  try {
    return document.activeElement || document.body;
  } catch (e) {
    return document.body;
  }
}

module.exports = getActiveElement;

},{}],291:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventCharCode
 * @typechecks static-only
 */

'use strict';

/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `charCode` property.
 */
function getEventCharCode(nativeEvent) {
  var charCode;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode;

    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
    if (charCode === 0 && keyCode === 13) {
      charCode = 13;
    }
  } else {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;
  }

  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.
  if (charCode >= 32 || charCode === 13) {
    return charCode;
  }

  return 0;
}

module.exports = getEventCharCode;

},{}],292:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventKey
 * @typechecks static-only
 */

'use strict';

var getEventCharCode = require("./getEventCharCode");

/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var normalizeKey = {
  'Esc': 'Escape',
  'Spacebar': ' ',
  'Left': 'ArrowLeft',
  'Up': 'ArrowUp',
  'Right': 'ArrowRight',
  'Down': 'ArrowDown',
  'Del': 'Delete',
  'Win': 'OS',
  'Menu': 'ContextMenu',
  'Apps': 'ContextMenu',
  'Scroll': 'ScrollLock',
  'MozPrintableKey': 'Unidentified'
};

/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var translateToKey = {
  8: 'Backspace',
  9: 'Tab',
  12: 'Clear',
  13: 'Enter',
  16: 'Shift',
  17: 'Control',
  18: 'Alt',
  19: 'Pause',
  20: 'CapsLock',
  27: 'Escape',
  32: ' ',
  33: 'PageUp',
  34: 'PageDown',
  35: 'End',
  36: 'Home',
  37: 'ArrowLeft',
  38: 'ArrowUp',
  39: 'ArrowRight',
  40: 'ArrowDown',
  45: 'Insert',
  46: 'Delete',
  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
  144: 'NumLock',
  145: 'ScrollLock',
  224: 'Meta'
};

/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */
function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.

    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
    if (key !== 'Unidentified') {
      return key;
    }
  }

  // Browser does not implement `key`, polyfill as much of it as we can.
  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent);

    // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.
    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }
  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }
  return '';
}

module.exports = getEventKey;

},{"./getEventCharCode":291}],293:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventModifierState
 * @typechecks static-only
 */

'use strict';

/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */

var modifierKeyToProp = {
  'Alt': 'altKey',
  'Control': 'ctrlKey',
  'Meta': 'metaKey',
  'Shift': 'shiftKey'
};

// IE8 does not implement getModifierState so we simply map it to the only
// modifier keys exposed by the event itself, does not support Lock-keys.
// Currently, all major browsers except Chrome seems to support Lock-keys.
function modifierStateGetter(keyArg) {
  /*jshint validthis:true */
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;
  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }
  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}

module.exports = getEventModifierState;

},{}],294:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventTarget
 * @typechecks static-only
 */

'use strict';

/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */
function getEventTarget(nativeEvent) {
  var target = nativeEvent.target || nativeEvent.srcElement || window;
  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html
  return target.nodeType === 3 ? target.parentNode : target;
}

module.exports = getEventTarget;

},{}],295:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getIteratorFn
 * @typechecks static-only
 */

'use strict';

/* global Symbol */
var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

/**
 * Returns the iterator method function contained on the iterable object.
 *
 * Be sure to invoke the function with the iterable as context:
 *
 *     var iteratorFn = getIteratorFn(myIterable);
 *     if (iteratorFn) {
 *       var iterator = iteratorFn.call(myIterable);
 *       ...
 *     }
 *
 * @param {?object} maybeIterable
 * @return {?function}
 */
function getIteratorFn(maybeIterable) {
  var iteratorFn = maybeIterable && (
    (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL])
  );
  if (typeof iteratorFn === 'function') {
    return iteratorFn;
  }
}

module.exports = getIteratorFn;

},{}],296:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getMarkupWrap
 */

var ExecutionEnvironment = require("./ExecutionEnvironment");

var invariant = require("./invariant");

/**
 * Dummy container used to detect which wraps are necessary.
 */
var dummyNode =
  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Some browsers cannot use `innerHTML` to render certain elements standalone,
 * so we wrap them, render the wrapped nodes, then extract the desired node.
 *
 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
 */
var shouldWrap = {
  // Force wrapping for SVG elements because if they get created inside a <div>,
  // they will be initialized in the wrong namespace (and will not display).
  'circle': true,
  'clipPath': true,
  'defs': true,
  'ellipse': true,
  'g': true,
  'line': true,
  'linearGradient': true,
  'path': true,
  'polygon': true,
  'polyline': true,
  'radialGradient': true,
  'rect': true,
  'stop': true,
  'text': true
};

var selectWrap = [1, '<select multiple="true">', '</select>'];
var tableWrap = [1, '<table>', '</table>'];
var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

var svgWrap = [1, '<svg>', '</svg>'];

var markupWrap = {
  '*': [1, '?<div>', '</div>'],

  'area': [1, '<map>', '</map>'],
  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
  'legend': [1, '<fieldset>', '</fieldset>'],
  'param': [1, '<object>', '</object>'],
  'tr': [2, '<table><tbody>', '</tbody></table>'],

  'optgroup': selectWrap,
  'option': selectWrap,

  'caption': tableWrap,
  'colgroup': tableWrap,
  'tbody': tableWrap,
  'tfoot': tableWrap,
  'thead': tableWrap,

  'td': trWrap,
  'th': trWrap,

  'circle': svgWrap,
  'clipPath': svgWrap,
  'defs': svgWrap,
  'ellipse': svgWrap,
  'g': svgWrap,
  'line': svgWrap,
  'linearGradient': svgWrap,
  'path': svgWrap,
  'polygon': svgWrap,
  'polyline': svgWrap,
  'radialGradient': svgWrap,
  'rect': svgWrap,
  'stop': svgWrap,
  'text': svgWrap
};

/**
 * Gets the markup wrap configuration for the supplied `nodeName`.
 *
 * NOTE: This lazily detects which wraps are necessary for the current browser.
 *
 * @param {string} nodeName Lowercase `nodeName`.
 * @return {?array} Markup wrap configuration, if applicable.
 */
function getMarkupWrap(nodeName) {
  ("production" !== process.env.NODE_ENV ? invariant(!!dummyNode, 'Markup wrapping node not initialized') : invariant(!!dummyNode));
  if (!markupWrap.hasOwnProperty(nodeName)) {
    nodeName = '*';
  }
  if (!shouldWrap.hasOwnProperty(nodeName)) {
    if (nodeName === '*') {
      dummyNode.innerHTML = '<link />';
    } else {
      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
    }
    shouldWrap[nodeName] = !dummyNode.firstChild;
  }
  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
}


module.exports = getMarkupWrap;

}).call(this,require('_process'))
},{"./ExecutionEnvironment":175,"./invariant":304,"_process":2}],297:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getNodeForCharacterOffset
 */

'use strict';

/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */
function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }
  return node;
}

/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */
function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }
    node = node.parentNode;
  }
}

/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */
function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType === 3) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

module.exports = getNodeForCharacterOffset;

},{}],298:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getReactRootElementInContainer
 */

'use strict';

var DOC_NODE_TYPE = 9;

/**
 * @param {DOMElement|DOMDocument} container DOM element that may contain
 *                                           a React component
 * @return {?*} DOM element that may have the reactRoot ID, or null.
 */
function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOC_NODE_TYPE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

module.exports = getReactRootElementInContainer;

},{}],299:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getTextContentAccessor
 */

'use strict';

var ExecutionEnvironment = require("./ExecutionEnvironment");

var contentKey = null;

/**
 * Gets the key used to access text content on a DOM node.
 *
 * @return {?string} Key used to access text content.
 * @internal
 */
function getTextContentAccessor() {
  if (!contentKey && ExecutionEnvironment.canUseDOM) {
    // Prefer textContent to innerText because many browsers support both but
    // SVG <text> elements don't support innerText even when <div> does.
    contentKey = 'textContent' in document.documentElement ?
      'textContent' :
      'innerText';
  }
  return contentKey;
}

module.exports = getTextContentAccessor;

},{"./ExecutionEnvironment":175}],300:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getUnboundedScrollPosition
 * @typechecks
 */

"use strict";

/**
 * Gets the scroll position of the supplied element or window.
 *
 * The return values are unbounded, unlike `getScrollPosition`. This means they
 * may be negative or exceed the element boundaries (which is possible using
 * inertial scrolling).
 *
 * @param {DOMWindow|DOMElement} scrollable
 * @return {object} Map with `x` and `y` keys.
 */
function getUnboundedScrollPosition(scrollable) {
  if (scrollable === window) {
    return {
      x: window.pageXOffset || document.documentElement.scrollLeft,
      y: window.pageYOffset || document.documentElement.scrollTop
    };
  }
  return {
    x: scrollable.scrollLeft,
    y: scrollable.scrollTop
  };
}

module.exports = getUnboundedScrollPosition;

},{}],301:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule hyphenate
 * @typechecks
 */

var _uppercasePattern = /([A-Z])/g;

/**
 * Hyphenates a camelcased string, for example:
 *
 *   > hyphenate('backgroundColor')
 *   < "background-color"
 *
 * For CSS style names, use `hyphenateStyleName` instead which works properly
 * with all vendor prefixes, including `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenate(string) {
  return string.replace(_uppercasePattern, '-$1').toLowerCase();
}

module.exports = hyphenate;

},{}],302:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule hyphenateStyleName
 * @typechecks
 */

"use strict";

var hyphenate = require("./hyphenate");

var msPattern = /^ms-/;

/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenateStyleName(string) {
  return hyphenate(string).replace(msPattern, '-ms-');
}

module.exports = hyphenateStyleName;

},{"./hyphenate":301}],303:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule instantiateReactComponent
 * @typechecks static-only
 */

'use strict';

var ReactCompositeComponent = require("./ReactCompositeComponent");
var ReactEmptyComponent = require("./ReactEmptyComponent");
var ReactNativeComponent = require("./ReactNativeComponent");

var assign = require("./Object.assign");
var invariant = require("./invariant");
var warning = require("./warning");

// To avoid a cyclic dependency, we create the final class in this module
var ReactCompositeComponentWrapper = function() { };
assign(
  ReactCompositeComponentWrapper.prototype,
  ReactCompositeComponent.Mixin,
  {
    _instantiateReactComponent: instantiateReactComponent
  }
);

/**
 * Check if the type reference is a known internal type. I.e. not a user
 * provided composite type.
 *
 * @param {function} type
 * @return {boolean} Returns true if this is a valid internal type.
 */
function isInternalComponentType(type) {
  return (
    typeof type === 'function' &&
    typeof type.prototype !== 'undefined' &&
    typeof type.prototype.mountComponent === 'function' &&
    typeof type.prototype.receiveComponent === 'function'
  );
}

/**
 * Given a ReactNode, create an instance that will actually be mounted.
 *
 * @param {ReactNode} node
 * @param {*} parentCompositeType The composite type that resolved this.
 * @return {object} A new instance of the element's constructor.
 * @protected
 */
function instantiateReactComponent(node, parentCompositeType) {
  var instance;

  if (node === null || node === false) {
    node = ReactEmptyComponent.emptyElement;
  }

  if (typeof node === 'object') {
    var element = node;
    if ("production" !== process.env.NODE_ENV) {
      ("production" !== process.env.NODE_ENV ? warning(
        element && (typeof element.type === 'function' ||
                    typeof element.type === 'string'),
        'Only functions or strings can be mounted as React components.'
      ) : null);
    }

    // Special case string values
    if (parentCompositeType === element.type &&
        typeof element.type === 'string') {
      // Avoid recursion if the wrapper renders itself.
      instance = ReactNativeComponent.createInternalComponent(element);
      // All native components are currently wrapped in a composite so we're
      // safe to assume that this is what we should instantiate.
    } else if (isInternalComponentType(element.type)) {
      // This is temporarily available for custom components that are not string
      // represenations. I.e. ART. Once those are updated to use the string
      // representation, we can drop this code path.
      instance = new element.type(element);
    } else {
      instance = new ReactCompositeComponentWrapper();
    }
  } else if (typeof node === 'string' || typeof node === 'number') {
    instance = ReactNativeComponent.createInstanceForText(node);
  } else {
    ("production" !== process.env.NODE_ENV ? invariant(
      false,
      'Encountered invalid React node of type %s',
      typeof node
    ) : invariant(false));
  }

  if ("production" !== process.env.NODE_ENV) {
    ("production" !== process.env.NODE_ENV ? warning(
      typeof instance.construct === 'function' &&
      typeof instance.mountComponent === 'function' &&
      typeof instance.receiveComponent === 'function' &&
      typeof instance.unmountComponent === 'function',
      'Only React Components can be mounted.'
    ) : null);
  }

  // Sets up the instance. This can probably just move into the constructor now.
  instance.construct(node);

  // These two fields are used by the DOM and ART diffing algorithms
  // respectively. Instead of using expandos on components, we should be
  // storing the state needed by the diffing algorithms elsewhere.
  instance._mountIndex = 0;
  instance._mountImage = null;

  if ("production" !== process.env.NODE_ENV) {
    instance._isOwnerNecessary = false;
    instance._warnedAboutRefsInRender = false;
  }

  // Internal instances should fully constructed at this point, so they should
  // not get any new fields added to them at this point.
  if ("production" !== process.env.NODE_ENV) {
    if (Object.preventExtensions) {
      Object.preventExtensions(instance);
    }
  }

  return instance;
}

module.exports = instantiateReactComponent;

}).call(this,require('_process'))
},{"./Object.assign":182,"./ReactCompositeComponent":196,"./ReactEmptyComponent":218,"./ReactNativeComponent":233,"./invariant":304,"./warning":325,"_process":2}],304:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule invariant
 */

"use strict";

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var invariant = function(condition, format, a, b, c, d, e, f) {
  if ("production" !== process.env.NODE_ENV) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  }

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error(
        'Minified exception occurred; use the non-minified dev environment ' +
        'for the full error message and additional helpful warnings.'
      );
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(
        'Invariant Violation: ' +
        format.replace(/%s/g, function() { return args[argIndex++]; })
      );
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
};

module.exports = invariant;

}).call(this,require('_process'))
},{"_process":2}],305:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isEventSupported
 */

'use strict';

var ExecutionEnvironment = require("./ExecutionEnvironment");

var useHasFeature;
if (ExecutionEnvironment.canUseDOM) {
  useHasFeature =
    document.implementation &&
    document.implementation.hasFeature &&
    // always returns true in newer browsers as per the standard.
    // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
    document.implementation.hasFeature('', '') !== true;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
function isEventSupported(eventNameSuffix, capture) {
  if (!ExecutionEnvironment.canUseDOM ||
      capture && !('addEventListener' in document)) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = eventName in document;

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
    // This is the only way to test support for the `wheel` event in IE9+.
    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
  }

  return isSupported;
}

module.exports = isEventSupported;

},{"./ExecutionEnvironment":175}],306:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isNode
 * @typechecks
 */

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM node.
 */
function isNode(object) {
  return !!(object && (
    ((typeof Node === 'function' ? object instanceof Node : typeof object === 'object' &&
    typeof object.nodeType === 'number' &&
    typeof object.nodeName === 'string'))
  ));
}

module.exports = isNode;

},{}],307:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isTextInputElement
 */

'use strict';

/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */
var supportedInputTypes = {
  'color': true,
  'date': true,
  'datetime': true,
  'datetime-local': true,
  'email': true,
  'month': true,
  'number': true,
  'password': true,
  'range': true,
  'search': true,
  'tel': true,
  'text': true,
  'time': true,
  'url': true,
  'week': true
};

function isTextInputElement(elem) {
  return elem && (
    (elem.nodeName === 'INPUT' && supportedInputTypes[elem.type] || elem.nodeName === 'TEXTAREA')
  );
}

module.exports = isTextInputElement;

},{}],308:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isTextNode
 * @typechecks
 */

var isNode = require("./isNode");

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM text node.
 */
function isTextNode(object) {
  return isNode(object) && object.nodeType == 3;
}

module.exports = isTextNode;

},{"./isNode":306}],309:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule joinClasses
 * @typechecks static-only
 */

'use strict';

/**
 * Combines multiple className strings into one.
 * http://jsperf.com/joinclasses-args-vs-array
 *
 * @param {...?string} classes
 * @return {string}
 */
function joinClasses(className/*, ... */) {
  if (!className) {
    className = '';
  }
  var nextClass;
  var argLength = arguments.length;
  if (argLength > 1) {
    for (var ii = 1; ii < argLength; ii++) {
      nextClass = arguments[ii];
      if (nextClass) {
        className = (className ? className + ' ' : '') + nextClass;
      }
    }
  }
  return className;
}

module.exports = joinClasses;

},{}],310:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule keyMirror
 * @typechecks static-only
 */

'use strict';

var invariant = require("./invariant");

/**
 * Constructs an enumeration with keys equal to their value.
 *
 * For example:
 *
 *   var COLORS = keyMirror({blue: null, red: null});
 *   var myColor = COLORS.blue;
 *   var isColorValid = !!COLORS[myColor];
 *
 * The last line could not be performed if the values of the generated enum were
 * not equal to their keys.
 *
 *   Input:  {key1: val1, key2: val2}
 *   Output: {key1: key1, key2: key2}
 *
 * @param {object} obj
 * @return {object}
 */
var keyMirror = function(obj) {
  var ret = {};
  var key;
  ("production" !== process.env.NODE_ENV ? invariant(
    obj instanceof Object && !Array.isArray(obj),
    'keyMirror(...): Argument must be an object.'
  ) : invariant(obj instanceof Object && !Array.isArray(obj)));
  for (key in obj) {
    if (!obj.hasOwnProperty(key)) {
      continue;
    }
    ret[key] = key;
  }
  return ret;
};

module.exports = keyMirror;

}).call(this,require('_process'))
},{"./invariant":304,"_process":2}],311:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule keyOf
 */

/**
 * Allows extraction of a minified key. Let's the build system minify keys
 * without loosing the ability to dynamically use key strings as values
 * themselves. Pass in an object with a single key/val pair and it will return
 * you the string key of that single record. Suppose you want to grab the
 * value for a key 'className' inside of an object. Key/val minification may
 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
 * reuse those resolutions.
 */
var keyOf = function(oneKeyObj) {
  var key;
  for (key in oneKeyObj) {
    if (!oneKeyObj.hasOwnProperty(key)) {
      continue;
    }
    return key;
  }
  return null;
};


module.exports = keyOf;

},{}],312:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule mapObject
 */

'use strict';

var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * Executes the provided `callback` once for each enumerable own property in the
 * object and constructs a new object from the results. The `callback` is
 * invoked with three arguments:
 *
 *  - the property value
 *  - the property name
 *  - the object being traversed
 *
 * Properties that are added after the call to `mapObject` will not be visited
 * by `callback`. If the values of existing properties are changed, the value
 * passed to `callback` will be the value at the time `mapObject` visits them.
 * Properties that are deleted before being visited are not visited.
 *
 * @grep function objectMap()
 * @grep function objMap()
 *
 * @param {?object} object
 * @param {function} callback
 * @param {*} context
 * @return {?object}
 */
function mapObject(object, callback, context) {
  if (!object) {
    return null;
  }
  var result = {};
  for (var name in object) {
    if (hasOwnProperty.call(object, name)) {
      result[name] = callback.call(context, object[name], name, object);
    }
  }
  return result;
}

module.exports = mapObject;

},{}],313:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule memoizeStringOnly
 * @typechecks static-only
 */

'use strict';

/**
 * Memoizes the return value of a function that accepts one string argument.
 *
 * @param {function} callback
 * @return {function}
 */
function memoizeStringOnly(callback) {
  var cache = {};
  return function(string) {
    if (!cache.hasOwnProperty(string)) {
      cache[string] = callback.call(this, string);
    }
    return cache[string];
  };
}

module.exports = memoizeStringOnly;

},{}],314:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule onlyChild
 */
'use strict';

var ReactElement = require("./ReactElement");

var invariant = require("./invariant");

/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection. The current implementation of this
 * function assumes that a single child gets passed without a wrapper, but the
 * purpose of this helper function is to abstract away the particular structure
 * of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactComponent} The first and only `ReactComponent` contained in the
 * structure.
 */
function onlyChild(children) {
  ("production" !== process.env.NODE_ENV ? invariant(
    ReactElement.isValidElement(children),
    'onlyChild must be passed a children with exactly one child.'
  ) : invariant(ReactElement.isValidElement(children)));
  return children;
}

module.exports = onlyChild;

}).call(this,require('_process'))
},{"./ReactElement":216,"./invariant":304,"_process":2}],315:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule performance
 * @typechecks
 */

"use strict";

var ExecutionEnvironment = require("./ExecutionEnvironment");

var performance;

if (ExecutionEnvironment.canUseDOM) {
  performance =
    window.performance ||
    window.msPerformance ||
    window.webkitPerformance;
}

module.exports = performance || {};

},{"./ExecutionEnvironment":175}],316:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule performanceNow
 * @typechecks
 */

var performance = require("./performance");

/**
 * Detect if we can use `window.performance.now()` and gracefully fallback to
 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
 * because of Facebook's testing infrastructure.
 */
if (!performance || !performance.now) {
  performance = Date;
}

var performanceNow = performance.now.bind(performance);

module.exports = performanceNow;

},{"./performance":315}],317:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule quoteAttributeValueForBrowser
 */

'use strict';

var escapeTextContentForBrowser = require("./escapeTextContentForBrowser");

/**
 * Escapes attribute value to prevent scripting attacks.
 *
 * @param {*} value Value to escape.
 * @return {string} An escaped string.
 */
function quoteAttributeValueForBrowser(value) {
  return '"' + escapeTextContentForBrowser(value) + '"';
}

module.exports = quoteAttributeValueForBrowser;

},{"./escapeTextContentForBrowser":285}],318:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule setInnerHTML
 */

/* globals MSApp */

'use strict';

var ExecutionEnvironment = require("./ExecutionEnvironment");

var WHITESPACE_TEST = /^[ \r\n\t\f]/;
var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

/**
 * Set the innerHTML property of a node, ensuring that whitespace is preserved
 * even in IE8.
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */
var setInnerHTML = function(node, html) {
  node.innerHTML = html;
};

// Win8 apps: Allow all html to be inserted
if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
  setInnerHTML = function(node, html) {
    MSApp.execUnsafeLocalFunction(function() {
      node.innerHTML = html;
    });
  };
}

if (ExecutionEnvironment.canUseDOM) {
  // IE8: When updating a just created node with innerHTML only leading
  // whitespace is removed. When updating an existing node with innerHTML
  // whitespace in root TextNodes is also collapsed.
  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

  // Feature detection; only IE8 is known to behave improperly like this.
  var testElement = document.createElement('div');
  testElement.innerHTML = ' ';
  if (testElement.innerHTML === '') {
    setInnerHTML = function(node, html) {
      // Magic theory: IE8 supposedly differentiates between added and updated
      // nodes when processing innerHTML, innerHTML on updated nodes suffers
      // from worse whitespace behavior. Re-adding a node like this triggers
      // the initial and more favorable whitespace behavior.
      // TODO: What to do on a detached node?
      if (node.parentNode) {
        node.parentNode.replaceChild(node, node);
      }

      // We also implement a workaround for non-visible tags disappearing into
      // thin air on IE8, this only happens if there is no visible text
      // in-front of the non-visible tags. Piggyback on the whitespace fix
      // and simply check if any non-visible tags appear in the source.
      if (WHITESPACE_TEST.test(html) ||
          html[0] === '<' && NONVISIBLE_TEST.test(html)) {
        // Recover leading whitespace by temporarily prepending any character.
        // \uFEFF has the potential advantage of being zero-width/invisible.
        node.innerHTML = '\uFEFF' + html;

        // deleteData leaves an empty `TextNode` which offsets the index of all
        // children. Definitely want to avoid this.
        var textNode = node.firstChild;
        if (textNode.data.length === 1) {
          node.removeChild(textNode);
        } else {
          textNode.deleteData(0, 1);
        }
      } else {
        node.innerHTML = html;
      }
    };
  }
}

module.exports = setInnerHTML;

},{"./ExecutionEnvironment":175}],319:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule setTextContent
 */

'use strict';

var ExecutionEnvironment = require("./ExecutionEnvironment");
var escapeTextContentForBrowser = require("./escapeTextContentForBrowser");
var setInnerHTML = require("./setInnerHTML");

/**
 * Set the textContent property of a node, ensuring that whitespace is preserved
 * even in IE8. innerText is a poor substitute for textContent and, among many
 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
 * as it should.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */
var setTextContent = function(node, text) {
  node.textContent = text;
};

if (ExecutionEnvironment.canUseDOM) {
  if (!('textContent' in document.documentElement)) {
    setTextContent = function(node, text) {
      setInnerHTML(node, escapeTextContentForBrowser(text));
    };
  }
}

module.exports = setTextContent;

},{"./ExecutionEnvironment":175,"./escapeTextContentForBrowser":285,"./setInnerHTML":318}],320:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule shallowEqual
 */

'use strict';

/**
 * Performs equality by iterating through keys on an object and returning
 * false when any key has values which are not strictly equal between
 * objA and objB. Returns true when the values of all keys are strictly equal.
 *
 * @return {boolean}
 */
function shallowEqual(objA, objB) {
  if (objA === objB) {
    return true;
  }
  var key;
  // Test for A's keys different from B.
  for (key in objA) {
    if (objA.hasOwnProperty(key) &&
        (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {
      return false;
    }
  }
  // Test for B's keys missing from A.
  for (key in objB) {
    if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {
      return false;
    }
  }
  return true;
}

module.exports = shallowEqual;

},{}],321:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule shouldUpdateReactComponent
 * @typechecks static-only
 */

'use strict';

var warning = require("./warning");

/**
 * Given a `prevElement` and `nextElement`, determines if the existing
 * instance should be updated as opposed to being destroyed or replaced by a new
 * instance. Both arguments are elements. This ensures that this logic can
 * operate on stateless trees without any backing instance.
 *
 * @param {?object} prevElement
 * @param {?object} nextElement
 * @return {boolean} True if the existing instance should be updated.
 * @protected
 */
function shouldUpdateReactComponent(prevElement, nextElement) {
  if (prevElement != null && nextElement != null) {
    var prevType = typeof prevElement;
    var nextType = typeof nextElement;
    if (prevType === 'string' || prevType === 'number') {
      return (nextType === 'string' || nextType === 'number');
    } else {
      if (nextType === 'object' &&
          prevElement.type === nextElement.type &&
          prevElement.key === nextElement.key) {
        var ownersMatch = prevElement._owner === nextElement._owner;
        var prevName = null;
        var nextName = null;
        var nextDisplayName = null;
        if ("production" !== process.env.NODE_ENV) {
          if (!ownersMatch) {
            if (prevElement._owner != null &&
                prevElement._owner.getPublicInstance() != null &&
                prevElement._owner.getPublicInstance().constructor != null) {
              prevName =
                prevElement._owner.getPublicInstance().constructor.displayName;
            }
            if (nextElement._owner != null &&
                nextElement._owner.getPublicInstance() != null &&
                nextElement._owner.getPublicInstance().constructor != null) {
              nextName =
                nextElement._owner.getPublicInstance().constructor.displayName;
            }
            if (nextElement.type != null &&
                nextElement.type.displayName != null) {
              nextDisplayName = nextElement.type.displayName;
            }
            if (nextElement.type != null && typeof nextElement.type === 'string') {
              nextDisplayName = nextElement.type;
            }
            if (typeof nextElement.type !== 'string' ||
                nextElement.type === 'input' ||
                nextElement.type === 'textarea') {
              if ((prevElement._owner != null &&
                  prevElement._owner._isOwnerNecessary === false) ||
                  (nextElement._owner != null &&
                  nextElement._owner._isOwnerNecessary === false)) {
                if (prevElement._owner != null) {
                  prevElement._owner._isOwnerNecessary = true;
                }
                if (nextElement._owner != null) {
                  nextElement._owner._isOwnerNecessary = true;
                }
                ("production" !== process.env.NODE_ENV ? warning(
                  false,
                  '<%s /> is being rendered by both %s and %s using the same ' +
                  'key (%s) in the same place. Currently, this means that ' +
                  'they don\'t preserve state. This behavior should be very ' +
                  'rare so we\'re considering deprecating it. Please contact ' +
                  'the React team and explain your use case so that we can ' +
                  'take that into consideration.',
                  nextDisplayName || 'Unknown Component',
                  prevName || '[Unknown]',
                  nextName || '[Unknown]',
                  prevElement.key
                ) : null);
              }
            }
          }
        }
        return ownersMatch;
      }
    }
  }
  return false;
}

module.exports = shouldUpdateReactComponent;

}).call(this,require('_process'))
},{"./warning":325,"_process":2}],322:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule toArray
 * @typechecks
 */

var invariant = require("./invariant");

/**
 * Convert array-like objects to arrays.
 *
 * This API assumes the caller knows the contents of the data type. For less
 * well defined inputs use createArrayFromMixed.
 *
 * @param {object|function|filelist} obj
 * @return {array}
 */
function toArray(obj) {
  var length = obj.length;

  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
  // old versions of Safari).
  ("production" !== process.env.NODE_ENV ? invariant(
    !Array.isArray(obj) &&
    (typeof obj === 'object' || typeof obj === 'function'),
    'toArray: Array-like object expected'
  ) : invariant(!Array.isArray(obj) &&
  (typeof obj === 'object' || typeof obj === 'function')));

  ("production" !== process.env.NODE_ENV ? invariant(
    typeof length === 'number',
    'toArray: Object needs a length property'
  ) : invariant(typeof length === 'number'));

  ("production" !== process.env.NODE_ENV ? invariant(
    length === 0 ||
    (length - 1) in obj,
    'toArray: Object should have keys for indices'
  ) : invariant(length === 0 ||
  (length - 1) in obj));

  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
  // without method will throw during the slice call and skip straight to the
  // fallback.
  if (obj.hasOwnProperty) {
    try {
      return Array.prototype.slice.call(obj);
    } catch (e) {
      // IE < 9 does not support Array#slice on collections objects
    }
  }

  // Fall back to copying key by key. This assumes all keys have a value,
  // so will not preserve sparsely populated inputs.
  var ret = Array(length);
  for (var ii = 0; ii < length; ii++) {
    ret[ii] = obj[ii];
  }
  return ret;
}

module.exports = toArray;

}).call(this,require('_process'))
},{"./invariant":304,"_process":2}],323:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule traverseAllChildren
 */

'use strict';

var ReactElement = require("./ReactElement");
var ReactFragment = require("./ReactFragment");
var ReactInstanceHandles = require("./ReactInstanceHandles");

var getIteratorFn = require("./getIteratorFn");
var invariant = require("./invariant");
var warning = require("./warning");

var SEPARATOR = ReactInstanceHandles.SEPARATOR;
var SUBSEPARATOR = ':';

/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */

var userProvidedKeyEscaperLookup = {
  '=': '=0',
  '.': '=1',
  ':': '=2'
};

var userProvidedKeyEscapeRegex = /[=.:]/g;

var didWarnAboutMaps = false;

function userProvidedKeyEscaper(match) {
  return userProvidedKeyEscaperLookup[match];
}

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  if (component && component.key != null) {
    // Explicit key
    return wrapUserProvidedKey(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * Escape a component key so that it is safe to use in a reactid.
 *
 * @param {*} key Component key to be escaped.
 * @return {string} An escaped string.
 */
function escapeUserProvidedKey(text) {
  return ('' + text).replace(
    userProvidedKeyEscapeRegex,
    userProvidedKeyEscaper
  );
}

/**
 * Wrap a `key` value explicitly provided by the user to distinguish it from
 * implicitly-generated keys generated by a component's index in its parent.
 *
 * @param {string} key Value of a user-provided `key` attribute
 * @return {string}
 */
function wrapUserProvidedKey(key) {
  return '$' + escapeUserProvidedKey(key);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!number} indexSoFar Number of children encountered until this point.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildrenImpl(
  children,
  nameSoFar,
  indexSoFar,
  callback,
  traverseContext
) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  if (children === null ||
      type === 'string' ||
      type === 'number' ||
      ReactElement.isValidElement(children)) {
    callback(
      traverseContext,
      children,
      // If it's the only child, treat the name as if it was wrapped in an array
      // so that it's consistent if the number of children grows.
      nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar,
      indexSoFar
    );
    return 1;
  }

  var child, nextName, nextIndex;
  var subtreeCount = 0; // Count of children found in the current subtree.

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = (
        (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
        getComponentKey(child, i)
      );
      nextIndex = indexSoFar + subtreeCount;
      subtreeCount += traverseAllChildrenImpl(
        child,
        nextName,
        nextIndex,
        callback,
        traverseContext
      );
    }
  } else {
    var iteratorFn = getIteratorFn(children);
    if (iteratorFn) {
      var iterator = iteratorFn.call(children);
      var step;
      if (iteratorFn !== children.entries) {
        var ii = 0;
        while (!(step = iterator.next()).done) {
          child = step.value;
          nextName = (
            (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
            getComponentKey(child, ii++)
          );
          nextIndex = indexSoFar + subtreeCount;
          subtreeCount += traverseAllChildrenImpl(
            child,
            nextName,
            nextIndex,
            callback,
            traverseContext
          );
        }
      } else {
        if ("production" !== process.env.NODE_ENV) {
          ("production" !== process.env.NODE_ENV ? warning(
            didWarnAboutMaps,
            'Using Maps as children is not yet fully supported. It is an ' +
            'experimental feature that might be removed. Convert it to a ' +
            'sequence / iterable of keyed ReactElements instead.'
          ) : null);
          didWarnAboutMaps = true;
        }
        // Iterator will provide entry [k,v] tuples rather than values.
        while (!(step = iterator.next()).done) {
          var entry = step.value;
          if (entry) {
            child = entry[1];
            nextName = (
              (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
              wrapUserProvidedKey(entry[0]) + SUBSEPARATOR +
              getComponentKey(child, 0)
            );
            nextIndex = indexSoFar + subtreeCount;
            subtreeCount += traverseAllChildrenImpl(
              child,
              nextName,
              nextIndex,
              callback,
              traverseContext
            );
          }
        }
      }
    } else if (type === 'object') {
      ("production" !== process.env.NODE_ENV ? invariant(
        children.nodeType !== 1,
        'traverseAllChildren(...): Encountered an invalid child; DOM ' +
        'elements are not valid children of React components.'
      ) : invariant(children.nodeType !== 1));
      var fragment = ReactFragment.extract(children);
      for (var key in fragment) {
        if (fragment.hasOwnProperty(key)) {
          child = fragment[key];
          nextName = (
            (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
            wrapUserProvidedKey(key) + SUBSEPARATOR +
            getComponentKey(child, 0)
          );
          nextIndex = indexSoFar + subtreeCount;
          subtreeCount += traverseAllChildrenImpl(
            child,
            nextName,
            nextIndex,
            callback,
            traverseContext
          );
        }
      }
    }
  }

  return subtreeCount;
}

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', 0, callback, traverseContext);
}

module.exports = traverseAllChildren;

}).call(this,require('_process'))
},{"./ReactElement":216,"./ReactFragment":222,"./ReactInstanceHandles":225,"./getIteratorFn":295,"./invariant":304,"./warning":325,"_process":2}],324:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule update
 */

 /* global hasOwnProperty:true */

'use strict';

var assign = require("./Object.assign");
var keyOf = require("./keyOf");
var invariant = require("./invariant");
var hasOwnProperty = {}.hasOwnProperty;

function shallowCopy(x) {
  if (Array.isArray(x)) {
    return x.concat();
  } else if (x && typeof x === 'object') {
    return assign(new x.constructor(), x);
  } else {
    return x;
  }
}

var COMMAND_PUSH = keyOf({$push: null});
var COMMAND_UNSHIFT = keyOf({$unshift: null});
var COMMAND_SPLICE = keyOf({$splice: null});
var COMMAND_SET = keyOf({$set: null});
var COMMAND_MERGE = keyOf({$merge: null});
var COMMAND_APPLY = keyOf({$apply: null});

var ALL_COMMANDS_LIST = [
  COMMAND_PUSH,
  COMMAND_UNSHIFT,
  COMMAND_SPLICE,
  COMMAND_SET,
  COMMAND_MERGE,
  COMMAND_APPLY
];

var ALL_COMMANDS_SET = {};

ALL_COMMANDS_LIST.forEach(function(command) {
  ALL_COMMANDS_SET[command] = true;
});

function invariantArrayCase(value, spec, command) {
  ("production" !== process.env.NODE_ENV ? invariant(
    Array.isArray(value),
    'update(): expected target of %s to be an array; got %s.',
    command,
    value
  ) : invariant(Array.isArray(value)));
  var specValue = spec[command];
  ("production" !== process.env.NODE_ENV ? invariant(
    Array.isArray(specValue),
    'update(): expected spec of %s to be an array; got %s. ' +
    'Did you forget to wrap your parameter in an array?',
    command,
    specValue
  ) : invariant(Array.isArray(specValue)));
}

function update(value, spec) {
  ("production" !== process.env.NODE_ENV ? invariant(
    typeof spec === 'object',
    'update(): You provided a key path to update() that did not contain one ' +
    'of %s. Did you forget to include {%s: ...}?',
    ALL_COMMANDS_LIST.join(', '),
    COMMAND_SET
  ) : invariant(typeof spec === 'object'));

  if (hasOwnProperty.call(spec, COMMAND_SET)) {
    ("production" !== process.env.NODE_ENV ? invariant(
      Object.keys(spec).length === 1,
      'Cannot have more than one key in an object with %s',
      COMMAND_SET
    ) : invariant(Object.keys(spec).length === 1));

    return spec[COMMAND_SET];
  }

  var nextValue = shallowCopy(value);

  if (hasOwnProperty.call(spec, COMMAND_MERGE)) {
    var mergeObj = spec[COMMAND_MERGE];
    ("production" !== process.env.NODE_ENV ? invariant(
      mergeObj && typeof mergeObj === 'object',
      'update(): %s expects a spec of type \'object\'; got %s',
      COMMAND_MERGE,
      mergeObj
    ) : invariant(mergeObj && typeof mergeObj === 'object'));
    ("production" !== process.env.NODE_ENV ? invariant(
      nextValue && typeof nextValue === 'object',
      'update(): %s expects a target of type \'object\'; got %s',
      COMMAND_MERGE,
      nextValue
    ) : invariant(nextValue && typeof nextValue === 'object'));
    assign(nextValue, spec[COMMAND_MERGE]);
  }

  if (hasOwnProperty.call(spec, COMMAND_PUSH)) {
    invariantArrayCase(value, spec, COMMAND_PUSH);
    spec[COMMAND_PUSH].forEach(function(item) {
      nextValue.push(item);
    });
  }

  if (hasOwnProperty.call(spec, COMMAND_UNSHIFT)) {
    invariantArrayCase(value, spec, COMMAND_UNSHIFT);
    spec[COMMAND_UNSHIFT].forEach(function(item) {
      nextValue.unshift(item);
    });
  }

  if (hasOwnProperty.call(spec, COMMAND_SPLICE)) {
    ("production" !== process.env.NODE_ENV ? invariant(
      Array.isArray(value),
      'Expected %s target to be an array; got %s',
      COMMAND_SPLICE,
      value
    ) : invariant(Array.isArray(value)));
    ("production" !== process.env.NODE_ENV ? invariant(
      Array.isArray(spec[COMMAND_SPLICE]),
      'update(): expected spec of %s to be an array of arrays; got %s. ' +
      'Did you forget to wrap your parameters in an array?',
      COMMAND_SPLICE,
      spec[COMMAND_SPLICE]
    ) : invariant(Array.isArray(spec[COMMAND_SPLICE])));
    spec[COMMAND_SPLICE].forEach(function(args) {
      ("production" !== process.env.NODE_ENV ? invariant(
        Array.isArray(args),
        'update(): expected spec of %s to be an array of arrays; got %s. ' +
        'Did you forget to wrap your parameters in an array?',
        COMMAND_SPLICE,
        spec[COMMAND_SPLICE]
      ) : invariant(Array.isArray(args)));
      nextValue.splice.apply(nextValue, args);
    });
  }

  if (hasOwnProperty.call(spec, COMMAND_APPLY)) {
    ("production" !== process.env.NODE_ENV ? invariant(
      typeof spec[COMMAND_APPLY] === 'function',
      'update(): expected spec of %s to be a function; got %s.',
      COMMAND_APPLY,
      spec[COMMAND_APPLY]
    ) : invariant(typeof spec[COMMAND_APPLY] === 'function'));
    nextValue = spec[COMMAND_APPLY](nextValue);
  }

  for (var k in spec) {
    if (!(ALL_COMMANDS_SET.hasOwnProperty(k) && ALL_COMMANDS_SET[k])) {
      nextValue[k] = update(value[k], spec[k]);
    }
  }

  return nextValue;
}

module.exports = update;

}).call(this,require('_process'))
},{"./Object.assign":182,"./invariant":304,"./keyOf":311,"_process":2}],325:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule warning
 */

"use strict";

var emptyFunction = require("./emptyFunction");

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction;

if ("production" !== process.env.NODE_ENV) {
  warning = function(condition, format ) {for (var args=[],$__0=2,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
    if (format === undefined) {
      throw new Error(
        '`warning(condition, format, ...args)` requires a warning ' +
        'message argument'
      );
    }

    if (format.length < 10 || /^[s\W]*$/.test(format)) {
      throw new Error(
        'The warning format should be able to uniquely identify this ' +
        'warning. Please, use a more descriptive format than: ' + format
      );
    }

    if (format.indexOf('Failed Composite propType: ') === 0) {
      return; // Ignore CompositeComponent proptype check.
    }

    if (!condition) {
      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function()  {return args[argIndex++];});
      console.warn(message);
      try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch(x) {}
    }
  };
}

module.exports = warning;

}).call(this,require('_process'))
},{"./emptyFunction":283,"_process":2}],326:[function(require,module,exports){
module.exports = require('./lib/React');

},{"./lib/React":184}],327:[function(require,module,exports){
//     Underscore.js 1.8.3
//     http://underscorejs.org
//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` in the browser, or `exports` on the server.
  var root = this;

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

  // Create quick reference variables for speed access to core prototypes.
  var
    push             = ArrayProto.push,
    slice            = ArrayProto.slice,
    toString         = ObjProto.toString,
    hasOwnProperty   = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var
    nativeIsArray      = Array.isArray,
    nativeKeys         = Object.keys,
    nativeBind         = FuncProto.bind,
    nativeCreate       = Object.create;

  // Naked function reference for surrogate-prototype-swapping.
  var Ctor = function(){};

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for the old `require()` API. If we're in
  // the browser, add `_` as a global object.
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.8.3';

  // Internal function that returns an efficient (for current engines) version
  // of the passed-in callback, to be repeatedly applied in other Underscore
  // functions.
  var optimizeCb = function(func, context, argCount) {
    if (context === void 0) return func;
    switch (argCount == null ? 3 : argCount) {
      case 1: return function(value) {
        return func.call(context, value);
      };
      case 2: return function(value, other) {
        return func.call(context, value, other);
      };
      case 3: return function(value, index, collection) {
        return func.call(context, value, index, collection);
      };
      case 4: return function(accumulator, value, index, collection) {
        return func.call(context, accumulator, value, index, collection);
      };
    }
    return function() {
      return func.apply(context, arguments);
    };
  };

  // A mostly-internal function to generate callbacks that can be applied
  // to each element in a collection, returning the desired result — either
  // identity, an arbitrary callback, a property matcher, or a property accessor.
  var cb = function(value, context, argCount) {
    if (value == null) return _.identity;
    if (_.isFunction(value)) return optimizeCb(value, context, argCount);
    if (_.isObject(value)) return _.matcher(value);
    return _.property(value);
  };
  _.iteratee = function(value, context) {
    return cb(value, context, Infinity);
  };

  // An internal function for creating assigner functions.
  var createAssigner = function(keysFunc, undefinedOnly) {
    return function(obj) {
      var length = arguments.length;
      if (length < 2 || obj == null) return obj;
      for (var index = 1; index < length; index++) {
        var source = arguments[index],
            keys = keysFunc(source),
            l = keys.length;
        for (var i = 0; i < l; i++) {
          var key = keys[i];
          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];
        }
      }
      return obj;
    };
  };

  // An internal function for creating a new object that inherits from another.
  var baseCreate = function(prototype) {
    if (!_.isObject(prototype)) return {};
    if (nativeCreate) return nativeCreate(prototype);
    Ctor.prototype = prototype;
    var result = new Ctor;
    Ctor.prototype = null;
    return result;
  };

  var property = function(key) {
    return function(obj) {
      return obj == null ? void 0 : obj[key];
    };
  };

  // Helper for collection methods to determine whether a collection
  // should be iterated as an array or as an object
  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
  var getLength = property('length');
  var isArrayLike = function(collection) {
    var length = getLength(collection);
    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
  };

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles raw objects in addition to array-likes. Treats all
  // sparse array-likes as if they were dense.
  _.each = _.forEach = function(obj, iteratee, context) {
    iteratee = optimizeCb(iteratee, context);
    var i, length;
    if (isArrayLike(obj)) {
      for (i = 0, length = obj.length; i < length; i++) {
        iteratee(obj[i], i, obj);
      }
    } else {
      var keys = _.keys(obj);
      for (i = 0, length = keys.length; i < length; i++) {
        iteratee(obj[keys[i]], keys[i], obj);
      }
    }
    return obj;
  };

  // Return the results of applying the iteratee to each element.
  _.map = _.collect = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length,
        results = Array(length);
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      results[index] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  };

  // Create a reducing function iterating left or right.
  function createReduce(dir) {
    // Optimized iterator function as using arguments.length
    // in the main function will deoptimize the, see #1991.
    function iterator(obj, iteratee, memo, keys, index, length) {
      for (; index >= 0 && index < length; index += dir) {
        var currentKey = keys ? keys[index] : index;
        memo = iteratee(memo, obj[currentKey], currentKey, obj);
      }
      return memo;
    }

    return function(obj, iteratee, memo, context) {
      iteratee = optimizeCb(iteratee, context, 4);
      var keys = !isArrayLike(obj) && _.keys(obj),
          length = (keys || obj).length,
          index = dir > 0 ? 0 : length - 1;
      // Determine the initial value if none is provided.
      if (arguments.length < 3) {
        memo = obj[keys ? keys[index] : index];
        index += dir;
      }
      return iterator(obj, iteratee, memo, keys, index, length);
    };
  }

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`.
  _.reduce = _.foldl = _.inject = createReduce(1);

  // The right-associative version of reduce, also known as `foldr`.
  _.reduceRight = _.foldr = createReduce(-1);

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, predicate, context) {
    var key;
    if (isArrayLike(obj)) {
      key = _.findIndex(obj, predicate, context);
    } else {
      key = _.findKey(obj, predicate, context);
    }
    if (key !== void 0 && key !== -1) return obj[key];
  };

  // Return all the elements that pass a truth test.
  // Aliased as `select`.
  _.filter = _.select = function(obj, predicate, context) {
    var results = [];
    predicate = cb(predicate, context);
    _.each(obj, function(value, index, list) {
      if (predicate(value, index, list)) results.push(value);
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, predicate, context) {
    return _.filter(obj, _.negate(cb(predicate)), context);
  };

  // Determine whether all of the elements match a truth test.
  // Aliased as `all`.
  _.every = _.all = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (!predicate(obj[currentKey], currentKey, obj)) return false;
    }
    return true;
  };

  // Determine if at least one element in the object matches a truth test.
  // Aliased as `any`.
  _.some = _.any = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (predicate(obj[currentKey], currentKey, obj)) return true;
    }
    return false;
  };

  // Determine if the array or object contains a given item (using `===`).
  // Aliased as `includes` and `include`.
  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
    if (!isArrayLike(obj)) obj = _.values(obj);
    if (typeof fromIndex != 'number' || guard) fromIndex = 0;
    return _.indexOf(obj, item, fromIndex) >= 0;
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = function(obj, method) {
    var args = slice.call(arguments, 2);
    var isFunc = _.isFunction(method);
    return _.map(obj, function(value) {
      var func = isFunc ? method : value[method];
      return func == null ? func : func.apply(value, args);
    });
  };

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, _.property(key));
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function(obj, attrs) {
    return _.filter(obj, _.matcher(attrs));
  };

  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function(obj, attrs) {
    return _.find(obj, _.matcher(attrs));
  };

  // Return the maximum element (or element-based computation).
  _.max = function(obj, iteratee, context) {
    var result = -Infinity, lastComputed = -Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value > result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iteratee, context) {
    var result = Infinity, lastComputed = Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value < result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed < lastComputed || computed === Infinity && result === Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Shuffle a collection, using the modern version of the
  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
  _.shuffle = function(obj) {
    var set = isArrayLike(obj) ? obj : _.values(obj);
    var length = set.length;
    var shuffled = Array(length);
    for (var index = 0, rand; index < length; index++) {
      rand = _.random(0, index);
      if (rand !== index) shuffled[index] = shuffled[rand];
      shuffled[rand] = set[index];
    }
    return shuffled;
  };

  // Sample **n** random values from a collection.
  // If **n** is not specified, returns a single random element.
  // The internal `guard` argument allows it to work with `map`.
  _.sample = function(obj, n, guard) {
    if (n == null || guard) {
      if (!isArrayLike(obj)) obj = _.values(obj);
      return obj[_.random(obj.length - 1)];
    }
    return _.shuffle(obj).slice(0, Math.max(0, n));
  };

  // Sort the object's values by a criterion produced by an iteratee.
  _.sortBy = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    return _.pluck(_.map(obj, function(value, index, list) {
      return {
        value: value,
        index: index,
        criteria: iteratee(value, index, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index - right.index;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(behavior) {
    return function(obj, iteratee, context) {
      var result = {};
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index) {
        var key = iteratee(value, index, obj);
        behavior(result, value, key);
      });
      return result;
    };
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key].push(value); else result[key] = [value];
  });

  // Indexes the object's values by a criterion, similar to `groupBy`, but for
  // when you know that your index values will be unique.
  _.indexBy = group(function(result, value, key) {
    result[key] = value;
  });

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key]++; else result[key] = 1;
  });

  // Safely create a real, live array from anything iterable.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (isArrayLike(obj)) return _.map(obj, _.identity);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    if (obj == null) return 0;
    return isArrayLike(obj) ? obj.length : _.keys(obj).length;
  };

  // Split a collection into two arrays: one whose elements all satisfy the given
  // predicate, and one whose elements all do not satisfy the predicate.
  _.partition = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var pass = [], fail = [];
    _.each(obj, function(value, key, obj) {
      (predicate(value, key, obj) ? pass : fail).push(value);
    });
    return [pass, fail];
  };

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[0];
    return _.initial(array, array.length - n);
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array.
  _.last = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[array.length - 1];
    return _.rest(array, Math.max(0, array.length - n));
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, n == null || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, _.identity);
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, strict, startIndex) {
    var output = [], idx = 0;
    for (var i = startIndex || 0, length = getLength(input); i < length; i++) {
      var value = input[i];
      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
        //flatten current level of array or arguments object
        if (!shallow) value = flatten(value, shallow, strict);
        var j = 0, len = value.length;
        output.length += len;
        while (j < len) {
          output[idx++] = value[j++];
        }
      } else if (!strict) {
        output[idx++] = value;
      }
    }
    return output;
  };

  // Flatten out an array, either recursively (by default), or just one level.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, false);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = function(array) {
    return _.difference(array, slice.call(arguments, 1));
  };

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
    if (!_.isBoolean(isSorted)) {
      context = iteratee;
      iteratee = isSorted;
      isSorted = false;
    }
    if (iteratee != null) iteratee = cb(iteratee, context);
    var result = [];
    var seen = [];
    for (var i = 0, length = getLength(array); i < length; i++) {
      var value = array[i],
          computed = iteratee ? iteratee(value, i, array) : value;
      if (isSorted) {
        if (!i || seen !== computed) result.push(value);
        seen = computed;
      } else if (iteratee) {
        if (!_.contains(seen, computed)) {
          seen.push(computed);
          result.push(value);
        }
      } else if (!_.contains(result, value)) {
        result.push(value);
      }
    }
    return result;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = function() {
    return _.uniq(flatten(arguments, true, true));
  };

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    var result = [];
    var argsLength = arguments.length;
    for (var i = 0, length = getLength(array); i < length; i++) {
      var item = array[i];
      if (_.contains(result, item)) continue;
      for (var j = 1; j < argsLength; j++) {
        if (!_.contains(arguments[j], item)) break;
      }
      if (j === argsLength) result.push(item);
    }
    return result;
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = function(array) {
    var rest = flatten(arguments, true, true, 1);
    return _.filter(array, function(value){
      return !_.contains(rest, value);
    });
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = function() {
    return _.unzip(arguments);
  };

  // Complement of _.zip. Unzip accepts an array of arrays and groups
  // each array's elements on shared indices
  _.unzip = function(array) {
    var length = array && _.max(array, getLength).length || 0;
    var result = Array(length);

    for (var index = 0; index < length; index++) {
      result[index] = _.pluck(array, index);
    }
    return result;
  };

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values.
  _.object = function(list, values) {
    var result = {};
    for (var i = 0, length = getLength(list); i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // Generator function to create the findIndex and findLastIndex functions
  function createPredicateIndexFinder(dir) {
    return function(array, predicate, context) {
      predicate = cb(predicate, context);
      var length = getLength(array);
      var index = dir > 0 ? 0 : length - 1;
      for (; index >= 0 && index < length; index += dir) {
        if (predicate(array[index], index, array)) return index;
      }
      return -1;
    };
  }

  // Returns the first index on an array-like that passes a predicate test
  _.findIndex = createPredicateIndexFinder(1);
  _.findLastIndex = createPredicateIndexFinder(-1);

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iteratee, context) {
    iteratee = cb(iteratee, context, 1);
    var value = iteratee(obj);
    var low = 0, high = getLength(array);
    while (low < high) {
      var mid = Math.floor((low + high) / 2);
      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
    }
    return low;
  };

  // Generator function to create the indexOf and lastIndexOf functions
  function createIndexFinder(dir, predicateFind, sortedIndex) {
    return function(array, item, idx) {
      var i = 0, length = getLength(array);
      if (typeof idx == 'number') {
        if (dir > 0) {
            i = idx >= 0 ? idx : Math.max(idx + length, i);
        } else {
            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
        }
      } else if (sortedIndex && idx && length) {
        idx = sortedIndex(array, item);
        return array[idx] === item ? idx : -1;
      }
      if (item !== item) {
        idx = predicateFind(slice.call(array, i, length), _.isNaN);
        return idx >= 0 ? idx + i : -1;
      }
      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
        if (array[idx] === item) return idx;
      }
      return -1;
    };
  }

  // Return the position of the first occurrence of an item in an array,
  // or -1 if the item is not included in the array.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (stop == null) {
      stop = start || 0;
      start = 0;
    }
    step = step || 1;

    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var range = Array(length);

    for (var idx = 0; idx < length; idx++, start += step) {
      range[idx] = start;
    }

    return range;
  };

  // Function (ahem) Functions
  // ------------------

  // Determines whether to execute a function as a constructor
  // or a normal function with the provided arguments
  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
    var self = baseCreate(sourceFunc.prototype);
    var result = sourceFunc.apply(self, args);
    if (_.isObject(result)) return result;
    return self;
  };

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = function(func, context) {
    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
    var args = slice.call(arguments, 2);
    var bound = function() {
      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));
    };
    return bound;
  };

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context. _ acts
  // as a placeholder, allowing any combination of arguments to be pre-filled.
  _.partial = function(func) {
    var boundArgs = slice.call(arguments, 1);
    var bound = function() {
      var position = 0, length = boundArgs.length;
      var args = Array(length);
      for (var i = 0; i < length; i++) {
        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];
      }
      while (position < arguments.length) args.push(arguments[position++]);
      return executeBound(func, bound, this, this, args);
    };
    return bound;
  };

  // Bind a number of an object's methods to that object. Remaining arguments
  // are the method names to be bound. Useful for ensuring that all callbacks
  // defined on an object belong to it.
  _.bindAll = function(obj) {
    var i, length = arguments.length, key;
    if (length <= 1) throw new Error('bindAll must be passed function names');
    for (i = 1; i < length; i++) {
      key = arguments[i];
      obj[key] = _.bind(obj[key], obj);
    }
    return obj;
  };

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memoize = function(key) {
      var cache = memoize.cache;
      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
      return cache[address];
    };
    memoize.cache = {};
    return memoize;
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = function(func, wait) {
    var args = slice.call(arguments, 2);
    return setTimeout(function(){
      return func.apply(null, args);
    }, wait);
  };

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = _.partial(_.delay, _, 1);

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  _.throttle = function(func, wait, options) {
    var context, args, result;
    var timeout = null;
    var previous = 0;
    if (!options) options = {};
    var later = function() {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    };
    return function() {
      var now = _.now();
      if (!previous && options.leading === false) previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0 || remaining > wait) {
        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }
        previous = now;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, args, context, timestamp, result;

    var later = function() {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    };

    return function() {
      context = this;
      args = arguments;
      timestamp = _.now();
      var callNow = immediate && !timeout;
      if (!timeout) timeout = setTimeout(later, wait);
      if (callNow) {
        result = func.apply(context, args);
        context = args = null;
      }

      return result;
    };
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return _.partial(wrapper, func);
  };

  // Returns a negated version of the passed-in predicate.
  _.negate = function(predicate) {
    return function() {
      return !predicate.apply(this, arguments);
    };
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var args = arguments;
    var start = args.length - 1;
    return function() {
      var i = start;
      var result = args[start].apply(this, arguments);
      while (i--) result = args[i].call(this, result);
      return result;
    };
  };

  // Returns a function that will only be executed on and after the Nth call.
  _.after = function(times, func) {
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Returns a function that will only be executed up to (but not including) the Nth call.
  _.before = function(times, func) {
    var memo;
    return function() {
      if (--times > 0) {
        memo = func.apply(this, arguments);
      }
      if (times <= 1) func = null;
      return memo;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = _.partial(_.before, 2);

  // Object Functions
  // ----------------

  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

  function collectNonEnumProps(obj, keys) {
    var nonEnumIdx = nonEnumerableProps.length;
    var constructor = obj.constructor;
    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;

    // Constructor is a special case.
    var prop = 'constructor';
    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);

    while (nonEnumIdx--) {
      prop = nonEnumerableProps[nonEnumIdx];
      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
        keys.push(prop);
      }
    }
  }

  // Retrieve the names of an object's own properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`
  _.keys = function(obj) {
    if (!_.isObject(obj)) return [];
    if (nativeKeys) return nativeKeys(obj);
    var keys = [];
    for (var key in obj) if (_.has(obj, key)) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve all the property names of an object.
  _.allKeys = function(obj) {
    if (!_.isObject(obj)) return [];
    var keys = [];
    for (var key in obj) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var values = Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[keys[i]];
    }
    return values;
  };

  // Returns the results of applying the iteratee to each element of the object
  // In contrast to _.map it returns an object
  _.mapObject = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys =  _.keys(obj),
          length = keys.length,
          results = {},
          currentKey;
      for (var index = 0; index < length; index++) {
        currentKey = keys[index];
        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
      }
      return results;
  };

  // Convert an object into a list of `[key, value]` pairs.
  _.pairs = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var pairs = Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [keys[i], obj[keys[i]]];
    }
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    var keys = _.keys(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = createAssigner(_.allKeys);

  // Assigns a given object with all the own properties in the passed-in object(s)
  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
  _.extendOwn = _.assign = createAssigner(_.keys);

  // Returns the first key on an object that passes a predicate test
  _.findKey = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = _.keys(obj), key;
    for (var i = 0, length = keys.length; i < length; i++) {
      key = keys[i];
      if (predicate(obj[key], key, obj)) return key;
    }
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = function(object, oiteratee, context) {
    var result = {}, obj = object, iteratee, keys;
    if (obj == null) return result;
    if (_.isFunction(oiteratee)) {
      keys = _.allKeys(obj);
      iteratee = optimizeCb(oiteratee, context);
    } else {
      keys = flatten(arguments, false, false, 1);
      iteratee = function(value, key, obj) { return key in obj; };
      obj = Object(obj);
    }
    for (var i = 0, length = keys.length; i < length; i++) {
      var key = keys[i];
      var value = obj[key];
      if (iteratee(value, key, obj)) result[key] = value;
    }
    return result;
  };

   // Return a copy of the object without the blacklisted properties.
  _.omit = function(obj, iteratee, context) {
    if (_.isFunction(iteratee)) {
      iteratee = _.negate(iteratee);
    } else {
      var keys = _.map(flatten(arguments, false, false, 1), String);
      iteratee = function(value, key) {
        return !_.contains(keys, key);
      };
    }
    return _.pick(obj, iteratee, context);
  };

  // Fill in a given object with default properties.
  _.defaults = createAssigner(_.allKeys, true);

  // Creates an object that inherits from the given prototype object.
  // If additional properties are provided then they will be added to the
  // created object.
  _.create = function(prototype, props) {
    var result = baseCreate(prototype);
    if (props) _.extendOwn(result, props);
    return result;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Returns whether an object has a given set of `key:value` pairs.
  _.isMatch = function(object, attrs) {
    var keys = _.keys(attrs), length = keys.length;
    if (object == null) return !length;
    var obj = Object(object);
    for (var i = 0; i < length; i++) {
      var key = keys[i];
      if (attrs[key] !== obj[key] || !(key in obj)) return false;
    }
    return true;
  };


  // Internal recursive comparison function for `isEqual`.
  var eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a === 1 / b;
    // A strict comparison is necessary because `null == undefined`.
    if (a == null || b == null) return a === b;
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className !== toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
      case '[object RegExp]':
      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return '' + a === '' + b;
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive.
        // Object(NaN) is equivalent to NaN
        if (+a !== +a) return +b !== +b;
        // An `egal` comparison is performed for other numeric values.
        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a === +b;
    }

    var areArrays = className === '[object Array]';
    if (!areArrays) {
      if (typeof a != 'object' || typeof b != 'object') return false;

      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
      // from different frames are.
      var aCtor = a.constructor, bCtor = b.constructor;
      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
                               _.isFunction(bCtor) && bCtor instanceof bCtor)
                          && ('constructor' in a && 'constructor' in b)) {
        return false;
      }
    }
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

    // Initializing stack of traversed objects.
    // It's done here since we only need them for objects and arrays comparison.
    aStack = aStack || [];
    bStack = bStack || [];
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] === a) return bStack[length] === b;
    }

    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);

    // Recursively compare objects and arrays.
    if (areArrays) {
      // Compare array lengths to determine if a deep comparison is necessary.
      length = a.length;
      if (length !== b.length) return false;
      // Deep compare the contents, ignoring non-numeric properties.
      while (length--) {
        if (!eq(a[length], b[length], aStack, bStack)) return false;
      }
    } else {
      // Deep compare objects.
      var keys = _.keys(a), key;
      length = keys.length;
      // Ensure that both objects contain the same number of properties before comparing deep equality.
      if (_.keys(b).length !== length) return false;
      while (length--) {
        // Deep compare each member
        key = keys[length];
        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return true;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
    return _.keys(obj).length === 0;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) === '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    var type = typeof obj;
    return type === 'function' || type === 'object' && !!obj;
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.
  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) === '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE < 9), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return _.has(obj, 'callee');
    };
  }

  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
  // IE 11 (#1621), and in Safari 8 (#1929).
  if (typeof /./ != 'function' && typeof Int8Array != 'object') {
    _.isFunction = function(obj) {
      return typeof obj == 'function' || false;
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return isFinite(obj) && !isNaN(parseFloat(obj));
  };

  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
  _.isNaN = function(obj) {
    return _.isNumber(obj) && obj !== +obj;
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, key) {
    return obj != null && hasOwnProperty.call(obj, key);
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iteratees.
  _.identity = function(value) {
    return value;
  };

  // Predicate-generating functions. Often useful outside of Underscore.
  _.constant = function(value) {
    return function() {
      return value;
    };
  };

  _.noop = function(){};

  _.property = property;

  // Generates a function for a given object that returns a given property.
  _.propertyOf = function(obj) {
    return obj == null ? function(){} : function(key) {
      return obj[key];
    };
  };

  // Returns a predicate for checking whether an object has a given set of
  // `key:value` pairs.
  _.matcher = _.matches = function(attrs) {
    attrs = _.extendOwn({}, attrs);
    return function(obj) {
      return _.isMatch(obj, attrs);
    };
  };

  // Run a function **n** times.
  _.times = function(n, iteratee, context) {
    var accum = Array(Math.max(0, n));
    iteratee = optimizeCb(iteratee, context, 1);
    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
    return accum;
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  // A (possibly faster) way to get the current timestamp as an integer.
  _.now = Date.now || function() {
    return new Date().getTime();
  };

   // List of HTML entities for escaping.
  var escapeMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;'
  };
  var unescapeMap = _.invert(escapeMap);

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  var createEscaper = function(map) {
    var escaper = function(match) {
      return map[match];
    };
    // Regexes for identifying a key that needs to be escaped
    var source = '(?:' + _.keys(map).join('|') + ')';
    var testRegexp = RegExp(source);
    var replaceRegexp = RegExp(source, 'g');
    return function(string) {
      string = string == null ? '' : '' + string;
      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
    };
  };
  _.escape = createEscaper(escapeMap);
  _.unescape = createEscaper(unescapeMap);

  // If the value of the named `property` is a function then invoke it with the
  // `object` as context; otherwise, return it.
  _.result = function(object, property, fallback) {
    var value = object == null ? void 0 : object[property];
    if (value === void 0) {
      value = fallback;
    }
    return _.isFunction(value) ? value.call(object) : value;
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate    : /<%([\s\S]+?)%>/g,
    interpolate : /<%=([\s\S]+?)%>/g,
    escape      : /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'":      "'",
    '\\':     '\\',
    '\r':     'r',
    '\n':     'n',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escaper = /\\|'|\r|\n|\u2028|\u2029/g;

  var escapeChar = function(match) {
    return '\\' + escapes[match];
  };

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  // NB: `oldSettings` only exists for backwards compatibility.
  _.template = function(text, settings, oldSettings) {
    if (!settings && oldSettings) settings = oldSettings;
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset).replace(escaper, escapeChar);
      index = offset + match.length;

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      } else if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      } else if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }

      // Adobe VMs need the match returned to produce the correct offest.
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + 'return __p;\n';

    try {
      var render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled source as a convenience for precompilation.
    var argument = settings.variable || 'obj';
    template.source = 'function(' + argument + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function. Start chaining a wrapped Underscore object.
  _.chain = function(obj) {
    var instance = _(obj);
    instance._chain = true;
    return instance;
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var result = function(instance, obj) {
    return instance._chain ? _(obj).chain() : obj;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    _.each(_.functions(obj), function(name) {
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return result(this, func.apply(_, args));
      };
    });
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
      return result(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  _.each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return result(this, method.apply(this._wrapped, arguments));
    };
  });

  // Extracts the result from a wrapped and chained object.
  _.prototype.value = function() {
    return this._wrapped;
  };

  // Provide unwrapping proxy for some methods used in engine operations
  // such as arithmetic and JSON stringification.
  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;

  _.prototype.toString = function() {
    return '' + this._wrapped;
  };

  // AMD registration happens at the end for compatibility with AMD loaders
  // that may not enforce next-turn semantics on modules. Even though general
  // practice for AMD registration is to be anonymous, underscore registers
  // as a named module because, like jQuery, it is a base library that is
  // popular enough to be bundled in a third party lib, but not be part of
  // an AMD load request. Those cases could generate an error when an
  // anonymous define() is called outside of a loader request.
  if (typeof define === 'function' && define.amd) {
    define('underscore', [], function() {
      return _;
    });
  }
}.call(this));

},{}],328:[function(require,module,exports){
'use strict';

var React = require("react");
var injectTapEventPlugin = require("react-tap-event-plugin");
injectTapEventPlugin();

var _ = require('underscore');
var moment = require('moment-timezone');
require('moment/min/locales');
var tzDetect = require('jstimezonedetect');
var tzAbbr = require('../lib/timezone-abbrs');

var mui = require("material-ui");
var ThemeManager = new mui.Styles.ThemeManager();

var tzcTheme = require('./theme/timezoneconv-theme');
ThemeManager.setTheme(tzcTheme);

var Paper = mui.Paper;
var Toggle = mui.Toggle;
var TimeCard = require('./timecard.jsx');
var AppBar = mui.AppBar;
var IconButton = mui.IconButton;
var GitHubIcon = require('./icon/github.jsx');

var lang = browserLanguage();
console.log('Browser launguage: ' + lang);

moment.locale(lang ? lang : 'en');
console.log('Moment.js: ' + moment.locale());

var tz = tzDetect.jstz.determine();
console.log('Timezone detect: ' + tz.name());

var tzName = tz.name();
if (!_.contains(moment.tz.names(), tzName)) {
  tzName = 'UTC';
}

var tzItems = moment.tz.names();
var tzAbbrs = _.filter(tzAbbr.abbrs().list, function (item) {
  return 1 === item.offsets.length && 'UTC' !== item.abbr;
});

function browserLanguage() {
  try {
    return navigator.browserLanguage || navigator.language || navigator.userLanguage;
  } catch (e) {
    return undefined;
  }
}

var App = React.createClass({
  displayName: "App",

  getInitialState: function getInitialState() {
    return {
      basetime: new Date(), // ローカルタイムに変換した基準時刻
      tz1: 'UTC',
      tz2: tzName
    };
  },
  childContextTypes: {
    muiTheme: React.PropTypes.object
  },
  getChildContext: function getChildContext() {
    return {
      muiTheme: ThemeManager.getCurrentTheme()
    };
  },
  componentDidMount: function componentDidMount() {
    // TODO: 初期表示内容との差分処理について要検討
    var app = document.getElementById('app');
    app.className = 'reacted';

    var app_container = document.getElementsByClassName('app-loading-container');
    app_container[0].className = app_container[0].className + ' app-loading-container-finished';
  },
  _onChangeFrom: function _onChangeFrom(e, v) {
    console.log('_onChangeFrom: ' + e + ' / ' + v.time + ' / ' + v.tz);
    this.setState({ basetime: v.time, tz1: v.tz });
  },
  _onChangeTo: function _onChangeTo(e, v) {
    console.log('_onChangeTo: ' + e + ' / ' + v.time + ' / ' + v.tz);
    this.setState({ basetime: v.time, tz2: v.tz });
  },
  _onToggle: function _onToggle(e, toggled) {
    this.refs.timecardFrom.setTimeFormat(toggled ? '24hr' : 'ampm');
    this.refs.timecardTo.setTimeFormat(toggled ? '24hr' : 'ampm');
  },
  styles: {
    card: {
      padding: '8px',
      margin: '0 auto'
    },
    toggle_wrap: {
      textAlign: 'right',
      width: '256px',
      margin: '0 auto'
    }
  },
  render: function render() {
    console.log('App::render()');

    var AppBarRightButton = React.createElement(
      IconButton,
      { tooltip: "GitHub",
        linkButton: true,
        href: "https://github.com/umi-uyura/timezoneconv/",
        target: "_blank" },
      React.createElement(GitHubIcon, { color: ThemeManager.getCurrentTheme().component.appBar.textColor })
    );

    return React.createElement(
      "div",
      null,
      React.createElement(AppBar, { title: "TimezoneConv",
        showMenuIconButton: false,
        iconElementRight: AppBarRightButton }),
      React.createElement(
        Paper,
        { style: this.styles.card, zDepth: 1 },
        React.createElement(TimeCard, { ref: "timecardFrom",
          fromto: "from",
          lang: lang,
          tz: this.state.tz1,
          basetime: this.state.basetime,
          tzItems: tzItems,
          tzAbbrs: tzAbbrs,
          onChange: this._onChangeFrom }),
        React.createElement(
          "div",
          { style: this.styles.toggle_wrap },
          React.createElement(Toggle, { ref: "toggleTimeformat",
            label: "24時間表示",
            defaultToggled: true,
            onToggle: this._onToggle })
        ),
        React.createElement(TimeCard, { ref: "timecardTo",
          fromto: "to",
          lang: lang,
          tz: this.state.tz2,
          basetime: this.state.basetime,
          tzItems: tzItems,
          tzAbbrs: tzAbbrs,
          onChange: this._onChangeTo })
      )
    );
  }
});

React.render(React.createElement(App, null), document.getElementById('app'));

},{"../lib/timezone-abbrs":334,"./icon/github.jsx":330,"./theme/timezoneconv-theme":331,"./timecard.jsx":332,"jstimezonedetect":5,"material-ui":40,"moment-timezone":146,"moment/min/locales":148,"react":326,"react-tap-event-plugin":153,"underscore":327}],329:[function(require,module,exports){
'use strict';

var React = require('react');
var mui = require('material-ui');
var moment = require('moment-timezone');
require('moment/min/locales');

var DatePicker = mui.DatePicker;
var TimePicker = mui.TimePicker;
var Colors = mui.Styles.Colors;

var DualTimePicker = React.createClass({
  displayName: 'DualTimePicker',

  getDefaultProps: function getDefaultProps() {
    return {
      time: new Date(),
      utcOffset: 0,
      lang: 'en'
    };
  },
  getInitialState: function getInitialState() {
    return {
      format24hr: true
    };
  },
  componentWillMount: function componentWillMount() {
    moment.locale(this.props.lang);
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (nextProps.time !== this.props.time) {
      this.refs.picker24HR.setTime(nextProps.time);
      this.refs.pickerAMPM.setTime(nextProps.time);
    }
  },
  getTime: function getTime() {
    return this.props.time;
  },
  _onChange: function _onChange(e, t) {
    this.props.onChange(e, t);
  },
  styles: {
    wrapper: {
      position: 'relative',
      width: '256px',
      margin: '0 auto'
    },
    offset: {
      position: 'absolute',
      top: '16px',
      right: '0px',
      fontSize: 'small',
      color: Colors.grey400
    }
  },
  formatUtcOffset: function formatUtcOffset(offset) {
    var hours = Math.floor(offset / 60);
    var minutes = (Math.abs(offset % 60) + '0').substr(0, 2);
    var sign = 0 <= hours ? '+' : '';

    return 'UTC ' + sign + hours + ':' + minutes;
  },
  render: function render() {
    var format = this.state.format24hr ? '24hr' : 'ampm';
    var styleVisible = {};
    var styleHide = { display: 'none' };

    return React.createElement(
      'div',
      { style: this.styles.wrapper },
      React.createElement(TimePicker, { ref: 'picker24HR',
        style: this.state.format24hr ? styleVisible : styleHide,
        format: '24hr',
        disabled: this.props.disabled,
        onChange: this._onChange,
        defaultTime: this.props.time }),
      React.createElement(TimePicker, { ref: 'pickerAMPM',
        style: this.state.format24hr ? styleHide : styleVisible,
        format: 'ampm',
        disabled: this.props.disabled,
        onChange: this._onChange,
        defaultTime: this.props.time }),
      React.createElement(
        'div',
        { style: this.styles.offset },
        this.formatUtcOffset(this.props.utcOffset)
      )
    );
  }
});

module.exports = DualTimePicker;

},{"material-ui":40,"moment-timezone":146,"moment/min/locales":148,"react":326}],330:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');
var mui = require('material-ui');
var SvgIcon = mui.SvgIcon;

var GitHubIcon = React.createClass({
  displayName: 'GitHubIcon',

  render: function render() {
    return React.createElement(
      SvgIcon,
      _extends({}, this.props, { viewBox: '0 0 32 32' }),
      React.createElement('path', { d: 'M16 0.395c-8.836 0-16 7.163-16 16 0 7.069 4.585 13.067 10.942 15.182 0.8 0.148 1.094-0.347 1.094-0.77 0-0.381-0.015-1.642-0.022-2.979-4.452 0.968-5.391-1.888-5.391-1.888-0.728-1.849-1.776-2.341-1.776-2.341-1.452-0.993 0.11-0.973 0.11-0.973 1.606 0.113 2.452 1.649 2.452 1.649 1.427 2.446 3.743 1.739 4.656 1.33 0.143-1.034 0.558-1.74 1.016-2.14-3.554-0.404-7.29-1.777-7.29-7.907 0-1.747 0.625-3.174 1.649-4.295-0.166-0.403-0.714-2.030 0.155-4.234 0 0 1.344-0.43 4.401 1.64 1.276-0.355 2.645-0.532 4.005-0.539 1.359 0.006 2.729 0.184 4.008 0.539 3.054-2.070 4.395-1.64 4.395-1.64 0.871 2.204 0.323 3.831 0.157 4.234 1.026 1.12 1.647 2.548 1.647 4.295 0 6.145-3.743 7.498-7.306 7.895 0.574 0.497 1.085 1.47 1.085 2.963 0 2.141-0.019 3.864-0.019 4.391 0 0.426 0.288 0.925 1.099 0.768 6.354-2.118 10.933-8.113 10.933-15.18 0-8.837-7.164-16-16-16z' })
    );
  }
});

module.exports = GitHubIcon;

},{"material-ui":40,"react":326}],331:[function(require,module,exports){
'use strict';

var mui = require('material-ui');
var Colors = mui.Styles.Colors;
var Spacing = mui.Styles.Spacing;
var ColorManipulator = mui.Utils.ColorManipulator;

var TimezoneConvTheme = {
  spacing: Spacing,
  contentFontFamily: 'Roboto, sans-serif',
  getPalette: function getPalette() {
    return {
      primary1Color: Colors.lightBlue500,
      primary2Color: Colors.lightBlue700,
      primary3Color: Colors.lightBlue100,
      accent1Color: Colors.pinkA200,
      accent2Color: Colors.pinkA400,
      accent3Color: Colors.pinkA100,
      textColor: Colors.darkBlack,
      canvasColor: Colors.white,
      borderColor: Colors.grey300,
      disabledColor: ColorManipulator.fade(Colors.darkBlack, 0.3)
    };
  },
  getComponentThemes: function getComponentThemes(palette, spacing) {
    spacing = spacing || Spacing;
    var obj = {
      appBar: {
        color: palette.primary1Color,
        textColor: Colors.darkWhite,
        height: spacing.desktopKeylineIncrement
      },
      avatar: {
        borderColor: 'rgba(0, 0, 0, 0.08)'
      },
      button: {
        height: 36,
        minWidth: 88,
        iconButtonSize: spacing.iconSize * 2
      },
      checkbox: {
        boxColor: palette.textColor,
        checkedColor: palette.primary1Color,
        requiredColor: palette.primary1Color,
        disabledColor: palette.disabledColor,
        labelColor: palette.textColor,
        labelDisabledColor: palette.disabledColor
      },
      datePicker: {
        color: palette.primary1Color,
        textColor: Colors.white,
        calendarTextColor: palette.textColor,
        selectColor: palette.primary2Color,
        selectTextColor: Colors.white
      },
      dropDownMenu: {
        accentColor: palette.borderColor
      },
      flatButton: {
        color: palette.canvasColor,
        textColor: palette.textColor,
        primaryTextColor: palette.accent1Color,
        secondaryTextColor: palette.primary1Color
      },
      floatingActionButton: {
        buttonSize: 56,
        miniSize: 40,
        color: palette.accent1Color,
        iconColor: Colors.white,
        secondaryColor: palette.primary1Color,
        secondaryIconColor: Colors.white
      },
      leftNav: {
        width: spacing.desktopKeylineIncrement * 4,
        color: Colors.white
      },
      listItem: {
        nestedLevelDepth: 18
      },
      menu: {
        backgroundColor: Colors.white,
        containerBackgroundColor: Colors.white
      },
      menuItem: {
        dataHeight: 32,
        height: 48,
        hoverColor: 'rgba(0, 0, 0, .035)',
        padding: spacing.desktopGutter,
        selectedTextColor: palette.accent1Color
      },
      menuSubheader: {
        padding: spacing.desktopGutter,
        borderColor: palette.borderColor,
        textColor: palette.primary1Color
      },
      paper: {
        backgroundColor: Colors.white
      },
      radioButton: {
        borderColor: palette.textColor,
        backgroundColor: Colors.white,
        checkedColor: palette.primary1Color,
        requiredColor: palette.primary1Color,
        disabledColor: palette.disabledColor,
        size: 24,
        labelColor: palette.textColor,
        labelDisabledColor: palette.disabledColor
      },
      raisedButton: {
        color: Colors.white,
        textColor: palette.textColor,
        primaryColor: palette.accent1Color,
        primaryTextColor: Colors.white,
        secondaryColor: palette.primary1Color,
        secondaryTextColor: Colors.white
      },
      slider: {
        trackSize: 2,
        trackColor: Colors.minBlack,
        trackColorSelected: Colors.grey500,
        handleSize: 12,
        handleSizeDisabled: 8,
        handleColorZero: Colors.grey400,
        handleFillColor: Colors.white,
        selectionColor: palette.primary3Color,
        rippleColor: palette.primary1Color
      },
      snackbar: {
        textColor: Colors.white,
        backgroundColor: '#323232',
        actionColor: palette.accent1Color
      },
      table: {
        backgroundColor: Colors.white
      },
      tableHeader: {
        borderColor: palette.borderColor
      },
      tableHeaderColumn: {
        textColor: Colors.lightBlack,
        height: 56,
        spacing: 28
      },
      tableFooter: {
        borderColor: palette.borderColor,
        textColor: Colors.lightBlack
      },
      tableRow: {
        hoverColor: Colors.grey200,
        stripeColor: ColorManipulator.lighten(palette.primary1Color, 0.55),
        selectedColor: Colors.grey300,
        textColor: Colors.darkBlack,
        borderColor: palette.borderColor
      },
      tableRowColumn: {
        height: 48,
        spacing: 28
      },
      timePicker: {
        color: Colors.white,
        textColor: Colors.grey600,
        accentColor: palette.primary1Color,
        clockColor: Colors.black,
        selectColor: palette.primary2Color,
        selectTextColor: Colors.white
      },
      toggle: {
        thumbOnColor: palette.primary1Color,
        thumbOffColor: Colors.grey50,
        thumbDisabledColor: Colors.grey400,
        thumbRequiredColor: palette.primary1Color,
        trackOnColor: ColorManipulator.fade(palette.primary1Color, 0.5),
        trackOffColor: Colors.minBlack,
        trackDisabledColor: Colors.faintBlack,
        labelColor: palette.textColor,
        labelDisabledColor: palette.disabledColor
      },
      toolbar: {
        backgroundColor: ColorManipulator.darken('#eeeeee', 0.05),
        height: 56,
        titleFontSize: 20,
        iconColor: 'rgba(0, 0, 0, .40)',
        separatorColor: 'rgba(0, 0, 0, .175)',
        menuHoverColor: 'rgba(0, 0, 0, .10)'
      },
      tabs: {
        backgroundColor: palette.primary1Color
      },
      textField: {
        textColor: palette.textColor,
        hintColor: palette.disabledColor,
        floatingLabelColor: palette.textColor,
        disabledTextColor: palette.disabledColor,
        errorColor: Colors.red500,
        focusColor: palette.primary1Color,
        backgroundColor: 'transparent',
        borderColor: palette.borderColor
      }
    };

    // Properties based on previous properties
    obj.flatButton.disabledTextColor = ColorManipulator.fade(obj.flatButton.textColor, 0.3);
    obj.floatingActionButton.disabledColor = ColorManipulator.darken(Colors.white, 0.1);
    obj.floatingActionButton.disabledTextColor = ColorManipulator.fade(palette.textColor, 0.3);
    obj.raisedButton.disabledColor = ColorManipulator.darken(obj.raisedButton.color, 0.1);
    obj.raisedButton.disabledTextColor = ColorManipulator.fade(obj.raisedButton.textColor, 0.3);
    obj.slider.handleSizeActive = obj.slider.handleSize * 2;
    obj.toggle.trackRequiredColor = ColorManipulator.fade(obj.toggle.thumbRequiredColor, 0.5);

    return obj;
  }
};

module.exports = TimezoneConvTheme;

},{"material-ui":40}],332:[function(require,module,exports){
'use strict';

var React = require('react');
var mui = require('material-ui');
var moment = require('moment-timezone');
require('moment/min/locales');
var _ = require('underscore');
var tzUtil = require('../lib/timezone-util');

var Paper = mui.Paper;
var Card = mui.Card;
var CardText = mui.CardText;
var TextField = mui.TextField;
var DatePicker = mui.DatePicker;
var DualTimePicker = require('./dualtimepicker.jsx');
var TimeCardText = require('./timecardtext.jsx');
var Colors = mui.Styles.Colors;

var util = require('util');

var TimeCard = React.createClass({
  displayName: 'TimeCard',

  getDefaultProps: function getDefaultProps() {
    return {
      fromto: 'from',
      basetime: new Date(),
      tz: 'UTC',
      lang: 'en',
      tzItems: [],
      tzAbbrs: []
    };
  },
  propTypes: {
    fromto: React.PropTypes.string.isRequired,
    basetime: React.PropTypes.object.isRequired,
    tz: React.PropTypes.string.isRequired,
    lang: React.PropTypes.string,
    tzItems: React.PropTypes.array,
    tzAbbrs: React.PropTypes.array,
    onChange: React.PropTypes.func.isRequired
  },
  contextTypes: {
    muiTheme: React.PropTypes.object
  },
  componentWillMount: function componentWillMount() {
    moment.locale(this.props.lang);
  },
  setTimeFormat: function setTimeFormat(format) {
    this.refs.timepicker.setState({ format24hr: format === '24hr' });
  },
  _onChangeDate: function _onChangeDate(e, v) {
    console.log('TimeCard::_onChangeDate() - ' + this.props.basetime + ' / ' + this.props.tz);
    console.log('TimeCard::_onChangeDate() input - ' + e + ' / ' + v);

    var t = this.refs.timepicker.getTime();
    t.setFullYear(v.getFullYear());
    t.setMonth(v.getMonth());
    t.setDate(v.getDate());

    console.log('TimeCard::_onChangeDate() merge - ' + t);

    var ndt = this.shiftFromTz(t, this.props.tz);

    console.log('TimeCard::_onChangeDate() ndt - ' + ndt);

    this.props.onChange(e, {
      time: ndt,
      tz: this.props.tz
    });
  },
  _onChangeTime: function _onChangeTime(e, v) {
    console.log('TimeCard::_onChangeTime() - ' + this.props.basetime + ' / ' + this.props.tz);
    console.log('TimeCard::_onChangeTime() input - ' + e + ' / ' + v);
    var t = this.props.basetime;
    t.setHours(v.getHours());
    t.setMinutes(v.getMinutes());

    var ndt = this.shiftFromTz(t, this.props.tz);

    this.props.onChange(e, {
      time: ndt,
      tz: this.props.tz
    });
  },
  _onChangeTZ: function _onChangeTZ(v) {
    var changeTZ = v.target.value;
    var changeTZUpcase = changeTZ.toUpperCase();

    var foundTzItems = _.contains(this.props.tzItems, changeTZ);
    var foundTzAbbrs = _.find(this.props.tzAbbrs, { abbr: changeTZUpcase });

    var disabled = this.props.fromto === 'to';

    if (foundTzItems || foundTzAbbrs) {
      console.log('Timecard::onChangeTZ() - Hit! = ' + changeTZ + ' <- ' + this.props.tz);
      console.log('Timecard::onChangeTZ() - Base Time = ' + this.props.basetime);

      var toTz = foundTzAbbrs ? changeTZUpcase : changeTZ;
      var ndt = this.props.basetime;

      if (!disabled) {
        var d = this.refs.datepicker.getDate();
        var t = this.refs.timepicker.getTime();
        var dt = new Date(d.getFullYear(), d.getMonth(), d.getDate(), t.getHours(), t.getMinutes());
        console.log('TimeCard::onChangeTZ() - Date = ' + d + '\n/ Time = ' + t + '\n/ ' + dt);

        ndt = this.shiftFromTz(dt, toTz);
      }

      console.log('TimeCard::onChangeTZ() - ndt = ' + ndt);

      this.props.onChange(null, {
        time: ndt,
        tz: toTz
      });
    } else {
      this.refs.tzfield.setErrorText('Unkown Timezone');
    }
  },
  shiftToTzInfo: function shiftToTzInfo(localTime, tz) {
    var info = _.findWhere(this.props.tzAbbrs, { abbr: tz });
    if (info) {
      info.time = tzUtil.convertOffsetToOffset(localTime, info.offsets[0].offset, tzUtil.canonicalizeJsDateOffseet(localTime.getTimezoneOffset()));
      info.utcOffset = info.offsets[0].offset;
      info.isDST = false; // TODO: 略名時の夏時間判定（→別データを用意するしか無い）
    } else {
        info = tzUtil.shiftToTzInfo(localTime, tz);
      }
    return info;
  },
  shiftFromTz: function shiftFromTz(time, tz) {
    var info = _.findWhere(this.props.tzAbbrs, { abbr: tz });
    if (info) {
      var ndt = tzUtil.convertOffsetToOffset(time, tzUtil.canonicalizeJsDateOffseet(time.getTimezoneOffset()), info.offsets[0].offset);
      return ndt;
    } else {
      var ndt2 = tzUtil.shiftFromTz(time, tz);
      return ndt2;
    }
  },
  formatDate: function formatDate(d) {
    var m = moment(d);
    return m.format('l (ddd)');
  },
  render: function render() {
    var styles = {
      card: {
        margin: '8px',
        padding: '8px',
        textAlign: 'center'
      },
      tzwrapper: {
        position: 'relative',
        width: '256px',
        margin: '0 auto'
      },
      timezone: {
        display: 'block',
        margin: '0 auto'
      },
      dst: {
        position: 'absolute',
        top: '16px',
        right: '0px',
        padding: '0 4px',
        fontSize: 'small',
        color: Colors.grey400,
        backgroundColor: 'white'
      },
      resultWrapper: {
        width: '256px',
        margin: '0 auto',
        paddingTop: '12px'
      },
      cardToResult: {
        height: '36px',
        padding: '0px 0px',
        fontSize: '18px',
        textAlign: 'left',
        color: this.context.muiTheme.palette.accent1Color
      }
    };

    console.log('TimeCard::render() ' + this.props.fromto + ' / ' + this.props.basetime);

    var disabled = this.props.fromto === 'to';
    /* var disabled = false; */

    var info = this.shiftToTzInfo(this.props.basetime, this.props.tz);
    console.log('TimeCard::render() - shifted ' + this.props.fromto + ' / ' + info.time + ' / ' + info.utcOffset + ' / ' + info.isDST + ' / ' + this.props.tz);

    var picker = React.createElement(
      'div',
      null,
      React.createElement(DatePicker, { ref: 'datepicker',
        formatDate: this.formatDate,
        defaultDate: info.time,
        value: info.time,
        autoOk: true,
        disabled: disabled,
        onChange: this._onChangeDate }),
      React.createElement(DualTimePicker, { ref: 'timepicker',
        time: info.time,
        utcOffset: info.utcOffset,
        lang: this.props.lang,
        disabled: disabled,
        onChange: this._onChangeTime })
    );

    var text = React.createElement(
      'div',
      null,
      React.createElement(
        'div',
        { style: styles.resultWrapper },
        React.createElement(
          CardText,
          { ref: 'datepicker', style: styles.cardToResult },
          this.formatDate(info.time)
        )
      ),
      React.createElement(TimeCardText, { ref: 'timepicker',
        time: info.time,
        utcOffset: info.utcOffset })
    );

    return React.createElement(
      Card,
      { style: styles.card, zDepth: 2 },
      React.createElement(
        'div',
        { style: styles.tzwrapper },
        React.createElement(TextField, { ref: 'tzfield',
          style: styles.timezone,
          defaultValue: this.props.tz,
          onChange: this._onChangeTZ }),
        React.createElement(
          'div',
          { style: styles.dst },
          info.isDST ? '夏時間' : ''
        )
      ),
      disabled ? text : picker
    );
  }
});

module.exports = TimeCard;

},{"../lib/timezone-util":335,"./dualtimepicker.jsx":329,"./timecardtext.jsx":333,"material-ui":40,"moment-timezone":146,"moment/min/locales":148,"react":326,"underscore":327,"util":4}],333:[function(require,module,exports){
'use strict';

var React = require('react');
var mui = require('material-ui');
var moment = require('moment-timezone');
/* require('moment/min/locales'); */

var TimePicker = mui.TimePicker;
var CardText = mui.CardText;
var Colors = mui.Styles.Colors;

var TimeCardText = React.createClass({
  displayName: 'TimeCardText',

  getDefaultProps: function getDefaultProps() {
    return {
      time: new Date(),
      utcOffset: 0,
      lang: 'en'
    };
  },
  getInitialState: function getInitialState() {
    return {
      format24hr: true
    };
  },
  contextTypes: {
    muiTheme: React.PropTypes.object
  },
  formatUtcOffset: function formatUtcOffset(offset) {
    var hours = Math.floor(offset / 60);
    var minutes = (Math.abs(offset % 60) + '0').substr(0, 2);
    var sign = 0 <= hours ? '+' : '';

    return 'UTC ' + sign + hours + ':' + minutes;
  },
  render: function render() {
    var styles = {
      wrapper: {
        position: 'relative',
        width: '256px',
        margin: '0 auto',
        paddingTop: '12px'
      },
      offset: {
        position: 'absolute',
        top: '16px',
        right: '0px',
        fontSize: 'small',
        color: Colors.grey400
      },
      cardToResult: {
        height: '36px',
        padding: '0px 0px',
        fontSize: '18px',
        textAlign: 'left',
        color: this.context.muiTheme.palette.accent1Color
      }
    };

    var format = this.state.format24hr ? '24hr' : 'ampm';
    var time = this.state.format24hr ? moment(this.props.time).format('HH:mm') : moment(this.props.time).locale('en').format('hh:mm a');

    return React.createElement(
      'div',
      { style: styles.wrapper },
      React.createElement(
        CardText,
        { ref: 'timepicker', style: styles.cardToResult },
        time
      ),
      React.createElement(
        'div',
        { style: styles.offset },
        this.formatUtcOffset(this.props.utcOffset)
      )
    );
  }
});

module.exports = TimeCardText;

},{"material-ui":40,"moment-timezone":146,"react":326}],334:[function(require,module,exports){
'use strict';

var _ = require('underscore');

var TimezoneAbbrs = {};

TimezoneAbbrs.abbrs = function () {
  var tzjson = require('moment-timezone/data/unpacked/latest.json');
  return this.loadAbbrs(tzjson);
};

TimezoneAbbrs.loadAbbrs = function (json) {
  var abbrTzArray = [];

  _.each(json.zones, function (v) {
    var name = v.name;
    var abbrsLength = v.abbrs.length;

    for (var i = 0; i < abbrsLength; i++) {
      var abbr = v.abbrs[i];
      var offset = v.offsets[i];
      offset = -1 * offset;

      var idx = _.findIndex(abbrTzArray, { abbr: abbr });

      var data = 0 <= idx ? abbrTzArray[idx] : null;
      if (!data) {
        data = { abbr: abbr, offsets: [] };
      }

      var offsetIdx = _.findIndex(data.offsets, { offset: offset });

      var dataOffset = 0 <= offsetIdx ? data.offsets[offsetIdx] : null;
      if (!dataOffset) {
        dataOffset = { offset: offset, names: [] };
      }

      if (!_.contains(dataOffset.names, name)) {
        dataOffset.names.push(name);
      }

      if (0 <= offsetIdx) {
        data.offsets[offsetIdx] = dataOffset;
      } else {
        data.offsets.push(dataOffset);
      }

      if (0 <= idx) {
        abbrTzArray[idx] = data;
      } else {
        abbrTzArray.push(data);
      }
    }
  });

  var abbrs = {};
  abbrs.list = abbrTzArray;
  abbrs.version = json.version;

  return abbrs;
};

module.exports = TimezoneAbbrs;

},{"moment-timezone/data/unpacked/latest.json":145,"underscore":327}],335:[function(require,module,exports){
'use strict';

var _ = require('underscore');
var moment = require('moment-timezone');
require('moment/min/locales');

var TimezoneUtil = {};

function debug(msg) {}
// console.log(msg);

/**
 * JSのDateはローカルタイムを生成、ローカルとUTCのみ扱える
 * 他のタイムゾーンの日時として扱いたい場合、擬似的にずらす必要がある
 */

TimezoneUtil.shiftToTzInfo = function (localTime, toTz) {
  debug('shiftToTz() start --------------------------');

  debug('shiftToTz() - ' + localTime + ' / ' + toTz);

  var toTzOffset = this.canonicalizeJsDateOffseet(localTime.getTimezoneOffset());

  debug('shiftToTz() - toTzOffset = ' + toTzOffset);

  var toTzTime = moment.tz(localTime, toTz);
  var localUtcOffset = toTzTime.utcOffset();

  debug('shiftToTz() - ' + toTzTime.format() + ' / ' + localUtcOffset);

  var baseOffset = localUtcOffset - toTzOffset;

  debug('shiftToTz() - offset = ' + baseOffset);

  toTzTime.add(baseOffset, 'm');

  var tzInfo = {
    time: toTzTime.toDate(),
    isDST: toTzTime.isDST(),
    utcOffset: toTzTime.utcOffset()
  };

  debug('shiftToTz() - Result = ' + tzInfo.time + ' / ' + tzInfo.utcOffset + ' / ' + tzInfo.isDST);
  debug('shiftToTz() - Result 2 = ' + toTzTime.zoneAbbr());

  return tzInfo;
};

TimezoneUtil.shiftToTz = function (localTime, toTz) {
  return this.shiftToTzInfo(localTime, toTz).time;
};

/**
 * dの日時はtzゾーンに合わせて変更されていると解釈とした場合のローカルタイムを生成する
 * ※10:00 PDTとして扱ったDateを、ローカルタイムに変換する
 */
TimezoneUtil.shiftFromTz = function (localtime, fromTz) {
  debug('shiftFromTz() start --------------------------');

  debug('shiftFromTz() - ' + localtime + ' / ' + fromTz);

  var localTzOffset = this.canonicalizeJsDateOffseet(localtime.getTimezoneOffset());

  debug('shiftFromTz() - localTzOffset = ' + localTzOffset);

  var localTzTime = moment.tz(localtime, fromTz);
  var localUtcOffset = localTzTime.utcOffset();

  debug('shiftFromTz() - ' + localTzTime.format() + ' / ' + localUtcOffset);

  var baseOffset = localUtcOffset - localTzOffset;

  debug('shiftFromTz() - offset = ' + baseOffset);

  localTzTime.add(-1 * baseOffset, 'm');

  var tzTime = localTzTime.toDate();

  debug('shiftFromTz() - Result = ' + tzTime);

  return tzTime;
};

/**
 * tz1に合わせたローカルタイムdをtz2に合わせたローカルタイムに変換する
 */
TimezoneUtil.convertTZtoTZ = function (localTime, tz1, tz2) {
  return this.convertTZtoTZInfo(localTime, tz1, tz2).time;
};

TimezoneUtil.convertTZtoTZInfo = function (localTime, tz1, tz2) {
  debug('convertTZtoTZ() start --------------------------');

  debug('convertTZtoTZ() - ' + localTime + ' / ' + tz1 + ' / ' + tz2);

  var localTzOffset = this.canonicalizeJsDateOffseet(localTime.getTimezoneOffset());

  debug('convertTZtoTZ() - localTzOffset = ' + localTzOffset);

  var tz1Time = moment.tz(localTime, tz1);
  var tz1Offset = tz1Time.utcOffset();

  debug('convertTZtoTZ() - ' + tz1Time.format() + ' / ' + tz1Offset);

  var tz2Time = moment.tz(tz1Time, tz2);
  var tz2Offset = tz2Time.utcOffset();

  // debug('convertTZtoTZ() - ' + tz1Time.format() + ' / ' + tz2Offset);
  debug('convertTZtoTZ() - ' + tz2Time.format() + ' / ' + tz2Offset);

  var baseOffset = tz2Offset - localTzOffset - (tz1Offset - localTzOffset);

  tz2Time.add(baseOffset, 'm');

  debug('convertTZtoTZ() - base offset = ' + baseOffset);

  var tzTime = tz2Time.toDate();

  var tzInfo = {
    time: tz2Time.toDate(),
    isDST: tz2Time.isDST(),
    utcOffset: tz2Time.utcOffset()
  };

  debug('convertTZtoTZ() - Result = ' + tzInfo.time + ' / ' + tzInfo.utcOffset + ' / ' + tzInfo.isDST);
  debug('convertTZtoTZ() - Result 2 = ' + tz2Time.zoneAbbr());

  return tzInfo;
};

// localTimeにoffset1をあてて戻し、offset2へ変換する
TimezoneUtil.convertOffsetToOffset = function (localTime, offset1, offset2) {
  debug('convertOffsetToOffset() - ' + localTime);
  debug('convertOffsetToOffset() - ' + offset1 + ' / ' + offset2);

  // var baseOffset = offset2 - offset1;
  var baseOffset = offset1 - offset2;
  debug('convertOffsetToOffset() - Base Offset = ' + baseOffset + ' (' + baseOffset / 60 + ')');

  var tzTime = new Date(localTime.getTime() + baseOffset * 60 * 1000);
  debug('convertOffsetToOffset() - ' + tzTime);

  return tzTime;
};

// JS Dateのタイムゾーンを標準化する（符号を反転する）
TimezoneUtil.canonicalizeJsDateOffseet = function (jsdateoffset) {
  return -1 * jsdateoffset;
};

module.exports = TimezoneUtil;

},{"moment-timezone":146,"moment/min/locales":148,"underscore":327}]},{},[328]);
